{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v6.json", "dbt_version": "1.2.1", "generated_at": "2022-10-27T15:24:01.170567Z", "invocation_id": "0302e102-5ed8-4e25-ac06-8e25c15f6a1f", "env": {}, "project_id": "d1f2754d94075e6333c7556b964a9346", "user_id": "bb45878c-6518-4c15-b3b6-cf5ae20ecbba", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.crosschain_models.bronze__asset_metadata_coin_gecko": {"raw_sql": "{{ config(\r\n    materialized = 'view',\r\n) }}\r\n\r\nSELECT\r\n    *,\r\n    TO_TIMESTAMP_NTZ(SUBSTR(SPLIT_PART(metadata$filename, '/', 5), 1, 10) :: NUMBER, 0) AS _inserted_timestamp\r\nFROM\r\n    {{ source(\r\n        'bronze_streamline',\r\n        'asset_metadata_coin_gecko_api'\r\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.crosschain_models.bronze_streamline.asset_metadata_coin_gecko_api"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "bronze", "fqn": ["crosschain_models", "bronze", "bronze__asset_metadata_coin_gecko"], "unique_id": "model.crosschain_models.bronze__asset_metadata_coin_gecko", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "bronze\\bronze__asset_metadata_coin_gecko.sql", "original_file_path": "models\\bronze\\bronze__asset_metadata_coin_gecko.sql", "name": "bronze__asset_metadata_coin_gecko", "alias": "asset_metadata_coin_gecko", "checksum": {"name": "sha256", "checksum": "4aa35630be76451bd975a527cd2b8b1679e13a9dd54caf930af59e7c2f464177"}, "tags": [], "refs": [], "sources": [["bronze_streamline", "asset_metadata_coin_gecko_api"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\bronze\\bronze__asset_metadata_coin_gecko.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1666804368.5915127, "compiled_sql": "\n\nSELECT\n    *,\n    TO_TIMESTAMP_NTZ(SUBSTR(SPLIT_PART(metadata$filename, '/', 5), 1, 10) :: NUMBER, 0) AS _inserted_timestamp\nFROM\n    streamline.crosschain.asset_metadata_coin_gecko_api", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.bronze.asset_metadata_coin_gecko"}, "model.crosschain_models.bronze__asset_metadata_coin_market_cap": {"raw_sql": "{{ config(\r\n    materialized = 'view',\r\n) }}\r\n\r\nSELECT\r\n    *,\r\n    TO_TIMESTAMP_NTZ(SUBSTR(SPLIT_PART(metadata$filename, '/', 5), 1, 10) :: NUMBER, 0) AS _inserted_timestamp\r\nFROM\r\n    {{ source(\r\n        'bronze_streamline',\r\n        'asset_metadata_coin_market_cap_api'\r\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.crosschain_models.bronze_streamline.asset_metadata_coin_market_cap_api"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "bronze", "fqn": ["crosschain_models", "bronze", "bronze__asset_metadata_coin_market_cap"], "unique_id": "model.crosschain_models.bronze__asset_metadata_coin_market_cap", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "bronze\\bronze__asset_metadata_coin_market_cap.sql", "original_file_path": "models\\bronze\\bronze__asset_metadata_coin_market_cap.sql", "name": "bronze__asset_metadata_coin_market_cap", "alias": "asset_metadata_coin_market_cap", "checksum": {"name": "sha256", "checksum": "e9b120c84d13f8a29af0052b8c1f676ab7c84bc26f29e3b4a59d3d0973d4bddf"}, "tags": [], "refs": [], "sources": [["bronze_streamline", "asset_metadata_coin_market_cap_api"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\bronze\\bronze__asset_metadata_coin_market_cap.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1666804368.6071384, "compiled_sql": "\n\nSELECT\n    *,\n    TO_TIMESTAMP_NTZ(SUBSTR(SPLIT_PART(metadata$filename, '/', 5), 1, 10) :: NUMBER, 0) AS _inserted_timestamp\nFROM\n    streamline.crosschain.asset_metadata_coin_market_cap_api", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.bronze.asset_metadata_coin_market_cap"}, "model.crosschain_models.bronze__hourly_prices_coin_gecko": {"raw_sql": "{{ config(\r\n    materialized = 'view',\r\n) }}\r\n\r\nSELECT\r\n    *,\r\n    TO_TIMESTAMP_NTZ(SUBSTR(SPLIT_PART(metadata$filename, '/', 5), 1, 10) :: NUMBER, 0) AS _inserted_timestamp\r\nFROM\r\n    {{ source(\r\n        'bronze_streamline',\r\n        'asset_ohlc_coin_gecko_api'\r\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.crosschain_models.bronze_streamline.asset_ohlc_coin_gecko_api"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "bronze", "fqn": ["crosschain_models", "bronze", "bronze__hourly_prices_coin_gecko"], "unique_id": "model.crosschain_models.bronze__hourly_prices_coin_gecko", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "bronze\\bronze__hourly_prices_coin_gecko.sql", "original_file_path": "models\\bronze\\bronze__hourly_prices_coin_gecko.sql", "name": "bronze__hourly_prices_coin_gecko", "alias": "hourly_prices_coin_gecko", "checksum": {"name": "sha256", "checksum": "eab4884167903d01d6235bafa81cdf8a3628e57e95c9528083cc500b2e7fc93e"}, "tags": [], "refs": [], "sources": [["bronze_streamline", "asset_ohlc_coin_gecko_api"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\bronze\\bronze__hourly_prices_coin_gecko.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1666804368.6071384, "compiled_sql": "\n\nSELECT\n    *,\n    TO_TIMESTAMP_NTZ(SUBSTR(SPLIT_PART(metadata$filename, '/', 5), 1, 10) :: NUMBER, 0) AS _inserted_timestamp\nFROM\n    streamline.crosschain.asset_ohlc_coin_gecko_api", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.bronze.hourly_prices_coin_gecko"}, "model.crosschain_models.bronze__hourly_prices_coin_market_cap": {"raw_sql": "{{ config(\r\n    materialized = 'view',\r\n) }}\r\n\r\nSELECT\r\n    *,\r\n    TO_TIMESTAMP_NTZ(SUBSTR(SPLIT_PART(metadata$filename, '/', 5), 1, 10) :: NUMBER, 0) AS _inserted_timestamp\r\nFROM\r\n    {{ source(\r\n        'bronze_streamline',\r\n        'asset_ohlc_coin_market_cap_api'\r\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.crosschain_models.bronze_streamline.asset_ohlc_coin_market_cap_api"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "bronze", "fqn": ["crosschain_models", "bronze", "bronze__hourly_prices_coin_market_cap"], "unique_id": "model.crosschain_models.bronze__hourly_prices_coin_market_cap", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "bronze\\bronze__hourly_prices_coin_market_cap.sql", "original_file_path": "models\\bronze\\bronze__hourly_prices_coin_market_cap.sql", "name": "bronze__hourly_prices_coin_market_cap", "alias": "hourly_prices_coin_market_cap", "checksum": {"name": "sha256", "checksum": "18470fcb17fd1e42522d251585925e9851994b9b17aa826c83e4f935b08a5ba6"}, "tags": [], "refs": [], "sources": [["bronze_streamline", "asset_ohlc_coin_market_cap_api"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\bronze\\bronze__hourly_prices_coin_market_cap.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1666804368.6071384, "compiled_sql": "\n\nSELECT\n    *,\n    TO_TIMESTAMP_NTZ(SUBSTR(SPLIT_PART(metadata$filename, '/', 5), 1, 10) :: NUMBER, 0) AS _inserted_timestamp\nFROM\n    streamline.crosschain.asset_ohlc_coin_market_cap_api", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.bronze.hourly_prices_coin_market_cap"}, "model.crosschain_models.core__dim_dates": {"raw_sql": "{{ config(\r\n    materialized = \"table\",\r\n) }}\r\n\r\n{{ dbt_date.get_date_dimension(\r\n    '2017-01-01',\r\n    '2030-12-31'\r\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_date.get_date_dimension"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "core", "fqn": ["crosschain_models", "core", "core__dim_dates"], "unique_id": "model.crosschain_models.core__dim_dates", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "core\\core__dim_dates.sql", "original_file_path": "models\\core\\core__dim_dates.sql", "name": "core__dim_dates", "alias": "dim_dates", "checksum": {"name": "sha256", "checksum": "1278eeb1a2c856838e467527ddc3c8c187644b65e74fc2523e5862b93fc3629f"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "Hold rows for each date from 2017 - 2030", "columns": {"DATE_DAY": {"name": "DATE_DAY", "description": "date for the row", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRIOR_DATE_DAY": {"name": "PRIOR_DATE_DAY", "description": "date before DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NEXT_DATE_DAY": {"name": "NEXT_DATE_DAY", "description": "date after DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRIOR_YEAR_DATE_DAY": {"name": "PRIOR_YEAR_DATE_DAY", "description": "date exactly 1 year before DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRIOR_YEAR_OVER_YEAR_DATE_DAY": {"name": "PRIOR_YEAR_OVER_YEAR_DATE_DAY", "description": "date exactly 1 year after DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAY_OF_WEEK": {"name": "DAY_OF_WEEK", "description": "number representing day of week for DATE_DAY where 1=Sunday", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAY_OF_WEEK_ISO": {"name": "DAY_OF_WEEK_ISO", "description": "number representing day of week for DATE_DAY where 1=Monday", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAY_OF_WEEK_NAME": {"name": "DAY_OF_WEEK_NAME", "description": "day of week name for DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAY_OF_WEEK_NAME_SHORT": {"name": "DAY_OF_WEEK_NAME_SHORT", "description": "day of week abbreviation for DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAY_OF_MONTH": {"name": "DAY_OF_MONTH", "description": "day of month for DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAY_OF_YEAR": {"name": "DAY_OF_YEAR", "description": "day of year for DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WEEK_START_DATE": {"name": "WEEK_START_DATE", "description": "date representing the start of the week for DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WEEK_END_DATE": {"name": "WEEK_END_DATE", "description": "date representing the end of the week for DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRIOR_YEAR_WEEK_START_DATE": {"name": "PRIOR_YEAR_WEEK_START_DATE", "description": "date representing the start of the week for PRIOR_YEAR_DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRIOR_YEAR_WEEK_END_DATE": {"name": "PRIOR_YEAR_WEEK_END_DATE", "description": "date representing the end of the week for PRIOR_YEAR_DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WEEK_OF_YEAR": {"name": "WEEK_OF_YEAR", "description": "number representing the week of the year for DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ISO_WEEK_START_DATE": {"name": "ISO_WEEK_START_DATE", "description": "ISO date representing the start of the week for DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ISO_WEEK_END_DATE": {"name": "ISO_WEEK_END_DATE", "description": "ISO date representing the end of the week for DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRIOR_YEAR_ISO_WEEK_START_DATE": {"name": "PRIOR_YEAR_ISO_WEEK_START_DATE", "description": "ISO date representing the start of the week for PRIOR_YEAR_DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRIOR_YEAR_ISO_WEEK_END_DATE": {"name": "PRIOR_YEAR_ISO_WEEK_END_DATE", "description": "ISO date representing the end of the week for PRIOR_YEAR_DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ISO_WEEK_OF_YEAR": {"name": "ISO_WEEK_OF_YEAR", "description": "number representing the ISO week of the year for DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRIOR_YEAR_WEEK_OF_YEAR": {"name": "PRIOR_YEAR_WEEK_OF_YEAR", "description": "number representing the week of the year for PRIOR_YEAR_DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRIOR_YEAR_ISO_WEEK_OF_YEAR": {"name": "PRIOR_YEAR_ISO_WEEK_OF_YEAR", "description": "number representing the ISO week of the year for PRIOR_YEAR_DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MONTH_OF_YEAR": {"name": "MONTH_OF_YEAR", "description": "number representing the month of the year for DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MONTH_NAME": {"name": "MONTH_NAME", "description": "month of year name for DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MONTH_NAME_SHORT": {"name": "MONTH_NAME_SHORT", "description": "month of year abbreviation for DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MONTH_START_DATE": {"name": "MONTH_START_DATE", "description": "first date of month for DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MONTH_END_DATE": {"name": "MONTH_END_DATE", "description": "last date of month for DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRIOR_YEAR_MONTH_START_DATE": {"name": "PRIOR_YEAR_MONTH_START_DATE", "description": "first date of month for PRIOR_YEAR_DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRIOR_YEAR_MONTH_END_DATE": {"name": "PRIOR_YEAR_MONTH_END_DATE", "description": "last date of month for PRIOR_YEAR_DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QUARTER_OF_YEAR": {"name": "QUARTER_OF_YEAR", "description": "number representing quarter for DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QUARTER_START_DATE": {"name": "QUARTER_START_DATE", "description": "first date of quarter for DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QUARTER_END_DATE": {"name": "QUARTER_END_DATE", "description": "last date of quarter for DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "YEAR_NUMBER": {"name": "YEAR_NUMBER", "description": "number presenting the year for DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "YEAR_START_DATE": {"name": "YEAR_START_DATE", "description": "first date of year for DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}, "YEAR_END_DATE": {"name": "YEAR_END_DATE", "description": "last date of year for DATE_DAY", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\core\\core__dim_dates.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__dim_dates.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "table"}, "created_at": 1666804369.3743436, "compiled_sql": "\n\n\n    \nwith base_dates as (\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n     + \n    \n    p12.generated_number * power(2, 12)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n     cross join \n    \n    p as p12\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 5112\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        cast('2017-01-01' as \n    timestamp_ntz\n)\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2030-12-31' as \n    timestamp_ntz\n)\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp_ntz\n) as date_day\nfrom\n    date_spine d\n\n\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast(\n\n    dateadd(\n        year,\n        -1,\n        d.date_day\n        )\n\n as date) as prior_year_date_day,\n        cast(\n\n    dateadd(\n        day,\n        -364,\n        d.date_day\n        )\n\n as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    cast(\n\n    dateadd(\n        day,\n        -1,\n        d.date_day\n        )\n\n as date) as prior_date_day,\n    cast(\n\n    dateadd(\n        day,\n        1,\n        d.date_day\n        )\n\n as date) as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    case\n            when date_part('dayofweek', d.date_day) = 7 then 1\n            else date_part('dayofweek', d.date_day) + 1\n        end as day_of_week,\n    date_part('dayofweekiso', d.date_day) as day_of_week_iso,\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname(d.date_day)\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end as day_of_week_name,\n    dayname(d.date_day) as day_of_week_name_short,\n    date_part('day', d.date_day) as day_of_month,\n    date_part('dayofyear', d.date_day) as day_of_year,\n\n    \n    \n    cast(\n\n    dateadd(\n        day,\n        -1 * (case\n            when date_part('dayofweek', d.date_day) = 7 then 1\n            else date_part('dayofweek', d.date_day) + 1\n        end - 1),\n        d.date_day\n        )\n\n as date) as week_start_date,\n    cast(\n\n    dateadd(\n        day,\n        6,\n        \n    \n    cast(\n\n    dateadd(\n        day,\n        -1 * (case\n            when date_part('dayofweek', d.date_day) = 7 then 1\n            else date_part('dayofweek', d.date_day) + 1\n        end - 1),\n        d.date_day\n        )\n\n as date)\n        )\n\n as date) as week_end_date,\n    \n    \n    cast(\n\n    dateadd(\n        day,\n        -1 * (case\n            when date_part('dayofweek', d.prior_year_over_year_date_day) = 7 then 1\n            else date_part('dayofweek', d.prior_year_over_year_date_day) + 1\n        end - 1),\n        d.prior_year_over_year_date_day\n        )\n\n as date) as prior_year_week_start_date,\n    cast(\n\n    dateadd(\n        day,\n        6,\n        \n    \n    cast(\n\n    dateadd(\n        day,\n        -1 * (case\n            when date_part('dayofweek', d.prior_year_over_year_date_day) = 7 then 1\n            else date_part('dayofweek', d.prior_year_over_year_date_day) + 1\n        end - 1),\n        d.prior_year_over_year_date_day\n        )\n\n as date)\n        )\n\n as date) as prior_year_week_end_date,\n    cast(date_part('week', d.date_day) as \n    int\n) as week_of_year,\n\n    cast(date_trunc('week', d.date_day) as date) as iso_week_start_date,\n    cast(\n\n    dateadd(\n        day,\n        6,\n        cast(date_trunc('week', d.date_day) as date)\n        )\n\n as date) as iso_week_end_date,\n    cast(date_trunc('week', d.prior_year_over_year_date_day) as date) as prior_year_iso_week_start_date,\n    cast(\n\n    dateadd(\n        day,\n        6,\n        cast(date_trunc('week', d.prior_year_over_year_date_day) as date)\n        )\n\n as date) as prior_year_iso_week_end_date,\n    cast(date_part('weekiso', d.date_day) as \n    int\n) as iso_week_of_year,\n\n    cast(date_part('week', d.prior_year_over_year_date_day) as \n    int\n) as prior_year_week_of_year,\n    cast(date_part('weekiso', d.prior_year_over_year_date_day) as \n    int\n) as prior_year_iso_week_of_year,\n\n    cast(date_part('month', d.date_day) as \n    int\n) as month_of_year,\n    to_char(d.date_day, 'MMMM')  as month_name,\n    to_char(d.date_day, 'MON')  as month_name_short,\n\n    cast(date_trunc('month', d.date_day) as date) as month_start_date,\n    cast(cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        month,\n        1,\n        date_trunc('month', d.date_day)\n        )\n\n\n        )\n\n\n        as date) as date) as month_end_date,\n\n    cast(date_trunc('month', d.prior_year_date_day) as date) as prior_year_month_start_date,\n    cast(cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        month,\n        1,\n        date_trunc('month', d.prior_year_date_day)\n        )\n\n\n        )\n\n\n        as date) as date) as prior_year_month_end_date,\n\n    cast(date_part('quarter', d.date_day) as \n    int\n) as quarter_of_year,\n    cast(date_trunc('quarter', d.date_day) as date) as quarter_start_date,\n    cast(cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        quarter,\n        1,\n        date_trunc('quarter', d.date_day)\n        )\n\n\n        )\n\n\n        as date) as date) as quarter_end_date,\n\n    cast(date_part('year', d.date_day) as \n    int\n) as year_number,\n    cast(date_trunc('year', d.date_day) as date) as year_start_date,\n    cast(cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        year,\n        1,\n        date_trunc('year', d.date_day)\n        )\n\n\n        )\n\n\n        as date) as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.core.dim_dates"}, "model.crosschain_models.streamline__all_unknown_coin_gecko_asset_ohlc": {"raw_sql": "{{ config(\r\n    materialized = 'view',\r\n) }}\r\n\r\nSELECT\r\n    id,\r\n    date_trunc('hour',current_timestamp) AS run_time\r\nFROM\r\n    {{ source(\r\n        'bronze_streamline',\r\n        'asset_metadata_coin_gecko_api'\r\n    ) }}\r\nWHERE\r\n    provider = 'coingecko'\r\n    AND _inserted_date = (\r\n        SELECT\r\n            MAX(_inserted_date)\r\n        FROM\r\n            {{ source(\r\n                'bronze_streamline',\r\n                'asset_metadata_coin_gecko_api'\r\n            ) }}\r\n        WHERE\r\n            provider = 'coingecko'\r\n    )\r\nEXCEPT\r\nSELECT\r\n    id,\r\n    run_time\r\nFROM\r\n    {{ source(\r\n        'bronze_streamline',\r\n        'asset_ohlc_coin_gecko_api'\r\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.crosschain_models.bronze_streamline.asset_metadata_coin_gecko_api", "source.crosschain_models.bronze_streamline.asset_ohlc_coin_gecko_api"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "streamline", "fqn": ["crosschain_models", "streamline", "streamline__all_unknown_coin_gecko_asset_ohlc"], "unique_id": "model.crosschain_models.streamline__all_unknown_coin_gecko_asset_ohlc", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "streamline\\streamline__all_unknown_coin_gecko_asset_ohlc.sql", "original_file_path": "models\\streamline\\streamline__all_unknown_coin_gecko_asset_ohlc.sql", "name": "streamline__all_unknown_coin_gecko_asset_ohlc", "alias": "all_unknown_coin_gecko_asset_ohlc", "checksum": {"name": "sha256", "checksum": "40df561c6e5bb7f64096f072e347550200b7ea6e99125f3a0b8ff1903dfc0749"}, "tags": [], "refs": [], "sources": [["bronze_streamline", "asset_metadata_coin_gecko_api"], ["bronze_streamline", "asset_ohlc_coin_gecko_api"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\streamline\\streamline__all_unknown_coin_gecko_asset_ohlc.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1666804369.002243, "compiled_sql": "\n\nSELECT\n    id,\n    date_trunc('hour',current_timestamp) AS run_time\nFROM\n    streamline.crosschain.asset_metadata_coin_gecko_api\nWHERE\n    provider = 'coingecko'\n    AND _inserted_date = (\n        SELECT\n            MAX(_inserted_date)\n        FROM\n            streamline.crosschain.asset_metadata_coin_gecko_api\n        WHERE\n            provider = 'coingecko'\n    )\nEXCEPT\nSELECT\n    id,\n    run_time\nFROM\n    streamline.crosschain.asset_ohlc_coin_gecko_api", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.streamline.all_unknown_coin_gecko_asset_ohlc"}, "model.crosschain_models.streamline__all_unknown_coin_market_cap_asset_ohlc_hourly": {"raw_sql": "{{ config(\r\n    materialized = 'view',\r\n) }}\r\n\r\nWITH hours AS (\r\n\r\n    SELECT\r\n        HOUR\r\n    FROM\r\n        {% if target.name == 'prod' %}\r\n            {{ source(\r\n                'legacy_db',\r\n                'hours'\r\n            ) }}\r\n        {% else %}\r\n            {{ source(\r\n                'legacy_dev_db',\r\n                'hours'\r\n            ) }}\r\n        {% endif %}\r\n    WHERE\r\n        HOUR >= '2022-07-20'\r\n        AND HOUR < DATE_TRUNC(\r\n            'hour',\r\n            CURRENT_TIMESTAMP\r\n        ) -- the hour should always be less than current time because it must be \"completed\" before ohlcv is available\r\n),\r\ncmc_active_assets AS (\r\n    SELECT\r\n        id :: NUMBER AS id,\r\n        VALUE :first_historical_data :: timestamp_ntz AS genesis_recorded_time\r\n    FROM\r\n        {{ source(\r\n            'bronze_streamline',\r\n            'asset_metadata_coin_market_cap_api'\r\n        ) }}\r\n    WHERE\r\n        provider = 'coinmarketcap'\r\n        AND VALUE :status :: STRING = 'active'\r\n        AND _inserted_date = (\r\n            SELECT\r\n                MAX(_inserted_date)\r\n            FROM\r\n                {{ source(\r\n                    'bronze_streamline',\r\n                    'asset_metadata_coin_market_cap_api'\r\n                ) }}\r\n            WHERE\r\n                provider = 'coinmarketcap'\r\n        )\r\n),\r\nbase AS (\r\n    SELECT\r\n        DATE_PART('epoch', DATEADD('minute', -1, HOUR)) AS start_time,\r\n        DATE_PART('epoch', DATEADD('hour', 1, HOUR)) AS end_time,\r\n        id\r\n    FROM\r\n        cmc_active_assets\r\n        CROSS JOIN hours\r\n    WHERE\r\n        start_time > DATE_PART(\r\n            'epoch',\r\n            genesis_recorded_time\r\n        )\r\n    EXCEPT\r\n    SELECT\r\n        api_start_time,\r\n        api_end_time,\r\n        id\r\n    FROM\r\n        {{ source(\r\n            'bronze_streamline',\r\n            'asset_ohlc_coin_market_cap_api'\r\n        ) }}\r\n    WHERE\r\n        NULLIF(\r\n            DATA,{}\r\n        ) IS NOT NULL\r\n),\r\nbase_params AS (\r\n    SELECT\r\n        start_time,\r\n        end_time,\r\n        id,\r\n        1 AS cnt,\r\n        SUM(cnt) over (\r\n            PARTITION BY start_time,\r\n            end_time\r\n            ORDER BY\r\n                id\r\n        ) AS csum,\r\n        CEIL(\r\n            csum / 1000\r\n        ) AS group_cnt\r\n    FROM\r\n        base\r\n)\r\nSELECT\r\n    start_time,\r\n    end_time,\r\n    group_cnt,\r\n    LISTAGG(\r\n        id,\r\n        ','\r\n    ) AS asset_ids\r\nFROM\r\n    base_params\r\nWHERE\r\n    start_time > DATE_PART(\r\n        'epoch',\r\n        CURRENT_DATE - 3\r\n    )\r\nGROUP BY\r\n    1,\r\n    2,\r\n    3", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.crosschain_models.legacy_dev_db.hours", "source.crosschain_models.bronze_streamline.asset_metadata_coin_market_cap_api", "source.crosschain_models.bronze_streamline.asset_metadata_coin_market_cap_api", "source.crosschain_models.bronze_streamline.asset_ohlc_coin_market_cap_api"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "streamline", "fqn": ["crosschain_models", "streamline", "streamline__all_unknown_coin_market_cap_asset_ohlc_hourly"], "unique_id": "model.crosschain_models.streamline__all_unknown_coin_market_cap_asset_ohlc_hourly", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "streamline\\streamline__all_unknown_coin_market_cap_asset_ohlc_hourly.sql", "original_file_path": "models\\streamline\\streamline__all_unknown_coin_market_cap_asset_ohlc_hourly.sql", "name": "streamline__all_unknown_coin_market_cap_asset_ohlc_hourly", "alias": "all_unknown_coin_market_cap_asset_ohlc_hourly", "checksum": {"name": "sha256", "checksum": "889373e2c08bf9fdc4efc552636d7a22607c402b07e9f25fe59b86a5070dd5c2"}, "tags": [], "refs": [], "sources": [["legacy_dev_db", "hours"], ["bronze_streamline", "asset_metadata_coin_market_cap_api"], ["bronze_streamline", "asset_metadata_coin_market_cap_api"], ["bronze_streamline", "asset_ohlc_coin_market_cap_api"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\streamline\\streamline__all_unknown_coin_market_cap_asset_ohlc_hourly.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1666804369.0178564, "compiled_sql": "\n\nWITH hours AS (\n\n    SELECT\n        HOUR\n    FROM\n        \n            flipside_dev_db.silver.hours\n        \n    WHERE\n        HOUR >= '2022-07-20'\n        AND HOUR < DATE_TRUNC(\n            'hour',\n            CURRENT_TIMESTAMP\n        ) -- the hour should always be less than current time because it must be \"completed\" before ohlcv is available\n),\ncmc_active_assets AS (\n    SELECT\n        id :: NUMBER AS id,\n        VALUE :first_historical_data :: timestamp_ntz AS genesis_recorded_time\n    FROM\n        streamline.crosschain.asset_metadata_coin_market_cap_api\n    WHERE\n        provider = 'coinmarketcap'\n        AND VALUE :status :: STRING = 'active'\n        AND _inserted_date = (\n            SELECT\n                MAX(_inserted_date)\n            FROM\n                streamline.crosschain.asset_metadata_coin_market_cap_api\n            WHERE\n                provider = 'coinmarketcap'\n        )\n),\nbase AS (\n    SELECT\n        DATE_PART('epoch', DATEADD('minute', -1, HOUR)) AS start_time,\n        DATE_PART('epoch', DATEADD('hour', 1, HOUR)) AS end_time,\n        id\n    FROM\n        cmc_active_assets\n        CROSS JOIN hours\n    WHERE\n        start_time > DATE_PART(\n            'epoch',\n            genesis_recorded_time\n        )\n    EXCEPT\n    SELECT\n        api_start_time,\n        api_end_time,\n        id\n    FROM\n        streamline.crosschain.asset_ohlc_coin_market_cap_api\n    WHERE\n        NULLIF(\n            DATA,{}\n        ) IS NOT NULL\n),\nbase_params AS (\n    SELECT\n        start_time,\n        end_time,\n        id,\n        1 AS cnt,\n        SUM(cnt) over (\n            PARTITION BY start_time,\n            end_time\n            ORDER BY\n                id\n        ) AS csum,\n        CEIL(\n            csum / 1000\n        ) AS group_cnt\n    FROM\n        base\n)\nSELECT\n    start_time,\n    end_time,\n    group_cnt,\n    LISTAGG(\n        id,\n        ','\n    ) AS asset_ids\nFROM\n    base_params\nWHERE\n    start_time > DATE_PART(\n        'epoch',\n        CURRENT_DATE - 3\n    )\nGROUP BY\n    1,\n    2,\n    3", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.streamline.all_unknown_coin_market_cap_asset_ohlc_hourly"}, "model.crosschain_models.streamline__coin_gecko_historical_asset_market_data_hourly": {"raw_sql": "{{ config(\r\n    materialized = 'view',\r\n) }}\r\n\r\nSELECT\r\n    id,\r\n    90 AS days\r\nFROM\r\n    {{ source(\r\n        'bronze_streamline',\r\n        'asset_metadata_coin_gecko_api'\r\n    ) }}\r\nWHERE\r\n    provider = 'coingecko'\r\n    AND _inserted_date = (\r\n        SELECT\r\n            MAX(_inserted_date)\r\n        FROM\r\n            {{ source(\r\n                'bronze_streamline',\r\n                'asset_metadata_coin_gecko_api'\r\n            ) }}\r\n        WHERE\r\n            provider = 'coingecko'\r\n    )\r\nEXCEPT\r\nSELECT\r\n    id,\r\n    90\r\nFROM\r\n    {{ source(\r\n        'bronze_streamline',\r\n        'asset_historical_hourly_market_data_coin_gecko_api'\r\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.crosschain_models.bronze_streamline.asset_historical_hourly_market_data_coin_gecko_api", "source.crosschain_models.bronze_streamline.asset_metadata_coin_gecko_api"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "streamline", "fqn": ["crosschain_models", "streamline", "streamline__coin_gecko_historical_asset_market_data_hourly"], "unique_id": "model.crosschain_models.streamline__coin_gecko_historical_asset_market_data_hourly", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "streamline\\streamline__coin_gecko_historical_asset_market_data_hourly.sql", "original_file_path": "models\\streamline\\streamline__coin_gecko_historical_asset_market_data_hourly.sql", "name": "streamline__coin_gecko_historical_asset_market_data_hourly", "alias": "coin_gecko_historical_asset_market_data_hourly", "checksum": {"name": "sha256", "checksum": "3d27e4a6c40566bfcd54186d9567144768126378873991a4e225a1c78809f4b3"}, "tags": [], "refs": [], "sources": [["bronze_streamline", "asset_historical_hourly_market_data_coin_gecko_api"], ["bronze_streamline", "asset_metadata_coin_gecko_api"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\streamline\\streamline__coin_gecko_historical_asset_market_data_hourly.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1666804369.0178564, "compiled_sql": "\n\nSELECT\n    id,\n    90 AS days\nFROM\n    streamline.crosschain.asset_metadata_coin_gecko_api\nWHERE\n    provider = 'coingecko'\n    AND _inserted_date = (\n        SELECT\n            MAX(_inserted_date)\n        FROM\n            streamline.crosschain.asset_metadata_coin_gecko_api\n        WHERE\n            provider = 'coingecko'\n    )\nEXCEPT\nSELECT\n    id,\n    90\nFROM\n    streamline.crosschain.asset_historical_hourly_market_data_coin_gecko_api", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.streamline.coin_gecko_historical_asset_market_data_hourly"}, "model.crosschain_models.streamline__coin_market_cap_historical_asset_ohlc_hourly": {"raw_sql": "{{ config(\r\n    materialized = 'view',\r\n) }}\r\n\r\nWITH base AS (\r\n\r\n    SELECT\r\n        id,\r\n        DATE_PART(\r\n            'epoch',\r\n            GREATEST(\r\n                VALUE :first_historical_data :: timestamp_ntz,\r\n                CURRENT_DATE - 365\r\n            )\r\n        ) AS historical_load_start_time,\r\n        DATE_PART(\r\n            'epoch',\r\n            LEAST(\r\n                VALUE :last_historical_data :: timestamp_ntz,\r\n                '2022-07-19 23:59:59.999' :: timestamp_ntz\r\n            )\r\n        ) AS historical_load_end_time\r\n    FROM\r\n        {{ source(\r\n            'bronze_streamline',\r\n            'asset_metadata_coin_market_cap_api'\r\n        ) }}\r\n    WHERE\r\n        provider = 'coinmarketcap'\r\n        AND _inserted_date = (\r\n            SELECT\r\n                MAX(_inserted_date)\r\n            FROM\r\n                {{ source(\r\n                    'bronze_streamline',\r\n                    'asset_metadata_coin_market_cap_api'\r\n                ) }}\r\n            WHERE\r\n                provider = 'coinmarketcap'\r\n        )\r\n        AND VALUE :last_historical_data :: timestamp_ntz >= CURRENT_DATE - 365\r\n)\r\n, ids_needed as (\r\n    SELECT\r\n        id\r\n    FROM\r\n        base\r\n    WHERE \r\n        historical_load_end_time > historical_load_start_time\r\n    EXCEPT\r\n    SELECT\r\n        id\r\n    FROM\r\n        {{ source(\r\n            'bronze_streamline',\r\n            'asset_ohlc_coin_market_cap_api'\r\n        ) }}\r\n    WHERE\r\n        NULLIF(\r\n            DATA,{}\r\n        ) IS NOT NULL\r\n    and _inserted_date >= '2022-08-09'\r\n)\r\nselect\r\n    historical_load_start_time as start_time,\r\n    historical_load_end_time as end_time,\r\n    base.id as asset_ids\r\nfrom base\r\ninner join ids_needed i on i.id = base.id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.crosschain_models.bronze_streamline.asset_metadata_coin_market_cap_api", "source.crosschain_models.bronze_streamline.asset_ohlc_coin_market_cap_api"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "streamline", "fqn": ["crosschain_models", "streamline", "streamline__coin_market_cap_historical_asset_ohlc_hourly"], "unique_id": "model.crosschain_models.streamline__coin_market_cap_historical_asset_ohlc_hourly", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "streamline\\streamline__coin_market_cap_historical_asset_ohlc_hourly.sql", "original_file_path": "models\\streamline\\streamline__coin_market_cap_historical_asset_ohlc_hourly.sql", "name": "streamline__coin_market_cap_historical_asset_ohlc_hourly", "alias": "coin_market_cap_historical_asset_ohlc_hourly", "checksum": {"name": "sha256", "checksum": "5edd822aa4d0b1c8db46fc8a2c4efdd34e229304caedb32a12cd83bac3126721"}, "tags": [], "refs": [], "sources": [["bronze_streamline", "asset_metadata_coin_market_cap_api"], ["bronze_streamline", "asset_ohlc_coin_market_cap_api"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\streamline\\streamline__coin_market_cap_historical_asset_ohlc_hourly.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1666804369.0178564, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        id,\n        DATE_PART(\n            'epoch',\n            GREATEST(\n                VALUE :first_historical_data :: timestamp_ntz,\n                CURRENT_DATE - 365\n            )\n        ) AS historical_load_start_time,\n        DATE_PART(\n            'epoch',\n            LEAST(\n                VALUE :last_historical_data :: timestamp_ntz,\n                '2022-07-19 23:59:59.999' :: timestamp_ntz\n            )\n        ) AS historical_load_end_time\n    FROM\n        streamline.crosschain.asset_metadata_coin_market_cap_api\n    WHERE\n        provider = 'coinmarketcap'\n        AND _inserted_date = (\n            SELECT\n                MAX(_inserted_date)\n            FROM\n                streamline.crosschain.asset_metadata_coin_market_cap_api\n            WHERE\n                provider = 'coinmarketcap'\n        )\n        AND VALUE :last_historical_data :: timestamp_ntz >= CURRENT_DATE - 365\n)\n, ids_needed as (\n    SELECT\n        id\n    FROM\n        base\n    WHERE \n        historical_load_end_time > historical_load_start_time\n    EXCEPT\n    SELECT\n        id\n    FROM\n        streamline.crosschain.asset_ohlc_coin_market_cap_api\n    WHERE\n        NULLIF(\n            DATA,{}\n        ) IS NOT NULL\n    and _inserted_date >= '2022-08-09'\n)\nselect\n    historical_load_start_time as start_time,\n    historical_load_end_time as end_time,\n    base.id as asset_ids\nfrom base\ninner join ids_needed i on i.id = base.id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.streamline.coin_market_cap_historical_asset_ohlc_hourly"}, "model.crosschain_models.streamline__legacy_prices_gaps": {"raw_sql": "{{ config(\r\n    materialized = 'view',\r\n) }}\r\n\r\nWITH cte_date (date_rec) AS (\r\n\r\n    SELECT\r\n        HOUR\r\n    FROM\r\n        {% if target.name == 'prod' %}\r\n            {{ source(\r\n                'legacy_db',\r\n                'hours'\r\n            ) }}\r\n        {% else %}\r\n            {{ source(\r\n                'legacy_dev_db',\r\n                'hours'\r\n            ) }}\r\n        {% endif %}\r\n    WHERE\r\n        HOUR BETWEEN CURRENT_DATE - 1\r\n        AND DATEADD(\r\n            'minute',\r\n            -1,\r\n            CURRENT_DATE\r\n        )\r\n),\r\nsymbols AS (\r\n    SELECT\r\n        DISTINCT asset_id\r\n    FROM\r\n        {% if target.name == 'prod' %}\r\n            {{ source(\r\n                'legacy_db',\r\n                'prices_v2'\r\n            ) }}\r\n        {% else %}\r\n            {{ source(\r\n                'legacy_dev_db',\r\n                'prices_v2'\r\n            ) }}\r\n        {% endif %}\r\n    WHERE\r\n        recorded_at >= CURRENT_DATE - 14\r\n        AND market_cap > 1000\r\n        AND provider = 'coinmarketcap' qualify(ROW_NUMBER() over (PARTITION BY asset_id\r\n    ORDER BY\r\n        recorded_at DESC)) = 1\r\n),\r\nREFERENCE AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        cte_date d,\r\n        symbols s\r\n),\r\nrecorded AS (\r\n    SELECT\r\n        asset_id,\r\n        DATE_TRUNC(\r\n            'hour',\r\n            recorded_at\r\n        ) recorded_at\r\n    FROM\r\n        {% if target.name == 'prod' %}\r\n            {{ source(\r\n                'legacy_db',\r\n                'prices_v2'\r\n            ) }}\r\n        {% else %}\r\n            {{ source(\r\n                'legacy_dev_db',\r\n                'prices_v2'\r\n            ) }}\r\n        {% endif %} p\r\n    WHERE\r\n        recorded_at >= CURRENT_DATE - 1\r\n        AND recorded_at <= DATEADD(\r\n            'minute',\r\n            -1,\r\n            CURRENT_DATE\r\n        )\r\n        AND provider = 'coinmarketcap'\r\n    GROUP BY\r\n        DATE_TRUNC(\r\n            'hour',\r\n            recorded_at\r\n        ),\r\n        p.asset_id\r\n),\r\npre_final AS (\r\n    SELECT\r\n        DATE_PART(epoch_second, DATEADD('hour', -1, r.date_rec)) AS start_timestamp,\r\n        DATE_PART(epoch_second, DATEADD('hour', 1, r.date_rec)) AS end_timestamp,\r\n        r.asset_id :: NUMBER AS asset_id\r\n    FROM\r\n        REFERENCE r\r\n        LEFT JOIN recorded p\r\n        ON r.date_rec = p.recorded_at\r\n        AND p.asset_id = r.asset_id\r\n    WHERE\r\n        p.recorded_at IS NULL\r\n)\r\nSELECT\r\n    start_timestamp,\r\n    end_timestamp,\r\n    LISTAGG(\r\n        asset_id,\r\n        ','\r\n    ) AS asset_list\r\nFROM\r\n    pre_final\r\nGROUP BY\r\n    1,\r\n    2", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.crosschain_models.legacy_dev_db.hours", "source.crosschain_models.legacy_dev_db.prices_v2", "source.crosschain_models.legacy_dev_db.prices_v2"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "streamline", "fqn": ["crosschain_models", "streamline", "streamline__legacy_prices_gaps"], "unique_id": "model.crosschain_models.streamline__legacy_prices_gaps", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "streamline\\streamline__legacy_prices_gaps.sql", "original_file_path": "models\\streamline\\streamline__legacy_prices_gaps.sql", "name": "streamline__legacy_prices_gaps", "alias": "legacy_prices_gaps", "checksum": {"name": "sha256", "checksum": "20548e895cad5564f1279997184f29a99b05792d74135970bed2e9a510e03861"}, "tags": [], "refs": [], "sources": [["legacy_dev_db", "hours"], ["legacy_dev_db", "prices_v2"], ["legacy_dev_db", "prices_v2"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\streamline\\streamline__legacy_prices_gaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1666804369.0178564, "compiled_sql": "\n\nWITH cte_date (date_rec) AS (\n\n    SELECT\n        HOUR\n    FROM\n        \n            flipside_dev_db.silver.hours\n        \n    WHERE\n        HOUR BETWEEN CURRENT_DATE - 1\n        AND DATEADD(\n            'minute',\n            -1,\n            CURRENT_DATE\n        )\n),\nsymbols AS (\n    SELECT\n        DISTINCT asset_id\n    FROM\n        \n            flipside_dev_db.silver.prices_v2\n        \n    WHERE\n        recorded_at >= CURRENT_DATE - 14\n        AND market_cap > 1000\n        AND provider = 'coinmarketcap' qualify(ROW_NUMBER() over (PARTITION BY asset_id\n    ORDER BY\n        recorded_at DESC)) = 1\n),\nREFERENCE AS (\n    SELECT\n        *\n    FROM\n        cte_date d,\n        symbols s\n),\nrecorded AS (\n    SELECT\n        asset_id,\n        DATE_TRUNC(\n            'hour',\n            recorded_at\n        ) recorded_at\n    FROM\n        \n            flipside_dev_db.silver.prices_v2\n         p\n    WHERE\n        recorded_at >= CURRENT_DATE - 1\n        AND recorded_at <= DATEADD(\n            'minute',\n            -1,\n            CURRENT_DATE\n        )\n        AND provider = 'coinmarketcap'\n    GROUP BY\n        DATE_TRUNC(\n            'hour',\n            recorded_at\n        ),\n        p.asset_id\n),\npre_final AS (\n    SELECT\n        DATE_PART(epoch_second, DATEADD('hour', -1, r.date_rec)) AS start_timestamp,\n        DATE_PART(epoch_second, DATEADD('hour', 1, r.date_rec)) AS end_timestamp,\n        r.asset_id :: NUMBER AS asset_id\n    FROM\n        REFERENCE r\n        LEFT JOIN recorded p\n        ON r.date_rec = p.recorded_at\n        AND p.asset_id = r.asset_id\n    WHERE\n        p.recorded_at IS NULL\n)\nSELECT\n    start_timestamp,\n    end_timestamp,\n    LISTAGG(\n        asset_id,\n        ','\n    ) AS asset_list\nFROM\n    pre_final\nGROUP BY\n    1,\n    2", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.streamline.legacy_prices_gaps"}, "seed.crosschain_models.silver__godmode_nft_minters": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver__godmode_nft_minters"], "unique_id": "seed.crosschain_models.silver__godmode_nft_minters", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver__godmode_nft_minters.csv", "original_file_path": "data\\silver__godmode_nft_minters.csv", "name": "silver__godmode_nft_minters", "alias": "godmode_nft_minters", "checksum": {"name": "sha256", "checksum": "3c50f7f05b16539dfb688cb7bb1e16815e9671bd69f02d63557870914c749079"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666804369.0334067, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.godmode_nft_minters"}, "seed.crosschain_models.silver__optimism_delegates": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver__optimism_delegates"], "unique_id": "seed.crosschain_models.silver__optimism_delegates", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver__optimism_delegates.csv", "original_file_path": "data\\silver__optimism_delegates.csv", "name": "silver__optimism_delegates", "alias": "optimism_delegates", "checksum": {"name": "sha256", "checksum": "803038592b0e8cd2e61ea5e4b5b872516b46b4b2d50cdfab39ca69ed7748150a"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666804369.0334067, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.optimism_delegates"}, "operation.crosschain_models.crosschain_models-on-run-start-0": {"raw_sql": "{{ create_sps() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.crosschain_models.create_sps"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "crosschain_models-on-run-start-0", "fqn": ["crosschain_models", "hooks", "crosschain_models-on-run-start-0"], "unique_id": "operation.crosschain_models.crosschain_models-on-run-start-0", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "hooks\\crosschain_models-on-run-start-0.sql", "original_file_path": ".\\dbt_project.yml", "name": "crosschain_models-on-run-start-0", "alias": "", "checksum": {"name": "sha256", "checksum": "c9a437a2c7e6ab98601820aa7ce2fd6daff7b862f53abf6abbc9c92f799a06f4"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\.\\dbt_project.yml\\hooks\\crosschain_models-on-run-start-0.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1666804369.049032, "compiled_sql": "\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 0}, "operation.crosschain_models.crosschain_models-on-run-start-1": {"raw_sql": "{{ create_udfs() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.crosschain_models.create_udfs"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "crosschain_models-on-run-start-1", "fqn": ["crosschain_models", "hooks", "crosschain_models-on-run-start-1"], "unique_id": "operation.crosschain_models.crosschain_models-on-run-start-1", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "hooks\\crosschain_models-on-run-start-1.sql", "original_file_path": ".\\dbt_project.yml", "name": "crosschain_models-on-run-start-1", "alias": "", "checksum": {"name": "sha256", "checksum": "c9a437a2c7e6ab98601820aa7ce2fd6daff7b862f53abf6abbc9c92f799a06f4"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\.\\dbt_project.yml\\hooks\\crosschain_models-on-run-start-1.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1666804369.049032, "compiled_sql": "\n    \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 1}, "operation.crosschain_models.crosschain_models-on-run-start-2": {"raw_sql": "{{ sp_create_bulk_fill_cmc_historical_price_gaps() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.crosschain_models.sp_create_bulk_fill_cmc_historical_price_gaps"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "crosschain_models-on-run-start-2", "fqn": ["crosschain_models", "hooks", "crosschain_models-on-run-start-2"], "unique_id": "operation.crosschain_models.crosschain_models-on-run-start-2", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "hooks\\crosschain_models-on-run-start-2.sql", "original_file_path": ".\\dbt_project.yml", "name": "crosschain_models-on-run-start-2", "alias": "", "checksum": {"name": "sha256", "checksum": "c9a437a2c7e6ab98601820aa7ce2fd6daff7b862f53abf6abbc9c92f799a06f4"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\.\\dbt_project.yml\\hooks\\crosschain_models-on-run-start-2.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1666804369.0646574, "compiled_sql": "\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 2}, "operation.crosschain_models.crosschain_models-on-run-start-3": {"raw_sql": "{{ sp_create_bulk_get_coin_gecko_asset_metadata() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.crosschain_models.sp_create_bulk_get_coin_gecko_asset_metadata"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "crosschain_models-on-run-start-3", "fqn": ["crosschain_models", "hooks", "crosschain_models-on-run-start-3"], "unique_id": "operation.crosschain_models.crosschain_models-on-run-start-3", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "hooks\\crosschain_models-on-run-start-3.sql", "original_file_path": ".\\dbt_project.yml", "name": "crosschain_models-on-run-start-3", "alias": "", "checksum": {"name": "sha256", "checksum": "c9a437a2c7e6ab98601820aa7ce2fd6daff7b862f53abf6abbc9c92f799a06f4"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\.\\dbt_project.yml\\hooks\\crosschain_models-on-run-start-3.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1666804369.0802824, "compiled_sql": "\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 3}, "operation.crosschain_models.crosschain_models-on-run-start-4": {"raw_sql": "{{ sp_create_bulk_get_coin_market_cap_asset_metadata() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.crosschain_models.sp_create_bulk_get_coin_market_cap_asset_metadata"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "crosschain_models-on-run-start-4", "fqn": ["crosschain_models", "hooks", "crosschain_models-on-run-start-4"], "unique_id": "operation.crosschain_models.crosschain_models-on-run-start-4", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "hooks\\crosschain_models-on-run-start-4.sql", "original_file_path": ".\\dbt_project.yml", "name": "crosschain_models-on-run-start-4", "alias": "", "checksum": {"name": "sha256", "checksum": "c9a437a2c7e6ab98601820aa7ce2fd6daff7b862f53abf6abbc9c92f799a06f4"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\.\\dbt_project.yml\\hooks\\crosschain_models-on-run-start-4.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1666804369.0802824, "compiled_sql": "\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 4}, "operation.crosschain_models.crosschain_models-on-run-start-5": {"raw_sql": "{{ sp_create_bulk_get_coin_market_cap_prices() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.crosschain_models.sp_create_bulk_get_coin_market_cap_prices"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "crosschain_models-on-run-start-5", "fqn": ["crosschain_models", "hooks", "crosschain_models-on-run-start-5"], "unique_id": "operation.crosschain_models.crosschain_models-on-run-start-5", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "hooks\\crosschain_models-on-run-start-5.sql", "original_file_path": ".\\dbt_project.yml", "name": "crosschain_models-on-run-start-5", "alias": "", "checksum": {"name": "sha256", "checksum": "c9a437a2c7e6ab98601820aa7ce2fd6daff7b862f53abf6abbc9c92f799a06f4"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\.\\dbt_project.yml\\hooks\\crosschain_models-on-run-start-5.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1666804369.0802824, "compiled_sql": "\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 5}, "operation.crosschain_models.crosschain_models-on-run-start-6": {"raw_sql": "{{ sp_create_bulk_get_coin_gecko_prices() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.crosschain_models.sp_create_bulk_get_coin_gecko_prices"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "crosschain_models-on-run-start-6", "fqn": ["crosschain_models", "hooks", "crosschain_models-on-run-start-6"], "unique_id": "operation.crosschain_models.crosschain_models-on-run-start-6", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "hooks\\crosschain_models-on-run-start-6.sql", "original_file_path": ".\\dbt_project.yml", "name": "crosschain_models-on-run-start-6", "alias": "", "checksum": {"name": "sha256", "checksum": "c9a437a2c7e6ab98601820aa7ce2fd6daff7b862f53abf6abbc9c92f799a06f4"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\.\\dbt_project.yml\\hooks\\crosschain_models-on-run-start-6.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1666804369.0802824, "compiled_sql": "\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 6}, "operation.crosschain_models.crosschain_models-on-run-start-7": {"raw_sql": "{{ sp_create_bulk_get_coin_market_cap_hourly_ohlc() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.crosschain_models.sp_create_bulk_get_coin_market_cap_hourly_ohlc"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "crosschain_models-on-run-start-7", "fqn": ["crosschain_models", "hooks", "crosschain_models-on-run-start-7"], "unique_id": "operation.crosschain_models.crosschain_models-on-run-start-7", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "hooks\\crosschain_models-on-run-start-7.sql", "original_file_path": ".\\dbt_project.yml", "name": "crosschain_models-on-run-start-7", "alias": "", "checksum": {"name": "sha256", "checksum": "c9a437a2c7e6ab98601820aa7ce2fd6daff7b862f53abf6abbc9c92f799a06f4"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\.\\dbt_project.yml\\hooks\\crosschain_models-on-run-start-7.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1666804369.0959072, "compiled_sql": "\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 7}, "operation.crosschain_models.crosschain_models-on-run-start-8": {"raw_sql": "{{ sp_refresh_external_table_by_recent_date() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.crosschain_models.sp_refresh_external_table_by_recent_date"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "crosschain_models-on-run-start-8", "fqn": ["crosschain_models", "hooks", "crosschain_models-on-run-start-8"], "unique_id": "operation.crosschain_models.crosschain_models-on-run-start-8", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "hooks\\crosschain_models-on-run-start-8.sql", "original_file_path": ".\\dbt_project.yml", "name": "crosschain_models-on-run-start-8", "alias": "", "checksum": {"name": "sha256", "checksum": "c9a437a2c7e6ab98601820aa7ce2fd6daff7b862f53abf6abbc9c92f799a06f4"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\.\\dbt_project.yml\\hooks\\crosschain_models-on-run-start-8.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1666804369.0959072, "compiled_sql": "\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 8}, "operation.crosschain_models.crosschain_models-on-run-start-9": {"raw_sql": "{{create_tasks()}}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.crosschain_models.create_tasks"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "crosschain_models-on-run-start-9", "fqn": ["crosschain_models", "hooks", "crosschain_models-on-run-start-9"], "unique_id": "operation.crosschain_models.crosschain_models-on-run-start-9", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "hooks\\crosschain_models-on-run-start-9.sql", "original_file_path": ".\\dbt_project.yml", "name": "crosschain_models-on-run-start-9", "alias": "", "checksum": {"name": "sha256", "checksum": "c9a437a2c7e6ab98601820aa7ce2fd6daff7b862f53abf6abbc9c92f799a06f4"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\.\\dbt_project.yml\\hooks\\crosschain_models-on-run-start-9.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1666804369.0959072, "compiled_sql": "\n    \n        create or replace task silver.run_sp_bulk_get_coin_market_cap_prices\n        warehouse = dbt_cloud\n        schedule = 'USING CRON * * * * * UTC'\n    as\n        call silver.sp_bulk_get_coin_market_cap_prices();\n\n    alter task silver.run_sp_bulk_get_coin_market_cap_prices suspend;\n        create or replace task silver.run_sp_bulk_get_coin_gecko_prices\n        warehouse = dbt_cloud\n        schedule = 'USING CRON 15,45 * * * * UTC'\n    as\n        call silver.sp_bulk_get_coin_gecko_prices();\n\n    alter task silver.run_sp_bulk_get_coin_gecko_prices suspend;\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 9}, "model.crosschain_models.silver_crosschain__labels_contracts_avalanche": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    incremental_strategy = 'delete+insert',\r\n    tags = ['snowflake', 'crosschain', 'labels']\r\n) }}\r\n\r\nWITH\r\n\r\n{% if is_incremental() %}\r\nmax_date AS (\r\n\r\n    SELECT\r\n        MAX(\r\n            _inserted_timestamp\r\n        ) _inserted_timestamp\r\n    FROM\r\n        {{ this }}\r\n),\r\n{% endif %} \r\n\r\nbase_labels AS (\r\n    SELECT\r\n        tx_hash, \r\n        block_number, \r\n        block_timestamp, \r\n        tx_status, \r\n        from_address, \r\n        to_address,  \r\n        type, \r\n        identifier, \r\n        _inserted_timestamp\r\n    FROM\r\n        {{ source(\r\n            'avalanche_silver',\r\n            'traces'\r\n        ) }}\r\n    WHERE\r\n        type in ('CREATE', 'CREATE2')\r\n        AND tx_status = 'SUCCESS'\r\n        AND to_address IS NOT NULL\r\n        AND to_address NOT IN (\r\n            SELECT\r\n                DISTINCT address\r\n            FROM\r\n                {{ source(\r\n                    'crosschain_core',\r\n                    'address_labels'\r\n                ) }}\r\n            WHERE\r\n                blockchain = 'avalanche'\r\n        )\r\n\r\n    {% if is_incremental() %}\r\n    AND _inserted_timestamp >= (\r\n        SELECT\r\n            MAX(\r\n                _inserted_timestamp\r\n            )\r\n        FROM\r\n            {{ this }}\r\n    )\r\n    {% endif %}\r\n), \r\nbase_legacy_labels AS (\r\n    SELECT\r\n        DISTINCT \r\n            system_created_at, \r\n            insert_date, \r\n            address, \r\n            label_type as l1_label,\r\n            label_subtype as l2_label,\r\n            address_name,\r\n            project_name\r\n    FROM\r\n        {{ source(\r\n            'crosschain_core',\r\n            'address_labels'\r\n        ) }}\r\n    WHERE\r\n        blockchain = 'avalanche'\r\n), \r\nbase_transacts AS (\r\n    SELECT\r\n        b.system_created_at, \r\n        b.insert_date, \r\n        A.tx_hash,\r\n        A.block_timestamp,\r\n        A.from_address,\r\n        A.to_address,\r\n        A.identifier,\r\n        b.l1_label,\r\n        b.l2_label,\r\n        b.address_name,\r\n        b.project_name, \r\n        A._inserted_timestamp\r\n    FROM\r\n       base_labels A\r\nINNER JOIN base_legacy_labels b\r\nON A.from_address = b.address\r\nWHERE\r\n    b.l1_label != 'flotsam'\r\n),\r\nbase_logs AS (\r\n    SELECT\r\n        DISTINCT tx_hash,\r\n        contract_name,\r\n        event_name, \r\n        _inserted_timestamp\r\n    FROM\r\n        {{ source(\r\n            'avalanche_silver',\r\n            'logs'\r\n        ) }}\r\n    WHERE\r\n        tx_hash IN (\r\n            SELECT\r\n                DISTINCT tx_hash\r\n            FROM\r\n                base_transacts\r\n        )\r\n    AND (\r\n        event_name IN (\r\n            'NewOracle',\r\n            'NewSwapPool',\r\n            'PairCreated',\r\n            'LogNewWallet',\r\n            'LogUserAdded'\r\n        )\r\n        OR event_name ILIKE '%pool%'\r\n        OR event_name ILIKE '%create%'\r\n    )\r\n    AND event_name != 'SetTokenCreated'\r\n    AND event_name != 'PoolUpdate'\r\n    AND contract_name IS NOT NULL\r\n    AND event_name IS NOT NULL\r\n\r\n    {% if is_incremental() %}\r\n    AND _inserted_timestamp >= (\r\n        SELECT\r\n            MAX(\r\n                _inserted_timestamp\r\n            )\r\n        FROM\r\n            {{ this }}\r\n    )\r\n    {% endif %}\r\n), \r\nfinal_base AS (\r\n    SELECT\r\n        A.system_created_at, \r\n        A.insert_date, \r\n        A.tx_hash,\r\n        A.block_timestamp,\r\n        A.from_address,\r\n        A.to_address,\r\n        A.identifier,\r\n        A.l1_label,\r\n        A.l2_label,\r\n        CASE\r\n            WHEN C.event_name IN (\r\n                'PairCreated',\r\n                'NewSwapPool'\r\n            ) THEN 'pool'\r\n            WHEN C.event_name ILIKE '%pool%'\r\n            AND C.event_name ILIKE '%create%' THEN 'pool'\r\n            WHEN C.event_name IN ('LOG_NEW_POOL') THEN 'pool'\r\n            WHEN C.event_name IN (\r\n                'LogNewWallet',\r\n                'LogUserAdded'\r\n            ) THEN 'deposit_wallet'\r\n            WHEN C.event_name IN ('NewOracle') THEN 'oracle'\r\n            WHEN A.l1_label = 'dapp'\r\n            AND A.l2_label = 'governance' THEN 'governance'\r\n            ELSE 'general_contract'\r\n        END AS l2_label_fixed,\r\n        A.address_name,\r\n        CASE\r\n            WHEN C.event_name IN ('PairCreated') THEN CONCAT(\r\n                A.project_name,\r\n                ': pair'\r\n            )\r\n            WHEN C.event_name IN ('NewSwapPool') THEN CONCAT(\r\n                A.project_name,\r\n                ': pool'\r\n            )\r\n            WHEN C.event_name ILIKE '%pool%'\r\n            AND C.event_name ILIKE '%create%' THEN CONCAT(\r\n                A.project_name,\r\n                ': pool'\r\n            )\r\n            WHEN A.l1_label = 'cex'\r\n            AND C.event_name IN (\r\n                'LogNewWallet',\r\n                'LogUserAdded'\r\n            ) THEN CONCAT(\r\n                A.project_name,\r\n                ': deposit wallet'\r\n            )\r\n            WHEN C.event_name IN ('NewOracle') THEN CONCAT(\r\n                A.project_name,\r\n                ': oracle'\r\n            )\r\n            WHEN C.event_name IN ('LOG_NEW_POOL') THEN CONCAT(\r\n                A.project_name,\r\n                ': pool'\r\n            )\r\n            WHEN A.address_name = ' registry'\r\n            AND A.project_name = 'opensea' THEN 'opensea: proxy registry'\r\n            ELSE CONCAT(\r\n                A.project_name,\r\n                ': general contract'\r\n            )\r\n        END AS address_name_fixed,\r\n        A.project_name,\r\n        C.contract_name,\r\n        C.event_name, \r\n        A._inserted_timestamp\r\n    FROM\r\n        base_transacts A\r\n        LEFT JOIN base_logs C\r\n        ON A.tx_hash = C.tx_hash\r\n)\r\nSELECT\r\n    DISTINCT \r\n    system_created_at, \r\n    insert_date, \r\n    'avalanche' AS blockchain,\r\n    to_address AS address,\r\n    'flipside' AS creator,\r\n    l1_label,\r\n    l2_label_fixed AS l2_label,\r\n    address_name_fixed AS address_name,\r\n    project_name, \r\n    _inserted_timestamp\r\nFROM\r\n    final_base qualify(ROW_NUMBER() over(PARTITION BY address\r\nORDER BY\r\n    l2_label_fixed DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.avalanche_silver.traces", "source.crosschain_models.crosschain_core.address_labels", "source.crosschain_models.crosschain_core.address_labels", "source.crosschain_models.avalanche_silver.logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["snowflake", "crosschain", "labels"], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "silver_crosschain__labels_contracts_avalanche"], "unique_id": "model.crosschain_models.silver_crosschain__labels_contracts_avalanche", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.sql", "name": "silver_crosschain__labels_contracts_avalanche", "alias": "labels_contracts_avalanche", "checksum": {"name": "sha256", "checksum": "b9256ea6585c15378b34055e154570d5e7c33f1cae054e26ee9c42e97917e97e"}, "tags": ["snowflake", "crosschain", "labels"], "refs": [], "sources": [["avalanche_silver", "traces"], ["crosschain_core", "address_labels"], ["crosschain_core", "address_labels"], ["avalanche_silver", "logs"]], "metrics": [], "description": "", "columns": {"BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "Address that the label is for. This is the field that should be used to join other tables with labels.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR": {"name": "CREATOR", "description": "The name of the creator of the label", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L1_LABEL": {"name": "L1_LABEL", "description": "A high-level category describing the addresses main function or ownership", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L2_LABEL": {"name": "L2_LABEL", "description": "A sub-category nested within label type providing further detail", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS_NAME": {"name": "ADDRESS_NAME", "description": "Name of the address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROJECT_NAME": {"name": "PROJECT_NAME", "description": "Name of the controlling entity of the address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "delete+insert", "tags": ["snowflake", "crosschain", "labels"]}, "created_at": 1666821807.6969516, "compiled_sql": "\n\nWITH\n\n\nmax_date AS (\n\n    SELECT\n        MAX(\n            _inserted_timestamp\n        ) _inserted_timestamp\n    FROM\n        CROSSCHAIN_DEV.silver_crosschain.labels_contracts_avalanche\n),\n \n\nbase_labels AS (\n    SELECT\n        tx_hash, \n        block_number, \n        block_timestamp, \n        tx_status, \n        from_address, \n        to_address,  \n        type, \n        identifier, \n        _inserted_timestamp\n    FROM\n        avalanche.silver.traces\n    WHERE\n        type in ('CREATE', 'CREATE2')\n        AND tx_status = 'SUCCESS'\n        AND to_address IS NOT NULL\n        AND to_address NOT IN (\n            SELECT\n                DISTINCT address\n            FROM\n                crosschain.core.address_labels\n            WHERE\n                blockchain = 'avalanche'\n        )\n\n    \n    AND _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            CROSSCHAIN_DEV.silver_crosschain.labels_contracts_avalanche\n    )\n    \n), \nbase_legacy_labels AS (\n    SELECT\n        DISTINCT \n            system_created_at, \n            insert_date, \n            address, \n            label_type as l1_label,\n            label_subtype as l2_label,\n            address_name,\n            project_name\n    FROM\n        crosschain.core.address_labels\n    WHERE\n        blockchain = 'avalanche'\n), \nbase_transacts AS (\n    SELECT\n        b.system_created_at, \n        b.insert_date, \n        A.tx_hash,\n        A.block_timestamp,\n        A.from_address,\n        A.to_address,\n        A.identifier,\n        b.l1_label,\n        b.l2_label,\n        b.address_name,\n        b.project_name, \n        A._inserted_timestamp\n    FROM\n       base_labels A\nINNER JOIN base_legacy_labels b\nON A.from_address = b.address\nWHERE\n    b.l1_label != 'flotsam'\n),\nbase_logs AS (\n    SELECT\n        DISTINCT tx_hash,\n        contract_name,\n        event_name, \n        _inserted_timestamp\n    FROM\n        avalanche.silver.logs\n    WHERE\n        tx_hash IN (\n            SELECT\n                DISTINCT tx_hash\n            FROM\n                base_transacts\n        )\n    AND (\n        event_name IN (\n            'NewOracle',\n            'NewSwapPool',\n            'PairCreated',\n            'LogNewWallet',\n            'LogUserAdded'\n        )\n        OR event_name ILIKE '%pool%'\n        OR event_name ILIKE '%create%'\n    )\n    AND event_name != 'SetTokenCreated'\n    AND event_name != 'PoolUpdate'\n    AND contract_name IS NOT NULL\n    AND event_name IS NOT NULL\n\n    \n    AND _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            CROSSCHAIN_DEV.silver_crosschain.labels_contracts_avalanche\n    )\n    \n), \nfinal_base AS (\n    SELECT\n        A.system_created_at, \n        A.insert_date, \n        A.tx_hash,\n        A.block_timestamp,\n        A.from_address,\n        A.to_address,\n        A.identifier,\n        A.l1_label,\n        A.l2_label,\n        CASE\n            WHEN C.event_name IN (\n                'PairCreated',\n                'NewSwapPool'\n            ) THEN 'pool'\n            WHEN C.event_name ILIKE '%pool%'\n            AND C.event_name ILIKE '%create%' THEN 'pool'\n            WHEN C.event_name IN ('LOG_NEW_POOL') THEN 'pool'\n            WHEN C.event_name IN (\n                'LogNewWallet',\n                'LogUserAdded'\n            ) THEN 'deposit_wallet'\n            WHEN C.event_name IN ('NewOracle') THEN 'oracle'\n            WHEN A.l1_label = 'dapp'\n            AND A.l2_label = 'governance' THEN 'governance'\n            ELSE 'general_contract'\n        END AS l2_label_fixed,\n        A.address_name,\n        CASE\n            WHEN C.event_name IN ('PairCreated') THEN CONCAT(\n                A.project_name,\n                ': pair'\n            )\n            WHEN C.event_name IN ('NewSwapPool') THEN CONCAT(\n                A.project_name,\n                ': pool'\n            )\n            WHEN C.event_name ILIKE '%pool%'\n            AND C.event_name ILIKE '%create%' THEN CONCAT(\n                A.project_name,\n                ': pool'\n            )\n            WHEN A.l1_label = 'cex'\n            AND C.event_name IN (\n                'LogNewWallet',\n                'LogUserAdded'\n            ) THEN CONCAT(\n                A.project_name,\n                ': deposit wallet'\n            )\n            WHEN C.event_name IN ('NewOracle') THEN CONCAT(\n                A.project_name,\n                ': oracle'\n            )\n            WHEN C.event_name IN ('LOG_NEW_POOL') THEN CONCAT(\n                A.project_name,\n                ': pool'\n            )\n            WHEN A.address_name = ' registry'\n            AND A.project_name = 'opensea' THEN 'opensea: proxy registry'\n            ELSE CONCAT(\n                A.project_name,\n                ': general contract'\n            )\n        END AS address_name_fixed,\n        A.project_name,\n        C.contract_name,\n        C.event_name, \n        A._inserted_timestamp\n    FROM\n        base_transacts A\n        LEFT JOIN base_logs C\n        ON A.tx_hash = C.tx_hash\n)\nSELECT\n    DISTINCT \n    system_created_at, \n    insert_date, \n    'avalanche' AS blockchain,\n    to_address AS address,\n    'flipside' AS creator,\n    l1_label,\n    l2_label_fixed AS l2_label,\n    address_name_fixed AS address_name,\n    project_name, \n    _inserted_timestamp\nFROM\n    final_base qualify(ROW_NUMBER() over(PARTITION BY address\nORDER BY\n    l2_label_fixed DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver_crosschain.labels_contracts_avalanche"}, "model.crosschain_models.silver_crosschain__snowflake_Near_satellite": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    incremental_strategy = 'delete+insert',\r\n) }}\r\n\r\nWITH distributor_cex AS (\r\n    -- THIS STATEMENT FINDS KNOWN CEX LABELS WITHIN THE BRONZE ADDRESS LABELS TABLE\r\n\r\n    SELECT\r\n        system_created_at,\r\n        insert_date,\r\n        blockchain,\r\n        address,\r\n        creator,\r\n        l1_label,\r\n        l2_label,\r\n        address_name,\r\n        project_name\r\n    FROM\r\n        {{ ref('silver_crosschain__address_labels') }}\r\n    WHERE\r\n        blockchain = 'near'\r\n        AND l1_label = 'cex'\r\n        AND l2_label = 'hot_wallet'\r\n),\r\npossible_sats AS (\r\n    -- THIS STATEMENT LOCATES POTENTIAL SATELLITE WALLETS BASED ON DEPOSIT BEHAVIOR\r\n    SELECT\r\n        DISTINCT *\r\n    FROM\r\n        (\r\n            SELECT\r\n                DISTINCT dc.system_created_at,\r\n                dc.insert_date,\r\n                dc.blockchain,\r\n                xfer.TX_SIGNER AS address,\r\n                dc.creator,\r\n                dc.address_name,\r\n                dc.project_name,\r\n                dc.l1_label,\r\n                'deposit_wallet' AS l2_label,\r\n                COUNT(\r\n                    DISTINCT project_name\r\n                ) over(\r\n                    PARTITION BY dc.blockchain,\r\n                    xfer.TX_SIGNER\r\n                ) AS project_count -- how many projects has each from address sent to\r\n            FROM\r\n                {{ source(\r\n                    'near_core',\r\n                    'fact_transfers'\r\n                ) }}\r\n                xfer\r\n                JOIN distributor_cex dc\r\n                ON dc.address = xfer.TX_RECEIVER\r\n            WHERE\r\n                deposit > 0\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\nGROUP BY\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9\r\n)\r\n),\r\nreal_sats AS (\r\n    SELECT\r\n        TX_SIGNER,\r\n        COUNT(DISTINCT COALESCE(project_name, 'blunts')) AS project_count\r\n    FROM\r\n        {{ source(\r\n            'near_core',\r\n            'fact_transfers'\r\n        ) }}\r\n        xfer\r\n        LEFT OUTER JOIN distributor_cex dc\r\n        ON dc.address = xfer.TX_RECEIVER\r\n    WHERE\r\n        deposit > 0\r\n        AND TX_SIGNER IN (\r\n            SELECT\r\n                address\r\n            FROM\r\n                possible_sats\r\n        )\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\nGROUP BY\r\n    TX_SIGNER\r\n),\r\nexclusive_sats AS (\r\n    SELECT\r\n        DISTINCT TX_SIGNER AS address\r\n    FROM\r\n        real_sats\r\n    WHERE\r\n        project_count = 1\r\n    GROUP BY\r\n        1\r\n),\r\nfinal_base AS(\r\n    SELECT\r\n        DISTINCT CURRENT_TIMESTAMP AS system_created_at,\r\n        CURRENT_TIMESTAMP AS insert_date,\r\n        blockchain,\r\n        e.address,\r\n        creator,\r\n        l1_label,\r\n        l2_label,\r\n        project_name,\r\n        CONCAT(\r\n            project_name,\r\n            ' deposit_wallet'\r\n        ) AS address_name\r\n    FROM\r\n        exclusive_sats e\r\n        JOIN possible_sats p\r\n        ON e.address = p.address\r\n)\r\nSELECT\r\n    DISTINCT system_created_at,\r\n    insert_date,\r\n    blockchain,\r\n    address,\r\n    creator,\r\n    l1_label,\r\n    l2_label,\r\n    address_name,\r\n    project_name\r\nFROM\r\n    final_base\r\nWHERE\r\n    address NOT IN (\r\n        SELECT\r\n            DISTINCT address\r\n        FROM\r\n            {{ ref('silver_crosschain__address_labels') }}\r\n        WHERE\r\n            blockchain = 'near'\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.near_core.fact_transfers", "source.crosschain_models.near_core.fact_transfers", "model.crosschain_models.silver_crosschain__address_labels", "model.crosschain_models.silver_crosschain__address_labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "silver_crosschain__snowflake_Near_satellite"], "unique_id": "model.crosschain_models.silver_crosschain__snowflake_Near_satellite", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Near_satellite.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Near_satellite.sql", "name": "silver_crosschain__snowflake_Near_satellite", "alias": "snowflake_Near_satellite", "checksum": {"name": "sha256", "checksum": "1f74b8d67059ed5664a50243fbc8e0d835926ac440e1e59cb042a40762ab7ec2"}, "tags": [], "refs": [["silver_crosschain__address_labels"], ["silver_crosschain__address_labels"]], "sources": [["near_core", "fact_transfers"], ["near_core", "fact_transfers"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Near_satellite.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Near_satellite.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "delete+insert"}, "created_at": 1666821807.620693, "compiled_sql": "\n\nWITH distributor_cex AS (\n    -- THIS STATEMENT FINDS KNOWN CEX LABELS WITHIN THE BRONZE ADDRESS LABELS TABLE\n\n    SELECT\n        system_created_at,\n        insert_date,\n        blockchain,\n        address,\n        creator,\n        l1_label,\n        l2_label,\n        address_name,\n        project_name\n    FROM\n        CROSSCHAIN_DEV.silver_crosschain.address_labels\n    WHERE\n        blockchain = 'near'\n        AND l1_label = 'cex'\n        AND l2_label = 'hot_wallet'\n),\npossible_sats AS (\n    -- THIS STATEMENT LOCATES POTENTIAL SATELLITE WALLETS BASED ON DEPOSIT BEHAVIOR\n    SELECT\n        DISTINCT *\n    FROM\n        (\n            SELECT\n                DISTINCT dc.system_created_at,\n                dc.insert_date,\n                dc.blockchain,\n                xfer.TX_SIGNER AS address,\n                dc.creator,\n                dc.address_name,\n                dc.project_name,\n                dc.l1_label,\n                'deposit_wallet' AS l2_label,\n                COUNT(\n                    DISTINCT project_name\n                ) over(\n                    PARTITION BY dc.blockchain,\n                    xfer.TX_SIGNER\n                ) AS project_count -- how many projects has each from address sent to\n            FROM\n                near.core.fact_transfers\n                xfer\n                JOIN distributor_cex dc\n                ON dc.address = xfer.TX_RECEIVER\n            WHERE\n                deposit > 0\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\nGROUP BY\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9\n)\n),\nreal_sats AS (\n    SELECT\n        TX_SIGNER,\n        COUNT(DISTINCT COALESCE(project_name, 'blunts')) AS project_count\n    FROM\n        near.core.fact_transfers\n        xfer\n        LEFT OUTER JOIN distributor_cex dc\n        ON dc.address = xfer.TX_RECEIVER\n    WHERE\n        deposit > 0\n        AND TX_SIGNER IN (\n            SELECT\n                address\n            FROM\n                possible_sats\n        )\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\nGROUP BY\n    TX_SIGNER\n),\nexclusive_sats AS (\n    SELECT\n        DISTINCT TX_SIGNER AS address\n    FROM\n        real_sats\n    WHERE\n        project_count = 1\n    GROUP BY\n        1\n),\nfinal_base AS(\n    SELECT\n        DISTINCT CURRENT_TIMESTAMP AS system_created_at,\n        CURRENT_TIMESTAMP AS insert_date,\n        blockchain,\n        e.address,\n        creator,\n        l1_label,\n        l2_label,\n        project_name,\n        CONCAT(\n            project_name,\n            ' deposit_wallet'\n        ) AS address_name\n    FROM\n        exclusive_sats e\n        JOIN possible_sats p\n        ON e.address = p.address\n)\nSELECT\n    DISTINCT system_created_at,\n    insert_date,\n    blockchain,\n    address,\n    creator,\n    l1_label,\n    l2_label,\n    address_name,\n    project_name\nFROM\n    final_base\nWHERE\n    address NOT IN (\n        SELECT\n            DISTINCT address\n        FROM\n            CROSSCHAIN_DEV.silver_crosschain.address_labels\n        WHERE\n            blockchain = 'near'\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver_crosschain.snowflake_Near_satellite"}, "model.crosschain_models.silver__tags_nft_transactor_ETH": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', address, tag_name, start_date)\",\r\n    incremental_strategy = 'delete+insert',\r\n) }}\r\n-- We do not want to full refresh this model until we have a historical tags code set up.\r\n-- to full-refresh either include the variable allow_full_refresh: True to command or comment out below code\r\n-- DO NOT FORMAT will break the full refresh code if formatted copy from below\r\n\r\n-- {% if execute %}\r\n--   {% if flags.FULL_REFRESH and var('allow_full_refresh', False) != True %}\r\n--       {{ exceptions.raise_compiler_error(\"Full refresh is not allowed for this model unless the argument \\\"- -vars 'allow_full_refresh: True'\\\" is included in the dbt run command.\") }}\r\n--   {% endif %}\r\n-- {% endif %}\r\n{% if execute %}\r\n  {% if flags.FULL_REFRESH and var('allow_full_refresh', False) != True %}\r\n      {{ exceptions.raise_compiler_error(\"Full refresh is not allowed for this model unless the argument \\\"- -vars 'allow_full_refresh: True'\\\" is included in the dbt run command.\") }}\r\n  {% endif %}\r\n{% endif %}\r\n\r\nWITH nft_receipts AS (\r\n    SELECT\r\n        DISTINCT nft_to_address AS address,\r\n        MAX(block_timestamp) AS block_timestamp,\r\n        COUNT(\r\n            DISTINCT tx_hash\r\n        ) AS num_transactions\r\n    FROM\r\n        ethereum.core.ez_nft_transfers\r\n    GROUP BY\r\n        1\r\n),\r\nnft_transfers AS (\r\n    SELECT\r\n        DISTINCT nft_from_address AS address,\r\n        MAX(block_timestamp) AS block_timestamp,\r\n        COUNT(\r\n            DISTINCT tx_hash\r\n        ) AS num_transactions\r\n    FROM\r\n        ethereum.core.ez_nft_transfers\r\n    GROUP BY\r\n        1\r\n),\r\ntotal_transactions AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        nft_receipts\r\n    UNION\r\n    SELECT\r\n        *\r\n    FROM\r\n        nft_transfers\r\n),\r\ntotal_transactions_small AS (\r\n    SELECT\r\n        DISTINCT address,\r\n        SUM(num_transactions) AS total_transactions,\r\n        MAX(block_timestamp) AS start_date,\r\n        NTILE(100) over(\r\n            ORDER BY\r\n                total_transactions\r\n        ) AS transaction_group\r\n    FROM\r\n        total_transactions\r\n    GROUP BY\r\n        1\r\n),\r\nnft_top_1_new AS (\r\n    SELECT\r\n        'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        A.address,\r\n        CASE\r\n            WHEN A.transaction_group = '100' THEN 'nft transactor top 1%'\r\n            ELSE NULL\r\n        END AS tag_name,\r\n        'nft' AS tag_type,\r\n        A.start_date,\r\n        NULL AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        total_transactions_small A\r\n    WHERE\r\n        A.transaction_group = '100'\r\n\r\n{% if is_incremental() %}\r\nAND A.address NOT IN (\r\n    SELECT\r\n        DISTINCT address\r\n    FROM\r\n        {{ this }}\r\n    WHERE\r\n        tag_name = 'nft transactor top 1%'\r\n)\r\n{% endif %}\r\n),\r\nnft_top_5_new AS (\r\n    SELECT\r\n        'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        A.address,\r\n        CASE\r\n            WHEN A.transaction_group IN (\r\n                '100',\r\n                '99',\r\n                '98',\r\n                '97',\r\n                '96'\r\n            ) THEN 'nft transactor top 5%'\r\n            ELSE NULL\r\n        END AS tag_name,\r\n        'nft' AS tag_type,\r\n        A.start_date,\r\n        NULL AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        total_transactions_small A\r\n    WHERE\r\n        A.transaction_group IN (\r\n            '100',\r\n            '99',\r\n            '98',\r\n            '97',\r\n            '96'\r\n        )\r\n\r\n{% if is_incremental() %}\r\nAND A.address NOT IN (\r\n    SELECT\r\n        DISTINCT address\r\n    FROM\r\n        {{ this }}\r\n    WHERE\r\n        tag_name = 'nft transactor top 5%'\r\n)\r\n{% endif %}\r\n),\r\nnft_top_10_new AS (\r\n    SELECT\r\n        'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        A.address,\r\n        CASE\r\n            WHEN A.transaction_group IN (\r\n                '100',\r\n                '99',\r\n                '98',\r\n                '97',\r\n                '96',\r\n                '95',\r\n                '94',\r\n                '93',\r\n                '92',\r\n                '91'\r\n            ) THEN 'nft transactor top 10%'\r\n            ELSE NULL\r\n        END AS tag_name,\r\n        'nft' AS tag_type,\r\n        A.start_date,\r\n        NULL AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        total_transactions_small A\r\n    WHERE\r\n        A.transaction_group IN (\r\n            '100',\r\n            '99',\r\n            '98',\r\n            '97',\r\n            '96',\r\n            '95',\r\n            '94',\r\n            '93',\r\n            '92',\r\n            '91'\r\n        )\r\n\r\n{% if is_incremental() %}\r\nAND A.address NOT IN (\r\n    SELECT\r\n        DISTINCT address\r\n    FROM\r\n        {{ this }}\r\n    WHERE\r\n        tag_name = 'nft transactor top 10%'\r\n)\r\n{% endif %}\r\n)\r\n\r\n{% if is_incremental() %},\r\nnft_top_1_cap AS (\r\n    SELECT\r\n        'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        address,\r\n        'nft transactor top 1%' AS tag_name,\r\n        'nft' AS tag_type,\r\n        start_date,\r\n        DATE_TRUNC(\r\n            'DAY',\r\n            CURRENT_DATE\r\n        ) :: DATE AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        (\r\n            SELECT\r\n                *\r\n            FROM\r\n                {{ this }}\r\n            WHERE\r\n                tag_name = 'nft transactor top 1%'\r\n        )\r\n    WHERE\r\n        address NOT IN (\r\n            SELECT\r\n                DISTINCT address\r\n            FROM\r\n                total_transactions_small\r\n            WHERE\r\n                transaction_group = '100'\r\n        )\r\n),\r\nnft_top_5_cap AS (\r\n    SELECT\r\n        'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        address,\r\n        'nft transactor top 5%' AS tag_name,\r\n        'nft' AS tag_type,\r\n        start_date,\r\n        DATE_TRUNC(\r\n            'DAY',\r\n            CURRENT_DATE\r\n        ) :: DATE AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        (\r\n            SELECT\r\n                *\r\n            FROM\r\n                {{ this }}\r\n            WHERE\r\n                tag_name = 'nft transactor top 5%'\r\n        )\r\n    WHERE\r\n        address NOT IN (\r\n            SELECT\r\n                DISTINCT address\r\n            FROM\r\n                total_transactions_small\r\n            WHERE\r\n                transaction_group IN (\r\n                    '100',\r\n                    '99',\r\n                    '98',\r\n                    '97',\r\n                    '96'\r\n                )\r\n        )\r\n),\r\nnft_top_10_cap AS (\r\n    SELECT\r\n        'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        address,\r\n        'nft transactor top 10%' AS tag_name,\r\n        'nft' AS tag_type,\r\n        start_date,\r\n        DATE_TRUNC(\r\n            'DAY',\r\n            CURRENT_DATE\r\n        ) :: DATE AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        (\r\n            SELECT\r\n                *\r\n            FROM\r\n                {{ this }}\r\n            WHERE\r\n                tag_name = 'nft transactor top 10%'\r\n        )\r\n    WHERE\r\n        address NOT IN (\r\n            SELECT\r\n                DISTINCT address\r\n            FROM\r\n                total_transactions_small\r\n            WHERE\r\n                transaction_group IN (\r\n                    '100',\r\n                    '99',\r\n                    '98',\r\n                    '97',\r\n                    '96',\r\n                    '95',\r\n                    '94',\r\n                    '93',\r\n                    '92',\r\n                    '91'\r\n                )\r\n        )\r\n)\r\n{% endif %}\r\nSELECT\r\n    *\r\nFROM\r\n    nft_top_1_new\r\nUNION\r\nSELECT\r\n    *\r\nFROM\r\n    nft_top_5_new\r\nUNION\r\nSELECT\r\n    *\r\nFROM\r\n    nft_top_10_new\r\n\r\n{% if is_incremental() %}\r\nUNION\r\nSELECT\r\n    *\r\nFROM\r\n    nft_top_1_cap\r\nUNION\r\nSELECT\r\n    *\r\nFROM\r\n    nft_top_5_cap\r\nUNION\r\nSELECT\r\n    *\r\nFROM\r\n    nft_top_10_cap\r\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', address, tag_name, start_date)", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "silver__tags_nft_transactor_ETH"], "unique_id": "model.crosschain_models.silver__tags_nft_transactor_ETH", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\tags\\Ethereum\\silver__tags_nft_transactor_ETH.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_transactor_ETH.sql", "name": "silver__tags_nft_transactor_ETH", "alias": "tags_nft_transactor_ETH", "checksum": {"name": "sha256", "checksum": "4ce31b79cc6cc346cba6778f6ed5a90f539ec53bba35da4edce16953d1a89a47"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TAG_NAME": {"name": "TAG_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\tags\\Ethereum\\silver__tags_nft_transactor_ETH.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_transactor_ETH.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', address, tag_name, start_date)", "incremental_strategy": "delete+insert"}, "created_at": 1666821808.1267266, "compiled_sql": "\n-- We do not want to full refresh this model until we have a historical tags code set up.\n-- to full-refresh either include the variable allow_full_refresh: True to command or comment out below code\n-- DO NOT FORMAT will break the full refresh code if formatted copy from below\n\n-- \n--   \n-- \n\n  \n\n\nWITH nft_receipts AS (\n    SELECT\n        DISTINCT nft_to_address AS address,\n        MAX(block_timestamp) AS block_timestamp,\n        COUNT(\n            DISTINCT tx_hash\n        ) AS num_transactions\n    FROM\n        ethereum.core.ez_nft_transfers\n    GROUP BY\n        1\n),\nnft_transfers AS (\n    SELECT\n        DISTINCT nft_from_address AS address,\n        MAX(block_timestamp) AS block_timestamp,\n        COUNT(\n            DISTINCT tx_hash\n        ) AS num_transactions\n    FROM\n        ethereum.core.ez_nft_transfers\n    GROUP BY\n        1\n),\ntotal_transactions AS (\n    SELECT\n        *\n    FROM\n        nft_receipts\n    UNION\n    SELECT\n        *\n    FROM\n        nft_transfers\n),\ntotal_transactions_small AS (\n    SELECT\n        DISTINCT address,\n        SUM(num_transactions) AS total_transactions,\n        MAX(block_timestamp) AS start_date,\n        NTILE(100) over(\n            ORDER BY\n                total_transactions\n        ) AS transaction_group\n    FROM\n        total_transactions\n    GROUP BY\n        1\n),\nnft_top_1_new AS (\n    SELECT\n        'ethereum' AS blockchain,\n        'flipside' AS creator,\n        A.address,\n        CASE\n            WHEN A.transaction_group = '100' THEN 'nft transactor top 1%'\n            ELSE NULL\n        END AS tag_name,\n        'nft' AS tag_type,\n        A.start_date,\n        NULL AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        total_transactions_small A\n    WHERE\n        A.transaction_group = '100'\n\n\nAND A.address NOT IN (\n    SELECT\n        DISTINCT address\n    FROM\n        CROSSCHAIN_DEV.silver.tags_nft_transactor_ETH\n    WHERE\n        tag_name = 'nft transactor top 1%'\n)\n\n),\nnft_top_5_new AS (\n    SELECT\n        'ethereum' AS blockchain,\n        'flipside' AS creator,\n        A.address,\n        CASE\n            WHEN A.transaction_group IN (\n                '100',\n                '99',\n                '98',\n                '97',\n                '96'\n            ) THEN 'nft transactor top 5%'\n            ELSE NULL\n        END AS tag_name,\n        'nft' AS tag_type,\n        A.start_date,\n        NULL AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        total_transactions_small A\n    WHERE\n        A.transaction_group IN (\n            '100',\n            '99',\n            '98',\n            '97',\n            '96'\n        )\n\n\nAND A.address NOT IN (\n    SELECT\n        DISTINCT address\n    FROM\n        CROSSCHAIN_DEV.silver.tags_nft_transactor_ETH\n    WHERE\n        tag_name = 'nft transactor top 5%'\n)\n\n),\nnft_top_10_new AS (\n    SELECT\n        'ethereum' AS blockchain,\n        'flipside' AS creator,\n        A.address,\n        CASE\n            WHEN A.transaction_group IN (\n                '100',\n                '99',\n                '98',\n                '97',\n                '96',\n                '95',\n                '94',\n                '93',\n                '92',\n                '91'\n            ) THEN 'nft transactor top 10%'\n            ELSE NULL\n        END AS tag_name,\n        'nft' AS tag_type,\n        A.start_date,\n        NULL AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        total_transactions_small A\n    WHERE\n        A.transaction_group IN (\n            '100',\n            '99',\n            '98',\n            '97',\n            '96',\n            '95',\n            '94',\n            '93',\n            '92',\n            '91'\n        )\n\n\nAND A.address NOT IN (\n    SELECT\n        DISTINCT address\n    FROM\n        CROSSCHAIN_DEV.silver.tags_nft_transactor_ETH\n    WHERE\n        tag_name = 'nft transactor top 10%'\n)\n\n)\n\n,\nnft_top_1_cap AS (\n    SELECT\n        'ethereum' AS blockchain,\n        'flipside' AS creator,\n        address,\n        'nft transactor top 1%' AS tag_name,\n        'nft' AS tag_type,\n        start_date,\n        DATE_TRUNC(\n            'DAY',\n            CURRENT_DATE\n        ) :: DATE AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        (\n            SELECT\n                *\n            FROM\n                CROSSCHAIN_DEV.silver.tags_nft_transactor_ETH\n            WHERE\n                tag_name = 'nft transactor top 1%'\n        )\n    WHERE\n        address NOT IN (\n            SELECT\n                DISTINCT address\n            FROM\n                total_transactions_small\n            WHERE\n                transaction_group = '100'\n        )\n),\nnft_top_5_cap AS (\n    SELECT\n        'ethereum' AS blockchain,\n        'flipside' AS creator,\n        address,\n        'nft transactor top 5%' AS tag_name,\n        'nft' AS tag_type,\n        start_date,\n        DATE_TRUNC(\n            'DAY',\n            CURRENT_DATE\n        ) :: DATE AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        (\n            SELECT\n                *\n            FROM\n                CROSSCHAIN_DEV.silver.tags_nft_transactor_ETH\n            WHERE\n                tag_name = 'nft transactor top 5%'\n        )\n    WHERE\n        address NOT IN (\n            SELECT\n                DISTINCT address\n            FROM\n                total_transactions_small\n            WHERE\n                transaction_group IN (\n                    '100',\n                    '99',\n                    '98',\n                    '97',\n                    '96'\n                )\n        )\n),\nnft_top_10_cap AS (\n    SELECT\n        'ethereum' AS blockchain,\n        'flipside' AS creator,\n        address,\n        'nft transactor top 10%' AS tag_name,\n        'nft' AS tag_type,\n        start_date,\n        DATE_TRUNC(\n            'DAY',\n            CURRENT_DATE\n        ) :: DATE AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        (\n            SELECT\n                *\n            FROM\n                CROSSCHAIN_DEV.silver.tags_nft_transactor_ETH\n            WHERE\n                tag_name = 'nft transactor top 10%'\n        )\n    WHERE\n        address NOT IN (\n            SELECT\n                DISTINCT address\n            FROM\n                total_transactions_small\n            WHERE\n                transaction_group IN (\n                    '100',\n                    '99',\n                    '98',\n                    '97',\n                    '96',\n                    '95',\n                    '94',\n                    '93',\n                    '92',\n                    '91'\n                )\n        )\n)\n\nSELECT\n    *\nFROM\n    nft_top_1_new\nUNION\nSELECT\n    *\nFROM\n    nft_top_5_new\nUNION\nSELECT\n    *\nFROM\n    nft_top_10_new\n\n\nUNION\nSELECT\n    *\nFROM\n    nft_top_1_cap\nUNION\nSELECT\n    *\nFROM\n    nft_top_5_cap\nUNION\nSELECT\n    *\nFROM\n    nft_top_10_cap\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.tags_nft_transactor_ETH"}, "model.crosschain_models.core__dim_date_hours": {"raw_sql": "{{ config(\r\n    materialized = \"view\",\r\n) }}\r\n\r\n\r\nWITH cte_my_date AS (\r\n    SELECT DATEADD(HOUR, SEQ4(), '2017-01-01 00:00:00') AS my_date\r\n    FROM TABLE(GENERATOR(ROWCOUNT=>1000000))\r\n)\r\nSELECT\r\n    TO_TIMESTAMP(my_date) as date_hour\r\nFROM cte_my_date\r\nWHERE date_hour < current_timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "core", "fqn": ["crosschain_models", "core", "core__dim_date_hours"], "unique_id": "model.crosschain_models.core__dim_date_hours", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "core\\core__dim_date_hours.sql", "original_file_path": "models\\core\\core__dim_date_hours.sql", "name": "core__dim_date_hours", "alias": "dim_date_hours", "checksum": {"name": "sha256", "checksum": "75ef640afb676e4cc951e3176ab3037d07fbba343ada1adae4cdc59edcaac580"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "Hold rows for each hour from 2017 to current timestamp (UTC)", "columns": {"DATE_HOUR": {"name": "DATE_HOUR", "description": "Specific hour of a given date", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\core\\core__dim_date_hours.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__dim_date_hours.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1666821807.7996364, "compiled_sql": "\n\n\nWITH cte_my_date AS (\n    SELECT DATEADD(HOUR, SEQ4(), '2017-01-01 00:00:00') AS my_date\n    FROM TABLE(GENERATOR(ROWCOUNT=>1000000))\n)\nSELECT\n    TO_TIMESTAMP(my_date) as date_hour\nFROM cte_my_date\nWHERE date_hour < current_timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.core.dim_date_hours"}, "model.crosschain_models.silver__tags_contract_address_optimism": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    incremental_strategy = 'delete+insert',\r\n) }}\r\n\r\nSELECT\r\n    DISTINCT 'optimism' AS blockchain,\r\n    'flipside' AS creator,\r\n    to_address :: STRING AS address,\r\n    'contract address' AS tag_name,\r\n    'contract' AS tag_type,\r\n    block_number,\r\n    DATE_TRUNC(\r\n        'day',\r\n        block_timestamp\r\n    ) AS start_date,\r\n    NULL AS end_date,\r\n    _inserted_timestamp,\r\n    CURRENT_TIMESTAMP AS tag_created_at\r\nFROM\r\n    {{ source(\r\n        'optimism_silver',\r\n        'traces'\r\n    ) }}\r\nWHERE\r\n    TYPE in ('CREATE', 'CREATE2')\r\n    AND tx_status = 'SUCCESS'\r\n    AND to_address IS NOT NULL\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp > (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n\r\nqualify(ROW_NUMBER() over(PARTITION BY address\r\nORDER BY\r\n    block_number DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.optimism_silver.traces"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "tags", "Optimism", "silver__tags_contract_address_optimism"], "unique_id": "model.crosschain_models.silver__tags_contract_address_optimism", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\tags\\Optimism\\silver__tags_contract_address_optimism.sql", "original_file_path": "models\\silver\\tags\\Optimism\\silver__tags_contract_address_optimism.sql", "name": "silver__tags_contract_address_optimism", "alias": "tags_contract_address_optimism", "checksum": {"name": "sha256", "checksum": "a2f7d137d7fb09734d37c03fe441ac208e47c0eb60620157623b2c14789e0b67"}, "tags": [], "refs": [], "sources": [["optimism_silver", "traces"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\tags\\Optimism\\silver__tags_contract_address_optimism.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Optimism\\silver__tags_contract_address_optimism.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "delete+insert"}, "created_at": 1666821807.652068, "compiled_sql": "\n\nSELECT\n    DISTINCT 'optimism' AS blockchain,\n    'flipside' AS creator,\n    to_address :: STRING AS address,\n    'contract address' AS tag_name,\n    'contract' AS tag_type,\n    block_number,\n    DATE_TRUNC(\n        'day',\n        block_timestamp\n    ) AS start_date,\n    NULL AS end_date,\n    _inserted_timestamp,\n    CURRENT_TIMESTAMP AS tag_created_at\nFROM\n    optimism.silver.traces\nWHERE\n    TYPE in ('CREATE', 'CREATE2')\n    AND tx_status = 'SUCCESS'\n    AND to_address IS NOT NULL\n\n\nAND _inserted_timestamp > (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        CROSSCHAIN_DEV.silver.tags_contract_address_optimism\n)\n\n\nqualify(ROW_NUMBER() over(PARTITION BY address\nORDER BY\n    block_number DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.tags_contract_address_optimism"}, "model.crosschain_models.silver__tags_nft_looksrare_user": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    incremental_strategy = 'merge',\r\n    merge_update_columns = ['creator'],\r\n) }}\r\n\r\nWITH buyers AS (\r\n\r\n    SELECT\r\n        DISTINCT 'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        nft_to_address AS address,\r\n        'looksrare user' AS tag_name,\r\n        'nft' AS tag_type,\r\n        MIN(\r\n            block_timestamp :: DATE\r\n        ) AS start_date,\r\n        NULL AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at,\r\n        MIN(ingested_at) AS ingested_at\r\n    FROM\r\n        {{ source(\r\n            'ethereum_silver_nft',\r\n            'looksrare_sales'\r\n        ) }}\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    ingested_at > (\r\n        SELECT\r\n            MAX(ingested_at)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% endif %}\r\nGROUP BY\r\n    nft_to_address\r\n),\r\nsellers AS (\r\n    SELECT\r\n        DISTINCT 'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        nft_from_address AS address,\r\n        'looksrare user' AS tag_name,\r\n        'nft' AS tag_type,\r\n        MIN(\r\n            block_timestamp :: DATE\r\n        ) AS start_date,\r\n        NULL AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at,\r\n        MIN(ingested_at) AS ingested_at\r\n    FROM\r\n        {{ source(\r\n            'ethereum_silver_nft',\r\n            'looksrare_sales'\r\n        ) }}\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    ingested_at > (\r\n        SELECT\r\n            MAX(ingested_at)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% endif %}\r\nGROUP BY\r\n    nft_from_address\r\n),\r\nunion_table AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        buyers\r\n    UNION\r\n    SELECT\r\n        *\r\n    FROM\r\n        sellers\r\n),\r\nfinal_table AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        union_table qualify(ROW_NUMBER() over(PARTITION BY address\r\n    ORDER BY\r\n        start_date ASC)) = 1\r\n)\r\nSELECT\r\n    A.*\r\nFROM\r\n    final_table A", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.ethereum_silver_nft.looksrare_sales", "source.crosschain_models.ethereum_silver_nft.looksrare_sales"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "merge_update_columns": ["creator"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "silver__tags_nft_looksrare_user"], "unique_id": "model.crosschain_models.silver__tags_nft_looksrare_user", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\tags\\Ethereum\\silver__tags_nft_looksrare_user.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_looksrare_user.sql", "name": "silver__tags_nft_looksrare_user", "alias": "tags_nft_looksrare_user", "checksum": {"name": "sha256", "checksum": "effc32c1b60036fcb40e914a08a5bcfc95d7b9558358c76f60ef46cabef5ef8a"}, "tags": [], "refs": [], "sources": [["ethereum_silver_nft", "looksrare_sales"], ["ethereum_silver_nft", "looksrare_sales"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\tags\\Ethereum\\silver__tags_nft_looksrare_user.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_looksrare_user.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "merge", "merge_update_columns": ["creator"]}, "created_at": 1666821807.0133066, "compiled_sql": "\n\nWITH buyers AS (\n\n    SELECT\n        DISTINCT 'ethereum' AS blockchain,\n        'flipside' AS creator,\n        nft_to_address AS address,\n        'looksrare user' AS tag_name,\n        'nft' AS tag_type,\n        MIN(\n            block_timestamp :: DATE\n        ) AS start_date,\n        NULL AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at,\n        MIN(ingested_at) AS ingested_at\n    FROM\n        ethereum.silver_nft.looksrare_sales\n\n\nWHERE\n    ingested_at > (\n        SELECT\n            MAX(ingested_at)\n        FROM\n            CROSSCHAIN_DEV.silver.tags_nft_looksrare_user\n    )\n\nGROUP BY\n    nft_to_address\n),\nsellers AS (\n    SELECT\n        DISTINCT 'ethereum' AS blockchain,\n        'flipside' AS creator,\n        nft_from_address AS address,\n        'looksrare user' AS tag_name,\n        'nft' AS tag_type,\n        MIN(\n            block_timestamp :: DATE\n        ) AS start_date,\n        NULL AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at,\n        MIN(ingested_at) AS ingested_at\n    FROM\n        ethereum.silver_nft.looksrare_sales\n\n\nWHERE\n    ingested_at > (\n        SELECT\n            MAX(ingested_at)\n        FROM\n            CROSSCHAIN_DEV.silver.tags_nft_looksrare_user\n    )\n\nGROUP BY\n    nft_from_address\n),\nunion_table AS (\n    SELECT\n        *\n    FROM\n        buyers\n    UNION\n    SELECT\n        *\n    FROM\n        sellers\n),\nfinal_table AS (\n    SELECT\n        *\n    FROM\n        union_table qualify(ROW_NUMBER() over(PARTITION BY address\n    ORDER BY\n        start_date ASC)) = 1\n)\nSELECT\n    A.*\nFROM\n    final_table A", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.tags_nft_looksrare_user"}, "model.crosschain_models.silver_crosschain__labels_contracts_bsc": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    incremental_strategy = 'delete+insert',\r\n    tags = ['snowflake', 'crosschain', 'labels']\r\n) }}\r\n\r\nWITH\r\n\r\n{% if is_incremental() %}\r\nmax_date AS (\r\n\r\n    SELECT\r\n        MAX(\r\n            _inserted_timestamp\r\n        ) _inserted_timestamp\r\n    FROM\r\n        {{ this }}\r\n),\r\n{% endif %} \r\n\r\nbase_labels AS (\r\n    SELECT\r\n        tx_hash, \r\n        block_number, \r\n        block_timestamp, \r\n        tx_status, \r\n        from_address, \r\n        to_address,  \r\n        type, \r\n        identifier, \r\n        _inserted_timestamp\r\n    FROM\r\n        {{ source(\r\n            'bsc_silver',\r\n            'traces'\r\n        ) }}\r\n    WHERE\r\n        type in ('CREATE', 'CREATE2')\r\n        AND tx_status = 'SUCCESS'\r\n        AND to_address IS NOT NULL\r\n        AND to_address NOT IN (\r\n            SELECT\r\n                DISTINCT address\r\n            FROM\r\n                {{ source(\r\n                    'crosschain_core',\r\n                    'address_labels'\r\n                ) }}\r\n            WHERE\r\n                blockchain = 'bsc'\r\n        )\r\n\r\n    {% if is_incremental() %}\r\n    AND _inserted_timestamp >= (\r\n        SELECT\r\n            MAX(\r\n                _inserted_timestamp\r\n            )\r\n        FROM\r\n            {{ this }}\r\n    )\r\n    {% endif %}\r\n), \r\nbase_legacy_labels AS (\r\n    SELECT\r\n        DISTINCT \r\n            system_created_at, \r\n            insert_date, \r\n            address, \r\n            label_type as l1_label,\r\n            label_subtype as l2_label,\r\n            address_name,\r\n            project_name\r\n    FROM\r\n        {{ source(\r\n            'crosschain_core',\r\n            'address_labels'\r\n        ) }}\r\n    WHERE\r\n        blockchain = 'bsc'\r\n), \r\nbase_transacts AS (\r\n    SELECT\r\n        b.system_created_at, \r\n        b.insert_date, \r\n        A.tx_hash,\r\n        A.block_timestamp,\r\n        A.from_address,\r\n        A.to_address,\r\n        A.identifier,\r\n        b.l1_label,\r\n        b.l2_label,\r\n        b.address_name,\r\n        b.project_name, \r\n        A._inserted_timestamp\r\n    FROM\r\n       base_labels A\r\nINNER JOIN base_legacy_labels b\r\nON A.from_address = b.address\r\nWHERE\r\n    b.l1_label != 'flotsam'\r\n),\r\nbase_logs AS (\r\n    SELECT\r\n        DISTINCT tx_hash,\r\n        contract_name,\r\n        event_name, \r\n        _inserted_timestamp\r\n    FROM\r\n        {{ source(\r\n            'bsc_silver',\r\n            'logs'\r\n        ) }}\r\n    WHERE\r\n        tx_hash IN (\r\n            SELECT\r\n                DISTINCT tx_hash\r\n            FROM\r\n                base_transacts\r\n        )\r\n    AND (\r\n        event_name IN (\r\n            'NewOracle',\r\n            'NewSwapPool',\r\n            'PairCreated',\r\n            'LogNewWallet',\r\n            'LogUserAdded'\r\n        )\r\n        OR event_name ILIKE '%pool%'\r\n        OR event_name ILIKE '%create%'\r\n    )\r\n    AND event_name != 'SetTokenCreated'\r\n    AND event_name != 'PoolUpdate'\r\n    AND contract_name IS NOT NULL\r\n    AND event_name IS NOT NULL\r\n\r\n    {% if is_incremental() %}\r\n    AND _inserted_timestamp >= (\r\n        SELECT\r\n            MAX(\r\n                _inserted_timestamp\r\n            )\r\n        FROM\r\n            {{ this }}\r\n    )\r\n    {% endif %}\r\n), \r\nfinal_base AS (\r\n    SELECT\r\n        A.system_created_at, \r\n        A.insert_date, \r\n        A.tx_hash,\r\n        A.block_timestamp,\r\n        A.from_address,\r\n        A.to_address,\r\n        A.identifier,\r\n        A.l1_label,\r\n        A.l2_label,\r\n        CASE\r\n            WHEN C.event_name IN (\r\n                'PairCreated',\r\n                'NewSwapPool'\r\n            ) THEN 'pool'\r\n            WHEN C.event_name ILIKE '%pool%'\r\n            AND C.event_name ILIKE '%create%' THEN 'pool'\r\n            WHEN C.event_name IN ('LOG_NEW_POOL') THEN 'pool'\r\n            WHEN C.event_name IN (\r\n                'LogNewWallet',\r\n                'LogUserAdded'\r\n            ) THEN 'deposit_wallet'\r\n            WHEN C.event_name IN ('NewOracle') THEN 'oracle'\r\n            WHEN A.l1_label = 'dapp'\r\n            AND A.l2_label = 'governance' THEN 'governance'\r\n            ELSE 'general_contract'\r\n        END AS l2_label_fixed,\r\n        A.address_name,\r\n        CASE\r\n            WHEN C.event_name IN ('PairCreated') THEN CONCAT(\r\n                A.project_name,\r\n                ': pair'\r\n            )\r\n            WHEN C.event_name IN ('NewSwapPool') THEN CONCAT(\r\n                A.project_name,\r\n                ': pool'\r\n            )\r\n            WHEN C.event_name ILIKE '%pool%'\r\n            AND C.event_name ILIKE '%create%' THEN CONCAT(\r\n                A.project_name,\r\n                ': pool'\r\n            )\r\n            WHEN A.l1_label = 'cex'\r\n            AND C.event_name IN (\r\n                'LogNewWallet',\r\n                'LogUserAdded'\r\n            ) THEN CONCAT(\r\n                A.project_name,\r\n                ': deposit wallet'\r\n            )\r\n            WHEN C.event_name IN ('NewOracle') THEN CONCAT(\r\n                A.project_name,\r\n                ': oracle'\r\n            )\r\n            WHEN C.event_name IN ('LOG_NEW_POOL') THEN CONCAT(\r\n                A.project_name,\r\n                ': pool'\r\n            )\r\n            WHEN A.address_name = ' registry'\r\n            AND A.project_name = 'opensea' THEN 'opensea: proxy registry'\r\n            ELSE CONCAT(\r\n                A.project_name,\r\n                ': general contract'\r\n            )\r\n        END AS address_name_fixed,\r\n        A.project_name,\r\n        C.contract_name,\r\n        C.event_name, \r\n        A._inserted_timestamp\r\n    FROM\r\n        base_transacts A\r\n        LEFT JOIN base_logs C\r\n        ON A.tx_hash = C.tx_hash\r\n)\r\nSELECT\r\n    DISTINCT \r\n    system_created_at, \r\n    insert_date, \r\n    'bsc' AS blockchain,\r\n    to_address AS address,\r\n    'flipside' AS creator,\r\n    l1_label,\r\n    l2_label_fixed AS l2_label,\r\n    address_name_fixed AS address_name,\r\n    project_name, \r\n    _inserted_timestamp\r\nFROM\r\n    final_base qualify(ROW_NUMBER() over(PARTITION BY address\r\nORDER BY\r\n    l2_label_fixed DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.bsc_silver.traces", "source.crosschain_models.crosschain_core.address_labels", "source.crosschain_models.crosschain_core.address_labels", "source.crosschain_models.bsc_silver.logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["snowflake", "crosschain", "labels"], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "silver_crosschain__labels_contracts_bsc"], "unique_id": "model.crosschain_models.silver_crosschain__labels_contracts_bsc", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.sql", "name": "silver_crosschain__labels_contracts_bsc", "alias": "labels_contracts_bsc", "checksum": {"name": "sha256", "checksum": "ef9760ad1a1509095f3281610abddfe2317496fc361800f89f64f98a2e0d6ad8"}, "tags": ["snowflake", "crosschain", "labels"], "refs": [], "sources": [["bsc_silver", "traces"], ["crosschain_core", "address_labels"], ["crosschain_core", "address_labels"], ["bsc_silver", "logs"]], "metrics": [], "description": "", "columns": {"BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "Address that the label is for. This is the field that should be used to join other tables with labels.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR": {"name": "CREATOR", "description": "The name of the creator of the label", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L1_LABEL": {"name": "L1_LABEL", "description": "A high-level category describing the addresses main function or ownership", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L2_LABEL": {"name": "L2_LABEL", "description": "A sub-category nested within label type providing further detail", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS_NAME": {"name": "ADDRESS_NAME", "description": "Name of the address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROJECT_NAME": {"name": "PROJECT_NAME", "description": "Name of the controlling entity of the address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "delete+insert", "tags": ["snowflake", "crosschain", "labels"]}, "created_at": 1666821806.8749416, "compiled_sql": "\n\nWITH\n\n\nmax_date AS (\n\n    SELECT\n        MAX(\n            _inserted_timestamp\n        ) _inserted_timestamp\n    FROM\n        CROSSCHAIN_DEV.silver_crosschain.labels_contracts_bsc\n),\n \n\nbase_labels AS (\n    SELECT\n        tx_hash, \n        block_number, \n        block_timestamp, \n        tx_status, \n        from_address, \n        to_address,  \n        type, \n        identifier, \n        _inserted_timestamp\n    FROM\n        bsc.silver.traces\n    WHERE\n        type in ('CREATE', 'CREATE2')\n        AND tx_status = 'SUCCESS'\n        AND to_address IS NOT NULL\n        AND to_address NOT IN (\n            SELECT\n                DISTINCT address\n            FROM\n                crosschain.core.address_labels\n            WHERE\n                blockchain = 'bsc'\n        )\n\n    \n    AND _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            CROSSCHAIN_DEV.silver_crosschain.labels_contracts_bsc\n    )\n    \n), \nbase_legacy_labels AS (\n    SELECT\n        DISTINCT \n            system_created_at, \n            insert_date, \n            address, \n            label_type as l1_label,\n            label_subtype as l2_label,\n            address_name,\n            project_name\n    FROM\n        crosschain.core.address_labels\n    WHERE\n        blockchain = 'bsc'\n), \nbase_transacts AS (\n    SELECT\n        b.system_created_at, \n        b.insert_date, \n        A.tx_hash,\n        A.block_timestamp,\n        A.from_address,\n        A.to_address,\n        A.identifier,\n        b.l1_label,\n        b.l2_label,\n        b.address_name,\n        b.project_name, \n        A._inserted_timestamp\n    FROM\n       base_labels A\nINNER JOIN base_legacy_labels b\nON A.from_address = b.address\nWHERE\n    b.l1_label != 'flotsam'\n),\nbase_logs AS (\n    SELECT\n        DISTINCT tx_hash,\n        contract_name,\n        event_name, \n        _inserted_timestamp\n    FROM\n        bsc.silver.logs\n    WHERE\n        tx_hash IN (\n            SELECT\n                DISTINCT tx_hash\n            FROM\n                base_transacts\n        )\n    AND (\n        event_name IN (\n            'NewOracle',\n            'NewSwapPool',\n            'PairCreated',\n            'LogNewWallet',\n            'LogUserAdded'\n        )\n        OR event_name ILIKE '%pool%'\n        OR event_name ILIKE '%create%'\n    )\n    AND event_name != 'SetTokenCreated'\n    AND event_name != 'PoolUpdate'\n    AND contract_name IS NOT NULL\n    AND event_name IS NOT NULL\n\n    \n    AND _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            CROSSCHAIN_DEV.silver_crosschain.labels_contracts_bsc\n    )\n    \n), \nfinal_base AS (\n    SELECT\n        A.system_created_at, \n        A.insert_date, \n        A.tx_hash,\n        A.block_timestamp,\n        A.from_address,\n        A.to_address,\n        A.identifier,\n        A.l1_label,\n        A.l2_label,\n        CASE\n            WHEN C.event_name IN (\n                'PairCreated',\n                'NewSwapPool'\n            ) THEN 'pool'\n            WHEN C.event_name ILIKE '%pool%'\n            AND C.event_name ILIKE '%create%' THEN 'pool'\n            WHEN C.event_name IN ('LOG_NEW_POOL') THEN 'pool'\n            WHEN C.event_name IN (\n                'LogNewWallet',\n                'LogUserAdded'\n            ) THEN 'deposit_wallet'\n            WHEN C.event_name IN ('NewOracle') THEN 'oracle'\n            WHEN A.l1_label = 'dapp'\n            AND A.l2_label = 'governance' THEN 'governance'\n            ELSE 'general_contract'\n        END AS l2_label_fixed,\n        A.address_name,\n        CASE\n            WHEN C.event_name IN ('PairCreated') THEN CONCAT(\n                A.project_name,\n                ': pair'\n            )\n            WHEN C.event_name IN ('NewSwapPool') THEN CONCAT(\n                A.project_name,\n                ': pool'\n            )\n            WHEN C.event_name ILIKE '%pool%'\n            AND C.event_name ILIKE '%create%' THEN CONCAT(\n                A.project_name,\n                ': pool'\n            )\n            WHEN A.l1_label = 'cex'\n            AND C.event_name IN (\n                'LogNewWallet',\n                'LogUserAdded'\n            ) THEN CONCAT(\n                A.project_name,\n                ': deposit wallet'\n            )\n            WHEN C.event_name IN ('NewOracle') THEN CONCAT(\n                A.project_name,\n                ': oracle'\n            )\n            WHEN C.event_name IN ('LOG_NEW_POOL') THEN CONCAT(\n                A.project_name,\n                ': pool'\n            )\n            WHEN A.address_name = ' registry'\n            AND A.project_name = 'opensea' THEN 'opensea: proxy registry'\n            ELSE CONCAT(\n                A.project_name,\n                ': general contract'\n            )\n        END AS address_name_fixed,\n        A.project_name,\n        C.contract_name,\n        C.event_name, \n        A._inserted_timestamp\n    FROM\n        base_transacts A\n        LEFT JOIN base_logs C\n        ON A.tx_hash = C.tx_hash\n)\nSELECT\n    DISTINCT \n    system_created_at, \n    insert_date, \n    'bsc' AS blockchain,\n    to_address AS address,\n    'flipside' AS creator,\n    l1_label,\n    l2_label_fixed AS l2_label,\n    address_name_fixed AS address_name,\n    project_name, \n    _inserted_timestamp\nFROM\n    final_base qualify(ROW_NUMBER() over(PARTITION BY address\nORDER BY\n    l2_label_fixed DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver_crosschain.labels_contracts_bsc"}, "model.crosschain_models.silver_crosschain__snowflake_Osmosis_satellite": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    incremental_strategy = 'delete+insert',\r\n) }}\r\n\r\nWITH distributor_cex AS (\r\n    -- THIS STATEMENT FINDS KNOWN CEX LABELS WITHIN THE BRONZE ADDRESS LABELS TABLE\r\n\r\n    SELECT\r\n        system_created_at,\r\n        insert_date,\r\n        blockchain,\r\n        address,\r\n        creator,\r\n        l1_label,\r\n        l2_label,\r\n        address_name,\r\n        project_name\r\n    FROM\r\n        {{ ref('silver_crosschain__address_labels') }}\r\n    WHERE\r\n        blockchain = 'osmosis'\r\n        AND l1_label = 'cex'\r\n        AND l2_label = 'hot_wallet'\r\n),\r\npossible_sats AS (\r\n    -- THIS STATEMENT LOCATES POTENTIAL SATELLITE WALLETS BASED ON DEPOSIT BEHAVIOR\r\n    SELECT\r\n        DISTINCT *\r\n    FROM\r\n        (\r\n            SELECT\r\n                DISTINCT dc.system_created_at,\r\n                dc.insert_date,\r\n                dc.blockchain,\r\n                xfer.sender AS address,\r\n                dc.creator,\r\n                dc.address_name,\r\n                dc.project_name,\r\n                dc.l1_label,\r\n                'deposit_wallet' AS l2_label,\r\n                COUNT(\r\n                    DISTINCT project_name\r\n                ) over(\r\n                    PARTITION BY dc.blockchain,\r\n                    xfer.sender\r\n                ) AS project_count -- how many projects has each from address sent to\r\n            FROM\r\n                {{ source(\r\n                    'osmosis_core',\r\n                    'fact_transfers'\r\n                ) }}\r\n                xfer\r\n                JOIN distributor_cex dc\r\n                ON dc.address = xfer.receiver\r\n            WHERE\r\n                amount > 0\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\nGROUP BY\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9\r\n)\r\n),\r\nreal_sats AS (\r\n    SELECT\r\n        sender,\r\n        COUNT(DISTINCT COALESCE(project_name, 'blunts')) AS project_count\r\n    FROM\r\n        {{ source(\r\n            'osmosis_core',\r\n            'fact_transfers'\r\n        ) }}\r\n        xfer\r\n        LEFT OUTER JOIN distributor_cex dc\r\n        ON dc.address = xfer.receiver\r\n    WHERE\r\n        amount > 0\r\n        AND sender IN (\r\n            SELECT\r\n                address\r\n            FROM\r\n                possible_sats\r\n        )\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\nGROUP BY\r\n    sender\r\n),\r\nexclusive_sats AS (\r\n    SELECT\r\n        DISTINCT sender AS address\r\n    FROM\r\n        real_sats\r\n    WHERE\r\n        project_count = 1\r\n    GROUP BY\r\n        1\r\n),\r\nfinal_base AS(\r\n    SELECT\r\n        DISTINCT CURRENT_TIMESTAMP AS system_created_at,\r\n        CURRENT_TIMESTAMP AS insert_date,\r\n        blockchain,\r\n        e.address,\r\n        creator,\r\n        l1_label,\r\n        l2_label,\r\n        project_name,\r\n        CONCAT(\r\n            project_name,\r\n            ' deposit_wallet'\r\n        ) AS address_name\r\n    FROM\r\n        exclusive_sats e\r\n        JOIN possible_sats p\r\n        ON e.address = p.address\r\n)\r\nSELECT\r\n    DISTINCT system_created_at,\r\n    insert_date,\r\n    blockchain,\r\n    address,\r\n    creator,\r\n    l1_label,\r\n    l2_label,\r\n    address_name,\r\n    project_name\r\nFROM\r\n    final_base\r\nWHERE\r\n    address NOT IN (\r\n        SELECT\r\n            DISTINCT address\r\n        FROM\r\n           {{ ref('silver_crosschain__address_labels') }}\r\n        WHERE\r\n            blockchain = 'osmosis'\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.osmosis_core.fact_transfers", "source.crosschain_models.osmosis_core.fact_transfers", "model.crosschain_models.silver_crosschain__address_labels", "model.crosschain_models.silver_crosschain__address_labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "silver_crosschain__snowflake_Osmosis_satellite"], "unique_id": "model.crosschain_models.silver_crosschain__snowflake_Osmosis_satellite", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Osmosis_satellite.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Osmosis_satellite.sql", "name": "silver_crosschain__snowflake_Osmosis_satellite", "alias": "snowflake_Osmosis_satellite", "checksum": {"name": "sha256", "checksum": "0d6ce2e54abb8e742b28eb2fa319b6c76dd2db2911bfb98a4623056888106293"}, "tags": [], "refs": [["silver_crosschain__address_labels"], ["silver_crosschain__address_labels"]], "sources": [["osmosis_core", "fact_transfers"], ["osmosis_core", "fact_transfers"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Osmosis_satellite.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Osmosis_satellite.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "delete+insert"}, "created_at": 1666821807.5087519, "compiled_sql": "\n\nWITH distributor_cex AS (\n    -- THIS STATEMENT FINDS KNOWN CEX LABELS WITHIN THE BRONZE ADDRESS LABELS TABLE\n\n    SELECT\n        system_created_at,\n        insert_date,\n        blockchain,\n        address,\n        creator,\n        l1_label,\n        l2_label,\n        address_name,\n        project_name\n    FROM\n        CROSSCHAIN_DEV.silver_crosschain.address_labels\n    WHERE\n        blockchain = 'osmosis'\n        AND l1_label = 'cex'\n        AND l2_label = 'hot_wallet'\n),\npossible_sats AS (\n    -- THIS STATEMENT LOCATES POTENTIAL SATELLITE WALLETS BASED ON DEPOSIT BEHAVIOR\n    SELECT\n        DISTINCT *\n    FROM\n        (\n            SELECT\n                DISTINCT dc.system_created_at,\n                dc.insert_date,\n                dc.blockchain,\n                xfer.sender AS address,\n                dc.creator,\n                dc.address_name,\n                dc.project_name,\n                dc.l1_label,\n                'deposit_wallet' AS l2_label,\n                COUNT(\n                    DISTINCT project_name\n                ) over(\n                    PARTITION BY dc.blockchain,\n                    xfer.sender\n                ) AS project_count -- how many projects has each from address sent to\n            FROM\n                osmosis.core.fact_transfers\n                xfer\n                JOIN distributor_cex dc\n                ON dc.address = xfer.receiver\n            WHERE\n                amount > 0\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\nGROUP BY\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9\n)\n),\nreal_sats AS (\n    SELECT\n        sender,\n        COUNT(DISTINCT COALESCE(project_name, 'blunts')) AS project_count\n    FROM\n        osmosis.core.fact_transfers\n        xfer\n        LEFT OUTER JOIN distributor_cex dc\n        ON dc.address = xfer.receiver\n    WHERE\n        amount > 0\n        AND sender IN (\n            SELECT\n                address\n            FROM\n                possible_sats\n        )\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\nGROUP BY\n    sender\n),\nexclusive_sats AS (\n    SELECT\n        DISTINCT sender AS address\n    FROM\n        real_sats\n    WHERE\n        project_count = 1\n    GROUP BY\n        1\n),\nfinal_base AS(\n    SELECT\n        DISTINCT CURRENT_TIMESTAMP AS system_created_at,\n        CURRENT_TIMESTAMP AS insert_date,\n        blockchain,\n        e.address,\n        creator,\n        l1_label,\n        l2_label,\n        project_name,\n        CONCAT(\n            project_name,\n            ' deposit_wallet'\n        ) AS address_name\n    FROM\n        exclusive_sats e\n        JOIN possible_sats p\n        ON e.address = p.address\n)\nSELECT\n    DISTINCT system_created_at,\n    insert_date,\n    blockchain,\n    address,\n    creator,\n    l1_label,\n    l2_label,\n    address_name,\n    project_name\nFROM\n    final_base\nWHERE\n    address NOT IN (\n        SELECT\n            DISTINCT address\n        FROM\n           CROSSCHAIN_DEV.silver_crosschain.address_labels\n        WHERE\n            blockchain = 'osmosis'\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver_crosschain.snowflake_Osmosis_satellite"}, "model.crosschain_models.silver_crosschain__snowflake_BSC_satellites": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    incremental_strategy = 'delete+insert',\r\n) }}\r\n\r\nWITH distributor_cex AS (\r\n    -- THIS STATEMENT FINDS KNOWN CEX LABELS WITHIN THE BRONZE ADDRESS LABELS TABLE\r\n\r\n    SELECT\r\n        system_created_at,\r\n        insert_date,\r\n        blockchain,\r\n        address,\r\n        creator,\r\n        l1_label,\r\n        l2_label,\r\n        address_name,\r\n        project_name\r\n    FROM\r\n        {{ ref('silver_crosschain__address_labels') }}\r\n    WHERE\r\n        blockchain = 'bsc'\r\n        AND l1_label = 'cex'\r\n        AND l2_label = 'hot_wallet'\r\n),\r\npossible_sats AS (\r\n    -- THIS STATEMENT LOCATES POTENTIAL SATELLITE WALLETS BASED ON DEPOSIT BEHAVIOR\r\n    SELECT\r\n        DISTINCT *\r\n    FROM\r\n        (\r\n            SELECT\r\n                DISTINCT dc.system_created_at,\r\n                dc.insert_date,\r\n                dc.blockchain,\r\n                xfer.from_address AS address,\r\n                dc.creator,\r\n                dc.address_name,\r\n                dc.project_name,\r\n                dc.l1_label,\r\n                'deposit_wallet' AS l2_label,\r\n                COUNT(\r\n                    DISTINCT project_name\r\n                ) over(\r\n                    PARTITION BY dc.blockchain,\r\n                    xfer.from_address\r\n                ) AS project_count -- how many projects has each from address sent to\r\n            FROM\r\n                {{ source(\r\n                    'bsc_core',\r\n                    'fact_token_transfers'\r\n                ) }}\r\n                xfer\r\n                JOIN distributor_cex dc\r\n                ON dc.address = xfer.to_address\r\n            WHERE\r\n                raw_amount > 0\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\nGROUP BY\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9\r\nUNION\r\nSELECT\r\n    DISTINCT dc.system_created_at,\r\n    dc.insert_date,\r\n    dc.blockchain,\r\n    tr.from_address AS address,\r\n    dc.creator,\r\n    dc.address_name,\r\n    dc.project_name,\r\n    dc.l1_label,\r\n    'deposit_wallet' AS l2_label,\r\n    COUNT(\r\n        DISTINCT project_name\r\n    ) over(\r\n        PARTITION BY dc.blockchain,\r\n        tr.from_address\r\n    ) AS project_count\r\nFROM\r\n    {{ source(\r\n        'bsc_core',\r\n        'fact_traces'\r\n    ) }}\r\n    tr\r\n    JOIN distributor_cex dc\r\n    ON dc.address = tr.to_address\r\nWHERE\r\n    tx_status = 'SUCCESS'\r\n    AND bnb_value > 0\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\nGROUP BY\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9\r\n)\r\n),\r\nreal_sats AS (\r\n    SELECT\r\n        from_address,\r\n        COALESCE(project_name, 'blunts') AS project_names\r\n    FROM\r\n        {{ source(\r\n            'bsc_core',\r\n            'fact_token_transfers'\r\n        ) }}\r\n        xfer\r\n        LEFT OUTER JOIN distributor_cex dc\r\n        ON dc.address = xfer.to_address\r\n    WHERE\r\n        from_address IN (\r\n            SELECT\r\n                address\r\n            FROM\r\n                possible_sats\r\n        )\r\n        AND raw_amount > 0\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\nUNION\r\nSELECT\r\n    from_address,\r\n    COALESCE(project_name, 'blunts') AS project_names\r\nFROM\r\n    {{ source(\r\n        'bsc_core',\r\n        'fact_traces'\r\n    ) }}\r\n    tr\r\n    LEFT OUTER JOIN distributor_cex dc\r\n    ON dc.address = tr.to_address\r\nWHERE\r\n    from_address IN (\r\n        SELECT\r\n            address\r\n        FROM\r\n            possible_sats\r\n    )\r\n    AND tx_status = 'SUCCESS'\r\n    AND bnb_value > 0\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\n),\r\nproject_counts as (\r\n    select distinct from_address, \r\n    count(distinct project_names) as project_count\r\n    from real_sats\r\n    group by from_address\r\n),\r\nexclusive_sats AS (\r\n    SELECT\r\n        DISTINCT from_address AS address\r\n    FROM\r\n        project_counts\r\n    WHERE\r\n        project_count = 1\r\n    GROUP BY\r\n        1\r\n),\r\nfinal_base AS(\r\n    SELECT\r\n        DISTINCT CURRENT_TIMESTAMP AS system_created_at,\r\n        CURRENT_TIMESTAMP AS insert_date,\r\n        blockchain,\r\n        e.address,\r\n        creator,\r\n        l1_label,\r\n        l2_label,\r\n        project_name,\r\n        CONCAT(\r\n            project_name,\r\n            ' deposit_wallet'\r\n        ) AS address_name\r\n    FROM\r\n        exclusive_sats e\r\n        JOIN possible_sats p\r\n        ON e.address = p.address\r\n)\r\nSELECT\r\n    DISTINCT system_created_at,\r\n    insert_date,\r\n    blockchain,\r\n    address,\r\n    creator,\r\n    l1_label,\r\n    l2_label,\r\n    address_name,\r\n    project_name\r\nFROM\r\n    final_base\r\nWHERE\r\n    address NOT IN (\r\n        SELECT\r\n            DISTINCT address\r\n        FROM\r\n            {{ ref('silver_crosschain__address_labels') }}\r\n        WHERE\r\n            blockchain = 'bsc'\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.bsc_core.fact_token_transfers", "source.crosschain_models.bsc_core.fact_traces", "source.crosschain_models.bsc_core.fact_token_transfers", "source.crosschain_models.bsc_core.fact_traces", "model.crosschain_models.silver_crosschain__address_labels", "model.crosschain_models.silver_crosschain__address_labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "silver_crosschain__snowflake_BSC_satellites"], "unique_id": "model.crosschain_models.silver_crosschain__snowflake_BSC_satellites", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_BSC_satellites.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_BSC_satellites.sql", "name": "silver_crosschain__snowflake_BSC_satellites", "alias": "snowflake_BSC_satellites", "checksum": {"name": "sha256", "checksum": "edef49d19f2bcfcdbb94296fbd08a5b5da79e5df7334e14235682f65b9b08af0"}, "tags": [], "refs": [["silver_crosschain__address_labels"], ["silver_crosschain__address_labels"]], "sources": [["bsc_core", "fact_token_transfers"], ["bsc_core", "fact_traces"], ["bsc_core", "fact_token_transfers"], ["bsc_core", "fact_traces"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_BSC_satellites.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_BSC_satellites.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "delete+insert"}, "created_at": 1666821807.3099518, "compiled_sql": "\n\nWITH distributor_cex AS (\n    -- THIS STATEMENT FINDS KNOWN CEX LABELS WITHIN THE BRONZE ADDRESS LABELS TABLE\n\n    SELECT\n        system_created_at,\n        insert_date,\n        blockchain,\n        address,\n        creator,\n        l1_label,\n        l2_label,\n        address_name,\n        project_name\n    FROM\n        CROSSCHAIN_DEV.silver_crosschain.address_labels\n    WHERE\n        blockchain = 'bsc'\n        AND l1_label = 'cex'\n        AND l2_label = 'hot_wallet'\n),\npossible_sats AS (\n    -- THIS STATEMENT LOCATES POTENTIAL SATELLITE WALLETS BASED ON DEPOSIT BEHAVIOR\n    SELECT\n        DISTINCT *\n    FROM\n        (\n            SELECT\n                DISTINCT dc.system_created_at,\n                dc.insert_date,\n                dc.blockchain,\n                xfer.from_address AS address,\n                dc.creator,\n                dc.address_name,\n                dc.project_name,\n                dc.l1_label,\n                'deposit_wallet' AS l2_label,\n                COUNT(\n                    DISTINCT project_name\n                ) over(\n                    PARTITION BY dc.blockchain,\n                    xfer.from_address\n                ) AS project_count -- how many projects has each from address sent to\n            FROM\n                bsc.core.fact_token_transfers\n                xfer\n                JOIN distributor_cex dc\n                ON dc.address = xfer.to_address\n            WHERE\n                raw_amount > 0\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\nGROUP BY\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9\nUNION\nSELECT\n    DISTINCT dc.system_created_at,\n    dc.insert_date,\n    dc.blockchain,\n    tr.from_address AS address,\n    dc.creator,\n    dc.address_name,\n    dc.project_name,\n    dc.l1_label,\n    'deposit_wallet' AS l2_label,\n    COUNT(\n        DISTINCT project_name\n    ) over(\n        PARTITION BY dc.blockchain,\n        tr.from_address\n    ) AS project_count\nFROM\n    bsc.core.fact_traces\n    tr\n    JOIN distributor_cex dc\n    ON dc.address = tr.to_address\nWHERE\n    tx_status = 'SUCCESS'\n    AND bnb_value > 0\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\nGROUP BY\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9\n)\n),\nreal_sats AS (\n    SELECT\n        from_address,\n        COALESCE(project_name, 'blunts') AS project_names\n    FROM\n        bsc.core.fact_token_transfers\n        xfer\n        LEFT OUTER JOIN distributor_cex dc\n        ON dc.address = xfer.to_address\n    WHERE\n        from_address IN (\n            SELECT\n                address\n            FROM\n                possible_sats\n        )\n        AND raw_amount > 0\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\nUNION\nSELECT\n    from_address,\n    COALESCE(project_name, 'blunts') AS project_names\nFROM\n    bsc.core.fact_traces\n    tr\n    LEFT OUTER JOIN distributor_cex dc\n    ON dc.address = tr.to_address\nWHERE\n    from_address IN (\n        SELECT\n            address\n        FROM\n            possible_sats\n    )\n    AND tx_status = 'SUCCESS'\n    AND bnb_value > 0\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\n),\nproject_counts as (\n    select distinct from_address, \n    count(distinct project_names) as project_count\n    from real_sats\n    group by from_address\n),\nexclusive_sats AS (\n    SELECT\n        DISTINCT from_address AS address\n    FROM\n        project_counts\n    WHERE\n        project_count = 1\n    GROUP BY\n        1\n),\nfinal_base AS(\n    SELECT\n        DISTINCT CURRENT_TIMESTAMP AS system_created_at,\n        CURRENT_TIMESTAMP AS insert_date,\n        blockchain,\n        e.address,\n        creator,\n        l1_label,\n        l2_label,\n        project_name,\n        CONCAT(\n            project_name,\n            ' deposit_wallet'\n        ) AS address_name\n    FROM\n        exclusive_sats e\n        JOIN possible_sats p\n        ON e.address = p.address\n)\nSELECT\n    DISTINCT system_created_at,\n    insert_date,\n    blockchain,\n    address,\n    creator,\n    l1_label,\n    l2_label,\n    address_name,\n    project_name\nFROM\n    final_base\nWHERE\n    address NOT IN (\n        SELECT\n            DISTINCT address\n        FROM\n            CROSSCHAIN_DEV.silver_crosschain.address_labels\n        WHERE\n            blockchain = 'bsc'\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver_crosschain.snowflake_BSC_satellites"}, "model.crosschain_models.silver__tags_contract_address_avalanche": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    incremental_strategy = 'delete+insert',\r\n) }}\r\n\r\nSELECT\r\n    DISTINCT 'avalanche' AS blockchain,\r\n    'flipside' AS creator,\r\n    to_address :: STRING AS address,\r\n    'contract address' AS tag_name,\r\n    'contract' AS tag_type,\r\n    block_number,\r\n    DATE_TRUNC(\r\n        'day',\r\n        block_timestamp\r\n    ) AS start_date,\r\n    NULL AS end_date,\r\n    _inserted_timestamp,\r\n    CURRENT_TIMESTAMP AS tag_created_at\r\nFROM\r\n    {{ source(\r\n        'avalanche_silver',\r\n        'traces'\r\n    ) }}\r\nWHERE\r\n    TYPE in ('CREATE', 'CREATE2')\r\n    AND tx_status = 'SUCCESS'\r\n    AND to_address IS NOT NULL\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp > (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n\r\nqualify(ROW_NUMBER() over(PARTITION BY address\r\nORDER BY\r\n    block_number DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.avalanche_silver.traces"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "tags", "Avalanche", "silver__tags_contract_address_avalanche"], "unique_id": "model.crosschain_models.silver__tags_contract_address_avalanche", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\tags\\Avalanche\\silver__tags_contract_address_avalanche.sql", "original_file_path": "models\\silver\\tags\\Avalanche\\silver__tags_contract_address_avalanche.sql", "name": "silver__tags_contract_address_avalanche", "alias": "tags_contract_address_avalanche", "checksum": {"name": "sha256", "checksum": "134826497f223489bdb8cee4a54237370fbbcbd69c77cf058d720e0e54b253ab"}, "tags": [], "refs": [], "sources": [["avalanche_silver", "traces"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\tags\\Avalanche\\silver__tags_contract_address_avalanche.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Avalanche\\silver__tags_contract_address_avalanche.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "delete+insert"}, "created_at": 1666821806.9972117, "compiled_sql": "\n\nSELECT\n    DISTINCT 'avalanche' AS blockchain,\n    'flipside' AS creator,\n    to_address :: STRING AS address,\n    'contract address' AS tag_name,\n    'contract' AS tag_type,\n    block_number,\n    DATE_TRUNC(\n        'day',\n        block_timestamp\n    ) AS start_date,\n    NULL AS end_date,\n    _inserted_timestamp,\n    CURRENT_TIMESTAMP AS tag_created_at\nFROM\n    avalanche.silver.traces\nWHERE\n    TYPE in ('CREATE', 'CREATE2')\n    AND tx_status = 'SUCCESS'\n    AND to_address IS NOT NULL\n\n\nAND _inserted_timestamp > (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        CROSSCHAIN_DEV.silver.tags_contract_address_avalanche\n)\n\n\nqualify(ROW_NUMBER() over(PARTITION BY address\nORDER BY\n    block_number DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.tags_contract_address_avalanche"}, "model.crosschain_models.silver_crosschain__labels_contracts_optimism": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    incremental_strategy = 'delete+insert',\r\n    tags = ['snowflake', 'crosschain', 'labels']\r\n) }}\r\n\r\nWITH\r\n\r\n{% if is_incremental() %}\r\nmax_date AS (\r\n\r\n    SELECT\r\n        MAX(\r\n            _inserted_timestamp\r\n        ) _inserted_timestamp\r\n    FROM\r\n        {{ this }}\r\n),\r\n{% endif %} \r\n\r\nbase_labels AS (\r\n    SELECT\r\n        tx_hash, \r\n        block_number, \r\n        block_timestamp, \r\n        tx_status, \r\n        from_address, \r\n        to_address,  \r\n        type, \r\n        identifier, \r\n        _inserted_timestamp\r\n    FROM\r\n        {{ source(\r\n            'optimism_silver',\r\n            'traces'\r\n        ) }}\r\n    WHERE\r\n        type in ('CREATE', 'CREATE2')\r\n        AND tx_status = 'SUCCESS'\r\n        AND to_address IS NOT NULL\r\n        AND to_address NOT IN (\r\n            SELECT\r\n                DISTINCT address\r\n            FROM\r\n                {{ source(\r\n                    'crosschain_core',\r\n                    'address_labels'\r\n                ) }}\r\n            WHERE\r\n                blockchain = 'optimism'\r\n        )\r\n\r\n    {% if is_incremental() %}\r\n    AND _inserted_timestamp >= (\r\n        SELECT\r\n            MAX(\r\n                _inserted_timestamp\r\n            )\r\n        FROM\r\n            {{ this }}\r\n    )\r\n    {% endif %}\r\n), \r\nbase_legacy_labels AS (\r\n    SELECT\r\n        DISTINCT \r\n            system_created_at, \r\n            insert_date, \r\n            address, \r\n            label_type as l1_label,\r\n            label_subtype as l2_label,\r\n            address_name,\r\n            project_name\r\n    FROM\r\n        {{ source(\r\n            'crosschain_core',\r\n            'address_labels'\r\n        ) }}\r\n    WHERE\r\n        blockchain = 'optimism'\r\n), \r\nbase_transacts AS (\r\n    SELECT\r\n        b.system_created_at, \r\n        b.insert_date, \r\n        A.tx_hash,\r\n        A.block_timestamp,\r\n        A.from_address,\r\n        A.to_address,\r\n        A.identifier,\r\n        b.l1_label,\r\n        b.l2_label,\r\n        b.address_name,\r\n        b.project_name, \r\n        A._inserted_timestamp\r\n    FROM\r\n       base_labels A\r\nINNER JOIN base_legacy_labels b\r\nON A.from_address = b.address\r\nWHERE\r\n    b.l1_label != 'flotsam'\r\n),\r\nbase_logs AS (\r\n    SELECT\r\n        DISTINCT tx_hash,\r\n        contract_name,\r\n        event_name, \r\n        _inserted_timestamp\r\n    FROM\r\n        {{ source(\r\n            'optimism_silver',\r\n            'logs'\r\n        ) }}\r\n    WHERE\r\n        tx_hash IN (\r\n            SELECT\r\n                DISTINCT tx_hash\r\n            FROM\r\n                base_transacts\r\n        )\r\n    AND (\r\n        event_name IN (\r\n            'NewOracle',\r\n            'NewSwapPool',\r\n            'PairCreated',\r\n            'LogNewWallet',\r\n            'LogUserAdded'\r\n        )\r\n        OR event_name ILIKE '%pool%'\r\n        OR event_name ILIKE '%create%'\r\n    )\r\n    AND event_name != 'SetTokenCreated'\r\n    AND event_name != 'PoolUpdate'\r\n    AND contract_name IS NOT NULL\r\n    AND event_name IS NOT NULL\r\n\r\n    {% if is_incremental() %}\r\n    AND _inserted_timestamp >= (\r\n        SELECT\r\n            MAX(\r\n                _inserted_timestamp\r\n            )\r\n        FROM\r\n            {{ this }}\r\n    )\r\n    {% endif %}\r\n), \r\nfinal_base AS (\r\n    SELECT\r\n        A.system_created_at, \r\n        A.insert_date, \r\n        A.tx_hash,\r\n        A.block_timestamp,\r\n        A.from_address,\r\n        A.to_address,\r\n        A.identifier,\r\n        A.l1_label,\r\n        A.l2_label,\r\n        CASE\r\n            WHEN C.event_name IN (\r\n                'PairCreated',\r\n                'NewSwapPool'\r\n            ) THEN 'pool'\r\n            WHEN C.event_name ILIKE '%pool%'\r\n            AND C.event_name ILIKE '%create%' THEN 'pool'\r\n            WHEN C.event_name IN ('LOG_NEW_POOL') THEN 'pool'\r\n            WHEN C.event_name IN (\r\n                'LogNewWallet',\r\n                'LogUserAdded'\r\n            ) THEN 'deposit_wallet'\r\n            WHEN C.event_name IN ('NewOracle') THEN 'oracle'\r\n            WHEN A.l1_label = 'dapp'\r\n            AND A.l2_label = 'governance' THEN 'governance'\r\n            ELSE 'general_contract'\r\n        END AS l2_label_fixed,\r\n        A.address_name,\r\n        CASE\r\n            WHEN C.event_name IN ('PairCreated') THEN CONCAT(\r\n                A.project_name,\r\n                ': pair'\r\n            )\r\n            WHEN C.event_name IN ('NewSwapPool') THEN CONCAT(\r\n                A.project_name,\r\n                ': pool'\r\n            )\r\n            WHEN C.event_name ILIKE '%pool%'\r\n            AND C.event_name ILIKE '%create%' THEN CONCAT(\r\n                A.project_name,\r\n                ': pool'\r\n            )\r\n            WHEN A.l1_label = 'cex'\r\n            AND C.event_name IN (\r\n                'LogNewWallet',\r\n                'LogUserAdded'\r\n            ) THEN CONCAT(\r\n                A.project_name,\r\n                ': deposit wallet'\r\n            )\r\n            WHEN C.event_name IN ('NewOracle') THEN CONCAT(\r\n                A.project_name,\r\n                ': oracle'\r\n            )\r\n            WHEN C.event_name IN ('LOG_NEW_POOL') THEN CONCAT(\r\n                A.project_name,\r\n                ': pool'\r\n            )\r\n            WHEN A.address_name = ' registry'\r\n            AND A.project_name = 'opensea' THEN 'opensea: proxy registry'\r\n            ELSE CONCAT(\r\n                A.project_name,\r\n                ': general contract'\r\n            )\r\n        END AS address_name_fixed,\r\n        A.project_name,\r\n        C.contract_name,\r\n        C.event_name, \r\n        A._inserted_timestamp\r\n    FROM\r\n        base_transacts A\r\n        LEFT JOIN base_logs C\r\n        ON A.tx_hash = C.tx_hash\r\n)\r\nSELECT\r\n    DISTINCT \r\n    system_created_at, \r\n    insert_date, \r\n    'optimism' AS blockchain,\r\n    to_address AS address,\r\n    'flipside' AS creator,\r\n    l1_label,\r\n    l2_label_fixed AS l2_label,\r\n    address_name_fixed AS address_name,\r\n    project_name, \r\n    _inserted_timestamp\r\nFROM\r\n    final_base qualify(ROW_NUMBER() over(PARTITION BY address\r\nORDER BY\r\n    l2_label_fixed DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.optimism_silver.traces", "source.crosschain_models.crosschain_core.address_labels", "source.crosschain_models.crosschain_core.address_labels", "source.crosschain_models.optimism_silver.logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["snowflake", "crosschain", "labels"], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "silver_crosschain__labels_contracts_optimism"], "unique_id": "model.crosschain_models.silver_crosschain__labels_contracts_optimism", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.sql", "name": "silver_crosschain__labels_contracts_optimism", "alias": "labels_contracts_optimism", "checksum": {"name": "sha256", "checksum": "e0cd38e4a57bd6eec322101b81da0e724e8c6ed63e461c7599ba79295f0d8a34"}, "tags": ["snowflake", "crosschain", "labels"], "refs": [], "sources": [["optimism_silver", "traces"], ["crosschain_core", "address_labels"], ["crosschain_core", "address_labels"], ["optimism_silver", "logs"]], "metrics": [], "description": "", "columns": {"BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "Address that the label is for. This is the field that should be used to join other tables with labels.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR": {"name": "CREATOR", "description": "The name of the creator of the label", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L1_LABEL": {"name": "L1_LABEL", "description": "A high-level category describing the addresses main function or ownership", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L2_LABEL": {"name": "L2_LABEL", "description": "A sub-category nested within label type providing further detail", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS_NAME": {"name": "ADDRESS_NAME", "description": "Name of the address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROJECT_NAME": {"name": "PROJECT_NAME", "description": "Name of the controlling entity of the address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "delete+insert", "tags": ["snowflake", "crosschain", "labels"]}, "created_at": 1666821807.0634868, "compiled_sql": "\n\nWITH\n\n\nmax_date AS (\n\n    SELECT\n        MAX(\n            _inserted_timestamp\n        ) _inserted_timestamp\n    FROM\n        CROSSCHAIN_DEV.silver_crosschain.labels_contracts_optimism\n),\n \n\nbase_labels AS (\n    SELECT\n        tx_hash, \n        block_number, \n        block_timestamp, \n        tx_status, \n        from_address, \n        to_address,  \n        type, \n        identifier, \n        _inserted_timestamp\n    FROM\n        optimism.silver.traces\n    WHERE\n        type in ('CREATE', 'CREATE2')\n        AND tx_status = 'SUCCESS'\n        AND to_address IS NOT NULL\n        AND to_address NOT IN (\n            SELECT\n                DISTINCT address\n            FROM\n                crosschain.core.address_labels\n            WHERE\n                blockchain = 'optimism'\n        )\n\n    \n    AND _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            CROSSCHAIN_DEV.silver_crosschain.labels_contracts_optimism\n    )\n    \n), \nbase_legacy_labels AS (\n    SELECT\n        DISTINCT \n            system_created_at, \n            insert_date, \n            address, \n            label_type as l1_label,\n            label_subtype as l2_label,\n            address_name,\n            project_name\n    FROM\n        crosschain.core.address_labels\n    WHERE\n        blockchain = 'optimism'\n), \nbase_transacts AS (\n    SELECT\n        b.system_created_at, \n        b.insert_date, \n        A.tx_hash,\n        A.block_timestamp,\n        A.from_address,\n        A.to_address,\n        A.identifier,\n        b.l1_label,\n        b.l2_label,\n        b.address_name,\n        b.project_name, \n        A._inserted_timestamp\n    FROM\n       base_labels A\nINNER JOIN base_legacy_labels b\nON A.from_address = b.address\nWHERE\n    b.l1_label != 'flotsam'\n),\nbase_logs AS (\n    SELECT\n        DISTINCT tx_hash,\n        contract_name,\n        event_name, \n        _inserted_timestamp\n    FROM\n        optimism.silver.logs\n    WHERE\n        tx_hash IN (\n            SELECT\n                DISTINCT tx_hash\n            FROM\n                base_transacts\n        )\n    AND (\n        event_name IN (\n            'NewOracle',\n            'NewSwapPool',\n            'PairCreated',\n            'LogNewWallet',\n            'LogUserAdded'\n        )\n        OR event_name ILIKE '%pool%'\n        OR event_name ILIKE '%create%'\n    )\n    AND event_name != 'SetTokenCreated'\n    AND event_name != 'PoolUpdate'\n    AND contract_name IS NOT NULL\n    AND event_name IS NOT NULL\n\n    \n    AND _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            CROSSCHAIN_DEV.silver_crosschain.labels_contracts_optimism\n    )\n    \n), \nfinal_base AS (\n    SELECT\n        A.system_created_at, \n        A.insert_date, \n        A.tx_hash,\n        A.block_timestamp,\n        A.from_address,\n        A.to_address,\n        A.identifier,\n        A.l1_label,\n        A.l2_label,\n        CASE\n            WHEN C.event_name IN (\n                'PairCreated',\n                'NewSwapPool'\n            ) THEN 'pool'\n            WHEN C.event_name ILIKE '%pool%'\n            AND C.event_name ILIKE '%create%' THEN 'pool'\n            WHEN C.event_name IN ('LOG_NEW_POOL') THEN 'pool'\n            WHEN C.event_name IN (\n                'LogNewWallet',\n                'LogUserAdded'\n            ) THEN 'deposit_wallet'\n            WHEN C.event_name IN ('NewOracle') THEN 'oracle'\n            WHEN A.l1_label = 'dapp'\n            AND A.l2_label = 'governance' THEN 'governance'\n            ELSE 'general_contract'\n        END AS l2_label_fixed,\n        A.address_name,\n        CASE\n            WHEN C.event_name IN ('PairCreated') THEN CONCAT(\n                A.project_name,\n                ': pair'\n            )\n            WHEN C.event_name IN ('NewSwapPool') THEN CONCAT(\n                A.project_name,\n                ': pool'\n            )\n            WHEN C.event_name ILIKE '%pool%'\n            AND C.event_name ILIKE '%create%' THEN CONCAT(\n                A.project_name,\n                ': pool'\n            )\n            WHEN A.l1_label = 'cex'\n            AND C.event_name IN (\n                'LogNewWallet',\n                'LogUserAdded'\n            ) THEN CONCAT(\n                A.project_name,\n                ': deposit wallet'\n            )\n            WHEN C.event_name IN ('NewOracle') THEN CONCAT(\n                A.project_name,\n                ': oracle'\n            )\n            WHEN C.event_name IN ('LOG_NEW_POOL') THEN CONCAT(\n                A.project_name,\n                ': pool'\n            )\n            WHEN A.address_name = ' registry'\n            AND A.project_name = 'opensea' THEN 'opensea: proxy registry'\n            ELSE CONCAT(\n                A.project_name,\n                ': general contract'\n            )\n        END AS address_name_fixed,\n        A.project_name,\n        C.contract_name,\n        C.event_name, \n        A._inserted_timestamp\n    FROM\n        base_transacts A\n        LEFT JOIN base_logs C\n        ON A.tx_hash = C.tx_hash\n)\nSELECT\n    DISTINCT \n    system_created_at, \n    insert_date, \n    'optimism' AS blockchain,\n    to_address AS address,\n    'flipside' AS creator,\n    l1_label,\n    l2_label_fixed AS l2_label,\n    address_name_fixed AS address_name,\n    project_name, \n    _inserted_timestamp\nFROM\n    final_base qualify(ROW_NUMBER() over(PARTITION BY address\nORDER BY\n    l2_label_fixed DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver_crosschain.labels_contracts_optimism"}, "model.crosschain_models.silver__tags_nft_rarible_user": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    incremental_strategy = 'merge',\r\n    merge_update_columns = ['creator'],\r\n) }}\r\n\r\nWITH buyers AS (\r\n\r\n    SELECT\r\n        DISTINCT 'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        buyer_address AS address,\r\n        'rarible user' AS tag_name,\r\n        'nft' AS tag_type,\r\n        MIN(\r\n            block_timestamp :: DATE\r\n        ) AS start_date,\r\n        NULL AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at,\r\n        MIN(ingested_at) AS ingested_at\r\n    FROM\r\n        {{ source(\r\n            'ethereum_silver_nft',\r\n            'rarible_sales'\r\n        ) }}\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    ingested_at > (\r\n        SELECT\r\n            MAX(ingested_at)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% endif %}\r\nGROUP BY\r\n    buyer_address\r\n),\r\nsellers AS (\r\n    SELECT\r\n        DISTINCT 'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        seller_address AS address,\r\n        'rarible user' AS tag_name,\r\n        'nft' AS tag_type,\r\n        MIN(\r\n            block_timestamp :: DATE\r\n        ) AS start_date,\r\n        NULL AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at,\r\n        MIN(ingested_at) AS ingested_at\r\n    FROM\r\n        {{ source(\r\n            'ethereum_silver_nft',\r\n            'rarible_sales'\r\n        ) }}\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    ingested_at > (\r\n        SELECT\r\n            MAX(ingested_at)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% endif %}\r\nGROUP BY\r\n    seller_address\r\n),\r\nunion_table AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        buyers\r\n    UNION\r\n    SELECT\r\n        *\r\n    FROM\r\n        sellers\r\n),\r\nfinal_table AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        union_table qualify(ROW_NUMBER() over(PARTITION BY address\r\n    ORDER BY\r\n        start_date ASC)) = 1\r\n)\r\nSELECT\r\n    A.*\r\nFROM\r\n    final_table A", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.ethereum_silver_nft.rarible_sales", "source.crosschain_models.ethereum_silver_nft.rarible_sales"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "merge_update_columns": ["creator"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "silver__tags_nft_rarible_user"], "unique_id": "model.crosschain_models.silver__tags_nft_rarible_user", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\tags\\Ethereum\\silver__tags_nft_rarible_user.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_rarible_user.sql", "name": "silver__tags_nft_rarible_user", "alias": "tags_nft_rarible_user", "checksum": {"name": "sha256", "checksum": "ecbefde8a60873fbb3d94b2fc3db09e64e022e26f34251cac4953dc7a5f338fe"}, "tags": [], "refs": [], "sources": [["ethereum_silver_nft", "rarible_sales"], ["ethereum_silver_nft", "rarible_sales"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\tags\\Ethereum\\silver__tags_nft_rarible_user.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_rarible_user.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "merge", "merge_update_columns": ["creator"]}, "created_at": 1666821807.9824579, "compiled_sql": "\n\nWITH buyers AS (\n\n    SELECT\n        DISTINCT 'ethereum' AS blockchain,\n        'flipside' AS creator,\n        buyer_address AS address,\n        'rarible user' AS tag_name,\n        'nft' AS tag_type,\n        MIN(\n            block_timestamp :: DATE\n        ) AS start_date,\n        NULL AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at,\n        MIN(ingested_at) AS ingested_at\n    FROM\n        ethereum.silver_nft.rarible_sales\n\n\nWHERE\n    ingested_at > (\n        SELECT\n            MAX(ingested_at)\n        FROM\n            CROSSCHAIN_DEV.silver.tags_nft_rarible_user\n    )\n\nGROUP BY\n    buyer_address\n),\nsellers AS (\n    SELECT\n        DISTINCT 'ethereum' AS blockchain,\n        'flipside' AS creator,\n        seller_address AS address,\n        'rarible user' AS tag_name,\n        'nft' AS tag_type,\n        MIN(\n            block_timestamp :: DATE\n        ) AS start_date,\n        NULL AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at,\n        MIN(ingested_at) AS ingested_at\n    FROM\n        ethereum.silver_nft.rarible_sales\n\n\nWHERE\n    ingested_at > (\n        SELECT\n            MAX(ingested_at)\n        FROM\n            CROSSCHAIN_DEV.silver.tags_nft_rarible_user\n    )\n\nGROUP BY\n    seller_address\n),\nunion_table AS (\n    SELECT\n        *\n    FROM\n        buyers\n    UNION\n    SELECT\n        *\n    FROM\n        sellers\n),\nfinal_table AS (\n    SELECT\n        *\n    FROM\n        union_table qualify(ROW_NUMBER() over(PARTITION BY address\n    ORDER BY\n        start_date ASC)) = 1\n)\nSELECT\n    A.*\nFROM\n    final_table A", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.tags_nft_rarible_user"}, "model.crosschain_models.silver__tags_thor_dex_user": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    incremental_strategy = 'merge',\r\n    merge_update_columns = ['creator'],\r\n) }}\r\n\r\nWITH from_addresses AS (\r\n\r\n    SELECT\r\n        DISTINCT CASE\r\n            blockchain\r\n            WHEN 'BNB' THEN 'bsc'\r\n            WHEN 'GAIA' THEN 'cosmos'\r\n            WHEN 'ETH' THEN 'ethereum'\r\n            WHEN 'TERRA' THEN 'terra'\r\n            WHEN 'BCH' THEN 'bitcoin cash'\r\n            WHEN 'THOR' THEN 'thorchain'\r\n            WHEN 'LTC' THEN 'litecoin'\r\n            WHEN 'DOGE' THEN 'dogechain'\r\n            WHEN 'BTC' THEN 'bitcoin'\r\n            else 'error'\r\n        END AS blockchain,\r\n        'flipside' AS creator,\r\n        from_address AS address,\r\n        'thorchain dex user' AS tag_name,\r\n        'dex' AS tag_type,\r\n        MIN(block_id) AS block_id,\r\n        MIN(DATE_TRUNC('day', block_timestamp)) AS start_date,\r\n        NULL AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        {{ source(\r\n            'thorchain',\r\n            'swaps'\r\n        ) }}\r\n\r\nwhere (blockchain not in ('error', 'NULL', 'null', 'Null') or blockchain is not null)\r\n{% if is_incremental() %}\r\nand\r\n    block_id NOT IN (\r\n        SELECT\r\n            DISTINCT block_id\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% endif %}\r\nGROUP BY\r\n    blockchain,\r\n    address\r\n),\r\nto_addresses AS (\r\n    SELECT\r\n        DISTINCT CASE\r\n            WHEN LEFT(\r\n                native_to_address,\r\n                3\r\n            ) = 'bnb' THEN 'bsc'\r\n            WHEN LEFT(\r\n                native_to_address,\r\n                6\r\n            ) = 'cosmos' THEN 'cosmos'\r\n            WHEN LEFT(\r\n                native_to_address,\r\n                2\r\n            ) = '0x' THEN 'ethereum'\r\n            WHEN LEFT(\r\n                native_to_address,\r\n                5\r\n            ) = 'terra' THEN 'terra'\r\n            WHEN LEFT(\r\n                native_to_address,\r\n                1\r\n            ) = 'q' THEN 'bitcoin cash'\r\n            WHEN LEFT(\r\n                native_to_address,\r\n                4\r\n            ) = 'thor' THEN 'thorchain'\r\n            WHEN LEFT(\r\n                native_to_address,\r\n                3\r\n            ) = 'ltc' THEN 'litecoin'\r\n            WHEN LEFT(\r\n                native_to_address,\r\n                1\r\n            ) = 'M' THEN 'litecoin'\r\n            WHEN LEFT(\r\n                native_to_address,\r\n                1\r\n            ) = 'L' THEN 'litecoin'\r\n            WHEN LEFT(\r\n                native_to_address,\r\n                1\r\n            ) = 'D' THEN 'dogechain'\r\n            WHEN LEFT(\r\n                native_to_address,\r\n                2\r\n            ) = 'bc' THEN 'bitcoin'\r\n            WHEN LEFT(\r\n                native_to_address,\r\n                1\r\n            ) = '1' THEN 'bitcoin'\r\n            WHEN LEFT(\r\n                native_to_address,\r\n                1\r\n            ) = '3' THEN 'bitcoin'\r\n            ELSE 'error'\r\n        END AS blockchain,\r\n        'flipside' AS creator,\r\n        native_to_address AS address,\r\n        'thorchain dex user' AS tag_name,\r\n        'dex' AS tag_type,\r\n        MIN(block_id) AS block_id,\r\n        MIN(DATE_TRUNC('day', block_timestamp)) AS start_date,\r\n        NULL AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        {{ source(\r\n            'thorchain',\r\n            'swaps'\r\n        ) }}\r\n    WHERE\r\n        blockchain != 'error'\r\n        AND native_to_address NOT IN (\r\n            SELECT\r\n                DISTINCT address\r\n            FROM\r\n                from_addresses\r\n        )\r\n\r\n{% if is_incremental() %}\r\nAND block_id NOT IN (\r\n    SELECT\r\n        DISTINCT block_id\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\nGROUP BY\r\n    address\r\n),\r\nfinal_table AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        from_addresses\r\n    where blockchain != 'error'\r\n    UNION\r\n    SELECT\r\n        *\r\n    FROM\r\n        to_addresses\r\n    where blockchain != 'error'\r\n)\r\nSELECT\r\n    *\r\nFROM\r\n    final_table", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.thorchain.swaps", "source.crosschain_models.thorchain.swaps"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "merge_update_columns": ["creator"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "tags", "Thorchain", "silver__tags_thor_dex_user"], "unique_id": "model.crosschain_models.silver__tags_thor_dex_user", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\tags\\Thorchain\\silver__tags_thor_dex_user.sql", "original_file_path": "models\\silver\\tags\\Thorchain\\silver__tags_thor_dex_user.sql", "name": "silver__tags_thor_dex_user", "alias": "tags_thor_dex_user", "checksum": {"name": "sha256", "checksum": "ad0c36f275096b7942d98c411389201201e2c33fca360e6482ac39fbb4b127f4"}, "tags": [], "refs": [], "sources": [["thorchain", "swaps"], ["thorchain", "swaps"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\tags\\Thorchain\\silver__tags_thor_dex_user.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Thorchain\\silver__tags_thor_dex_user.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "merge", "merge_update_columns": ["creator"]}, "created_at": 1666821806.85083, "compiled_sql": "\n\nWITH from_addresses AS (\n\n    SELECT\n        DISTINCT CASE\n            blockchain\n            WHEN 'BNB' THEN 'bsc'\n            WHEN 'GAIA' THEN 'cosmos'\n            WHEN 'ETH' THEN 'ethereum'\n            WHEN 'TERRA' THEN 'terra'\n            WHEN 'BCH' THEN 'bitcoin cash'\n            WHEN 'THOR' THEN 'thorchain'\n            WHEN 'LTC' THEN 'litecoin'\n            WHEN 'DOGE' THEN 'dogechain'\n            WHEN 'BTC' THEN 'bitcoin'\n            else 'error'\n        END AS blockchain,\n        'flipside' AS creator,\n        from_address AS address,\n        'thorchain dex user' AS tag_name,\n        'dex' AS tag_type,\n        MIN(block_id) AS block_id,\n        MIN(DATE_TRUNC('day', block_timestamp)) AS start_date,\n        NULL AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        flipside_prod_db.thorchain.swaps\n\nwhere (blockchain not in ('error', 'NULL', 'null', 'Null') or blockchain is not null)\n\nand\n    block_id NOT IN (\n        SELECT\n            DISTINCT block_id\n        FROM\n            CROSSCHAIN_DEV.silver.tags_thor_dex_user\n    )\n\nGROUP BY\n    blockchain,\n    address\n),\nto_addresses AS (\n    SELECT\n        DISTINCT CASE\n            WHEN LEFT(\n                native_to_address,\n                3\n            ) = 'bnb' THEN 'bsc'\n            WHEN LEFT(\n                native_to_address,\n                6\n            ) = 'cosmos' THEN 'cosmos'\n            WHEN LEFT(\n                native_to_address,\n                2\n            ) = '0x' THEN 'ethereum'\n            WHEN LEFT(\n                native_to_address,\n                5\n            ) = 'terra' THEN 'terra'\n            WHEN LEFT(\n                native_to_address,\n                1\n            ) = 'q' THEN 'bitcoin cash'\n            WHEN LEFT(\n                native_to_address,\n                4\n            ) = 'thor' THEN 'thorchain'\n            WHEN LEFT(\n                native_to_address,\n                3\n            ) = 'ltc' THEN 'litecoin'\n            WHEN LEFT(\n                native_to_address,\n                1\n            ) = 'M' THEN 'litecoin'\n            WHEN LEFT(\n                native_to_address,\n                1\n            ) = 'L' THEN 'litecoin'\n            WHEN LEFT(\n                native_to_address,\n                1\n            ) = 'D' THEN 'dogechain'\n            WHEN LEFT(\n                native_to_address,\n                2\n            ) = 'bc' THEN 'bitcoin'\n            WHEN LEFT(\n                native_to_address,\n                1\n            ) = '1' THEN 'bitcoin'\n            WHEN LEFT(\n                native_to_address,\n                1\n            ) = '3' THEN 'bitcoin'\n            ELSE 'error'\n        END AS blockchain,\n        'flipside' AS creator,\n        native_to_address AS address,\n        'thorchain dex user' AS tag_name,\n        'dex' AS tag_type,\n        MIN(block_id) AS block_id,\n        MIN(DATE_TRUNC('day', block_timestamp)) AS start_date,\n        NULL AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        flipside_prod_db.thorchain.swaps\n    WHERE\n        blockchain != 'error'\n        AND native_to_address NOT IN (\n            SELECT\n                DISTINCT address\n            FROM\n                from_addresses\n        )\n\n\nAND block_id NOT IN (\n    SELECT\n        DISTINCT block_id\n    FROM\n        CROSSCHAIN_DEV.silver.tags_thor_dex_user\n)\n\nGROUP BY\n    address\n),\nfinal_table AS (\n    SELECT\n        *\n    FROM\n        from_addresses\n    where blockchain != 'error'\n    UNION\n    SELECT\n        *\n    FROM\n        to_addresses\n    where blockchain != 'error'\n)\nSELECT\n    *\nFROM\n    final_table", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.tags_thor_dex_user"}, "model.crosschain_models.silver__tags_contract_address_eth": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    incremental_strategy = 'delete+insert',\r\n) }}\r\n\r\nSELECT\r\n    DISTINCT 'ethereum' AS blockchain,\r\n    'flipside' AS creator,\r\n    to_address :: STRING AS address,\r\n    'contract address' AS tag_name,\r\n    'contract' AS tag_type,\r\n    block_number,\r\n    DATE_TRUNC(\r\n        'day',\r\n        block_timestamp\r\n    ) AS start_date,\r\n    NULL AS end_date,\r\n    _inserted_timestamp,\r\n    CURRENT_TIMESTAMP AS tag_created_at\r\nFROM\r\n    {{ source(\r\n        'ethereum_silver',\r\n        'traces'\r\n    ) }}\r\nWHERE\r\n    TYPE in ('CREATE', 'CREATE2')\r\n    AND tx_status = 'SUCCESS'\r\n    AND to_address IS NOT NULL\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp > (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n\r\nqualify(ROW_NUMBER() over(PARTITION BY address\r\nORDER BY\r\n    block_number DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.ethereum_silver.traces"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "silver__tags_contract_address_eth"], "unique_id": "model.crosschain_models.silver__tags_contract_address_eth", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\tags\\Ethereum\\silver__tags_contract_address_eth.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_contract_address_eth.sql", "name": "silver__tags_contract_address_eth", "alias": "tags_contract_address_eth", "checksum": {"name": "sha256", "checksum": "c9e234283d077d71a731675412645cd4d8d1ba73968565061f292ce7e51103f5"}, "tags": [], "refs": [], "sources": [["ethereum_silver", "traces"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\tags\\Ethereum\\silver__tags_contract_address_eth.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_contract_address_eth.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "delete+insert"}, "created_at": 1666821807.483912, "compiled_sql": "\n\nSELECT\n    DISTINCT 'ethereum' AS blockchain,\n    'flipside' AS creator,\n    to_address :: STRING AS address,\n    'contract address' AS tag_name,\n    'contract' AS tag_type,\n    block_number,\n    DATE_TRUNC(\n        'day',\n        block_timestamp\n    ) AS start_date,\n    NULL AS end_date,\n    _inserted_timestamp,\n    CURRENT_TIMESTAMP AS tag_created_at\nFROM\n    ethereum.silver.traces\nWHERE\n    TYPE in ('CREATE', 'CREATE2')\n    AND tx_status = 'SUCCESS'\n    AND to_address IS NOT NULL\n\n\nAND _inserted_timestamp > (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        CROSSCHAIN_DEV.silver.tags_contract_address_eth\n)\n\n\nqualify(ROW_NUMBER() over(PARTITION BY address\nORDER BY\n    block_number DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.tags_contract_address_eth"}, "model.crosschain_models.silver__asset_metadata_coin_market_cap": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', id, coalesce(token_address,''))\",\r\n    incremental_strategy = 'delete+insert'\r\n) }}\r\n\r\nSELECT\r\n    id,\r\n    NAME,\r\n    symbol,\r\n    VALUE :platform :token_address :: STRING AS token_address,\r\n    VALUE :platform :name :: STRING AS platform,\r\n    _inserted_timestamp\r\nFROM\r\n    {{ ref('bronze__asset_metadata_coin_market_cap') }}\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    _inserted_date >= (\r\n        SELECT\r\n            MAX(\r\n                _inserted_timestamp :: DATE\r\n            )\r\n        FROM\r\n            {{ this }}\r\n    )\r\n    AND _inserted_timestamp > (\r\n        SELECT\r\n            MAX(_inserted_timestamp)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% endif %}\r\n\r\nqualify(ROW_NUMBER() over (PARTITION BY id, token_address\r\nORDER BY\r\n    _inserted_timestamp DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.crosschain_models.bronze__asset_metadata_coin_market_cap"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', id, coalesce(token_address,''))", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "asset_metadata", "silver__asset_metadata_coin_market_cap"], "unique_id": "model.crosschain_models.silver__asset_metadata_coin_market_cap", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\asset_metadata\\silver__asset_metadata_coin_market_cap.sql", "original_file_path": "models\\silver\\asset_metadata\\silver__asset_metadata_coin_market_cap.sql", "name": "silver__asset_metadata_coin_market_cap", "alias": "asset_metadata_coin_market_cap", "checksum": {"name": "sha256", "checksum": "6dbd40f9c6319a5709b153697bb323c7eab0de3d64e3e651804b412f13bd6789"}, "tags": [], "refs": [["bronze__asset_metadata_coin_market_cap"]], "sources": [], "metrics": [], "description": "", "columns": {"ID": {"name": "ID", "description": "unique identifier representing the asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "name of asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL": {"name": "SYMBOL", "description": "symbol of asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_ADDRESS": {"name": "TOKEN_ADDRESS", "description": "specific address representing the asset in a specific platform", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM": {"name": "PLATFORM", "description": "platform where this asset has a token address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\asset_metadata\\silver__asset_metadata_coin_market_cap.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\asset_metadata\\silver__asset_metadata_coin_market_cap.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', id, coalesce(token_address,''))", "incremental_strategy": "delete+insert"}, "created_at": 1666821807.8054347, "compiled_sql": "\n\nSELECT\n    id,\n    NAME,\n    symbol,\n    VALUE :platform :token_address :: STRING AS token_address,\n    VALUE :platform :name :: STRING AS platform,\n    _inserted_timestamp\nFROM\n    CROSSCHAIN_DEV.bronze.asset_metadata_coin_market_cap\n\n\nWHERE\n    _inserted_date >= (\n        SELECT\n            MAX(\n                _inserted_timestamp :: DATE\n            )\n        FROM\n            CROSSCHAIN_DEV.silver.asset_metadata_coin_market_cap\n    )\n    AND _inserted_timestamp > (\n        SELECT\n            MAX(_inserted_timestamp)\n        FROM\n            CROSSCHAIN_DEV.silver.asset_metadata_coin_market_cap\n    )\n\n\nqualify(ROW_NUMBER() over (PARTITION BY id, token_address\nORDER BY\n    _inserted_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.asset_metadata_coin_market_cap"}, "model.crosschain_models.silver_crosschain__labels_contracts": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    incremental_strategy = 'delete+insert',\r\n    tags = ['snowflake', 'crosschain', 'labels']\r\n) }}\r\n\r\nWITH\r\n\r\n{% if is_incremental() %}\r\nmax_date AS (\r\n\r\n    SELECT\r\n        MAX(\r\n            _inserted_timestamp\r\n        ) _inserted_timestamp\r\n    FROM\r\n        {{ this }}\r\n),\r\n{% endif %} \r\n\r\nbase_labels AS (\r\n    SELECT\r\n        tx_hash, \r\n        block_number, \r\n        block_timestamp, \r\n        tx_status, \r\n        from_address, \r\n        to_address,  \r\n        type, \r\n        identifier, \r\n        _inserted_timestamp\r\n    FROM\r\n        {{ source(\r\n            'ethereum_silver',\r\n            'traces'\r\n        ) }}\r\n    WHERE\r\n        type in ('CREATE', 'CREATE2')\r\n        AND tx_status = 'SUCCESS'\r\n        AND to_address IS NOT NULL\r\n        AND to_address NOT IN (\r\n            SELECT\r\n                DISTINCT address\r\n            FROM\r\n                {{ source(\r\n                    'crosschain_core',\r\n                    'address_labels'\r\n                ) }}\r\n            WHERE\r\n                blockchain = 'ethereum'\r\n        )\r\n\r\n    {% if is_incremental() %}\r\n    AND _inserted_timestamp >= (\r\n        SELECT\r\n            MAX(\r\n                _inserted_timestamp\r\n            )\r\n        FROM\r\n            {{ this }}\r\n    )\r\n    {% endif %}\r\n), \r\nbase_legacy_labels AS (\r\n    SELECT\r\n        DISTINCT \r\n            system_created_at, \r\n            insert_date, \r\n            address, \r\n            label_type as l1_label,\r\n            label_subtype as l2_label,\r\n            address_name,\r\n            project_name\r\n    FROM\r\n        {{ source(\r\n            'crosschain_core',\r\n            'address_labels'\r\n        ) }}\r\n    WHERE\r\n        blockchain = 'ethereum'\r\n), \r\nbase_transacts AS (\r\n    SELECT\r\n        b.system_created_at, \r\n        b.insert_date, \r\n        A.tx_hash,\r\n        A.block_timestamp,\r\n        A.from_address,\r\n        A.to_address,\r\n        A.identifier,\r\n        b.l1_label,\r\n        b.l2_label,\r\n        b.address_name,\r\n        b.project_name, \r\n        A._inserted_timestamp\r\n    FROM\r\n       base_labels A\r\nINNER JOIN base_legacy_labels b\r\nON A.from_address = b.address\r\nWHERE\r\n    b.l1_label != 'flotsam'\r\n),\r\nbase_logs AS (\r\n    SELECT\r\n        DISTINCT tx_hash,\r\n        contract_name,\r\n        event_name, \r\n        _inserted_timestamp\r\n    FROM\r\n        {{ source(\r\n            'ethereum_silver',\r\n            'logs'\r\n        ) }}\r\n    WHERE\r\n        tx_hash IN (\r\n            SELECT\r\n                DISTINCT tx_hash\r\n            FROM\r\n                base_transacts\r\n        )\r\n    AND (\r\n        event_name IN (\r\n            'NewOracle',\r\n            'NewSwapPool',\r\n            'PairCreated',\r\n            'LogNewWallet',\r\n            'LogUserAdded'\r\n        )\r\n        OR event_name ILIKE '%pool%'\r\n        OR event_name ILIKE '%create%'\r\n    )\r\n    AND event_name != 'SetTokenCreated'\r\n    AND event_name != 'PoolUpdate'\r\n    AND contract_name IS NOT NULL\r\n    AND event_name IS NOT NULL\r\n\r\n    {% if is_incremental() %}\r\n    AND _inserted_timestamp >= (\r\n        SELECT\r\n            MAX(\r\n                _inserted_timestamp\r\n            )\r\n        FROM\r\n            {{ this }}\r\n    )\r\n    {% endif %}\r\n), \r\nfinal_base AS (\r\n    SELECT\r\n        A.system_created_at, \r\n        A.insert_date, \r\n        A.tx_hash,\r\n        A.block_timestamp,\r\n        A.from_address,\r\n        A.to_address,\r\n        A.identifier,\r\n        A.l1_label,\r\n        A.l2_label,\r\n        CASE\r\n            WHEN C.event_name IN (\r\n                'PairCreated',\r\n                'NewSwapPool'\r\n            ) THEN 'pool'\r\n            WHEN C.event_name ILIKE '%pool%'\r\n            AND C.event_name ILIKE '%create%' THEN 'pool'\r\n            WHEN C.event_name IN ('LOG_NEW_POOL') THEN 'pool'\r\n            WHEN C.event_name IN (\r\n                'LogNewWallet',\r\n                'LogUserAdded'\r\n            ) THEN 'deposit_wallet'\r\n            WHEN C.event_name IN ('NewOracle') THEN 'oracle'\r\n            WHEN A.l1_label = 'dapp'\r\n            AND A.l2_label = 'governance' THEN 'governance'\r\n            ELSE 'general_contract'\r\n        END AS l2_label_fixed,\r\n        A.address_name,\r\n        CASE\r\n            WHEN C.event_name IN ('PairCreated') THEN CONCAT(\r\n                A.project_name,\r\n                ': pair'\r\n            )\r\n            WHEN C.event_name IN ('NewSwapPool') THEN CONCAT(\r\n                A.project_name,\r\n                ': pool'\r\n            )\r\n            WHEN C.event_name ILIKE '%pool%'\r\n            AND C.event_name ILIKE '%create%' THEN CONCAT(\r\n                A.project_name,\r\n                ': pool'\r\n            )\r\n            WHEN A.l1_label = 'cex'\r\n            AND C.event_name IN (\r\n                'LogNewWallet',\r\n                'LogUserAdded'\r\n            ) THEN CONCAT(\r\n                A.project_name,\r\n                ': deposit wallet'\r\n            )\r\n            WHEN C.event_name IN ('NewOracle') THEN CONCAT(\r\n                A.project_name,\r\n                ': oracle'\r\n            )\r\n            WHEN C.event_name IN ('LOG_NEW_POOL') THEN CONCAT(\r\n                A.project_name,\r\n                ': pool'\r\n            )\r\n            WHEN A.address_name = ' registry'\r\n            AND A.project_name = 'opensea' THEN 'opensea: proxy registry'\r\n            ELSE CONCAT(\r\n                A.project_name,\r\n                ': general contract'\r\n            )\r\n        END AS address_name_fixed,\r\n        A.project_name,\r\n        C.contract_name,\r\n        C.event_name, \r\n        A._inserted_timestamp\r\n    FROM\r\n        base_transacts A\r\n        LEFT JOIN base_logs C\r\n        ON A.tx_hash = C.tx_hash\r\n)\r\nSELECT\r\n    DISTINCT \r\n    system_created_at, \r\n    insert_date, \r\n    'ethereum' AS blockchain,\r\n    to_address AS address,\r\n    'flipside' AS creator,\r\n    l1_label,\r\n    l2_label_fixed AS l2_label,\r\n    address_name_fixed AS address_name,\r\n    project_name, \r\n    _inserted_timestamp\r\nFROM\r\n    final_base qualify(ROW_NUMBER() over(PARTITION BY address\r\nORDER BY\r\n    l2_label_fixed DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.ethereum_silver.traces", "source.crosschain_models.crosschain_core.address_labels", "source.crosschain_models.crosschain_core.address_labels", "source.crosschain_models.ethereum_silver.logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["snowflake", "crosschain", "labels"], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "silver_crosschain__labels_contracts"], "unique_id": "model.crosschain_models.silver_crosschain__labels_contracts", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.sql", "name": "silver_crosschain__labels_contracts", "alias": "labels_contracts", "checksum": {"name": "sha256", "checksum": "0cf6d7a16aa45f7b45d22a1ced39ff61ff7e5cf9c61713f10a140e4f03ba4798"}, "tags": ["snowflake", "crosschain", "labels"], "refs": [], "sources": [["ethereum_silver", "traces"], ["crosschain_core", "address_labels"], ["crosschain_core", "address_labels"], ["ethereum_silver", "logs"]], "metrics": [], "description": "", "columns": {"BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "Address that the label is for. This is the field that should be used to join other tables with labels.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR": {"name": "CREATOR", "description": "The name of the creator of the label", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L1_LABEL": {"name": "L1_LABEL", "description": "A high-level category describing the addresses main function or ownership", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L2_LABEL": {"name": "L2_LABEL", "description": "A sub-category nested within label type providing further detail", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS_NAME": {"name": "ADDRESS_NAME", "description": "Name of the address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROJECT_NAME": {"name": "PROJECT_NAME", "description": "Name of the controlling entity of the address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "delete+insert", "tags": ["snowflake", "crosschain", "labels"]}, "created_at": 1666821807.8216524, "compiled_sql": "\n\nWITH\n\n\nmax_date AS (\n\n    SELECT\n        MAX(\n            _inserted_timestamp\n        ) _inserted_timestamp\n    FROM\n        CROSSCHAIN_DEV.silver_crosschain.labels_contracts\n),\n \n\nbase_labels AS (\n    SELECT\n        tx_hash, \n        block_number, \n        block_timestamp, \n        tx_status, \n        from_address, \n        to_address,  \n        type, \n        identifier, \n        _inserted_timestamp\n    FROM\n        ethereum.silver.traces\n    WHERE\n        type in ('CREATE', 'CREATE2')\n        AND tx_status = 'SUCCESS'\n        AND to_address IS NOT NULL\n        AND to_address NOT IN (\n            SELECT\n                DISTINCT address\n            FROM\n                crosschain.core.address_labels\n            WHERE\n                blockchain = 'ethereum'\n        )\n\n    \n    AND _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            CROSSCHAIN_DEV.silver_crosschain.labels_contracts\n    )\n    \n), \nbase_legacy_labels AS (\n    SELECT\n        DISTINCT \n            system_created_at, \n            insert_date, \n            address, \n            label_type as l1_label,\n            label_subtype as l2_label,\n            address_name,\n            project_name\n    FROM\n        crosschain.core.address_labels\n    WHERE\n        blockchain = 'ethereum'\n), \nbase_transacts AS (\n    SELECT\n        b.system_created_at, \n        b.insert_date, \n        A.tx_hash,\n        A.block_timestamp,\n        A.from_address,\n        A.to_address,\n        A.identifier,\n        b.l1_label,\n        b.l2_label,\n        b.address_name,\n        b.project_name, \n        A._inserted_timestamp\n    FROM\n       base_labels A\nINNER JOIN base_legacy_labels b\nON A.from_address = b.address\nWHERE\n    b.l1_label != 'flotsam'\n),\nbase_logs AS (\n    SELECT\n        DISTINCT tx_hash,\n        contract_name,\n        event_name, \n        _inserted_timestamp\n    FROM\n        ethereum.silver.logs\n    WHERE\n        tx_hash IN (\n            SELECT\n                DISTINCT tx_hash\n            FROM\n                base_transacts\n        )\n    AND (\n        event_name IN (\n            'NewOracle',\n            'NewSwapPool',\n            'PairCreated',\n            'LogNewWallet',\n            'LogUserAdded'\n        )\n        OR event_name ILIKE '%pool%'\n        OR event_name ILIKE '%create%'\n    )\n    AND event_name != 'SetTokenCreated'\n    AND event_name != 'PoolUpdate'\n    AND contract_name IS NOT NULL\n    AND event_name IS NOT NULL\n\n    \n    AND _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            CROSSCHAIN_DEV.silver_crosschain.labels_contracts\n    )\n    \n), \nfinal_base AS (\n    SELECT\n        A.system_created_at, \n        A.insert_date, \n        A.tx_hash,\n        A.block_timestamp,\n        A.from_address,\n        A.to_address,\n        A.identifier,\n        A.l1_label,\n        A.l2_label,\n        CASE\n            WHEN C.event_name IN (\n                'PairCreated',\n                'NewSwapPool'\n            ) THEN 'pool'\n            WHEN C.event_name ILIKE '%pool%'\n            AND C.event_name ILIKE '%create%' THEN 'pool'\n            WHEN C.event_name IN ('LOG_NEW_POOL') THEN 'pool'\n            WHEN C.event_name IN (\n                'LogNewWallet',\n                'LogUserAdded'\n            ) THEN 'deposit_wallet'\n            WHEN C.event_name IN ('NewOracle') THEN 'oracle'\n            WHEN A.l1_label = 'dapp'\n            AND A.l2_label = 'governance' THEN 'governance'\n            ELSE 'general_contract'\n        END AS l2_label_fixed,\n        A.address_name,\n        CASE\n            WHEN C.event_name IN ('PairCreated') THEN CONCAT(\n                A.project_name,\n                ': pair'\n            )\n            WHEN C.event_name IN ('NewSwapPool') THEN CONCAT(\n                A.project_name,\n                ': pool'\n            )\n            WHEN C.event_name ILIKE '%pool%'\n            AND C.event_name ILIKE '%create%' THEN CONCAT(\n                A.project_name,\n                ': pool'\n            )\n            WHEN A.l1_label = 'cex'\n            AND C.event_name IN (\n                'LogNewWallet',\n                'LogUserAdded'\n            ) THEN CONCAT(\n                A.project_name,\n                ': deposit wallet'\n            )\n            WHEN C.event_name IN ('NewOracle') THEN CONCAT(\n                A.project_name,\n                ': oracle'\n            )\n            WHEN C.event_name IN ('LOG_NEW_POOL') THEN CONCAT(\n                A.project_name,\n                ': pool'\n            )\n            WHEN A.address_name = ' registry'\n            AND A.project_name = 'opensea' THEN 'opensea: proxy registry'\n            ELSE CONCAT(\n                A.project_name,\n                ': general contract'\n            )\n        END AS address_name_fixed,\n        A.project_name,\n        C.contract_name,\n        C.event_name, \n        A._inserted_timestamp\n    FROM\n        base_transacts A\n        LEFT JOIN base_logs C\n        ON A.tx_hash = C.tx_hash\n)\nSELECT\n    DISTINCT \n    system_created_at, \n    insert_date, \n    'ethereum' AS blockchain,\n    to_address AS address,\n    'flipside' AS creator,\n    l1_label,\n    l2_label_fixed AS l2_label,\n    address_name_fixed AS address_name,\n    project_name, \n    _inserted_timestamp\nFROM\n    final_base qualify(ROW_NUMBER() over(PARTITION BY address\nORDER BY\n    l2_label_fixed DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver_crosschain.labels_contracts"}, "model.crosschain_models.silver__tags_nft_x2y2_user": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    incremental_strategy = 'merge',\r\n    merge_update_columns = ['creator'],\r\n) }}\r\n\r\nWITH buyers AS (\r\n\r\n    SELECT\r\n        DISTINCT 'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        buyer_address AS address,\r\n        'x2y2 user' AS tag_name,\r\n        'nft' AS tag_type,\r\n        MIN(\r\n            block_timestamp :: DATE\r\n        ) AS start_date,\r\n        NULL AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at,\r\n        MIN(ingested_at) AS ingested_at\r\n    FROM\r\n        {{ source(\r\n            'ethereum_silver_nft',\r\n            'x2y2_sales'\r\n        ) }}\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    ingested_at > (\r\n        SELECT\r\n            MAX(ingested_at)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% endif %}\r\nGROUP BY\r\n    buyer_address\r\n),\r\nsellers AS (\r\n    SELECT\r\n        DISTINCT 'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        seller_address AS address,\r\n        'x2y2 user' AS tag_name,\r\n        'nft' AS tag_type,\r\n        MIN(\r\n            block_timestamp :: DATE\r\n        ) AS start_date,\r\n        NULL AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at,\r\n        MIN(ingested_at) AS ingested_at\r\n    FROM\r\n        {{ source(\r\n            'ethereum_silver_nft',\r\n            'x2y2_sales'\r\n        ) }}\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    ingested_at > (\r\n        SELECT\r\n            MAX(ingested_at)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% endif %}\r\nGROUP BY\r\n    seller_address\r\n),\r\nunion_table AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        buyers\r\n    UNION\r\n    SELECT\r\n        *\r\n    FROM\r\n        sellers\r\n),\r\nfinal_table AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        union_table qualify(ROW_NUMBER() over(PARTITION BY address\r\n    ORDER BY\r\n        start_date ASC)) = 1\r\n)\r\nSELECT\r\n    A.*\r\nFROM\r\n    final_table A", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.ethereum_silver_nft.x2y2_sales", "source.crosschain_models.ethereum_silver_nft.x2y2_sales"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "merge_update_columns": ["creator"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "silver__tags_nft_x2y2_user"], "unique_id": "model.crosschain_models.silver__tags_nft_x2y2_user", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\tags\\Ethereum\\silver__tags_nft_x2y2_user.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_x2y2_user.sql", "name": "silver__tags_nft_x2y2_user", "alias": "tags_nft_x2y2_user", "checksum": {"name": "sha256", "checksum": "1c90c82aa6ac9b41783945ed659f62ffb2785bde00cc600d7f7d7a077e3b60bb"}, "tags": [], "refs": [], "sources": [["ethereum_silver_nft", "x2y2_sales"], ["ethereum_silver_nft", "x2y2_sales"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\tags\\Ethereum\\silver__tags_nft_x2y2_user.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_x2y2_user.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "merge", "merge_update_columns": ["creator"]}, "created_at": 1666821806.9417486, "compiled_sql": "\n\nWITH buyers AS (\n\n    SELECT\n        DISTINCT 'ethereum' AS blockchain,\n        'flipside' AS creator,\n        buyer_address AS address,\n        'x2y2 user' AS tag_name,\n        'nft' AS tag_type,\n        MIN(\n            block_timestamp :: DATE\n        ) AS start_date,\n        NULL AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at,\n        MIN(ingested_at) AS ingested_at\n    FROM\n        ethereum.silver_nft.x2y2_sales\n\n\nWHERE\n    ingested_at > (\n        SELECT\n            MAX(ingested_at)\n        FROM\n            CROSSCHAIN_DEV.silver.tags_nft_x2y2_user\n    )\n\nGROUP BY\n    buyer_address\n),\nsellers AS (\n    SELECT\n        DISTINCT 'ethereum' AS blockchain,\n        'flipside' AS creator,\n        seller_address AS address,\n        'x2y2 user' AS tag_name,\n        'nft' AS tag_type,\n        MIN(\n            block_timestamp :: DATE\n        ) AS start_date,\n        NULL AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at,\n        MIN(ingested_at) AS ingested_at\n    FROM\n        ethereum.silver_nft.x2y2_sales\n\n\nWHERE\n    ingested_at > (\n        SELECT\n            MAX(ingested_at)\n        FROM\n            CROSSCHAIN_DEV.silver.tags_nft_x2y2_user\n    )\n\nGROUP BY\n    seller_address\n),\nunion_table AS (\n    SELECT\n        *\n    FROM\n        buyers\n    UNION\n    SELECT\n        *\n    FROM\n        sellers\n),\nfinal_table AS (\n    SELECT\n        *\n    FROM\n        union_table qualify(ROW_NUMBER() over(PARTITION BY address\n    ORDER BY\n        start_date ASC)) = 1\n)\nSELECT\n    A.*\nFROM\n    final_table A", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.tags_nft_x2y2_user"}, "model.crosschain_models.silver_crosschain__snowflake_Avalanche_satellites": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    incremental_strategy = 'delete+insert',\r\n) }}\r\n\r\nWITH distributor_cex AS (\r\n    -- THIS STATEMENT FINDS KNOWN CEX LABELS WITHIN THE BRONZE ADDRESS LABELS TABLE\r\n\r\n    SELECT\r\n        system_created_at,\r\n        insert_date,\r\n        blockchain,\r\n        address,\r\n        creator,\r\n        l1_label,\r\n        l2_label,\r\n        address_name,\r\n        project_name\r\n    FROM\r\n        {{ ref('silver_crosschain__address_labels') }}\r\n    WHERE\r\n        blockchain = 'avalanche'\r\n        AND l1_label = 'cex'\r\n        AND l2_label = 'hot_wallet'\r\n),\r\npossible_sats AS (\r\n    -- THIS STATEMENT LOCATES POTENTIAL SATELLITE WALLETS BASED ON DEPOSIT BEHAVIOR\r\n    SELECT\r\n        DISTINCT *\r\n    FROM\r\n        (\r\n            SELECT\r\n                DISTINCT dc.system_created_at,\r\n                dc.insert_date,\r\n                dc.blockchain,\r\n                xfer.from_address AS address,\r\n                dc.creator,\r\n                dc.address_name,\r\n                dc.project_name,\r\n                dc.l1_label,\r\n                'deposit_wallet' AS l2_label,\r\n                COUNT(\r\n                    DISTINCT project_name\r\n                ) over(\r\n                    PARTITION BY dc.blockchain,\r\n                    xfer.from_address\r\n                ) AS project_count -- how many projects has each from address sent to\r\n            FROM\r\n                {{ source(\r\n                    'avalanche_core',\r\n                    'fact_token_transfers'\r\n                ) }}\r\n                xfer\r\n                JOIN distributor_cex dc\r\n                ON dc.address = xfer.to_address\r\n            WHERE\r\n                raw_amount > 0\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\nGROUP BY\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9\r\nUNION\r\nSELECT\r\n    DISTINCT dc.system_created_at,\r\n    dc.insert_date,\r\n    dc.blockchain,\r\n    tr.from_address AS address,\r\n    dc.creator,\r\n    dc.address_name,\r\n    dc.project_name,\r\n    dc.l1_label,\r\n    'deposit_wallet' AS l2_label,\r\n    COUNT(\r\n        DISTINCT project_name\r\n    ) over(\r\n        PARTITION BY dc.blockchain,\r\n        tr.from_address\r\n    ) AS project_count\r\nFROM\r\n    {{ source(\r\n        'avalanche_core',\r\n        'fact_traces'\r\n    ) }}\r\n    tr\r\n    JOIN distributor_cex dc\r\n    ON dc.address = tr.to_address\r\nWHERE\r\n    tx_status = 'SUCCESS'\r\n    AND avax_value > 0\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\nGROUP BY\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9\r\n)\r\n),\r\nreal_sats AS (\r\n    SELECT\r\n        from_address,\r\n        COALESCE(project_name, 'blunts') AS project_names\r\n    FROM\r\n        {{ source(\r\n            'avalanche_core',\r\n            'fact_token_transfers'\r\n        ) }}\r\n        xfer\r\n        LEFT OUTER JOIN distributor_cex dc\r\n        ON dc.address = xfer.to_address\r\n    WHERE\r\n        from_address IN (\r\n            SELECT\r\n                address\r\n            FROM\r\n                possible_sats\r\n        )\r\n        AND raw_amount > 0\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\nUNION\r\nSELECT\r\n    from_address,\r\n    COALESCE(project_name, 'blunts') AS project_names\r\nFROM\r\n    {{ source(\r\n        'avalanche_core',\r\n        'fact_traces'\r\n    ) }}\r\n    tr\r\n    LEFT OUTER JOIN distributor_cex dc\r\n    ON dc.address = tr.to_address\r\nWHERE\r\n    from_address IN (\r\n        SELECT\r\n            address\r\n        FROM\r\n            possible_sats\r\n    )\r\n    AND tx_status = 'SUCCESS'\r\n    AND avax_value > 0\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\n),\r\nproject_counts as (\r\n    select distinct from_address, \r\n    count(distinct project_names) as project_count\r\n    from real_sats\r\n    group by from_address\r\n),\r\nexclusive_sats AS (\r\n    SELECT\r\n        DISTINCT from_address AS address\r\n    FROM\r\n        project_counts\r\n    WHERE\r\n        project_count = 1\r\n    GROUP BY\r\n        1\r\n),\r\nfinal_base AS(\r\n    SELECT\r\n        DISTINCT CURRENT_TIMESTAMP AS system_created_at,\r\n        CURRENT_TIMESTAMP AS insert_date,\r\n        blockchain,\r\n        e.address,\r\n        creator,\r\n        l1_label,\r\n        l2_label,\r\n        project_name,\r\n        CONCAT(\r\n            project_name,\r\n            ' deposit_wallet'\r\n        ) AS address_name\r\n    FROM\r\n        exclusive_sats e\r\n        JOIN possible_sats p\r\n        ON e.address = p.address\r\n)\r\nSELECT\r\n    DISTINCT system_created_at,\r\n    insert_date,\r\n    blockchain,\r\n    address,\r\n    creator,\r\n    l1_label,\r\n    l2_label,\r\n    address_name,\r\n    project_name\r\nFROM\r\n    final_base\r\nWHERE\r\n    address NOT IN (\r\n        SELECT\r\n            DISTINCT address\r\n        FROM\r\n            {{ ref('silver_crosschain__address_labels') }}\r\n        WHERE\r\n            blockchain = 'avalanche'\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.avalanche_core.fact_token_transfers", "source.crosschain_models.avalanche_core.fact_traces", "source.crosschain_models.avalanche_core.fact_token_transfers", "source.crosschain_models.avalanche_core.fact_traces", "model.crosschain_models.silver_crosschain__address_labels", "model.crosschain_models.silver_crosschain__address_labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "silver_crosschain__snowflake_Avalanche_satellites"], "unique_id": "model.crosschain_models.silver_crosschain__snowflake_Avalanche_satellites", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Avalanche_satellites.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Avalanche_satellites.sql", "name": "silver_crosschain__snowflake_Avalanche_satellites", "alias": "snowflake_Avalanche_satellites", "checksum": {"name": "sha256", "checksum": "539f4b0662d0691917ff076c102f1bac578e41e1295ba5318f03c972f727c7cd"}, "tags": [], "refs": [["silver_crosschain__address_labels"], ["silver_crosschain__address_labels"]], "sources": [["avalanche_core", "fact_token_transfers"], ["avalanche_core", "fact_traces"], ["avalanche_core", "fact_token_transfers"], ["avalanche_core", "fact_traces"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Avalanche_satellites.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Avalanche_satellites.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "delete+insert"}, "created_at": 1666821807.9044025, "compiled_sql": "\n\nWITH distributor_cex AS (\n    -- THIS STATEMENT FINDS KNOWN CEX LABELS WITHIN THE BRONZE ADDRESS LABELS TABLE\n\n    SELECT\n        system_created_at,\n        insert_date,\n        blockchain,\n        address,\n        creator,\n        l1_label,\n        l2_label,\n        address_name,\n        project_name\n    FROM\n        CROSSCHAIN_DEV.silver_crosschain.address_labels\n    WHERE\n        blockchain = 'avalanche'\n        AND l1_label = 'cex'\n        AND l2_label = 'hot_wallet'\n),\npossible_sats AS (\n    -- THIS STATEMENT LOCATES POTENTIAL SATELLITE WALLETS BASED ON DEPOSIT BEHAVIOR\n    SELECT\n        DISTINCT *\n    FROM\n        (\n            SELECT\n                DISTINCT dc.system_created_at,\n                dc.insert_date,\n                dc.blockchain,\n                xfer.from_address AS address,\n                dc.creator,\n                dc.address_name,\n                dc.project_name,\n                dc.l1_label,\n                'deposit_wallet' AS l2_label,\n                COUNT(\n                    DISTINCT project_name\n                ) over(\n                    PARTITION BY dc.blockchain,\n                    xfer.from_address\n                ) AS project_count -- how many projects has each from address sent to\n            FROM\n                avalanche.core.fact_token_transfers\n                xfer\n                JOIN distributor_cex dc\n                ON dc.address = xfer.to_address\n            WHERE\n                raw_amount > 0\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\nGROUP BY\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9\nUNION\nSELECT\n    DISTINCT dc.system_created_at,\n    dc.insert_date,\n    dc.blockchain,\n    tr.from_address AS address,\n    dc.creator,\n    dc.address_name,\n    dc.project_name,\n    dc.l1_label,\n    'deposit_wallet' AS l2_label,\n    COUNT(\n        DISTINCT project_name\n    ) over(\n        PARTITION BY dc.blockchain,\n        tr.from_address\n    ) AS project_count\nFROM\n    avalanche.core.fact_traces\n    tr\n    JOIN distributor_cex dc\n    ON dc.address = tr.to_address\nWHERE\n    tx_status = 'SUCCESS'\n    AND avax_value > 0\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\nGROUP BY\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9\n)\n),\nreal_sats AS (\n    SELECT\n        from_address,\n        COALESCE(project_name, 'blunts') AS project_names\n    FROM\n        avalanche.core.fact_token_transfers\n        xfer\n        LEFT OUTER JOIN distributor_cex dc\n        ON dc.address = xfer.to_address\n    WHERE\n        from_address IN (\n            SELECT\n                address\n            FROM\n                possible_sats\n        )\n        AND raw_amount > 0\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\nUNION\nSELECT\n    from_address,\n    COALESCE(project_name, 'blunts') AS project_names\nFROM\n    avalanche.core.fact_traces\n    tr\n    LEFT OUTER JOIN distributor_cex dc\n    ON dc.address = tr.to_address\nWHERE\n    from_address IN (\n        SELECT\n            address\n        FROM\n            possible_sats\n    )\n    AND tx_status = 'SUCCESS'\n    AND avax_value > 0\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\n),\nproject_counts as (\n    select distinct from_address, \n    count(distinct project_names) as project_count\n    from real_sats\n    group by from_address\n),\nexclusive_sats AS (\n    SELECT\n        DISTINCT from_address AS address\n    FROM\n        project_counts\n    WHERE\n        project_count = 1\n    GROUP BY\n        1\n),\nfinal_base AS(\n    SELECT\n        DISTINCT CURRENT_TIMESTAMP AS system_created_at,\n        CURRENT_TIMESTAMP AS insert_date,\n        blockchain,\n        e.address,\n        creator,\n        l1_label,\n        l2_label,\n        project_name,\n        CONCAT(\n            project_name,\n            ' deposit_wallet'\n        ) AS address_name\n    FROM\n        exclusive_sats e\n        JOIN possible_sats p\n        ON e.address = p.address\n)\nSELECT\n    DISTINCT system_created_at,\n    insert_date,\n    blockchain,\n    address,\n    creator,\n    l1_label,\n    l2_label,\n    address_name,\n    project_name\nFROM\n    final_base\nWHERE\n    address NOT IN (\n        SELECT\n            DISTINCT address\n        FROM\n            CROSSCHAIN_DEV.silver_crosschain.address_labels\n        WHERE\n            blockchain = 'avalanche'\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver_crosschain.snowflake_Avalanche_satellites"}, "model.crosschain_models.silver_crosschain__snowflake_Polygon_satellites": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    incremental_strategy = 'delete+insert',\r\n) }}\r\n\r\nWITH distributor_cex AS (\r\n    -- THIS STATEMENT FINDS KNOWN CEX LABELS WITHIN THE BRONZE ADDRESS LABELS TABLE\r\n\r\n    SELECT\r\n        system_created_at,\r\n        insert_date,\r\n        blockchain,\r\n        address,\r\n        creator,\r\n        l1_label,\r\n        l2_label,\r\n        address_name,\r\n        project_name\r\n    FROM\r\n        {{ ref('silver_crosschain__address_labels') }}\r\n    WHERE\r\n        blockchain = 'polygon'\r\n        AND l1_label = 'cex'\r\n        AND l2_label = 'hot_wallet'\r\n),\r\npossible_sats AS (\r\n    -- THIS STATEMENT LOCATES POTENTIAL SATELLITE WALLETS BASED ON DEPOSIT BEHAVIOR\r\n    SELECT\r\n        DISTINCT *\r\n    FROM\r\n        (\r\n            SELECT\r\n                DISTINCT dc.system_created_at,\r\n                dc.insert_date,\r\n                dc.blockchain,\r\n                xfer.from_address AS address,\r\n                dc.creator,\r\n                dc.address_name,\r\n                dc.project_name,\r\n                dc.l1_label,\r\n                'deposit_wallet' AS l2_label,\r\n                COUNT(\r\n                    DISTINCT project_name\r\n                ) over(\r\n                    PARTITION BY dc.blockchain,\r\n                    xfer.from_address\r\n                ) AS project_count -- how many projects has each from address sent to\r\n            FROM\r\n                {{ source(\r\n                    'polygon_core',\r\n                    'fact_token_transfers'\r\n                ) }}\r\n                xfer\r\n                JOIN distributor_cex dc\r\n                ON dc.address = xfer.to_address\r\n            WHERE\r\n                raw_amount > 0\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\nGROUP BY\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9\r\nUNION\r\nSELECT\r\n    DISTINCT dc.system_created_at,\r\n    dc.insert_date,\r\n    dc.blockchain,\r\n    tr.from_address AS address,\r\n    dc.creator,\r\n    dc.address_name,\r\n    dc.project_name,\r\n    dc.l1_label,\r\n    'deposit_wallet' AS l2_label,\r\n    COUNT(\r\n        DISTINCT project_name\r\n    ) over(\r\n        PARTITION BY dc.blockchain,\r\n        tr.from_address\r\n    ) AS project_count\r\nFROM\r\n    {{ source(\r\n        'polygon_core',\r\n        'fact_traces'\r\n    ) }}\r\n    tr\r\n    JOIN distributor_cex dc\r\n    ON dc.address = tr.to_address\r\nWHERE\r\n    tx_status = 'SUCCESS'\r\n    AND matic_value > 0\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\nGROUP BY\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9\r\n)\r\n),\r\nreal_sats AS (\r\n    SELECT\r\n        from_address,\r\n        COALESCE(project_name, 'blunts') AS project_names\r\n    FROM\r\n        {{ source(\r\n            'polygon_core',\r\n            'fact_token_transfers'\r\n        ) }}\r\n        xfer\r\n        LEFT OUTER JOIN distributor_cex dc\r\n        ON dc.address = xfer.to_address\r\n    WHERE\r\n        from_address IN (\r\n            SELECT\r\n                address\r\n            FROM\r\n                possible_sats\r\n        )\r\n        AND raw_amount > 0\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\nUNION\r\nSELECT\r\n    from_address,\r\n    COALESCE(project_name, 'blunts') AS project_names\r\nFROM\r\n    {{ source(\r\n        'polygon_core',\r\n        'fact_traces'\r\n    ) }}\r\n    tr\r\n    LEFT OUTER JOIN distributor_cex dc\r\n    ON dc.address = tr.to_address\r\nWHERE\r\n    from_address IN (\r\n        SELECT\r\n            address\r\n        FROM\r\n            possible_sats\r\n    )\r\n    AND tx_status = 'SUCCESS'\r\n    AND matic_value > 0\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\n),\r\nproject_counts as (\r\n    select distinct from_address, \r\n    count(distinct project_names) as project_count\r\n    from real_sats\r\n    group by from_address\r\n),\r\nexclusive_sats AS (\r\n    SELECT\r\n        DISTINCT from_address AS address\r\n    FROM\r\n        project_counts\r\n    WHERE\r\n        project_count = 1\r\n    GROUP BY\r\n        1\r\n),\r\nfinal_base AS(\r\n    SELECT\r\n        DISTINCT CURRENT_TIMESTAMP AS system_created_at,\r\n        CURRENT_TIMESTAMP AS insert_date,\r\n        blockchain,\r\n        e.address,\r\n        creator,\r\n        l1_label,\r\n        l2_label,\r\n        project_name,\r\n        CONCAT(\r\n            project_name,\r\n            ' deposit_wallet'\r\n        ) AS address_name\r\n    FROM\r\n        exclusive_sats e\r\n        JOIN possible_sats p\r\n        ON e.address = p.address\r\n)\r\nSELECT\r\n    DISTINCT system_created_at,\r\n    insert_date,\r\n    blockchain,\r\n    address,\r\n    creator,\r\n    l1_label,\r\n    l2_label,\r\n    address_name,\r\n    project_name\r\nFROM\r\n    final_base\r\nWHERE\r\n    address NOT IN (\r\n        SELECT\r\n            DISTINCT address\r\n        FROM\r\n            {{ ref('silver_crosschain__address_labels') }}\r\n        WHERE\r\n            blockchain = 'polygon'\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.polygon_core.fact_token_transfers", "source.crosschain_models.polygon_core.fact_traces", "source.crosschain_models.polygon_core.fact_token_transfers", "source.crosschain_models.polygon_core.fact_traces", "model.crosschain_models.silver_crosschain__address_labels", "model.crosschain_models.silver_crosschain__address_labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "silver_crosschain__snowflake_Polygon_satellites"], "unique_id": "model.crosschain_models.silver_crosschain__snowflake_Polygon_satellites", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Polygon_satellites.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Polygon_satellites.sql", "name": "silver_crosschain__snowflake_Polygon_satellites", "alias": "snowflake_Polygon_satellites", "checksum": {"name": "sha256", "checksum": "0084fde8e6fb4503c503ef48119d05f13685d4d3df99680af69090b52afea10d"}, "tags": [], "refs": [["silver_crosschain__address_labels"], ["silver_crosschain__address_labels"]], "sources": [["polygon_core", "fact_token_transfers"], ["polygon_core", "fact_traces"], ["polygon_core", "fact_token_transfers"], ["polygon_core", "fact_traces"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Polygon_satellites.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Polygon_satellites.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "delete+insert"}, "created_at": 1666821807.2762387, "compiled_sql": "\n\nWITH distributor_cex AS (\n    -- THIS STATEMENT FINDS KNOWN CEX LABELS WITHIN THE BRONZE ADDRESS LABELS TABLE\n\n    SELECT\n        system_created_at,\n        insert_date,\n        blockchain,\n        address,\n        creator,\n        l1_label,\n        l2_label,\n        address_name,\n        project_name\n    FROM\n        CROSSCHAIN_DEV.silver_crosschain.address_labels\n    WHERE\n        blockchain = 'polygon'\n        AND l1_label = 'cex'\n        AND l2_label = 'hot_wallet'\n),\npossible_sats AS (\n    -- THIS STATEMENT LOCATES POTENTIAL SATELLITE WALLETS BASED ON DEPOSIT BEHAVIOR\n    SELECT\n        DISTINCT *\n    FROM\n        (\n            SELECT\n                DISTINCT dc.system_created_at,\n                dc.insert_date,\n                dc.blockchain,\n                xfer.from_address AS address,\n                dc.creator,\n                dc.address_name,\n                dc.project_name,\n                dc.l1_label,\n                'deposit_wallet' AS l2_label,\n                COUNT(\n                    DISTINCT project_name\n                ) over(\n                    PARTITION BY dc.blockchain,\n                    xfer.from_address\n                ) AS project_count -- how many projects has each from address sent to\n            FROM\n                polygon.core.fact_token_transfers\n                xfer\n                JOIN distributor_cex dc\n                ON dc.address = xfer.to_address\n            WHERE\n                raw_amount > 0\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\nGROUP BY\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9\nUNION\nSELECT\n    DISTINCT dc.system_created_at,\n    dc.insert_date,\n    dc.blockchain,\n    tr.from_address AS address,\n    dc.creator,\n    dc.address_name,\n    dc.project_name,\n    dc.l1_label,\n    'deposit_wallet' AS l2_label,\n    COUNT(\n        DISTINCT project_name\n    ) over(\n        PARTITION BY dc.blockchain,\n        tr.from_address\n    ) AS project_count\nFROM\n    polygon.core.fact_traces\n    tr\n    JOIN distributor_cex dc\n    ON dc.address = tr.to_address\nWHERE\n    tx_status = 'SUCCESS'\n    AND matic_value > 0\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\nGROUP BY\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9\n)\n),\nreal_sats AS (\n    SELECT\n        from_address,\n        COALESCE(project_name, 'blunts') AS project_names\n    FROM\n        polygon.core.fact_token_transfers\n        xfer\n        LEFT OUTER JOIN distributor_cex dc\n        ON dc.address = xfer.to_address\n    WHERE\n        from_address IN (\n            SELECT\n                address\n            FROM\n                possible_sats\n        )\n        AND raw_amount > 0\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\nUNION\nSELECT\n    from_address,\n    COALESCE(project_name, 'blunts') AS project_names\nFROM\n    polygon.core.fact_traces\n    tr\n    LEFT OUTER JOIN distributor_cex dc\n    ON dc.address = tr.to_address\nWHERE\n    from_address IN (\n        SELECT\n            address\n        FROM\n            possible_sats\n    )\n    AND tx_status = 'SUCCESS'\n    AND matic_value > 0\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\n),\nproject_counts as (\n    select distinct from_address, \n    count(distinct project_names) as project_count\n    from real_sats\n    group by from_address\n),\nexclusive_sats AS (\n    SELECT\n        DISTINCT from_address AS address\n    FROM\n        project_counts\n    WHERE\n        project_count = 1\n    GROUP BY\n        1\n),\nfinal_base AS(\n    SELECT\n        DISTINCT CURRENT_TIMESTAMP AS system_created_at,\n        CURRENT_TIMESTAMP AS insert_date,\n        blockchain,\n        e.address,\n        creator,\n        l1_label,\n        l2_label,\n        project_name,\n        CONCAT(\n            project_name,\n            ' deposit_wallet'\n        ) AS address_name\n    FROM\n        exclusive_sats e\n        JOIN possible_sats p\n        ON e.address = p.address\n)\nSELECT\n    DISTINCT system_created_at,\n    insert_date,\n    blockchain,\n    address,\n    creator,\n    l1_label,\n    l2_label,\n    address_name,\n    project_name\nFROM\n    final_base\nWHERE\n    address NOT IN (\n        SELECT\n            DISTINCT address\n        FROM\n            CROSSCHAIN_DEV.silver_crosschain.address_labels\n        WHERE\n            blockchain = 'polygon'\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver_crosschain.snowflake_Polygon_satellites"}, "model.crosschain_models.silver__hourly_prices_coin_gecko": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', id, recorded_hour)\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['recorded_hour::DATE','_inserted_timestamp::DATE'],\r\n) }}\r\n\r\nWITH base AS (\r\n\r\n    SELECT\r\n        id,\r\n        TO_TIMESTAMP_NTZ(\r\n            d.value [0] :: NUMBER,\r\n            3\r\n        ) AS recorded_hour,\r\n        d.value [1] :: FLOAT AS OPEN,\r\n        d.value [2] :: FLOAT AS high,\r\n        d.value [3] :: FLOAT AS low,\r\n        d.value [4] :: FLOAT AS CLOSE,\r\n        recorded_hour :: DATE AS recorded_date_part,\r\n        HOUR(recorded_hour) AS recorded_hour_part,\r\n        MINUTE(recorded_hour) AS recorded_minute_part,\r\n        _inserted_timestamp\r\n    FROM\r\n        {{ ref('bronze__hourly_prices_coin_gecko') }}\r\n        LEFT JOIN TABLE(FLATTEN(DATA)) d\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    _inserted_date >= (\r\n        SELECT\r\n            MAX(\r\n                _inserted_timestamp :: DATE\r\n            )\r\n        FROM\r\n            {{ this }}\r\n    )\r\n    AND _inserted_timestamp > (\r\n        SELECT\r\n            MAX(_inserted_timestamp)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% endif %}\r\n)\r\nSELECT\r\n    b.id,\r\n    b.recorded_hour,\r\n    b.open AS OPEN,\r\n    GREATEST(\r\n        b.high,\r\n        b2.high\r\n    ) AS high,\r\n    LEAST(\r\n        b.low,\r\n        b2.low\r\n    ) AS low,\r\n    b2.close AS CLOSE,\r\n    b2._inserted_timestamp\r\nFROM\r\n    base b\r\n    INNER JOIN base b2\r\n    ON b.id = b2.id\r\n    AND b.recorded_date_part = b2.recorded_date_part\r\n    AND b.recorded_hour_part = b2.recorded_hour_part\r\n    AND b.recorded_minute_part = 0\r\n    AND b2.recorded_minute_part = 30\r\nWHERE\r\n    b2.id IS NOT NULL qualify(ROW_NUMBER() over (PARTITION BY b.id, b.recorded_hour\r\nORDER BY\r\n    b2._inserted_timestamp DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.crosschain_models.bronze__hourly_prices_coin_gecko"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', id, recorded_hour)", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["recorded_hour::DATE", "_inserted_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "hourly_prices", "silver__hourly_prices_coin_gecko"], "unique_id": "model.crosschain_models.silver__hourly_prices_coin_gecko", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\hourly_prices\\silver__hourly_prices_coin_gecko.sql", "original_file_path": "models\\silver\\hourly_prices\\silver__hourly_prices_coin_gecko.sql", "name": "silver__hourly_prices_coin_gecko", "alias": "hourly_prices_coin_gecko", "checksum": {"name": "sha256", "checksum": "e4dabb2155a8e6e9d08d3fb9be735e299fe48b233cf0327a4f28bdcafbdb2da7"}, "tags": [], "refs": [["bronze__hourly_prices_coin_gecko"]], "sources": [], "metrics": [], "description": "", "columns": {"ID": {"name": "ID", "description": "unique identifier representing the asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECORDED_HOUR": {"name": "RECORDED_HOUR", "description": "opening hour of price data", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OPEN": {"name": "OPEN", "description": "open price of asset for hour", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HIGH": {"name": "HIGH", "description": "high price of asset for hour", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOW": {"name": "LOW", "description": "low price of asset for hour", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CLOSE": {"name": "CLOSE", "description": "close price of asset for hour", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\hourly_prices\\silver__hourly_prices_coin_gecko.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\hourly_prices\\silver__hourly_prices_coin_gecko.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', id, recorded_hour)", "incremental_strategy": "delete+insert", "cluster_by": ["recorded_hour::DATE", "_inserted_timestamp::DATE"]}, "created_at": 1666821807.9200459, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        id,\n        TO_TIMESTAMP_NTZ(\n            d.value [0] :: NUMBER,\n            3\n        ) AS recorded_hour,\n        d.value [1] :: FLOAT AS OPEN,\n        d.value [2] :: FLOAT AS high,\n        d.value [3] :: FLOAT AS low,\n        d.value [4] :: FLOAT AS CLOSE,\n        recorded_hour :: DATE AS recorded_date_part,\n        HOUR(recorded_hour) AS recorded_hour_part,\n        MINUTE(recorded_hour) AS recorded_minute_part,\n        _inserted_timestamp\n    FROM\n        CROSSCHAIN_DEV.bronze.hourly_prices_coin_gecko\n        LEFT JOIN TABLE(FLATTEN(DATA)) d\n\n\nWHERE\n    _inserted_date >= (\n        SELECT\n            MAX(\n                _inserted_timestamp :: DATE\n            )\n        FROM\n            CROSSCHAIN_DEV.silver.hourly_prices_coin_gecko\n    )\n    AND _inserted_timestamp > (\n        SELECT\n            MAX(_inserted_timestamp)\n        FROM\n            CROSSCHAIN_DEV.silver.hourly_prices_coin_gecko\n    )\n\n)\nSELECT\n    b.id,\n    b.recorded_hour,\n    b.open AS OPEN,\n    GREATEST(\n        b.high,\n        b2.high\n    ) AS high,\n    LEAST(\n        b.low,\n        b2.low\n    ) AS low,\n    b2.close AS CLOSE,\n    b2._inserted_timestamp\nFROM\n    base b\n    INNER JOIN base b2\n    ON b.id = b2.id\n    AND b.recorded_date_part = b2.recorded_date_part\n    AND b.recorded_hour_part = b2.recorded_hour_part\n    AND b.recorded_minute_part = 0\n    AND b2.recorded_minute_part = 30\nWHERE\n    b2.id IS NOT NULL qualify(ROW_NUMBER() over (PARTITION BY b.id, b.recorded_hour\nORDER BY\n    b2._inserted_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.hourly_prices_coin_gecko"}, "model.crosschain_models.silver_crosschain__snowflake_Flow_satellites": {"raw_sql": "{{ config(\r\n  materialized = 'incremental',\r\n  unique_key = \"address\",\r\n  incremental_strategy = 'delete+insert',\r\n) }}\r\n\r\nWITH distributor_cex AS (\r\n  -- THIS STATEMENT FINDS KNOWN CEX LABELS WITHIN THE BRONZE ADDRESS LABELS TABLE\r\n\r\n  SELECT\r\n    system_created_at,\r\n    insert_date,\r\n    blockchain,\r\n    address,\r\n    creator,\r\n    l1_label,\r\n    l2_label,\r\n    address_name,\r\n    project_name\r\n  FROM\r\n    {{ ref('silver_crosschain__address_labels') }}\r\n  WHERE\r\n    blockchain = 'flow'\r\n    AND l1_label = 'cex'\r\n    AND l2_label = 'hot_wallet'\r\n),\r\npossible_sats AS (\r\n  SELECT\r\n    DISTINCT *\r\n  FROM\r\n    (\r\n      SELECT\r\n        DISTINCT dc.system_created_at,\r\n        dc.insert_date,\r\n        dc.blockchain,\r\n        xfer.sender AS address,\r\n        dc.creator,\r\n        dc.address_name,\r\n        dc.project_name,\r\n        dc.l1_label,\r\n        'deposit_wallet' AS l2_label,\r\n        COUNT(\r\n          DISTINCT project_name\r\n        ) over(\r\n          PARTITION BY dc.blockchain,\r\n          xfer.sender\r\n        ) AS project_count -- how many projects has each from address sent to\r\n      FROM\r\n        {{ source(\r\n          'flow_core',\r\n          'ez_token_transfers'\r\n        ) }}\r\n        xfer\r\n        JOIN distributor_cex dc\r\n        ON dc.address = xfer.recipient\r\n      WHERE\r\n        amount > 0\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\nGROUP BY\r\n  1,\r\n  2,\r\n  3,\r\n  4,\r\n  5,\r\n  6,\r\n  7,\r\n  8,\r\n  9\r\n)\r\n),\r\nreal_sats AS (\r\n  SELECT\r\n    sender,\r\n    COUNT(DISTINCT COALESCE(project_name, 'blunts')) AS project_count\r\n  FROM\r\n    {{ source(\r\n      'flow_core',\r\n      'ez_token_transfers'\r\n    ) }}\r\n    xfer\r\n    LEFT OUTER JOIN distributor_cex dc\r\n    ON dc.address = xfer.recipient\r\n  WHERE\r\n    amount > 0\r\n    AND sender IN (\r\n      SELECT\r\n        address\r\n      FROM\r\n        possible_sats\r\n    )\r\n    AND recipient != '0xf919ee77447b7497'\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\nGROUP BY\r\n  sender\r\n),\r\nexclusive_sats AS (\r\n  SELECT\r\n    DISTINCT sender AS address\r\n  FROM\r\n    real_sats\r\n  WHERE\r\n    project_count = 1\r\n  GROUP BY\r\n    1\r\n),\r\nfinal_base AS(\r\n  SELECT\r\n    DISTINCT CURRENT_TIMESTAMP AS system_created_at,\r\n    CURRENT_TIMESTAMP AS insert_date,\r\n    blockchain,\r\n    e.address,\r\n    creator,\r\n    l1_label,\r\n    l2_label,\r\n    project_name,\r\n    CONCAT(\r\n      project_name,\r\n      ' deposit_wallet'\r\n    ) AS address_name\r\n  FROM\r\n    exclusive_sats e\r\n    JOIN possible_sats p\r\n    ON e.address = p.address\r\n)\r\nSELECT\r\n  DISTINCT system_created_at,\r\n  insert_date,\r\n  blockchain,\r\n  address,\r\n  creator,\r\n  l1_label,\r\n  l2_label,\r\n  address_name,\r\n  project_name\r\nFROM\r\n  final_base\r\nWHERE\r\n  address NOT IN (\r\n    SELECT\r\n      DISTINCT address\r\n    FROM\r\n      {{ ref('silver_crosschain__address_labels') }}\r\n    WHERE\r\n      blockchain = 'flow'\r\n  )", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.flow_core.ez_token_transfers", "source.crosschain_models.flow_core.ez_token_transfers", "model.crosschain_models.silver_crosschain__address_labels", "model.crosschain_models.silver_crosschain__address_labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "silver_crosschain__snowflake_Flow_satellites"], "unique_id": "model.crosschain_models.silver_crosschain__snowflake_Flow_satellites", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Flow_satellites.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Flow_satellites.sql", "name": "silver_crosschain__snowflake_Flow_satellites", "alias": "snowflake_Flow_satellites", "checksum": {"name": "sha256", "checksum": "9eed3770869e12f075318edfe2997fbfc1b2b7379cf56ab476a1bb39d4a04792"}, "tags": [], "refs": [["silver_crosschain__address_labels"], ["silver_crosschain__address_labels"]], "sources": [["flow_core", "ez_token_transfers"], ["flow_core", "ez_token_transfers"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Flow_satellites.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Flow_satellites.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "delete+insert"}, "created_at": 1666821807.2602346, "compiled_sql": "\n\nWITH distributor_cex AS (\n  -- THIS STATEMENT FINDS KNOWN CEX LABELS WITHIN THE BRONZE ADDRESS LABELS TABLE\n\n  SELECT\n    system_created_at,\n    insert_date,\n    blockchain,\n    address,\n    creator,\n    l1_label,\n    l2_label,\n    address_name,\n    project_name\n  FROM\n    CROSSCHAIN_DEV.silver_crosschain.address_labels\n  WHERE\n    blockchain = 'flow'\n    AND l1_label = 'cex'\n    AND l2_label = 'hot_wallet'\n),\npossible_sats AS (\n  SELECT\n    DISTINCT *\n  FROM\n    (\n      SELECT\n        DISTINCT dc.system_created_at,\n        dc.insert_date,\n        dc.blockchain,\n        xfer.sender AS address,\n        dc.creator,\n        dc.address_name,\n        dc.project_name,\n        dc.l1_label,\n        'deposit_wallet' AS l2_label,\n        COUNT(\n          DISTINCT project_name\n        ) over(\n          PARTITION BY dc.blockchain,\n          xfer.sender\n        ) AS project_count -- how many projects has each from address sent to\n      FROM\n        flow.core.ez_token_transfers\n        xfer\n        JOIN distributor_cex dc\n        ON dc.address = xfer.recipient\n      WHERE\n        amount > 0\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\nGROUP BY\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9\n)\n),\nreal_sats AS (\n  SELECT\n    sender,\n    COUNT(DISTINCT COALESCE(project_name, 'blunts')) AS project_count\n  FROM\n    flow.core.ez_token_transfers\n    xfer\n    LEFT OUTER JOIN distributor_cex dc\n    ON dc.address = xfer.recipient\n  WHERE\n    amount > 0\n    AND sender IN (\n      SELECT\n        address\n      FROM\n        possible_sats\n    )\n    AND recipient != '0xf919ee77447b7497'\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\nGROUP BY\n  sender\n),\nexclusive_sats AS (\n  SELECT\n    DISTINCT sender AS address\n  FROM\n    real_sats\n  WHERE\n    project_count = 1\n  GROUP BY\n    1\n),\nfinal_base AS(\n  SELECT\n    DISTINCT CURRENT_TIMESTAMP AS system_created_at,\n    CURRENT_TIMESTAMP AS insert_date,\n    blockchain,\n    e.address,\n    creator,\n    l1_label,\n    l2_label,\n    project_name,\n    CONCAT(\n      project_name,\n      ' deposit_wallet'\n    ) AS address_name\n  FROM\n    exclusive_sats e\n    JOIN possible_sats p\n    ON e.address = p.address\n)\nSELECT\n  DISTINCT system_created_at,\n  insert_date,\n  blockchain,\n  address,\n  creator,\n  l1_label,\n  l2_label,\n  address_name,\n  project_name\nFROM\n  final_base\nWHERE\n  address NOT IN (\n    SELECT\n      DISTINCT address\n    FROM\n      CROSSCHAIN_DEV.silver_crosschain.address_labels\n    WHERE\n      blockchain = 'flow'\n  )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver_crosschain.snowflake_Flow_satellites"}, "model.crosschain_models.silver__tags_nft_nftx_user": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    incremental_strategy = 'merge',\r\n    merge_update_columns = ['creator'],\r\n) }}\r\n\r\nWITH buyers AS (\r\n\r\n    SELECT\r\n        DISTINCT 'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        buyer_address AS address,\r\n        'nftx user' AS tag_name,\r\n        'nft' AS tag_type,\r\n        MIN(\r\n            block_timestamp :: DATE\r\n        ) AS start_date,\r\n        NULL AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at,\r\n        MIN(_INSERTED_TIMESTAMP) AS _INSERTED_TIMESTAMP\r\n    FROM\r\n        {{ source(\r\n            'ethereum_silver_nft',\r\n            'nftx_sales'\r\n        ) }}\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    _INSERTED_TIMESTAMP > (\r\n        SELECT\r\n            MAX(_INSERTED_TIMESTAMP)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% endif %}\r\nGROUP BY\r\n    buyer_address\r\n),\r\nsellers AS (\r\n    SELECT\r\n        DISTINCT 'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        seller_address AS address,\r\n        'nftx user' AS tag_name,\r\n        'nft' AS tag_type,\r\n        MIN(\r\n            block_timestamp :: DATE\r\n        ) AS start_date,\r\n        NULL AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at,\r\n        MIN(_INSERTED_TIMESTAMP) AS _INSERTED_TIMESTAMP\r\n    FROM\r\n        {{ source(\r\n            'ethereum_silver_nft',\r\n            'nftx_sales'\r\n        ) }}\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    _INSERTED_TIMESTAMP > (\r\n        SELECT\r\n            MAX(_INSERTED_TIMESTAMP)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% endif %}\r\nGROUP BY\r\n    seller_address\r\n),\r\nunion_table AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        buyers\r\n    UNION\r\n    SELECT\r\n        *\r\n    FROM\r\n        sellers\r\n),\r\nfinal_table AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        union_table qualify(ROW_NUMBER() over(PARTITION BY address\r\n    ORDER BY\r\n        start_date ASC)) = 1\r\n)\r\nSELECT\r\n    A.*\r\nFROM\r\n    final_table A", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.ethereum_silver_nft.nftx_sales", "source.crosschain_models.ethereum_silver_nft.nftx_sales"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "merge_update_columns": ["creator"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "silver__tags_nft_nftx_user"], "unique_id": "model.crosschain_models.silver__tags_nft_nftx_user", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\tags\\Ethereum\\silver__tags_nft_nftx_user.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_nftx_user.sql", "name": "silver__tags_nft_nftx_user", "alias": "tags_nft_nftx_user", "checksum": {"name": "sha256", "checksum": "65d8121bfa1d867ef605bab4a9fddb59a0d2a58e4adfdfb82951064551a350f5"}, "tags": [], "refs": [], "sources": [["ethereum_silver_nft", "nftx_sales"], ["ethereum_silver_nft", "nftx_sales"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\tags\\Ethereum\\silver__tags_nft_nftx_user.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_nftx_user.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "merge", "merge_update_columns": ["creator"]}, "created_at": 1666821808.168195, "compiled_sql": "\n\nWITH buyers AS (\n\n    SELECT\n        DISTINCT 'ethereum' AS blockchain,\n        'flipside' AS creator,\n        buyer_address AS address,\n        'nftx user' AS tag_name,\n        'nft' AS tag_type,\n        MIN(\n            block_timestamp :: DATE\n        ) AS start_date,\n        NULL AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at,\n        MIN(_INSERTED_TIMESTAMP) AS _INSERTED_TIMESTAMP\n    FROM\n        ethereum.silver_nft.nftx_sales\n\n\nWHERE\n    _INSERTED_TIMESTAMP > (\n        SELECT\n            MAX(_INSERTED_TIMESTAMP)\n        FROM\n            CROSSCHAIN_DEV.silver.tags_nft_nftx_user\n    )\n\nGROUP BY\n    buyer_address\n),\nsellers AS (\n    SELECT\n        DISTINCT 'ethereum' AS blockchain,\n        'flipside' AS creator,\n        seller_address AS address,\n        'nftx user' AS tag_name,\n        'nft' AS tag_type,\n        MIN(\n            block_timestamp :: DATE\n        ) AS start_date,\n        NULL AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at,\n        MIN(_INSERTED_TIMESTAMP) AS _INSERTED_TIMESTAMP\n    FROM\n        ethereum.silver_nft.nftx_sales\n\n\nWHERE\n    _INSERTED_TIMESTAMP > (\n        SELECT\n            MAX(_INSERTED_TIMESTAMP)\n        FROM\n            CROSSCHAIN_DEV.silver.tags_nft_nftx_user\n    )\n\nGROUP BY\n    seller_address\n),\nunion_table AS (\n    SELECT\n        *\n    FROM\n        buyers\n    UNION\n    SELECT\n        *\n    FROM\n        sellers\n),\nfinal_table AS (\n    SELECT\n        *\n    FROM\n        union_table qualify(ROW_NUMBER() over(PARTITION BY address\n    ORDER BY\n        start_date ASC)) = 1\n)\nSELECT\n    A.*\nFROM\n    final_table A", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.tags_nft_nftx_user"}, "model.crosschain_models.silver__tags_gnosis_safe_address": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    incremental_strategy = 'delete+insert',\r\n) }}\r\n\r\nSELECT\r\n    DISTINCT 'ethereum' AS blockchain,\r\n    'flipside' AS creator,\r\n    event_inputs :instantiation :: STRING AS address,\r\n    'gnosis safe address' AS tag_name,\r\n    'contract' AS tag_type,\r\n    DATE_TRUNC(\r\n        'day',\r\n        block_timestamp\r\n    ) AS start_date,\r\n    NULL AS end_date,\r\n    _inserted_timestamp,\r\n    CURRENT_TIMESTAMP AS tag_created_at\r\nFROM\r\n    {{ source(\r\n        'ethereum_silver',\r\n        'logs'\r\n    ) }}\r\nWHERE\r\n    event_name = 'ContractInstantiation'\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp > (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n\r\nqualify(ROW_NUMBER() over(PARTITION BY address\r\nORDER BY\r\n    start_date ASC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.ethereum_silver.logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "silver__tags_gnosis_safe_address"], "unique_id": "model.crosschain_models.silver__tags_gnosis_safe_address", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\tags\\Ethereum\\silver__tags_gnosis_safe_address.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_gnosis_safe_address.sql", "name": "silver__tags_gnosis_safe_address", "alias": "tags_gnosis_safe_address", "checksum": {"name": "sha256", "checksum": "34d94c13579d4fa12d7a25479cb217c73149663d7b9292314964e9365193b6de"}, "tags": [], "refs": [], "sources": [["ethereum_silver", "logs"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\tags\\Ethereum\\silver__tags_gnosis_safe_address.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_gnosis_safe_address.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "delete+insert"}, "created_at": 1666821807.1995335, "compiled_sql": "\n\nSELECT\n    DISTINCT 'ethereum' AS blockchain,\n    'flipside' AS creator,\n    event_inputs :instantiation :: STRING AS address,\n    'gnosis safe address' AS tag_name,\n    'contract' AS tag_type,\n    DATE_TRUNC(\n        'day',\n        block_timestamp\n    ) AS start_date,\n    NULL AS end_date,\n    _inserted_timestamp,\n    CURRENT_TIMESTAMP AS tag_created_at\nFROM\n    ethereum.silver.logs\nWHERE\n    event_name = 'ContractInstantiation'\n\n\nAND _inserted_timestamp > (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        CROSSCHAIN_DEV.silver.tags_gnosis_safe_address\n)\n\n\nqualify(ROW_NUMBER() over(PARTITION BY address\nORDER BY\n    start_date ASC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.tags_gnosis_safe_address"}, "model.crosschain_models.silver__tags_nft_larva_labs_user": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    incremental_strategy = 'merge',\r\n    merge_update_columns = ['creator'],\r\n) }}\r\n\r\nWITH buyers AS (\r\n\r\n    SELECT\r\n        DISTINCT 'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        buyer_address AS address,\r\n        'larva labs user' AS tag_name,\r\n        'nft' AS tag_type,\r\n        MIN(\r\n            block_timestamp :: DATE\r\n        ) AS start_date,\r\n        NULL AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at,\r\n        MIN(_inserted_timestamp) AS _inserted_timestamp\r\n    FROM\r\n        {{ source(\r\n            'ethereum_silver_nft',\r\n            'cryptopunk_sales'\r\n        ) }}\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    _inserted_timestamp > (\r\n        SELECT\r\n            MAX(_inserted_timestamp)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% endif %}\r\nGROUP BY\r\n    buyer_address\r\n),\r\nsellers AS (\r\n    SELECT\r\n        DISTINCT 'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        seller_address AS address,\r\n        'larva labs user' AS tag_name,\r\n        'nft' AS tag_type,\r\n        MIN(\r\n            block_timestamp :: DATE\r\n        ) AS start_date,\r\n        NULL AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at,\r\n        MIN(_inserted_timestamp) AS _inserted_timestamp\r\n    FROM\r\n        {{ source(\r\n            'ethereum_silver_nft',\r\n            'cryptopunk_sales'\r\n        ) }}\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    _inserted_timestamp > (\r\n        SELECT\r\n            MAX(_inserted_timestamp)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% endif %}\r\nGROUP BY\r\n    seller_address\r\n),\r\nunion_table AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        buyers\r\n    UNION\r\n    SELECT\r\n        *\r\n    FROM\r\n        sellers\r\n),\r\nfinal_table AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        union_table qualify(ROW_NUMBER() over(PARTITION BY address\r\n    ORDER BY\r\n        start_date ASC)) = 1\r\n)\r\nSELECT\r\n    A.*\r\nFROM\r\n    final_table A", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.ethereum_silver_nft.cryptopunk_sales", "source.crosschain_models.ethereum_silver_nft.cryptopunk_sales"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "merge_update_columns": ["creator"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "silver__tags_nft_larva_labs_user"], "unique_id": "model.crosschain_models.silver__tags_nft_larva_labs_user", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\tags\\Ethereum\\silver__tags_nft_larva_labs_user.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_larva_labs_user.sql", "name": "silver__tags_nft_larva_labs_user", "alias": "tags_nft_larva_labs_user", "checksum": {"name": "sha256", "checksum": "1f7f06c47f54bc6974490435b277dea97a5ebf07465a8a192ac237a4bf399c91"}, "tags": [], "refs": [], "sources": [["ethereum_silver_nft", "cryptopunk_sales"], ["ethereum_silver_nft", "cryptopunk_sales"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\tags\\Ethereum\\silver__tags_nft_larva_labs_user.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_larva_labs_user.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "merge", "merge_update_columns": ["creator"]}, "created_at": 1666821807.8887057, "compiled_sql": "\n\nWITH buyers AS (\n\n    SELECT\n        DISTINCT 'ethereum' AS blockchain,\n        'flipside' AS creator,\n        buyer_address AS address,\n        'larva labs user' AS tag_name,\n        'nft' AS tag_type,\n        MIN(\n            block_timestamp :: DATE\n        ) AS start_date,\n        NULL AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at,\n        MIN(_inserted_timestamp) AS _inserted_timestamp\n    FROM\n        ethereum.silver_nft.cryptopunk_sales\n\n\nWHERE\n    _inserted_timestamp > (\n        SELECT\n            MAX(_inserted_timestamp)\n        FROM\n            CROSSCHAIN_DEV.silver.tags_nft_larva_labs_user\n    )\n\nGROUP BY\n    buyer_address\n),\nsellers AS (\n    SELECT\n        DISTINCT 'ethereum' AS blockchain,\n        'flipside' AS creator,\n        seller_address AS address,\n        'larva labs user' AS tag_name,\n        'nft' AS tag_type,\n        MIN(\n            block_timestamp :: DATE\n        ) AS start_date,\n        NULL AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at,\n        MIN(_inserted_timestamp) AS _inserted_timestamp\n    FROM\n        ethereum.silver_nft.cryptopunk_sales\n\n\nWHERE\n    _inserted_timestamp > (\n        SELECT\n            MAX(_inserted_timestamp)\n        FROM\n            CROSSCHAIN_DEV.silver.tags_nft_larva_labs_user\n    )\n\nGROUP BY\n    seller_address\n),\nunion_table AS (\n    SELECT\n        *\n    FROM\n        buyers\n    UNION\n    SELECT\n        *\n    FROM\n        sellers\n),\nfinal_table AS (\n    SELECT\n        *\n    FROM\n        union_table qualify(ROW_NUMBER() over(PARTITION BY address\n    ORDER BY\n        start_date ASC)) = 1\n)\nSELECT\n    A.*\nFROM\n    final_table A", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.tags_nft_larva_labs_user"}, "model.crosschain_models.silver_crosschain__snowflake_SOL_satellites": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    incremental_strategy = 'delete+insert',\r\n) }}\r\n\r\nWITH distributor_cex AS (\r\n    -- THIS STATEMENT FINDS KNOWN CEX LABELS WITHIN THE BRONZE ADDRESS LABELS TABLE\r\n\r\n    SELECT\r\n        system_created_at,\r\n        insert_date,\r\n        blockchain,\r\n        address,\r\n        creator,\r\n        l1_label,\r\n        l2_label,\r\n        address_name,\r\n        project_name\r\n    FROM\r\n        {{ ref('silver_crosschain__address_labels') }}\r\n    WHERE\r\n        blockchain = 'solana'\r\n        AND l1_label = 'cex'\r\n        AND l2_label = 'hot_wallet'\r\n),\r\npossible_sats AS (\r\n    -- THIS STATEMENT LOCATES POTENTIAL SATELLITE WALLETS BASED ON DEPOSIT BEHAVIOR\r\n    SELECT\r\n        DISTINCT *\r\n    FROM\r\n        (\r\n            SELECT\r\n                DISTINCT dc.system_created_at,\r\n                dc.insert_date,\r\n                dc.blockchain,\r\n                xfer.tx_from AS address,\r\n                dc.creator,\r\n                dc.address_name,\r\n                dc.project_name,\r\n                dc.l1_label,\r\n                'deposit_wallet' AS l2_label,\r\n                COUNT(\r\n                    DISTINCT project_name\r\n                ) over(\r\n                    PARTITION BY dc.blockchain,\r\n                    xfer.tx_from\r\n                ) AS project_count -- how many projects has each from address sent to\r\n            FROM\r\n                {{ source(\r\n                    'solana_core',\r\n                    'fact_transfers'\r\n                ) }}\r\n                xfer\r\n                JOIN distributor_cex dc\r\n                ON dc.address = xfer.tx_to\r\n            WHERE\r\n                amount > 0\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\nGROUP BY\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9\r\n)\r\n),\r\nreal_sats AS (\r\n    SELECT\r\n        tx_from,\r\n        COUNT(DISTINCT COALESCE(project_name, 'blunts')) AS project_count\r\n    FROM\r\n        {{ source(\r\n            'solana_core',\r\n            'fact_transfers'\r\n        ) }}\r\n        xfer\r\n        LEFT OUTER JOIN distributor_cex dc\r\n        ON dc.address = xfer.tx_to\r\n    WHERE\r\n        amount > 0\r\n        AND tx_from IN (\r\n            SELECT\r\n                address\r\n            FROM\r\n                possible_sats\r\n        )\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\nGROUP BY\r\n    tx_from\r\n),\r\nexclusive_sats AS (\r\n    SELECT\r\n        DISTINCT tx_from AS address\r\n    FROM\r\n        real_sats\r\n    WHERE\r\n        project_count = 1\r\n    GROUP BY\r\n        1\r\n),\r\nfinal_base AS(\r\n    SELECT\r\n        DISTINCT CURRENT_TIMESTAMP AS system_created_at,\r\n        CURRENT_TIMESTAMP AS insert_date,\r\n        blockchain,\r\n        e.address,\r\n        creator,\r\n        l1_label,\r\n        l2_label,\r\n        project_name,\r\n        CONCAT(\r\n            project_name,\r\n            ' deposit_wallet'\r\n        ) AS address_name\r\n    FROM\r\n        exclusive_sats e\r\n        JOIN possible_sats p\r\n        ON e.address = p.address\r\n)\r\nSELECT\r\n    DISTINCT system_created_at,\r\n    insert_date,\r\n    blockchain,\r\n    address,\r\n    creator,\r\n    l1_label,\r\n    l2_label,\r\n    address_name,\r\n    project_name\r\nFROM\r\n    final_base\r\nWHERE\r\n    address NOT IN (\r\n        SELECT\r\n            DISTINCT address\r\n        FROM\r\n            {{ ref('silver_crosschain__address_labels') }}\r\n        WHERE\r\n            blockchain = 'solana'\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.solana_core.fact_transfers", "source.crosschain_models.solana_core.fact_transfers", "model.crosschain_models.silver_crosschain__address_labels", "model.crosschain_models.silver_crosschain__address_labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "silver_crosschain__snowflake_SOL_satellites"], "unique_id": "model.crosschain_models.silver_crosschain__snowflake_SOL_satellites", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_SOL_satellites.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_SOL_satellites.sql", "name": "silver_crosschain__snowflake_SOL_satellites", "alias": "snowflake_SOL_satellites", "checksum": {"name": "sha256", "checksum": "90c6f8cfa3d59865aab45795280f8b934e135ea944c36cffc3c0e672c1521666"}, "tags": [], "refs": [["silver_crosschain__address_labels"], ["silver_crosschain__address_labels"]], "sources": [["solana_core", "fact_transfers"], ["solana_core", "fact_transfers"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_SOL_satellites.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_SOL_satellites.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "delete+insert"}, "created_at": 1666821808.1838248, "compiled_sql": "\n\nWITH distributor_cex AS (\n    -- THIS STATEMENT FINDS KNOWN CEX LABELS WITHIN THE BRONZE ADDRESS LABELS TABLE\n\n    SELECT\n        system_created_at,\n        insert_date,\n        blockchain,\n        address,\n        creator,\n        l1_label,\n        l2_label,\n        address_name,\n        project_name\n    FROM\n        CROSSCHAIN_DEV.silver_crosschain.address_labels\n    WHERE\n        blockchain = 'solana'\n        AND l1_label = 'cex'\n        AND l2_label = 'hot_wallet'\n),\npossible_sats AS (\n    -- THIS STATEMENT LOCATES POTENTIAL SATELLITE WALLETS BASED ON DEPOSIT BEHAVIOR\n    SELECT\n        DISTINCT *\n    FROM\n        (\n            SELECT\n                DISTINCT dc.system_created_at,\n                dc.insert_date,\n                dc.blockchain,\n                xfer.tx_from AS address,\n                dc.creator,\n                dc.address_name,\n                dc.project_name,\n                dc.l1_label,\n                'deposit_wallet' AS l2_label,\n                COUNT(\n                    DISTINCT project_name\n                ) over(\n                    PARTITION BY dc.blockchain,\n                    xfer.tx_from\n                ) AS project_count -- how many projects has each from address sent to\n            FROM\n                solana.core.fact_transfers\n                xfer\n                JOIN distributor_cex dc\n                ON dc.address = xfer.tx_to\n            WHERE\n                amount > 0\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\nGROUP BY\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9\n)\n),\nreal_sats AS (\n    SELECT\n        tx_from,\n        COUNT(DISTINCT COALESCE(project_name, 'blunts')) AS project_count\n    FROM\n        solana.core.fact_transfers\n        xfer\n        LEFT OUTER JOIN distributor_cex dc\n        ON dc.address = xfer.tx_to\n    WHERE\n        amount > 0\n        AND tx_from IN (\n            SELECT\n                address\n            FROM\n                possible_sats\n        )\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\nGROUP BY\n    tx_from\n),\nexclusive_sats AS (\n    SELECT\n        DISTINCT tx_from AS address\n    FROM\n        real_sats\n    WHERE\n        project_count = 1\n    GROUP BY\n        1\n),\nfinal_base AS(\n    SELECT\n        DISTINCT CURRENT_TIMESTAMP AS system_created_at,\n        CURRENT_TIMESTAMP AS insert_date,\n        blockchain,\n        e.address,\n        creator,\n        l1_label,\n        l2_label,\n        project_name,\n        CONCAT(\n            project_name,\n            ' deposit_wallet'\n        ) AS address_name\n    FROM\n        exclusive_sats e\n        JOIN possible_sats p\n        ON e.address = p.address\n)\nSELECT\n    DISTINCT system_created_at,\n    insert_date,\n    blockchain,\n    address,\n    creator,\n    l1_label,\n    l2_label,\n    address_name,\n    project_name\nFROM\n    final_base\nWHERE\n    address NOT IN (\n        SELECT\n            DISTINCT address\n        FROM\n            CROSSCHAIN_DEV.silver_crosschain.address_labels\n        WHERE\n            blockchain = 'solana'\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver_crosschain.snowflake_SOL_satellites"}, "model.crosschain_models.silver__tags_active_bsc_last_7": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', address, start_date)\",\r\n    incremental_strategy = 'delete+insert',\r\n) }}\r\n\r\n\r\n{% if is_incremental() %}\r\n  with base as (\r\n      select distinct \r\n        from_address as address,\r\n        min(date_trunc('day', block_timestamp)) as start_date\r\n        from     \r\n        {{ source(\r\n        'bsc_silver',\r\n        'transactions'\r\n        ) }}\r\n        WHERE block_timestamp >= current_date -7\r\n        group by from_address\r\n  ), current_tagged as (\r\n      select *\r\n      from {{ this }}\r\n      where end_date is null\r\n  ), additions as (\r\n      select distinct \r\n        'bsc' as blockchain,\r\n        'flipside' as creator,\r\n        address as address,\r\n        'active on bsc last 7' as tag_name,\r\n        'activity' as tag_type,\r\n        start_date::date as start_date, \r\n        null as end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n        from base\r\n        where address not in (select distinct address from current_tagged)\r\n  ),\r\n     cap_end_date as (\r\n      select distinct \r\n        blockchain,\r\n        creator,\r\n        address,\r\n        tag_name,\r\n        tag_type,\r\n        start_date::date, \r\n        date_trunc('DAY', current_date)::date as end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n        from current_tagged\r\n        where address not in (select distinct address from base)\r\n  )\r\n  select * from additions\r\n  union \r\n  select * from cap_end_date\r\n\r\n{% else %}\r\n\r\n    with address_base as (\r\n    select distinct from_address, block_timestamp::date as bt\r\n    from    \r\n    {{ source(\r\n        'bsc_silver',\r\n        'transactions'\r\n    ) }}\r\n    ),\r\n    next_date as (\r\n        select *, \r\n            lead(bt) over (partition by from_address order by bt) as nt,\r\n            datediff('day',bt, nt) as days_between_activity\r\n        from address_base\r\n    )\r\n    , conditional_group as (\r\n    select \r\n        *,\r\n        conditional_true_event(days_between_activity > 7) over (partition by from_address order by bt) as e\r\n        from next_date\r\n    )\r\n    , conditional_group_lagged as (\r\n        select *,\r\n        coalesce(lag(e) over (partition by from_address order by bt),0) as grouping_val\r\n        from conditional_group\r\n    )\r\n    , final_base as (\r\n        select \r\n            from_address,\r\n            grouping_val,\r\n            min(bt) as start_date,\r\n            dateadd('day',7,max(bt)) as end_date\r\n        from conditional_group_lagged\r\n        group by 1, 2\r\n    )\r\n    select \r\n        'bsc' as blockchain,\r\n        'flipside' as creator,\r\n        from_address as address,\r\n        'active on bsc last 7' as tag_name,\r\n        'activity' as tag_type,\r\n        start_date, \r\n        iff(end_date>current_date, null, end_date) as end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    from final_base\r\n\r\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.bsc_silver.transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', address, start_date)", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "tags", "BSC", "silver__tags_active_bsc_last_7"], "unique_id": "model.crosschain_models.silver__tags_active_bsc_last_7", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\tags\\BSC\\silver__tags_active_bsc_last_7.sql", "original_file_path": "models\\silver\\tags\\BSC\\silver__tags_active_bsc_last_7.sql", "name": "silver__tags_active_bsc_last_7", "alias": "tags_active_bsc_last_7", "checksum": {"name": "sha256", "checksum": "80f79b4660f3451ede8db1bd20770a8dfe00f9fbe78f4b9d2cd8e4403cdf1528"}, "tags": [], "refs": [], "sources": [["bsc_silver", "transactions"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\tags\\BSC\\silver__tags_active_bsc_last_7.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\BSC\\silver__tags_active_bsc_last_7.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', address, start_date)", "incremental_strategy": "delete+insert"}, "created_at": 1666821807.1175892, "compiled_sql": "\n\n\n\n  with base as (\n      select distinct \n        from_address as address,\n        min(date_trunc('day', block_timestamp)) as start_date\n        from     \n        bsc.silver.transactions\n        WHERE block_timestamp >= current_date -7\n        group by from_address\n  ), current_tagged as (\n      select *\n      from CROSSCHAIN_DEV.silver.tags_active_bsc_last_7\n      where end_date is null\n  ), additions as (\n      select distinct \n        'bsc' as blockchain,\n        'flipside' as creator,\n        address as address,\n        'active on bsc last 7' as tag_name,\n        'activity' as tag_type,\n        start_date::date as start_date, \n        null as end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n        from base\n        where address not in (select distinct address from current_tagged)\n  ),\n     cap_end_date as (\n      select distinct \n        blockchain,\n        creator,\n        address,\n        tag_name,\n        tag_type,\n        start_date::date, \n        date_trunc('DAY', current_date)::date as end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n        from current_tagged\n        where address not in (select distinct address from base)\n  )\n  select * from additions\n  union \n  select * from cap_end_date\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.tags_active_bsc_last_7"}, "model.crosschain_models.silver__tags_contract_address_bsc": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    incremental_strategy = 'delete+insert',\r\n) }}\r\n\r\nSELECT\r\n    DISTINCT 'bsc' AS blockchain,\r\n    'flipside' AS creator,\r\n    to_address :: STRING AS address,\r\n    'contract address' AS tag_name,\r\n    'contract' AS tag_type,\r\n    block_number,\r\n    DATE_TRUNC(\r\n        'day',\r\n        block_timestamp\r\n    ) AS start_date,\r\n    NULL AS end_date,\r\n    _inserted_timestamp,\r\n    CURRENT_TIMESTAMP AS tag_created_at\r\nFROM\r\n    {{ source(\r\n        'bsc_silver',\r\n        'traces'\r\n    ) }}\r\nWHERE\r\n    TYPE in ('CREATE', 'CREATE2')\r\n    AND tx_status = 'SUCCESS'\r\n    AND to_address IS NOT NULL\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp > (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n\r\nqualify(ROW_NUMBER() over(PARTITION BY address\r\nORDER BY\r\n    block_number DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.bsc_silver.traces"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "tags", "BSC", "silver__tags_contract_address_bsc"], "unique_id": "model.crosschain_models.silver__tags_contract_address_bsc", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\tags\\BSC\\silver__tags_contract_address_bsc.sql", "original_file_path": "models\\silver\\tags\\BSC\\silver__tags_contract_address_bsc.sql", "name": "silver__tags_contract_address_bsc", "alias": "tags_contract_address_bsc", "checksum": {"name": "sha256", "checksum": "4353d41f7cdb7d633319ad9efe3d380ceffcc1001883d5109e040961df6f1ecd"}, "tags": [], "refs": [], "sources": [["bsc_silver", "traces"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\tags\\BSC\\silver__tags_contract_address_bsc.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\BSC\\silver__tags_contract_address_bsc.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "delete+insert"}, "created_at": 1666821808.1427317, "compiled_sql": "\n\nSELECT\n    DISTINCT 'bsc' AS blockchain,\n    'flipside' AS creator,\n    to_address :: STRING AS address,\n    'contract address' AS tag_name,\n    'contract' AS tag_type,\n    block_number,\n    DATE_TRUNC(\n        'day',\n        block_timestamp\n    ) AS start_date,\n    NULL AS end_date,\n    _inserted_timestamp,\n    CURRENT_TIMESTAMP AS tag_created_at\nFROM\n    bsc.silver.traces\nWHERE\n    TYPE in ('CREATE', 'CREATE2')\n    AND tx_status = 'SUCCESS'\n    AND to_address IS NOT NULL\n\n\nAND _inserted_timestamp > (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        CROSSCHAIN_DEV.silver.tags_contract_address_bsc\n)\n\n\nqualify(ROW_NUMBER() over(PARTITION BY address\nORDER BY\n    block_number DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.tags_contract_address_bsc"}, "model.crosschain_models.silver_crosschain__snowflake_Optimism_satellites": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    incremental_strategy = 'delete+insert',\r\n) }}\r\n\r\nWITH distributor_cex AS (\r\n    -- THIS STATEMENT FINDS KNOWN CEX LABELS WITHIN THE BRONZE ADDRESS LABELS TABLE\r\n\r\n    SELECT\r\n        system_created_at,\r\n        insert_date,\r\n        blockchain,\r\n        address,\r\n        creator,\r\n        l1_label,\r\n        l2_label,\r\n        address_name,\r\n        project_name\r\n    FROM\r\n        {{ ref('silver_crosschain__address_labels') }}\r\n    WHERE\r\n        blockchain = 'optimism'\r\n        AND l1_label = 'cex'\r\n        AND l2_label = 'hot_wallet'\r\n),\r\npossible_sats AS (\r\n    -- THIS STATEMENT LOCATES POTENTIAL SATELLITE WALLETS BASED ON DEPOSIT BEHAVIOR\r\n    SELECT\r\n        DISTINCT *\r\n    FROM\r\n        (\r\n            SELECT\r\n                DISTINCT dc.system_created_at,\r\n                dc.insert_date,\r\n                dc.blockchain,\r\n                xfer.from_address AS address,\r\n                dc.creator,\r\n                dc.address_name,\r\n                dc.project_name,\r\n                dc.l1_label,\r\n                'deposit_wallet' AS l2_label,\r\n                COUNT(\r\n                    DISTINCT project_name\r\n                ) over(\r\n                    PARTITION BY dc.blockchain,\r\n                    xfer.from_address\r\n                ) AS project_count -- how many projects has each from address sent to\r\n            FROM\r\n                {{ source(\r\n                    'optimism_core',\r\n                    'fact_token_transfers'\r\n                ) }}\r\n                xfer\r\n                JOIN distributor_cex dc\r\n                ON dc.address = xfer.to_address\r\n            WHERE\r\n                raw_amount > 0\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\nGROUP BY\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9\r\nUNION\r\nSELECT\r\n    DISTINCT dc.system_created_at,\r\n    dc.insert_date,\r\n    dc.blockchain,\r\n    tr.from_address AS address,\r\n    dc.creator,\r\n    dc.address_name,\r\n    dc.project_name,\r\n    dc.l1_label,\r\n    'deposit_wallet' AS l2_label,\r\n    COUNT(\r\n        DISTINCT project_name\r\n    ) over(\r\n        PARTITION BY dc.blockchain,\r\n        tr.from_address\r\n    ) AS project_count\r\nFROM\r\n    {{ source(\r\n        'optimism_core',\r\n        'fact_traces'\r\n    ) }}\r\n    tr\r\n    JOIN distributor_cex dc\r\n    ON dc.address = tr.to_address\r\nWHERE\r\n    tx_status = 'SUCCESS'\r\n    AND eth_value > 0\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\nGROUP BY\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9\r\n)\r\n),\r\nreal_sats AS (\r\n    SELECT\r\n        from_address,\r\n        COALESCE(project_name, 'blunts') AS project_names\r\n    FROM\r\n        {{ source(\r\n            'optimism_core',\r\n            'fact_token_transfers'\r\n        ) }}\r\n        xfer\r\n        LEFT OUTER JOIN distributor_cex dc\r\n        ON dc.address = xfer.to_address\r\n    WHERE\r\n        from_address IN (\r\n            SELECT\r\n                address\r\n            FROM\r\n                possible_sats\r\n        )\r\n        AND raw_amount > 0\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\nUNION\r\nSELECT\r\n    from_address,\r\n    COALESCE(project_name, 'blunts') AS project_names\r\nFROM\r\n    {{ source(\r\n        'optimism_core',\r\n        'fact_traces'\r\n    ) }}\r\n    tr\r\n    LEFT OUTER JOIN distributor_cex dc\r\n    ON dc.address = tr.to_address\r\nWHERE\r\n    from_address IN (\r\n        SELECT\r\n            address\r\n        FROM\r\n            possible_sats\r\n    )\r\n    AND tx_status = 'SUCCESS'\r\n    AND eth_value > 0\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\n),\r\nproject_counts as (\r\n    select distinct from_address, \r\n    count(distinct project_names) as project_count\r\n    from real_sats\r\n    group by from_address\r\n),\r\nexclusive_sats AS (\r\n    SELECT\r\n        DISTINCT from_address AS address\r\n    FROM\r\n        project_counts\r\n    WHERE\r\n        project_count = 1\r\n    GROUP BY\r\n        1\r\n),\r\nfinal_base AS(\r\n    SELECT\r\n        DISTINCT CURRENT_TIMESTAMP AS system_created_at,\r\n        CURRENT_TIMESTAMP AS insert_date,\r\n        blockchain,\r\n        e.address,\r\n        creator,\r\n        l1_label,\r\n        l2_label,\r\n        project_name,\r\n        CONCAT(\r\n            project_name,\r\n            ' deposit_wallet'\r\n        ) AS address_name\r\n    FROM\r\n        exclusive_sats e\r\n        JOIN possible_sats p\r\n        ON e.address = p.address\r\n)\r\nSELECT\r\n    DISTINCT system_created_at,\r\n    insert_date,\r\n    blockchain,\r\n    address,\r\n    creator,\r\n    l1_label,\r\n    l2_label,\r\n    address_name,\r\n    project_name\r\nFROM\r\n    final_base\r\nWHERE\r\n    address NOT IN (\r\n        SELECT\r\n            DISTINCT address\r\n        FROM\r\n            {{ ref('silver_crosschain__address_labels') }}\r\n        WHERE\r\n            blockchain = 'optimism'\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.optimism_core.fact_token_transfers", "source.crosschain_models.optimism_core.fact_traces", "source.crosschain_models.optimism_core.fact_token_transfers", "source.crosschain_models.optimism_core.fact_traces", "model.crosschain_models.silver_crosschain__address_labels", "model.crosschain_models.silver_crosschain__address_labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "silver_crosschain__snowflake_Optimism_satellites"], "unique_id": "model.crosschain_models.silver_crosschain__snowflake_Optimism_satellites", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Optimism_satellites.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Optimism_satellites.sql", "name": "silver_crosschain__snowflake_Optimism_satellites", "alias": "snowflake_Optimism_satellites", "checksum": {"name": "sha256", "checksum": "1e4bae8f081017ab89a054a402f7557c72d86a59607a1339636a75d664fbc423"}, "tags": [], "refs": [["silver_crosschain__address_labels"], ["silver_crosschain__address_labels"]], "sources": [["optimism_core", "fact_token_transfers"], ["optimism_core", "fact_traces"], ["optimism_core", "fact_token_transfers"], ["optimism_core", "fact_traces"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Optimism_satellites.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Optimism_satellites.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "delete+insert"}, "created_at": 1666821808.0449553, "compiled_sql": "\n\nWITH distributor_cex AS (\n    -- THIS STATEMENT FINDS KNOWN CEX LABELS WITHIN THE BRONZE ADDRESS LABELS TABLE\n\n    SELECT\n        system_created_at,\n        insert_date,\n        blockchain,\n        address,\n        creator,\n        l1_label,\n        l2_label,\n        address_name,\n        project_name\n    FROM\n        CROSSCHAIN_DEV.silver_crosschain.address_labels\n    WHERE\n        blockchain = 'optimism'\n        AND l1_label = 'cex'\n        AND l2_label = 'hot_wallet'\n),\npossible_sats AS (\n    -- THIS STATEMENT LOCATES POTENTIAL SATELLITE WALLETS BASED ON DEPOSIT BEHAVIOR\n    SELECT\n        DISTINCT *\n    FROM\n        (\n            SELECT\n                DISTINCT dc.system_created_at,\n                dc.insert_date,\n                dc.blockchain,\n                xfer.from_address AS address,\n                dc.creator,\n                dc.address_name,\n                dc.project_name,\n                dc.l1_label,\n                'deposit_wallet' AS l2_label,\n                COUNT(\n                    DISTINCT project_name\n                ) over(\n                    PARTITION BY dc.blockchain,\n                    xfer.from_address\n                ) AS project_count -- how many projects has each from address sent to\n            FROM\n                optimism.core.fact_token_transfers\n                xfer\n                JOIN distributor_cex dc\n                ON dc.address = xfer.to_address\n            WHERE\n                raw_amount > 0\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\nGROUP BY\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9\nUNION\nSELECT\n    DISTINCT dc.system_created_at,\n    dc.insert_date,\n    dc.blockchain,\n    tr.from_address AS address,\n    dc.creator,\n    dc.address_name,\n    dc.project_name,\n    dc.l1_label,\n    'deposit_wallet' AS l2_label,\n    COUNT(\n        DISTINCT project_name\n    ) over(\n        PARTITION BY dc.blockchain,\n        tr.from_address\n    ) AS project_count\nFROM\n    optimism.core.fact_traces\n    tr\n    JOIN distributor_cex dc\n    ON dc.address = tr.to_address\nWHERE\n    tx_status = 'SUCCESS'\n    AND eth_value > 0\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\nGROUP BY\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9\n)\n),\nreal_sats AS (\n    SELECT\n        from_address,\n        COALESCE(project_name, 'blunts') AS project_names\n    FROM\n        optimism.core.fact_token_transfers\n        xfer\n        LEFT OUTER JOIN distributor_cex dc\n        ON dc.address = xfer.to_address\n    WHERE\n        from_address IN (\n            SELECT\n                address\n            FROM\n                possible_sats\n        )\n        AND raw_amount > 0\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\nUNION\nSELECT\n    from_address,\n    COALESCE(project_name, 'blunts') AS project_names\nFROM\n    optimism.core.fact_traces\n    tr\n    LEFT OUTER JOIN distributor_cex dc\n    ON dc.address = tr.to_address\nWHERE\n    from_address IN (\n        SELECT\n            address\n        FROM\n            possible_sats\n    )\n    AND tx_status = 'SUCCESS'\n    AND eth_value > 0\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\n),\nproject_counts as (\n    select distinct from_address, \n    count(distinct project_names) as project_count\n    from real_sats\n    group by from_address\n),\nexclusive_sats AS (\n    SELECT\n        DISTINCT from_address AS address\n    FROM\n        project_counts\n    WHERE\n        project_count = 1\n    GROUP BY\n        1\n),\nfinal_base AS(\n    SELECT\n        DISTINCT CURRENT_TIMESTAMP AS system_created_at,\n        CURRENT_TIMESTAMP AS insert_date,\n        blockchain,\n        e.address,\n        creator,\n        l1_label,\n        l2_label,\n        project_name,\n        CONCAT(\n            project_name,\n            ' deposit_wallet'\n        ) AS address_name\n    FROM\n        exclusive_sats e\n        JOIN possible_sats p\n        ON e.address = p.address\n)\nSELECT\n    DISTINCT system_created_at,\n    insert_date,\n    blockchain,\n    address,\n    creator,\n    l1_label,\n    l2_label,\n    address_name,\n    project_name\nFROM\n    final_base\nWHERE\n    address NOT IN (\n        SELECT\n            DISTINCT address\n        FROM\n            CROSSCHAIN_DEV.silver_crosschain.address_labels\n        WHERE\n            blockchain = 'optimism'\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver_crosschain.snowflake_Optimism_satellites"}, "model.crosschain_models.silver__tags_active_polygon_last_7": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', address, start_date)\",\r\n    incremental_strategy = 'delete+insert',\r\n) }}\r\n\r\n\r\n{% if is_incremental() %}\r\n  with base as (\r\n      select distinct \r\n        from_address as address,\r\n        min(date_trunc('day', block_timestamp)) as start_date\r\n        from     \r\n        {{ source(\r\n        'polygon_silver',\r\n        'transactions'\r\n        ) }}\r\n        WHERE block_timestamp >= current_date -7\r\n        group by from_address\r\n  ), current_tagged as (\r\n      select *\r\n      from {{ this }}\r\n      where end_date is null\r\n  ), additions as (\r\n      select distinct \r\n        'polygon' as blockchain,\r\n        'flipside' as creator,\r\n        address as address,\r\n        'active on polygon last 7' as tag_name,\r\n        'activity' as tag_type,\r\n        start_date::date as start_date, \r\n        null as end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n        from base\r\n        where address not in (select distinct address from current_tagged)\r\n  ),\r\n     cap_end_date as (\r\n      select distinct \r\n        blockchain,\r\n        creator,\r\n        address,\r\n        tag_name,\r\n        tag_type,\r\n        start_date::date, \r\n        date_trunc('DAY', current_date)::date as end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n        from current_tagged\r\n        where address not in (select distinct address from base)\r\n  )\r\n  select * from additions\r\n  union \r\n  select * from cap_end_date\r\n\r\n{% else %}\r\n\r\n    with address_base as (\r\n    select distinct from_address, block_timestamp::date as bt\r\n    from    \r\n    {{ source(\r\n        'polygon_silver',\r\n        'transactions'\r\n    ) }}\r\n    ),\r\n    next_date as (\r\n        select *, \r\n            lead(bt) over (partition by from_address order by bt) as nt,\r\n            datediff('day',bt, nt) as days_between_activity\r\n        from address_base\r\n    )\r\n    , conditional_group as (\r\n    select \r\n        *,\r\n        conditional_true_event(days_between_activity > 7) over (partition by from_address order by bt) as e\r\n        from next_date\r\n    )\r\n    , conditional_group_lagged as (\r\n        select *,\r\n        coalesce(lag(e) over (partition by from_address order by bt),0) as grouping_val\r\n        from conditional_group\r\n    )\r\n    , final_base as (\r\n        select \r\n            from_address,\r\n            grouping_val,\r\n            min(bt) as start_date,\r\n            dateadd('day',7,max(bt)) as end_date\r\n        from conditional_group_lagged\r\n        group by 1, 2\r\n    )\r\n    select \r\n        'polygon' as blockchain,\r\n        'flipside' as creator,\r\n        from_address as address,\r\n        'active on polygon last 7' as tag_name,\r\n        'activity' as tag_type,\r\n        start_date, \r\n        iff(end_date>current_date, null, end_date) as end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    from final_base\r\n\r\n\r\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.polygon_silver.transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', address, start_date)", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "tags", "Polygon", "silver__tags_active_polygon_last_7"], "unique_id": "model.crosschain_models.silver__tags_active_polygon_last_7", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\tags\\Polygon\\silver__tags_active_polygon_last_7.sql", "original_file_path": "models\\silver\\tags\\Polygon\\silver__tags_active_polygon_last_7.sql", "name": "silver__tags_active_polygon_last_7", "alias": "tags_active_polygon_last_7", "checksum": {"name": "sha256", "checksum": "564676dd283c7ad9092cf59dd29500b86eb968f2657a0414bb0f001085d2d4ba"}, "tags": [], "refs": [], "sources": [["polygon_silver", "transactions"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\tags\\Polygon\\silver__tags_active_polygon_last_7.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Polygon\\silver__tags_active_polygon_last_7.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', address, start_date)", "incremental_strategy": "delete+insert"}, "created_at": 1666821807.2842462, "compiled_sql": "\n\n\n\n  with base as (\n      select distinct \n        from_address as address,\n        min(date_trunc('day', block_timestamp)) as start_date\n        from     \n        polygon.silver.transactions\n        WHERE block_timestamp >= current_date -7\n        group by from_address\n  ), current_tagged as (\n      select *\n      from CROSSCHAIN_DEV.silver.tags_active_polygon_last_7\n      where end_date is null\n  ), additions as (\n      select distinct \n        'polygon' as blockchain,\n        'flipside' as creator,\n        address as address,\n        'active on polygon last 7' as tag_name,\n        'activity' as tag_type,\n        start_date::date as start_date, \n        null as end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n        from base\n        where address not in (select distinct address from current_tagged)\n  ),\n     cap_end_date as (\n      select distinct \n        blockchain,\n        creator,\n        address,\n        tag_name,\n        tag_type,\n        start_date::date, \n        date_trunc('DAY', current_date)::date as end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n        from current_tagged\n        where address not in (select distinct address from base)\n  )\n  select * from additions\n  union \n  select * from cap_end_date\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.tags_active_polygon_last_7"}, "model.crosschain_models.silver__tags_active_avalanche_last_7": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', address, start_date)\",\r\n    incremental_strategy = 'delete+insert',\r\n) }}\r\n\r\n\r\n{% if is_incremental() %}\r\n  with base as (\r\n      select distinct \r\n        from_address as address,\r\n        min(date_trunc('day', block_timestamp)) as start_date\r\n        from     \r\n        {{ source(\r\n        'avalanche_silver',\r\n        'transactions'\r\n        ) }}\r\n        WHERE block_timestamp >= current_date -7\r\n        group by from_address\r\n  ), current_tagged as (\r\n      select *\r\n      from {{ this }}\r\n      where end_date is null\r\n  ), additions as (\r\n      select distinct \r\n        'avalanche' as blockchain,\r\n        'flipside' as creator,\r\n        address as address,\r\n        'active on avalanche last 7' as tag_name,\r\n        'activity' as tag_type,\r\n        start_date::date as start_date, \r\n        null as end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n        from base\r\n        where address not in (select distinct address from current_tagged)\r\n  ),\r\n     cap_end_date as (\r\n      select distinct \r\n        blockchain,\r\n        creator,\r\n        address,\r\n        tag_name,\r\n        tag_type,\r\n        start_date::date, \r\n        date_trunc('DAY', current_date)::date as end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n        from current_tagged\r\n        where address not in (select distinct address from base)\r\n  )\r\n  select * from additions\r\n  union \r\n  select * from cap_end_date\r\n\r\n{% else %}\r\n\r\n    with address_base as (\r\n    select distinct from_address, block_timestamp::date as bt\r\n    from    \r\n    {{ source(\r\n        'avalanche_silver',\r\n        'transactions'\r\n    ) }}\r\n    ),\r\n    next_date as (\r\n        select *, \r\n            lead(bt) over (partition by from_address order by bt) as nt,\r\n            datediff('day',bt, nt) as days_between_activity\r\n        from address_base\r\n    )\r\n    , conditional_group as (\r\n    select \r\n        *,\r\n        conditional_true_event(days_between_activity > 7) over (partition by from_address order by bt) as e\r\n        from next_date\r\n    )\r\n    , conditional_group_lagged as (\r\n        select *,\r\n        coalesce(lag(e) over (partition by from_address order by bt),0) as grouping_val\r\n        from conditional_group\r\n    )\r\n    , final_base as (\r\n        select \r\n            from_address,\r\n            grouping_val,\r\n            min(bt) as start_date,\r\n            dateadd('day',7,max(bt)) as end_date\r\n        from conditional_group_lagged\r\n        group by 1, 2\r\n    )\r\n    select \r\n        'avalanche' as blockchain,\r\n        'flipside' as creator,\r\n        from_address as address,\r\n        'active on avalanche last 7' as tag_name,\r\n        'activity' as tag_type,\r\n        start_date, \r\n        iff(end_date>current_date, null, end_date) as end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    from final_base\r\n\r\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.avalanche_silver.transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', address, start_date)", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "tags", "Avalanche", "silver__tags_active_avalanche_last_7"], "unique_id": "model.crosschain_models.silver__tags_active_avalanche_last_7", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\tags\\Avalanche\\silver__tags_active_avalanche_last_7.sql", "original_file_path": "models\\silver\\tags\\Avalanche\\silver__tags_active_avalanche_last_7.sql", "name": "silver__tags_active_avalanche_last_7", "alias": "tags_active_avalanche_last_7", "checksum": {"name": "sha256", "checksum": "5d860256b6f1fa52623e0032a44ea4173b7a77d65faaca7a330b26ab36e0dbf8"}, "tags": [], "refs": [], "sources": [["avalanche_silver", "transactions"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\tags\\Avalanche\\silver__tags_active_avalanche_last_7.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Avalanche\\silver__tags_active_avalanche_last_7.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', address, start_date)", "incremental_strategy": "delete+insert"}, "created_at": 1666821808.0762064, "compiled_sql": "\n\n\n\n  with base as (\n      select distinct \n        from_address as address,\n        min(date_trunc('day', block_timestamp)) as start_date\n        from     \n        avalanche.silver.transactions\n        WHERE block_timestamp >= current_date -7\n        group by from_address\n  ), current_tagged as (\n      select *\n      from CROSSCHAIN_DEV.silver.tags_active_avalanche_last_7\n      where end_date is null\n  ), additions as (\n      select distinct \n        'avalanche' as blockchain,\n        'flipside' as creator,\n        address as address,\n        'active on avalanche last 7' as tag_name,\n        'activity' as tag_type,\n        start_date::date as start_date, \n        null as end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n        from base\n        where address not in (select distinct address from current_tagged)\n  ),\n     cap_end_date as (\n      select distinct \n        blockchain,\n        creator,\n        address,\n        tag_name,\n        tag_type,\n        start_date::date, \n        date_trunc('DAY', current_date)::date as end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n        from current_tagged\n        where address not in (select distinct address from base)\n  )\n  select * from additions\n  union \n  select * from cap_end_date\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.tags_active_avalanche_last_7"}, "model.crosschain_models.silver__tags_token_vesting_ETH": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    incremental_strategy = 'merge',\r\n    merge_update_columns = ['creator'],\r\n) }}\r\n\r\nWITH base_table AS (\r\n\r\n    SELECT\r\n        CASE\r\n            WHEN event_name = 'VestClaimed' THEN event_inputs :beneficiary\r\n            WHEN event_name = 'VestingClaimed' THEN event_inputs :\"_beneficiary\"\r\n            WHEN event_name = 'VestedTokenRedeemed' THEN event_inputs :\"_to\"\r\n            WHEN event_name = 'VestingMemberAdded' THEN origin_from_address\r\n            WHEN event_name IN (\r\n                'VestingTransfer',\r\n                'VestTransfer'\r\n            ) THEN event_inputs :to\r\n            WHEN event_name IN (\r\n                'Unlocked',\r\n                'Vesting',\r\n                'VestedRewardClaimed',\r\n                'VestedAmountClaimed'\r\n            )\r\n            AND event_inputs :recipient IS NOT NULL THEN event_inputs :recipient\r\n            WHEN event_name IN (\r\n                'Unlocked',\r\n                'Vesting',\r\n                'VestedRewardClaimed',\r\n                'VestedAmountClaimed'\r\n            )\r\n            AND event_inputs :recipient IS NULL\r\n            AND event_inputs :\"_address\" IS NOT NULL THEN event_inputs :\"_address\"\r\n            WHEN event_name IN (\r\n                'Unlocked',\r\n                'Vesting',\r\n                'VestedRewardClaimed',\r\n                'VestedAmountClaimed'\r\n            )\r\n            AND event_inputs :recipient IS NULL\r\n            AND event_inputs :\"_address\" IS NULL\r\n            AND event_inputs :address IS NOT NULL THEN event_inputs :address\r\n            WHEN event_name IN (\r\n                'Unlocked',\r\n                'Vesting',\r\n                'VestedRewardClaimed',\r\n                'VestedAmountClaimed'\r\n            )\r\n            AND event_inputs :recipient IS NULL\r\n            AND event_inputs :\"_address\" IS NULL\r\n            AND event_inputs :address IS NULL\r\n            AND event_inputs :\"_recipient\" IS NOT NULL THEN event_inputs :\"_recipient\"\r\n            WHEN event_name IN (\r\n                'Unlocked',\r\n                'Vesting',\r\n                'VestedRewardClaimed',\r\n                'VestedAmountClaimed'\r\n            )\r\n            AND event_inputs :recipient IS NULL\r\n            AND event_inputs :\"_address\" IS NULL\r\n            AND event_inputs :address IS NULL\r\n            AND event_inputs :\"_recipient\" IS NULL\r\n            AND event_inputs :to IS NOT NULL THEN event_inputs :to\r\n            WHEN event_name IN (\r\n                'Unlocked',\r\n                'Vesting',\r\n                'VestedRewardClaimed',\r\n                'VestedAmountClaimed'\r\n            )\r\n            AND event_inputs :recipient IS NULL\r\n            AND event_inputs :\"_address\" IS NULL\r\n            AND event_inputs :address IS NULL\r\n            AND event_inputs :\"_recipient\" IS NULL\r\n            AND event_inputs :to IS NULL\r\n            AND event_inputs :ethereumAddress IS NOT NULL THEN event_inputs :ethereumAddress\r\n            WHEN event_name IN (\r\n                'Unlocked',\r\n                'Vesting',\r\n                'VestedRewardClaimed',\r\n                'VestedAmountClaimed'\r\n            )\r\n            AND event_inputs :recipient IS NULL\r\n            AND event_inputs :\"_address\" IS NULL\r\n            AND event_inputs :address IS NULL\r\n            AND event_inputs :\"_recipient\" IS NULL\r\n            AND event_inputs :to IS NULL\r\n            AND event_inputs :ethereumAddress IS NULL\r\n            AND event_inputs :account IS NOT NULL THEN event_inputs :account\r\n            ELSE event_inputs :\"_to\"\r\n        END AS wallets,\r\n        MIN(_INSERTED_TIMESTAMP) AS _INSERTED_TIMESTAMP,\r\n        MIN(\r\n            block_timestamp :: DATE\r\n        ) AS start_date\r\n    FROM\r\n        {{ source(\r\n            'ethereum_silver',\r\n            'logs'\r\n        ) }}\r\n    WHERE\r\n        event_name IN (\r\n            'Unlocked',\r\n            'Vesting',\r\n            'VestedRewardClaimed',\r\n            'VestedAmountClaimed',\r\n            'VestClaimed',\r\n            'VestingClaimed',\r\n            'VestingTransfer',\r\n            'VestTransfer',\r\n            'VestedTokenRedeemed',\r\n            'VestingMemberAdded'\r\n        )\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp > (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\nGROUP BY\r\n    1\r\n)\r\nSELECT\r\n    DISTINCT 'ethereum' AS blockchain,\r\n    'flipside' AS creator,\r\n    wallets AS address,\r\n    'vested or locked token recipient' AS tag_name,\r\n    'wallet' AS tag_type,\r\n    start_date,\r\n    NULL AS end_date,\r\n    CURRENT_TIMESTAMP AS tag_created_at,\r\n    _inserted_timestamp\r\nFROM\r\n    base_table\r\nWHERE\r\n    wallets IS NOT NULL", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.ethereum_silver.logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "merge_update_columns": ["creator"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "silver__tags_token_vesting_ETH"], "unique_id": "model.crosschain_models.silver__tags_token_vesting_ETH", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\tags\\Ethereum\\silver__tags_token_vesting_ETH.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_token_vesting_ETH.sql", "name": "silver__tags_token_vesting_ETH", "alias": "tags_token_vesting_ETH", "checksum": {"name": "sha256", "checksum": "1445d01404be3fbbe81606f67b2458e09506c71df8f5f69056a564a67d5f0eae"}, "tags": [], "refs": [], "sources": [["ethereum_silver", "logs"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\tags\\Ethereum\\silver__tags_token_vesting_ETH.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_token_vesting_ETH.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "merge", "merge_update_columns": ["creator"]}, "created_at": 1666821806.9257574, "compiled_sql": "\n\nWITH base_table AS (\n\n    SELECT\n        CASE\n            WHEN event_name = 'VestClaimed' THEN event_inputs :beneficiary\n            WHEN event_name = 'VestingClaimed' THEN event_inputs :\"_beneficiary\"\n            WHEN event_name = 'VestedTokenRedeemed' THEN event_inputs :\"_to\"\n            WHEN event_name = 'VestingMemberAdded' THEN origin_from_address\n            WHEN event_name IN (\n                'VestingTransfer',\n                'VestTransfer'\n            ) THEN event_inputs :to\n            WHEN event_name IN (\n                'Unlocked',\n                'Vesting',\n                'VestedRewardClaimed',\n                'VestedAmountClaimed'\n            )\n            AND event_inputs :recipient IS NOT NULL THEN event_inputs :recipient\n            WHEN event_name IN (\n                'Unlocked',\n                'Vesting',\n                'VestedRewardClaimed',\n                'VestedAmountClaimed'\n            )\n            AND event_inputs :recipient IS NULL\n            AND event_inputs :\"_address\" IS NOT NULL THEN event_inputs :\"_address\"\n            WHEN event_name IN (\n                'Unlocked',\n                'Vesting',\n                'VestedRewardClaimed',\n                'VestedAmountClaimed'\n            )\n            AND event_inputs :recipient IS NULL\n            AND event_inputs :\"_address\" IS NULL\n            AND event_inputs :address IS NOT NULL THEN event_inputs :address\n            WHEN event_name IN (\n                'Unlocked',\n                'Vesting',\n                'VestedRewardClaimed',\n                'VestedAmountClaimed'\n            )\n            AND event_inputs :recipient IS NULL\n            AND event_inputs :\"_address\" IS NULL\n            AND event_inputs :address IS NULL\n            AND event_inputs :\"_recipient\" IS NOT NULL THEN event_inputs :\"_recipient\"\n            WHEN event_name IN (\n                'Unlocked',\n                'Vesting',\n                'VestedRewardClaimed',\n                'VestedAmountClaimed'\n            )\n            AND event_inputs :recipient IS NULL\n            AND event_inputs :\"_address\" IS NULL\n            AND event_inputs :address IS NULL\n            AND event_inputs :\"_recipient\" IS NULL\n            AND event_inputs :to IS NOT NULL THEN event_inputs :to\n            WHEN event_name IN (\n                'Unlocked',\n                'Vesting',\n                'VestedRewardClaimed',\n                'VestedAmountClaimed'\n            )\n            AND event_inputs :recipient IS NULL\n            AND event_inputs :\"_address\" IS NULL\n            AND event_inputs :address IS NULL\n            AND event_inputs :\"_recipient\" IS NULL\n            AND event_inputs :to IS NULL\n            AND event_inputs :ethereumAddress IS NOT NULL THEN event_inputs :ethereumAddress\n            WHEN event_name IN (\n                'Unlocked',\n                'Vesting',\n                'VestedRewardClaimed',\n                'VestedAmountClaimed'\n            )\n            AND event_inputs :recipient IS NULL\n            AND event_inputs :\"_address\" IS NULL\n            AND event_inputs :address IS NULL\n            AND event_inputs :\"_recipient\" IS NULL\n            AND event_inputs :to IS NULL\n            AND event_inputs :ethereumAddress IS NULL\n            AND event_inputs :account IS NOT NULL THEN event_inputs :account\n            ELSE event_inputs :\"_to\"\n        END AS wallets,\n        MIN(_INSERTED_TIMESTAMP) AS _INSERTED_TIMESTAMP,\n        MIN(\n            block_timestamp :: DATE\n        ) AS start_date\n    FROM\n        ethereum.silver.logs\n    WHERE\n        event_name IN (\n            'Unlocked',\n            'Vesting',\n            'VestedRewardClaimed',\n            'VestedAmountClaimed',\n            'VestClaimed',\n            'VestingClaimed',\n            'VestingTransfer',\n            'VestTransfer',\n            'VestedTokenRedeemed',\n            'VestingMemberAdded'\n        )\n\n\nAND _inserted_timestamp > (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        CROSSCHAIN_DEV.silver.tags_token_vesting_ETH\n)\n\nGROUP BY\n    1\n)\nSELECT\n    DISTINCT 'ethereum' AS blockchain,\n    'flipside' AS creator,\n    wallets AS address,\n    'vested or locked token recipient' AS tag_name,\n    'wallet' AS tag_type,\n    start_date,\n    NULL AS end_date,\n    CURRENT_TIMESTAMP AS tag_created_at,\n    _inserted_timestamp\nFROM\n    base_table\nWHERE\n    wallets IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.tags_token_vesting_ETH"}, "model.crosschain_models.silver__tags_active_optimism_last_7": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', address, start_date)\",\r\n    incremental_strategy = 'delete+insert',\r\n) }}\r\n\r\n\r\n{% if is_incremental() %}\r\n  with base as (\r\n      select distinct \r\n        from_address as address,\r\n        min(date_trunc('day', block_timestamp)) as start_date\r\n        from     \r\n        {{ source(\r\n        'optimism_silver',\r\n        'transactions'\r\n        ) }}\r\n        WHERE block_timestamp >= current_date -7\r\n        group by from_address\r\n  ), current_tagged as (\r\n      select *\r\n      from {{ this }}\r\n      where end_date is null\r\n  ), additions as (\r\n      select distinct \r\n        'optimism' as blockchain,\r\n        'flipside' as creator,\r\n        address as address,\r\n        'active on optimism last 7' as tag_name,\r\n        'activity' as tag_type,\r\n        start_date::date as start_date, \r\n        null as end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n        from base\r\n        where address not in (select distinct address from current_tagged)\r\n  ),\r\n     cap_end_date as (\r\n      select distinct \r\n        blockchain,\r\n        creator,\r\n        address,\r\n        tag_name,\r\n        tag_type,\r\n        start_date::date, \r\n        date_trunc('DAY', current_date)::date as end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n        from current_tagged\r\n        where address not in (select distinct address from base)\r\n  )\r\n  select * from additions\r\n  union \r\n  select * from cap_end_date\r\n\r\n{% else %}\r\n\r\n    with address_base as (\r\n    select distinct from_address, block_timestamp::date as bt\r\n    from    \r\n    {{ source(\r\n        'optimism_silver',\r\n        'transactions'\r\n    ) }}\r\n    ),\r\n    next_date as (\r\n        select *, \r\n            lead(bt) over (partition by from_address order by bt) as nt,\r\n            datediff('day',bt, nt) as days_between_activity\r\n        from address_base\r\n    )\r\n    , conditional_group as (\r\n    select \r\n        *,\r\n        conditional_true_event(days_between_activity > 7) over (partition by from_address order by bt) as e\r\n        from next_date\r\n    )\r\n    , conditional_group_lagged as (\r\n        select *,\r\n        coalesce(lag(e) over (partition by from_address order by bt),0) as grouping_val\r\n        from conditional_group\r\n    )\r\n    , final_base as (\r\n        select \r\n            from_address,\r\n            grouping_val,\r\n            min(bt) as start_date,\r\n            dateadd('day',7,max(bt)) as end_date\r\n        from conditional_group_lagged\r\n        group by 1, 2\r\n    )\r\n    select \r\n        'optimism' as blockchain,\r\n        'flipside' as creator,\r\n        from_address as address,\r\n        'active on optimism last 7' as tag_name,\r\n        'activity' as tag_type,\r\n        start_date, \r\n        iff(end_date>current_date, null, end_date) as end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    from final_base\r\n\r\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.optimism_silver.transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', address, start_date)", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "tags", "Optimism", "silver__tags_active_optimism_last_7"], "unique_id": "model.crosschain_models.silver__tags_active_optimism_last_7", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\tags\\Optimism\\silver__tags_active_optimism_last_7.sql", "original_file_path": "models\\silver\\tags\\Optimism\\silver__tags_active_optimism_last_7.sql", "name": "silver__tags_active_optimism_last_7", "alias": "tags_active_optimism_last_7", "checksum": {"name": "sha256", "checksum": "407f088820e4796c8701f5c8771de4b0404e81aaa539c222059d8e0864e7d2f5"}, "tags": [], "refs": [], "sources": [["optimism_silver", "transactions"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\tags\\Optimism\\silver__tags_active_optimism_last_7.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Optimism\\silver__tags_active_optimism_last_7.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', address, start_date)", "incremental_strategy": "delete+insert"}, "created_at": 1666821806.9742546, "compiled_sql": "\n\n\n\n  with base as (\n      select distinct \n        from_address as address,\n        min(date_trunc('day', block_timestamp)) as start_date\n        from     \n        optimism.silver.transactions\n        WHERE block_timestamp >= current_date -7\n        group by from_address\n  ), current_tagged as (\n      select *\n      from CROSSCHAIN_DEV.silver.tags_active_optimism_last_7\n      where end_date is null\n  ), additions as (\n      select distinct \n        'optimism' as blockchain,\n        'flipside' as creator,\n        address as address,\n        'active on optimism last 7' as tag_name,\n        'activity' as tag_type,\n        start_date::date as start_date, \n        null as end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n        from base\n        where address not in (select distinct address from current_tagged)\n  ),\n     cap_end_date as (\n      select distinct \n        blockchain,\n        creator,\n        address,\n        tag_name,\n        tag_type,\n        start_date::date, \n        date_trunc('DAY', current_date)::date as end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n        from current_tagged\n        where address not in (select distinct address from base)\n  )\n  select * from additions\n  union \n  select * from cap_end_date\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.tags_active_optimism_last_7"}, "model.crosschain_models.silver__tags_nft_opensea_user": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    incremental_strategy = 'merge',\r\n    merge_update_columns = ['creator'],\r\n) }}\r\n\r\nWITH opensea_buyer AS (\r\n\r\n    SELECT\r\n        DISTINCT 'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        nft_to_address AS address,\r\n        'opensea user' AS tag_name,\r\n        'nft' AS tag_type,\r\n        MIN(\r\n            block_timestamp :: DATE\r\n        ) AS start_date,\r\n        NULL AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at,\r\n        MIN(ingested_at) AS ingested_at,\r\n        'opensea' AS source\r\n    FROM\r\n        {{ source(\r\n            'ethereum_silver_nft',\r\n            'opensea_sales'\r\n        ) }}\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    ingested_at > (\r\n        SELECT\r\n            MAX(ingested_at)\r\n        FROM\r\n            {{ this }}\r\n        WHERE\r\n            source = 'opensea'\r\n    )\r\n{% endif %}\r\nGROUP BY\r\n    nft_to_address\r\n),\r\nopensea_seller AS (\r\n    SELECT\r\n        DISTINCT 'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        nft_from_address AS address,\r\n        'opensea user' AS tag_name,\r\n        'nft' AS tag_type,\r\n        MIN(\r\n            block_timestamp :: DATE\r\n        ) AS start_date,\r\n        NULL AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at,\r\n        MIN(ingested_at) AS ingested_at,\r\n        'opensea' AS source\r\n    FROM\r\n        {{ source(\r\n            'ethereum_silver_nft',\r\n            'opensea_sales'\r\n        ) }}\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    ingested_at > (\r\n        SELECT\r\n            MAX(ingested_at)\r\n        FROM\r\n            {{ this }}\r\n        WHERE\r\n            source = 'opensea'\r\n    )\r\n{% endif %}\r\nGROUP BY\r\n    nft_from_address\r\n),\r\nseaport_buyer AS (\r\n    SELECT\r\n        DISTINCT 'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        buyer_address AS address,\r\n        'opensea user' AS tag_name,\r\n        'nft' AS tag_type,\r\n        MIN(\r\n            block_timestamp :: DATE\r\n        ) AS start_date,\r\n        NULL AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at,\r\n        MIN(ingested_at) AS ingested_at,\r\n        'seaport' AS source\r\n    FROM\r\n        {{ source(\r\n            'ethereum_silver_nft',\r\n            'seaport_sales'\r\n        ) }}\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    ingested_at > (\r\n        SELECT\r\n            MAX(ingested_at)\r\n        FROM\r\n            {{ this }}\r\n        WHERE\r\n            source = 'seaport'\r\n    )\r\n{% endif %}\r\nGROUP BY\r\n    buyer_address\r\n),\r\nseaport_seller AS (\r\n    SELECT\r\n        DISTINCT 'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        seller_address AS address,\r\n        'opensea user' AS tag_name,\r\n        'nft' AS tag_type,\r\n        MIN(\r\n            block_timestamp :: DATE\r\n        ) AS start_date,\r\n        NULL AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at,\r\n        MIN(ingested_at) AS ingested_at,\r\n        'seaport' AS source\r\n    FROM\r\n        {{ source(\r\n            'ethereum_silver_nft',\r\n            'seaport_sales'\r\n        ) }}\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    ingested_at > (\r\n        SELECT\r\n            MAX(ingested_at)\r\n        FROM\r\n            {{ this }}\r\n        WHERE\r\n            source = 'seaport'\r\n    )\r\n{% endif %}\r\nGROUP BY\r\n    seller_address\r\n),\r\nunion_table AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        opensea_buyer\r\n    UNION\r\n    SELECT\r\n        *\r\n    FROM\r\n        opensea_seller\r\n    UNION\r\n    SELECT\r\n        *\r\n    FROM\r\n        seaport_buyer\r\n    UNION\r\n    SELECT\r\n        *\r\n    FROM\r\n        seaport_seller\r\n),\r\nfinal_table AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        union_table qualify(ROW_NUMBER() over(PARTITION BY address\r\n    ORDER BY\r\n        start_date ASC)) = 1\r\n)\r\nSELECT\r\n    A.*\r\nFROM\r\n    final_table A", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.ethereum_silver_nft.opensea_sales", "source.crosschain_models.ethereum_silver_nft.opensea_sales", "source.crosschain_models.ethereum_silver_nft.seaport_sales", "source.crosschain_models.ethereum_silver_nft.seaport_sales"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "merge_update_columns": ["creator"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "silver__tags_nft_opensea_user"], "unique_id": "model.crosschain_models.silver__tags_nft_opensea_user", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\tags\\Ethereum\\silver__tags_nft_opensea_user.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_opensea_user.sql", "name": "silver__tags_nft_opensea_user", "alias": "tags_nft_opensea_user", "checksum": {"name": "sha256", "checksum": "96c5baff92a97be79224beb291360dcdd7bb2c096b4015cce6bfe0f191db6cc4"}, "tags": [], "refs": [], "sources": [["ethereum_silver_nft", "opensea_sales"], ["ethereum_silver_nft", "opensea_sales"], ["ethereum_silver_nft", "seaport_sales"], ["ethereum_silver_nft", "seaport_sales"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\tags\\Ethereum\\silver__tags_nft_opensea_user.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_opensea_user.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "merge", "merge_update_columns": ["creator"]}, "created_at": 1666821807.2199407, "compiled_sql": "\n\nWITH opensea_buyer AS (\n\n    SELECT\n        DISTINCT 'ethereum' AS blockchain,\n        'flipside' AS creator,\n        nft_to_address AS address,\n        'opensea user' AS tag_name,\n        'nft' AS tag_type,\n        MIN(\n            block_timestamp :: DATE\n        ) AS start_date,\n        NULL AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at,\n        MIN(ingested_at) AS ingested_at,\n        'opensea' AS source\n    FROM\n        ethereum.silver_nft.opensea_sales\n\n\nWHERE\n    ingested_at > (\n        SELECT\n            MAX(ingested_at)\n        FROM\n            CROSSCHAIN_DEV.silver.tags_nft_opensea_user\n        WHERE\n            source = 'opensea'\n    )\n\nGROUP BY\n    nft_to_address\n),\nopensea_seller AS (\n    SELECT\n        DISTINCT 'ethereum' AS blockchain,\n        'flipside' AS creator,\n        nft_from_address AS address,\n        'opensea user' AS tag_name,\n        'nft' AS tag_type,\n        MIN(\n            block_timestamp :: DATE\n        ) AS start_date,\n        NULL AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at,\n        MIN(ingested_at) AS ingested_at,\n        'opensea' AS source\n    FROM\n        ethereum.silver_nft.opensea_sales\n\n\nWHERE\n    ingested_at > (\n        SELECT\n            MAX(ingested_at)\n        FROM\n            CROSSCHAIN_DEV.silver.tags_nft_opensea_user\n        WHERE\n            source = 'opensea'\n    )\n\nGROUP BY\n    nft_from_address\n),\nseaport_buyer AS (\n    SELECT\n        DISTINCT 'ethereum' AS blockchain,\n        'flipside' AS creator,\n        buyer_address AS address,\n        'opensea user' AS tag_name,\n        'nft' AS tag_type,\n        MIN(\n            block_timestamp :: DATE\n        ) AS start_date,\n        NULL AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at,\n        MIN(ingested_at) AS ingested_at,\n        'seaport' AS source\n    FROM\n        ethereum.silver_nft.seaport_sales\n\n\nWHERE\n    ingested_at > (\n        SELECT\n            MAX(ingested_at)\n        FROM\n            CROSSCHAIN_DEV.silver.tags_nft_opensea_user\n        WHERE\n            source = 'seaport'\n    )\n\nGROUP BY\n    buyer_address\n),\nseaport_seller AS (\n    SELECT\n        DISTINCT 'ethereum' AS blockchain,\n        'flipside' AS creator,\n        seller_address AS address,\n        'opensea user' AS tag_name,\n        'nft' AS tag_type,\n        MIN(\n            block_timestamp :: DATE\n        ) AS start_date,\n        NULL AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at,\n        MIN(ingested_at) AS ingested_at,\n        'seaport' AS source\n    FROM\n        ethereum.silver_nft.seaport_sales\n\n\nWHERE\n    ingested_at > (\n        SELECT\n            MAX(ingested_at)\n        FROM\n            CROSSCHAIN_DEV.silver.tags_nft_opensea_user\n        WHERE\n            source = 'seaport'\n    )\n\nGROUP BY\n    seller_address\n),\nunion_table AS (\n    SELECT\n        *\n    FROM\n        opensea_buyer\n    UNION\n    SELECT\n        *\n    FROM\n        opensea_seller\n    UNION\n    SELECT\n        *\n    FROM\n        seaport_buyer\n    UNION\n    SELECT\n        *\n    FROM\n        seaport_seller\n),\nfinal_table AS (\n    SELECT\n        *\n    FROM\n        union_table qualify(ROW_NUMBER() over(PARTITION BY address\n    ORDER BY\n        start_date ASC)) = 1\n)\nSELECT\n    A.*\nFROM\n    final_table A", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.tags_nft_opensea_user"}, "model.crosschain_models.silver__tags_contract_address_polygon": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    incremental_strategy = 'delete+insert',\r\n) }}\r\n\r\nSELECT\r\n    DISTINCT 'polygon' AS blockchain,\r\n    'flipside' AS creator,\r\n    to_address :: STRING AS address,\r\n    'contract address' AS tag_name,\r\n    'contract' AS tag_type,\r\n    block_number,\r\n    DATE_TRUNC(\r\n        'day',\r\n        block_timestamp\r\n    ) AS start_date,\r\n    NULL AS end_date,\r\n    _inserted_timestamp,\r\n    CURRENT_TIMESTAMP AS tag_created_at\r\nFROM\r\n    {{ source(\r\n        'polygon_silver',\r\n        'traces'\r\n    ) }}\r\nWHERE\r\n    TYPE in ('CREATE', 'CREATE2')\r\n    AND tx_status = 'SUCCESS'\r\n    AND to_address IS NOT NULL\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp > (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n\r\nqualify(ROW_NUMBER() over(PARTITION BY address\r\nORDER BY\r\n    block_number DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.polygon_silver.traces"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "tags", "Polygon", "silver__tags_contract_address_polygon"], "unique_id": "model.crosschain_models.silver__tags_contract_address_polygon", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\tags\\Polygon\\silver__tags_contract_address_polygon.sql", "original_file_path": "models\\silver\\tags\\Polygon\\silver__tags_contract_address_polygon.sql", "name": "silver__tags_contract_address_polygon", "alias": "tags_contract_address_polygon", "checksum": {"name": "sha256", "checksum": "64ac05afa704af9b1ecd9590efc232609177f2baafe897669a5685d18e72233d"}, "tags": [], "refs": [], "sources": [["polygon_silver", "traces"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\tags\\Polygon\\silver__tags_contract_address_polygon.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Polygon\\silver__tags_contract_address_polygon.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "delete+insert"}, "created_at": 1666821807.555485, "compiled_sql": "\n\nSELECT\n    DISTINCT 'polygon' AS blockchain,\n    'flipside' AS creator,\n    to_address :: STRING AS address,\n    'contract address' AS tag_name,\n    'contract' AS tag_type,\n    block_number,\n    DATE_TRUNC(\n        'day',\n        block_timestamp\n    ) AS start_date,\n    NULL AS end_date,\n    _inserted_timestamp,\n    CURRENT_TIMESTAMP AS tag_created_at\nFROM\n    polygon.silver.traces\nWHERE\n    TYPE in ('CREATE', 'CREATE2')\n    AND tx_status = 'SUCCESS'\n    AND to_address IS NOT NULL\n\n\nAND _inserted_timestamp > (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        CROSSCHAIN_DEV.silver.tags_contract_address_polygon\n)\n\n\nqualify(ROW_NUMBER() over(PARTITION BY address\nORDER BY\n    block_number DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.tags_contract_address_polygon"}, "model.crosschain_models.silver_crosschain__address_labels": {"raw_sql": "{{ config(\r\n  materialized = 'incremental',\r\n  unique_key = \"CONCAT_WS('-', blockchain, address, creator)\",\r\n  incremental_strategy = 'delete+insert',\r\n  tags = ['snowflake', 'crosschain', 'labels', 'silver_crosschain__address_labels']\r\n) }}\r\n\r\nWITH subset_table AS (\r\n\r\n  SELECT\r\n    *,\r\n    SPLIT(\r\n      SUBSTR(\r\n        record_metadata :key :: STRING,\r\n        2,\r\n        len(\r\n          record_metadata :key :: STRING\r\n        ) -2\r\n      ),\r\n      '-'\r\n    ) [1] :: STRING AS blockchain,\r\n    TO_TIMESTAMP(\r\n      SPLIT(\r\n        SUBSTR(\r\n          record_metadata :key :: STRING,\r\n          2,\r\n          len(\r\n            record_metadata :key :: STRING\r\n          ) -2\r\n        ),\r\n        '-'\r\n      ) [2] :: INT\r\n    ) AS insert_date\r\n  FROM\r\n    {{ source(\r\n      'bronze',\r\n      'prod_address_label_sink_291098491'\r\n    ) }}\r\n  WHERE\r\n    ARRAY_SIZE(\r\n      SPLIT(\r\n        SUBSTR(\r\n          record_metadata :key :: STRING,\r\n          2,\r\n          len(\r\n            record_metadata :key :: STRING\r\n          ) -2\r\n        ),\r\n        '-'\r\n      )\r\n    ) = 3\r\n    AND SPLIT(\r\n      SUBSTR(\r\n        record_metadata :key :: STRING,\r\n        2,\r\n        len(\r\n          record_metadata :key :: STRING\r\n        ) -2\r\n      ),\r\n      '-'\r\n    ) [0] = 'labels'\r\n\r\n{% if is_incremental() %}\r\nAND (\r\n  record_metadata :CreateTime :: INT / 1000\r\n) :: TIMESTAMP :: DATE >= (\r\n  SELECT\r\n    DATEADD('day', -1, MAX(system_created_at :: DATE))\r\n  FROM\r\n    {{ this }}\r\n)\r\n{% endif %}\r\n),\r\nclean_table AS (\r\n  SELECT\r\n    *,\r\n    SPLIT(\r\n      record_metadata :key :: STRING,\r\n      '-'\r\n    ) [1] :: STRING AS blockchain,\r\n    TO_TIMESTAMP(\r\n      SPLIT(\r\n        record_metadata :key :: STRING,\r\n        '-'\r\n      ) [2] :: INT\r\n    ) AS insert_date\r\n  FROM\r\n    {{ source(\r\n      'bronze',\r\n      'prod_address_label_sink_291098491'\r\n    ) }}\r\n  WHERE\r\n    ARRAY_SIZE(\r\n      SPLIT(\r\n        record_metadata :key :: STRING,\r\n        '-'\r\n      )\r\n    ) = 3\r\n    AND SPLIT(\r\n      record_metadata :key :: STRING,\r\n      '-'\r\n    ) [0] = 'labels'\r\n\r\n{% if is_incremental() %}\r\nAND (\r\n  record_metadata :CreateTime :: INT / 1000\r\n) :: TIMESTAMP :: DATE >= (\r\n  SELECT\r\n    DATEADD('day', -1, MAX(system_created_at :: DATE))\r\n  FROM\r\n    {{ this }}\r\n)\r\n{% endif %}\r\n),\r\nbase_tables AS (\r\n  SELECT\r\n    *\r\n  FROM\r\n    subset_table\r\n  UNION\r\n  SELECT\r\n    *\r\n  FROM\r\n    clean_table\r\n),\r\ndelete_table AS (\r\n  SELECT\r\n    CASE\r\n      WHEN blockchain IN (\r\n        'algorand',\r\n        'solana'\r\n      ) THEN t.value :address :: STRING\r\n      ELSE LOWER(\r\n        t.value :address :: STRING\r\n      )\r\n    END AS address,\r\n    t.value :delete :: STRING AS delete_flag\r\n  FROM\r\n    base_tables,\r\n    LATERAL FLATTEN(\r\n      input => record_content\r\n    ) t\r\n  WHERE\r\n    delete_flag = 'true'\r\n),\r\nflat_table AS (\r\n  SELECT\r\n    (\r\n      record_metadata :CreateTime :: INT / 1000\r\n    ) :: TIMESTAMP AS system_created_at,\r\n    insert_date,\r\n    blockchain,\r\n    CASE\r\n      WHEN blockchain IN (\r\n        'algorand',\r\n        'solana'\r\n      ) THEN t.value :address :: STRING\r\n      ELSE LOWER(\r\n        t.value :address :: STRING\r\n      )\r\n    END AS address,\r\n    t.value :creator :: STRING AS creator,\r\n    t.value :l1_label :: STRING AS l1_label,\r\n    t.value :l2_label :: STRING AS l2_label,\r\n    t.value :address_name :: STRING AS address_name,\r\n    t.value :project_name :: STRING AS project_name,\r\n    t.value :delete :: STRING AS delete_flag\r\n  FROM\r\n    base_tables,\r\n    LATERAL FLATTEN(\r\n      input => record_content\r\n    ) t qualify(ROW_NUMBER() over(PARTITION BY blockchain, address, creator\r\n  ORDER BY\r\n    insert_date DESC)) = 1\r\n)\r\nSELECT\r\n  system_created_at,\r\n  insert_date,\r\n  blockchain,\r\n  address,\r\n  creator,\r\n  l1_label,\r\n  l2_label,\r\n  address_name,\r\n  project_name,\r\n  delete_flag\r\nFROM\r\n  flat_table\r\nWHERE\r\n  address NOT IN (\r\n    SELECT\r\n      address\r\n    FROM\r\n      delete_table\r\n  )\r\n  AND project_name IS NOT NULL\r\n  AND address_name IS NOT NULL\r\n  AND l1_label <> 'project' -- contract creations\r\nUNION ALL\r\nSELECT\r\n  system_created_at,\r\n  insert_date,\r\n  blockchain,\r\n  address,\r\n  creator,\r\n  l1_label AS label_type,\r\n  l2_label AS label_subtype,\r\n  address_name,\r\n  project_name,\r\n  NULL AS delete_flag\r\nFROM\r\n  {{ ref('silver_crosschain__labels_contracts') }}\r\nUNION ALL\r\nSELECT\r\n  system_created_at,\r\n  insert_date,\r\n  blockchain,\r\n  address,\r\n  creator,\r\n  l1_label AS label_type,\r\n  l2_label AS label_subtype,\r\n  address_name,\r\n  project_name,\r\n  NULL AS delete_flag\r\nFROM\r\n  {{ ref('silver_crosschain__labels_contracts_avalanche') }}\r\nUNION ALL\r\nSELECT\r\n  system_created_at,\r\n  insert_date,\r\n  blockchain,\r\n  address,\r\n  creator,\r\n  l1_label AS label_type,\r\n  l2_label AS label_subtype,\r\n  address_name,\r\n  project_name,\r\n  NULL AS delete_flag\r\nFROM\r\n  {{ ref('silver_crosschain__labels_contracts_bsc') }}\r\nUNION ALL\r\nSELECT\r\n  system_created_at,\r\n  insert_date,\r\n  blockchain,\r\n  address,\r\n  creator,\r\n  l1_label AS label_type,\r\n  l2_label AS label_subtype,\r\n  address_name,\r\n  project_name,\r\n  NULL AS delete_flag\r\nFROM\r\n  {{ ref('silver_crosschain__labels_contracts_optimism') }}\r\nUNION ALL\r\nSELECT\r\n  system_created_at,\r\n  insert_date,\r\n  blockchain,\r\n  address,\r\n  creator,\r\n  l1_label AS label_type,\r\n  l2_label AS label_subtype,\r\n  address_name,\r\n  project_name,\r\n  NULL AS delete_flag\r\nFROM\r\n  {{ ref('silver_crosschain__labels_contracts_polygon') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.bronze.prod_address_label_sink_291098491", "source.crosschain_models.bronze.prod_address_label_sink_291098491", "model.crosschain_models.silver_crosschain__labels_contracts", "model.crosschain_models.silver_crosschain__labels_contracts_avalanche", "model.crosschain_models.silver_crosschain__labels_contracts_bsc", "model.crosschain_models.silver_crosschain__labels_contracts_optimism", "model.crosschain_models.silver_crosschain__labels_contracts_polygon"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["snowflake", "crosschain", "labels", "silver_crosschain__address_labels"], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', blockchain, address, creator)", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "silver_crosschain__address_labels"], "unique_id": "model.crosschain_models.silver_crosschain__address_labels", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\labels\\silver_crosschain__address_labels.sql", "original_file_path": "models\\silver\\labels\\silver_crosschain__address_labels.sql", "name": "silver_crosschain__address_labels", "alias": "address_labels", "checksum": {"name": "sha256", "checksum": "98cf7cfaefb5f65837116befe7afe1498617053e3e48e7ed57d6d8e18a3aa58f"}, "tags": ["snowflake", "crosschain", "labels", "silver_crosschain__address_labels"], "refs": [["silver_crosschain__labels_contracts"], ["silver_crosschain__labels_contracts_avalanche"], ["silver_crosschain__labels_contracts_bsc"], ["silver_crosschain__labels_contracts_optimism"], ["silver_crosschain__labels_contracts_polygon"]], "sources": [["bronze", "prod_address_label_sink_291098491"], ["bronze", "prod_address_label_sink_291098491"]], "metrics": [], "description": "", "columns": {"BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR": {"name": "CREATOR", "description": "The name of the creator of the label", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INSERT_DATE": {"name": "INSERT_DATE", "description": "The date the label was inserted in the table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L1_LABEL": {"name": "L1_LABEL", "description": "A high-level category describing the addresses main function or ownership", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L2_LABEL": {"name": "L2_LABEL", "description": "A sub-category nested within label type providing further detail", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROJECT_NAME": {"name": "PROJECT_NAME", "description": "Name of the controlling entity of the address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "Address that the label is for. This is the field that should be used to join other tables with labels.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\labels\\silver_crosschain__address_labels.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\silver_crosschain__address_labels.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', blockchain, address, creator)", "incremental_strategy": "delete+insert", "tags": ["snowflake", "crosschain", "labels", "silver_crosschain__address_labels"]}, "created_at": 1666821807.3336692, "compiled_sql": "\n\nWITH subset_table AS (\n\n  SELECT\n    *,\n    SPLIT(\n      SUBSTR(\n        record_metadata :key :: STRING,\n        2,\n        len(\n          record_metadata :key :: STRING\n        ) -2\n      ),\n      '-'\n    ) [1] :: STRING AS blockchain,\n    TO_TIMESTAMP(\n      SPLIT(\n        SUBSTR(\n          record_metadata :key :: STRING,\n          2,\n          len(\n            record_metadata :key :: STRING\n          ) -2\n        ),\n        '-'\n      ) [2] :: INT\n    ) AS insert_date\n  FROM\n    flipside_prod_db.bronze.prod_address_label_sink_291098491\n  WHERE\n    ARRAY_SIZE(\n      SPLIT(\n        SUBSTR(\n          record_metadata :key :: STRING,\n          2,\n          len(\n            record_metadata :key :: STRING\n          ) -2\n        ),\n        '-'\n      )\n    ) = 3\n    AND SPLIT(\n      SUBSTR(\n        record_metadata :key :: STRING,\n        2,\n        len(\n          record_metadata :key :: STRING\n        ) -2\n      ),\n      '-'\n    ) [0] = 'labels'\n\n\nAND (\n  record_metadata :CreateTime :: INT / 1000\n) :: TIMESTAMP :: DATE >= (\n  SELECT\n    DATEADD('day', -1, MAX(system_created_at :: DATE))\n  FROM\n    CROSSCHAIN_DEV.silver_crosschain.address_labels\n)\n\n),\nclean_table AS (\n  SELECT\n    *,\n    SPLIT(\n      record_metadata :key :: STRING,\n      '-'\n    ) [1] :: STRING AS blockchain,\n    TO_TIMESTAMP(\n      SPLIT(\n        record_metadata :key :: STRING,\n        '-'\n      ) [2] :: INT\n    ) AS insert_date\n  FROM\n    flipside_prod_db.bronze.prod_address_label_sink_291098491\n  WHERE\n    ARRAY_SIZE(\n      SPLIT(\n        record_metadata :key :: STRING,\n        '-'\n      )\n    ) = 3\n    AND SPLIT(\n      record_metadata :key :: STRING,\n      '-'\n    ) [0] = 'labels'\n\n\nAND (\n  record_metadata :CreateTime :: INT / 1000\n) :: TIMESTAMP :: DATE >= (\n  SELECT\n    DATEADD('day', -1, MAX(system_created_at :: DATE))\n  FROM\n    CROSSCHAIN_DEV.silver_crosschain.address_labels\n)\n\n),\nbase_tables AS (\n  SELECT\n    *\n  FROM\n    subset_table\n  UNION\n  SELECT\n    *\n  FROM\n    clean_table\n),\ndelete_table AS (\n  SELECT\n    CASE\n      WHEN blockchain IN (\n        'algorand',\n        'solana'\n      ) THEN t.value :address :: STRING\n      ELSE LOWER(\n        t.value :address :: STRING\n      )\n    END AS address,\n    t.value :delete :: STRING AS delete_flag\n  FROM\n    base_tables,\n    LATERAL FLATTEN(\n      input => record_content\n    ) t\n  WHERE\n    delete_flag = 'true'\n),\nflat_table AS (\n  SELECT\n    (\n      record_metadata :CreateTime :: INT / 1000\n    ) :: TIMESTAMP AS system_created_at,\n    insert_date,\n    blockchain,\n    CASE\n      WHEN blockchain IN (\n        'algorand',\n        'solana'\n      ) THEN t.value :address :: STRING\n      ELSE LOWER(\n        t.value :address :: STRING\n      )\n    END AS address,\n    t.value :creator :: STRING AS creator,\n    t.value :l1_label :: STRING AS l1_label,\n    t.value :l2_label :: STRING AS l2_label,\n    t.value :address_name :: STRING AS address_name,\n    t.value :project_name :: STRING AS project_name,\n    t.value :delete :: STRING AS delete_flag\n  FROM\n    base_tables,\n    LATERAL FLATTEN(\n      input => record_content\n    ) t qualify(ROW_NUMBER() over(PARTITION BY blockchain, address, creator\n  ORDER BY\n    insert_date DESC)) = 1\n)\nSELECT\n  system_created_at,\n  insert_date,\n  blockchain,\n  address,\n  creator,\n  l1_label,\n  l2_label,\n  address_name,\n  project_name,\n  delete_flag\nFROM\n  flat_table\nWHERE\n  address NOT IN (\n    SELECT\n      address\n    FROM\n      delete_table\n  )\n  AND project_name IS NOT NULL\n  AND address_name IS NOT NULL\n  AND l1_label <> 'project' -- contract creations\nUNION ALL\nSELECT\n  system_created_at,\n  insert_date,\n  blockchain,\n  address,\n  creator,\n  l1_label AS label_type,\n  l2_label AS label_subtype,\n  address_name,\n  project_name,\n  NULL AS delete_flag\nFROM\n  CROSSCHAIN_DEV.silver_crosschain.labels_contracts\nUNION ALL\nSELECT\n  system_created_at,\n  insert_date,\n  blockchain,\n  address,\n  creator,\n  l1_label AS label_type,\n  l2_label AS label_subtype,\n  address_name,\n  project_name,\n  NULL AS delete_flag\nFROM\n  CROSSCHAIN_DEV.silver_crosschain.labels_contracts_avalanche\nUNION ALL\nSELECT\n  system_created_at,\n  insert_date,\n  blockchain,\n  address,\n  creator,\n  l1_label AS label_type,\n  l2_label AS label_subtype,\n  address_name,\n  project_name,\n  NULL AS delete_flag\nFROM\n  CROSSCHAIN_DEV.silver_crosschain.labels_contracts_bsc\nUNION ALL\nSELECT\n  system_created_at,\n  insert_date,\n  blockchain,\n  address,\n  creator,\n  l1_label AS label_type,\n  l2_label AS label_subtype,\n  address_name,\n  project_name,\n  NULL AS delete_flag\nFROM\n  CROSSCHAIN_DEV.silver_crosschain.labels_contracts_optimism\nUNION ALL\nSELECT\n  system_created_at,\n  insert_date,\n  blockchain,\n  address,\n  creator,\n  l1_label AS label_type,\n  l2_label AS label_subtype,\n  address_name,\n  project_name,\n  NULL AS delete_flag\nFROM\n  CROSSCHAIN_DEV.silver_crosschain.labels_contracts_polygon", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver_crosschain.address_labels"}, "model.crosschain_models.silver__asset_metadata_coin_gecko": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', id, coalesce(token_address,''))\",\r\n    incremental_strategy = 'delete+insert'\r\n) }}\r\n\r\nSELECT\r\n    id,\r\n    i.value :: STRING AS token_address,\r\n    NAME,\r\n    symbol,\r\n    i.key AS platform,\r\n    _inserted_timestamp\r\nFROM\r\n    {{ ref('bronze__asset_metadata_coin_gecko') }} A,\r\n    TABLE(FLATTEN(A.value :platforms)) i\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    _inserted_date >= (\r\n        SELECT\r\n            MAX(\r\n                _inserted_timestamp :: DATE\r\n            )\r\n        FROM\r\n            {{ this }}\r\n    )\r\n    AND _inserted_timestamp > (\r\n        SELECT\r\n            MAX(_inserted_timestamp)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% endif %}\r\n\r\nqualify(ROW_NUMBER() over (PARTITION BY id, token_address\r\nORDER BY\r\n    _inserted_timestamp DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.crosschain_models.bronze__asset_metadata_coin_gecko"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', id, coalesce(token_address,''))", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "asset_metadata", "silver__asset_metadata_coin_gecko"], "unique_id": "model.crosschain_models.silver__asset_metadata_coin_gecko", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\asset_metadata\\silver__asset_metadata_coin_gecko.sql", "original_file_path": "models\\silver\\asset_metadata\\silver__asset_metadata_coin_gecko.sql", "name": "silver__asset_metadata_coin_gecko", "alias": "asset_metadata_coin_gecko", "checksum": {"name": "sha256", "checksum": "e18236bd013956fd9e1c5028faa38ce08a5218ea4bd1a32d742796556967ca2b"}, "tags": [], "refs": [["bronze__asset_metadata_coin_gecko"]], "sources": [], "metrics": [], "description": "", "columns": {"ID": {"name": "ID", "description": "unique identifier representing the asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "name of asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL": {"name": "SYMBOL", "description": "symbol of asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_ADDRESS": {"name": "TOKEN_ADDRESS", "description": "specific address representing the asset in a specific platform", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM": {"name": "PLATFORM", "description": "platform where this asset has a token address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "Time the record was inserted into snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\asset_metadata\\silver__asset_metadata_coin_gecko.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\asset_metadata\\silver__asset_metadata_coin_gecko.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', id, coalesce(token_address,''))", "incremental_strategy": "delete+insert"}, "created_at": 1666821807.52469, "compiled_sql": "\n\nSELECT\n    id,\n    i.value :: STRING AS token_address,\n    NAME,\n    symbol,\n    i.key AS platform,\n    _inserted_timestamp\nFROM\n    CROSSCHAIN_DEV.bronze.asset_metadata_coin_gecko A,\n    TABLE(FLATTEN(A.value :platforms)) i\n\n\nWHERE\n    _inserted_date >= (\n        SELECT\n            MAX(\n                _inserted_timestamp :: DATE\n            )\n        FROM\n            CROSSCHAIN_DEV.silver.asset_metadata_coin_gecko\n    )\n    AND _inserted_timestamp > (\n        SELECT\n            MAX(_inserted_timestamp)\n        FROM\n            CROSSCHAIN_DEV.silver.asset_metadata_coin_gecko\n    )\n\n\nqualify(ROW_NUMBER() over (PARTITION BY id, token_address\nORDER BY\n    _inserted_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.asset_metadata_coin_gecko"}, "model.crosschain_models.silver_crosschain__snowflake_Arbitrum_satellites": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    incremental_strategy = 'delete+insert',\r\n) }}\r\n\r\nWITH distributor_cex AS (\r\n    -- THIS STATEMENT FINDS KNOWN CEX LABELS WITHIN THE BRONZE ADDRESS LABELS TABLE\r\n\r\n    SELECT\r\n        system_created_at,\r\n        insert_date,\r\n        blockchain,\r\n        address,\r\n        creator,\r\n        l1_label,\r\n        l2_label,\r\n        address_name,\r\n        project_name\r\n    FROM\r\n        {{ ref('silver_crosschain__address_labels') }}\r\n    WHERE\r\n        blockchain = 'arbitrum'\r\n        AND l1_label = 'cex'\r\n        AND l2_label = 'hot_wallet'\r\n),\r\npossible_sats AS (\r\n    -- THIS STATEMENT LOCATES POTENTIAL SATELLITE WALLETS BASED ON DEPOSIT BEHAVIOR\r\n    SELECT\r\n        DISTINCT *\r\n    FROM\r\n        (\r\n            SELECT\r\n                DISTINCT dc.system_created_at,\r\n                dc.insert_date,\r\n                dc.blockchain,\r\n                xfer.from_address AS address,\r\n                dc.creator,\r\n                dc.address_name,\r\n                dc.project_name,\r\n                dc.l1_label,\r\n                'deposit_wallet' AS l2_label,\r\n                COUNT(\r\n                    DISTINCT project_name\r\n                ) over(\r\n                    PARTITION BY dc.blockchain,\r\n                    xfer.from_address\r\n                ) AS project_count -- how many projects has each from address sent to\r\n            FROM\r\n                {{ source(\r\n                    'arbitrum_core',\r\n                    'fact_token_transfers'\r\n                ) }}\r\n                xfer\r\n                JOIN distributor_cex dc\r\n                ON dc.address = xfer.to_address\r\n            WHERE\r\n                raw_amount > 0\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\nGROUP BY\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9\r\nUNION\r\nSELECT\r\n    DISTINCT dc.system_created_at,\r\n    dc.insert_date,\r\n    dc.blockchain,\r\n    tr.from_address AS address,\r\n    dc.creator,\r\n    dc.address_name,\r\n    dc.project_name,\r\n    dc.l1_label,\r\n    'deposit_wallet' AS l2_label,\r\n    COUNT(\r\n        DISTINCT project_name\r\n    ) over(\r\n        PARTITION BY dc.blockchain,\r\n        tr.from_address\r\n    ) AS project_count\r\nFROM\r\n    {{ source(\r\n        'arbitrum_core',\r\n        'fact_traces'\r\n    ) }}\r\n    tr\r\n    JOIN distributor_cex dc\r\n    ON dc.address = tr.to_address\r\nWHERE\r\n    tx_status = 'SUCCESS'\r\n    AND eth_value > 0\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\nGROUP BY\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9\r\n)\r\n),\r\nreal_sats AS (\r\n    SELECT\r\n        from_address,\r\n        COALESCE(project_name, 'blunts') AS project_names\r\n    FROM\r\n        {{ source(\r\n            'arbitrum_core',\r\n            'fact_token_transfers'\r\n        ) }}\r\n        xfer\r\n        LEFT OUTER JOIN distributor_cex dc\r\n        ON dc.address = xfer.to_address\r\n    WHERE\r\n        from_address IN (\r\n            SELECT\r\n                address\r\n            FROM\r\n                possible_sats\r\n        )\r\n        AND raw_amount > 0\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\nUNION\r\nSELECT\r\n    from_address,\r\n    COALESCE(project_name, 'blunts') AS project_names\r\nFROM\r\n    {{ source(\r\n        'arbitrum_core',\r\n        'fact_traces'\r\n    ) }}\r\n    tr\r\n    LEFT OUTER JOIN distributor_cex dc\r\n    ON dc.address = tr.to_address\r\nWHERE\r\n    from_address IN (\r\n        SELECT\r\n            address\r\n        FROM\r\n            possible_sats\r\n    )\r\n    AND tx_status = 'SUCCESS'\r\n    AND eth_value > 0\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\n),\r\nproject_counts as (\r\n    select distinct from_address, \r\n    count(distinct project_names) as project_count\r\n    from real_sats\r\n    group by from_address\r\n),\r\nexclusive_sats AS (\r\n    SELECT\r\n        DISTINCT from_address AS address\r\n    FROM\r\n        project_counts\r\n    WHERE\r\n        project_count = 1\r\n    GROUP BY\r\n        1\r\n),\r\nfinal_base AS(\r\n    SELECT\r\n        DISTINCT CURRENT_TIMESTAMP AS system_created_at,\r\n        CURRENT_TIMESTAMP AS insert_date,\r\n        blockchain,\r\n        e.address,\r\n        creator,\r\n        l1_label,\r\n        l2_label,\r\n        project_name,\r\n        CONCAT(\r\n            project_name,\r\n            ' deposit_wallet'\r\n        ) AS address_name\r\n    FROM\r\n        exclusive_sats e\r\n        JOIN possible_sats p\r\n        ON e.address = p.address\r\n)\r\nSELECT\r\n    DISTINCT system_created_at,\r\n    insert_date,\r\n    blockchain,\r\n    address,\r\n    creator,\r\n    l1_label,\r\n    l2_label,\r\n    address_name,\r\n    project_name\r\nFROM\r\n    final_base\r\nWHERE\r\n    address NOT IN (\r\n        SELECT\r\n            DISTINCT address\r\n        FROM\r\n            {{ ref('silver_crosschain__address_labels') }}\r\n        WHERE\r\n            blockchain = 'arbitrum'\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.arbitrum_core.fact_token_transfers", "source.crosschain_models.arbitrum_core.fact_traces", "source.crosschain_models.arbitrum_core.fact_token_transfers", "source.crosschain_models.arbitrum_core.fact_traces", "model.crosschain_models.silver_crosschain__address_labels", "model.crosschain_models.silver_crosschain__address_labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "silver_crosschain__snowflake_Arbitrum_satellites"], "unique_id": "model.crosschain_models.silver_crosschain__snowflake_Arbitrum_satellites", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Arbitrum_satellites.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Arbitrum_satellites.sql", "name": "silver_crosschain__snowflake_Arbitrum_satellites", "alias": "snowflake_Arbitrum_satellites", "checksum": {"name": "sha256", "checksum": "0c2f4d1ba130ce8e24ac861eb2c4f2597d114edf3883906534b4990b17f09c84"}, "tags": [], "refs": [["silver_crosschain__address_labels"], ["silver_crosschain__address_labels"]], "sources": [["arbitrum_core", "fact_token_transfers"], ["arbitrum_core", "fact_traces"], ["arbitrum_core", "fact_token_transfers"], ["arbitrum_core", "fact_traces"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Arbitrum_satellites.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Arbitrum_satellites.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "delete+insert"}, "created_at": 1666821808.013706, "compiled_sql": "\n\nWITH distributor_cex AS (\n    -- THIS STATEMENT FINDS KNOWN CEX LABELS WITHIN THE BRONZE ADDRESS LABELS TABLE\n\n    SELECT\n        system_created_at,\n        insert_date,\n        blockchain,\n        address,\n        creator,\n        l1_label,\n        l2_label,\n        address_name,\n        project_name\n    FROM\n        CROSSCHAIN_DEV.silver_crosschain.address_labels\n    WHERE\n        blockchain = 'arbitrum'\n        AND l1_label = 'cex'\n        AND l2_label = 'hot_wallet'\n),\npossible_sats AS (\n    -- THIS STATEMENT LOCATES POTENTIAL SATELLITE WALLETS BASED ON DEPOSIT BEHAVIOR\n    SELECT\n        DISTINCT *\n    FROM\n        (\n            SELECT\n                DISTINCT dc.system_created_at,\n                dc.insert_date,\n                dc.blockchain,\n                xfer.from_address AS address,\n                dc.creator,\n                dc.address_name,\n                dc.project_name,\n                dc.l1_label,\n                'deposit_wallet' AS l2_label,\n                COUNT(\n                    DISTINCT project_name\n                ) over(\n                    PARTITION BY dc.blockchain,\n                    xfer.from_address\n                ) AS project_count -- how many projects has each from address sent to\n            FROM\n                arbitrum.core.fact_token_transfers\n                xfer\n                JOIN distributor_cex dc\n                ON dc.address = xfer.to_address\n            WHERE\n                raw_amount > 0\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\nGROUP BY\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9\nUNION\nSELECT\n    DISTINCT dc.system_created_at,\n    dc.insert_date,\n    dc.blockchain,\n    tr.from_address AS address,\n    dc.creator,\n    dc.address_name,\n    dc.project_name,\n    dc.l1_label,\n    'deposit_wallet' AS l2_label,\n    COUNT(\n        DISTINCT project_name\n    ) over(\n        PARTITION BY dc.blockchain,\n        tr.from_address\n    ) AS project_count\nFROM\n    arbitrum.core.fact_traces\n    tr\n    JOIN distributor_cex dc\n    ON dc.address = tr.to_address\nWHERE\n    tx_status = 'SUCCESS'\n    AND eth_value > 0\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\nGROUP BY\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9\n)\n),\nreal_sats AS (\n    SELECT\n        from_address,\n        COALESCE(project_name, 'blunts') AS project_names\n    FROM\n        arbitrum.core.fact_token_transfers\n        xfer\n        LEFT OUTER JOIN distributor_cex dc\n        ON dc.address = xfer.to_address\n    WHERE\n        from_address IN (\n            SELECT\n                address\n            FROM\n                possible_sats\n        )\n        AND raw_amount > 0\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\nUNION\nSELECT\n    from_address,\n    COALESCE(project_name, 'blunts') AS project_names\nFROM\n    arbitrum.core.fact_traces\n    tr\n    LEFT OUTER JOIN distributor_cex dc\n    ON dc.address = tr.to_address\nWHERE\n    from_address IN (\n        SELECT\n            address\n        FROM\n            possible_sats\n    )\n    AND tx_status = 'SUCCESS'\n    AND eth_value > 0\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\n),\nproject_counts as (\n    select distinct from_address, \n    count(distinct project_names) as project_count\n    from real_sats\n    group by from_address\n),\nexclusive_sats AS (\n    SELECT\n        DISTINCT from_address AS address\n    FROM\n        project_counts\n    WHERE\n        project_count = 1\n    GROUP BY\n        1\n),\nfinal_base AS(\n    SELECT\n        DISTINCT CURRENT_TIMESTAMP AS system_created_at,\n        CURRENT_TIMESTAMP AS insert_date,\n        blockchain,\n        e.address,\n        creator,\n        l1_label,\n        l2_label,\n        project_name,\n        CONCAT(\n            project_name,\n            ' deposit_wallet'\n        ) AS address_name\n    FROM\n        exclusive_sats e\n        JOIN possible_sats p\n        ON e.address = p.address\n)\nSELECT\n    DISTINCT system_created_at,\n    insert_date,\n    blockchain,\n    address,\n    creator,\n    l1_label,\n    l2_label,\n    address_name,\n    project_name\nFROM\n    final_base\nWHERE\n    address NOT IN (\n        SELECT\n            DISTINCT address\n        FROM\n            CROSSCHAIN_DEV.silver_crosschain.address_labels\n        WHERE\n            blockchain = 'arbitrum'\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver_crosschain.snowflake_Arbitrum_satellites"}, "model.crosschain_models.silver_crosschain__snowflake_Algorand_satellite": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    incremental_strategy = 'delete+insert',\r\n) }}\r\n\r\nWITH distributor_cex AS (\r\n    -- THIS STATEMENT FINDS KNOWN CEX LABELS WITHIN THE BRONZE ADDRESS LABELS TABLE\r\n\r\n    SELECT\r\n        system_created_at,\r\n        insert_date,\r\n        blockchain,\r\n        address,\r\n        creator,\r\n        l1_label,\r\n        l2_label,\r\n        address_name,\r\n        project_name\r\n    FROM\r\n        {{ ref('silver_crosschain__address_labels') }}\r\n    WHERE\r\n        blockchain = 'algorand'\r\n        AND l1_label = 'cex'\r\n        AND l2_label = 'hot_wallet'\r\n),\r\npossible_sats AS (\r\n    -- THIS STATEMENT LOCATES POTENTIAL SATELLITE WALLETS BASED ON DEPOSIT BEHAVIOR\r\n    SELECT\r\n        DISTINCT *\r\n    FROM\r\n        (\r\n            SELECT\r\n                DISTINCT dc.system_created_at,\r\n                dc.insert_date,\r\n                dc.blockchain,\r\n                xfer.asset_sender AS address,\r\n                dc.creator,\r\n                dc.address_name,\r\n                dc.project_name,\r\n                dc.l1_label,\r\n                'deposit_wallet' AS l2_label,\r\n                COUNT(\r\n                    DISTINCT project_name\r\n                ) over(\r\n                    PARTITION BY dc.blockchain,\r\n                    xfer.asset_sender\r\n                ) AS project_count -- how many projects has each from address sent to\r\n            FROM\r\n                {{ source(\r\n                    'algorand_core',\r\n                    'ez_transfer'\r\n                ) }}\r\n                xfer\r\n                JOIN distributor_cex dc\r\n                ON dc.address = xfer.receiver\r\n            WHERE\r\n                amount > 0\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\nGROUP BY\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9\r\n)\r\n),\r\nreal_sats AS (\r\n    SELECT\r\n        asset_sender,\r\n        COUNT(DISTINCT COALESCE(project_name, 'blunts')) AS project_count\r\n    FROM\r\n        {{ source(\r\n            'algorand_core',\r\n            'ez_transfer'\r\n        ) }}\r\n        xfer\r\n        LEFT OUTER JOIN distributor_cex dc\r\n        ON dc.address = xfer.receiver\r\n    WHERE\r\n        amount > 0\r\n        AND asset_sender IN (\r\n            SELECT\r\n                address\r\n            FROM\r\n                possible_sats\r\n        )\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\nGROUP BY\r\n    asset_sender\r\n),\r\nexclusive_sats AS (\r\n    SELECT\r\ndistinct\r\n        asset_sender AS address\r\n    FROM\r\n        real_sats\r\n    WHERE\r\n        project_count = 1\r\n    GROUP BY\r\n        1\r\n),\r\nfinal_base AS(\r\n    SELECT\r\n        DISTINCT CURRENT_TIMESTAMP AS system_created_at,\r\n        CURRENT_TIMESTAMP AS insert_date,\r\n        blockchain,\r\n        e.address,\r\n        creator,\r\n        l1_label,\r\n        l2_label,\r\n        project_name,\r\n        CONCAT(\r\n            project_name,\r\n            ' deposit_wallet'\r\n        ) AS address_name\r\n    FROM\r\n        exclusive_sats e\r\n        JOIN possible_sats p\r\n        ON e.address = p.address\r\n)\r\nSELECT\r\ndistinct \r\n    system_created_at,\r\n    insert_date,\r\n    blockchain,\r\n    address,\r\n    creator,\r\n    l1_label,\r\n    l2_label,\r\n    address_name,\r\n    project_name\r\nFROM\r\n    final_base\r\nWHERE\r\n    address NOT IN (\r\n        SELECT\r\n            DISTINCT address\r\n        FROM\r\n            {{ ref('silver_crosschain__address_labels') }}\r\n        WHERE\r\n            blockchain = 'algorand'\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.algorand_core.ez_transfer", "source.crosschain_models.algorand_core.ez_transfer", "model.crosschain_models.silver_crosschain__address_labels", "model.crosschain_models.silver_crosschain__address_labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "silver_crosschain__snowflake_Algorand_satellite"], "unique_id": "model.crosschain_models.silver_crosschain__snowflake_Algorand_satellite", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Algorand_satellite.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Algorand_satellite.sql", "name": "silver_crosschain__snowflake_Algorand_satellite", "alias": "snowflake_Algorand_satellite", "checksum": {"name": "sha256", "checksum": "593c98d318c29e9853ebe22d723728abb75514ab876e0fd3379356d3e811f9f9"}, "tags": [], "refs": [["silver_crosschain__address_labels"], ["silver_crosschain__address_labels"]], "sources": [["algorand_core", "ez_transfer"], ["algorand_core", "ez_transfer"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Algorand_satellite.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Algorand_satellite.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "delete+insert"}, "created_at": 1666821807.4678936, "compiled_sql": "\n\nWITH distributor_cex AS (\n    -- THIS STATEMENT FINDS KNOWN CEX LABELS WITHIN THE BRONZE ADDRESS LABELS TABLE\n\n    SELECT\n        system_created_at,\n        insert_date,\n        blockchain,\n        address,\n        creator,\n        l1_label,\n        l2_label,\n        address_name,\n        project_name\n    FROM\n        CROSSCHAIN_DEV.silver_crosschain.address_labels\n    WHERE\n        blockchain = 'algorand'\n        AND l1_label = 'cex'\n        AND l2_label = 'hot_wallet'\n),\npossible_sats AS (\n    -- THIS STATEMENT LOCATES POTENTIAL SATELLITE WALLETS BASED ON DEPOSIT BEHAVIOR\n    SELECT\n        DISTINCT *\n    FROM\n        (\n            SELECT\n                DISTINCT dc.system_created_at,\n                dc.insert_date,\n                dc.blockchain,\n                xfer.asset_sender AS address,\n                dc.creator,\n                dc.address_name,\n                dc.project_name,\n                dc.l1_label,\n                'deposit_wallet' AS l2_label,\n                COUNT(\n                    DISTINCT project_name\n                ) over(\n                    PARTITION BY dc.blockchain,\n                    xfer.asset_sender\n                ) AS project_count -- how many projects has each from address sent to\n            FROM\n                algorand.core.ez_transfer\n                xfer\n                JOIN distributor_cex dc\n                ON dc.address = xfer.receiver\n            WHERE\n                amount > 0\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\nGROUP BY\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9\n)\n),\nreal_sats AS (\n    SELECT\n        asset_sender,\n        COUNT(DISTINCT COALESCE(project_name, 'blunts')) AS project_count\n    FROM\n        algorand.core.ez_transfer\n        xfer\n        LEFT OUTER JOIN distributor_cex dc\n        ON dc.address = xfer.receiver\n    WHERE\n        amount > 0\n        AND asset_sender IN (\n            SELECT\n                address\n            FROM\n                possible_sats\n        )\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\nGROUP BY\n    asset_sender\n),\nexclusive_sats AS (\n    SELECT\ndistinct\n        asset_sender AS address\n    FROM\n        real_sats\n    WHERE\n        project_count = 1\n    GROUP BY\n        1\n),\nfinal_base AS(\n    SELECT\n        DISTINCT CURRENT_TIMESTAMP AS system_created_at,\n        CURRENT_TIMESTAMP AS insert_date,\n        blockchain,\n        e.address,\n        creator,\n        l1_label,\n        l2_label,\n        project_name,\n        CONCAT(\n            project_name,\n            ' deposit_wallet'\n        ) AS address_name\n    FROM\n        exclusive_sats e\n        JOIN possible_sats p\n        ON e.address = p.address\n)\nSELECT\ndistinct \n    system_created_at,\n    insert_date,\n    blockchain,\n    address,\n    creator,\n    l1_label,\n    l2_label,\n    address_name,\n    project_name\nFROM\n    final_base\nWHERE\n    address NOT IN (\n        SELECT\n            DISTINCT address\n        FROM\n            CROSSCHAIN_DEV.silver_crosschain.address_labels\n        WHERE\n            blockchain = 'algorand'\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver_crosschain.snowflake_Algorand_satellite"}, "model.crosschain_models.silver__hourly_prices_coin_market_cap": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', id, recorded_hour)\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['recorded_hour::DATE','_inserted_timestamp::DATE'],\r\n) }}\r\n\r\nWITH base AS (\r\n\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('bronze__hourly_prices_coin_market_cap') }}\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    _inserted_date >= (\r\n        SELECT\r\n            MAX(\r\n                _inserted_timestamp :: DATE\r\n            )\r\n        FROM\r\n            {{ this }}\r\n    )\r\n    AND _inserted_timestamp > (\r\n        SELECT\r\n            MAX(_inserted_timestamp)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% else %}\r\nWHERE _inserted_date >= '2022-07-22'\r\n{% endif %}\r\n)\r\nSELECT\r\n    A.id,\r\n    DATE_TRUNC(\r\n        'hour',\r\n        f.value :quote :USD :timestamp :: timestamp_ntz\r\n    ) AS recorded_hour,\r\n    f.value :quote :USD :open::float AS OPEN,\r\n    f.value :quote :USD :high::float AS high,\r\n    f.value :quote :USD :low::float AS low,\r\n    f.value :quote :USD :close::float AS CLOSE,\r\n    f.value :quote :USD :volume::number AS volume,\r\n    f.value :quote :USD :market_cap::number AS market_cap,\r\n    A._inserted_timestamp\r\nFROM\r\n    base A,\r\n    TABLE(FLATTEN(DATA :quotes)) f qualify(ROW_NUMBER() over (PARTITION BY id, recorded_hour\r\nORDER BY\r\n    _inserted_timestamp DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.crosschain_models.bronze__hourly_prices_coin_market_cap"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', id, recorded_hour)", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["recorded_hour::DATE", "_inserted_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "hourly_prices", "silver__hourly_prices_coin_market_cap"], "unique_id": "model.crosschain_models.silver__hourly_prices_coin_market_cap", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.sql", "original_file_path": "models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.sql", "name": "silver__hourly_prices_coin_market_cap", "alias": "hourly_prices_coin_market_cap", "checksum": {"name": "sha256", "checksum": "e0d7478e1de2e85df039f6c68a93c87597449299288f29b89092a3da2051ab63"}, "tags": [], "refs": [["bronze__hourly_prices_coin_market_cap"]], "sources": [], "metrics": [], "description": "", "columns": {"ID": {"name": "ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECORDED_HOUR": {"name": "RECORDED_HOUR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OPEN": {"name": "OPEN", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HIGH": {"name": "HIGH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOW": {"name": "LOW", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CLOSE": {"name": "CLOSE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VOLUME": {"name": "VOLUME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MARKET_CAP": {"name": "MARKET_CAP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', id, recorded_hour)", "incremental_strategy": "delete+insert", "cluster_by": ["recorded_hour::DATE", "_inserted_timestamp::DATE"]}, "created_at": 1666821807.573512, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        *\n    FROM\n        CROSSCHAIN_DEV.bronze.hourly_prices_coin_market_cap\n\n\nWHERE\n    _inserted_date >= (\n        SELECT\n            MAX(\n                _inserted_timestamp :: DATE\n            )\n        FROM\n            CROSSCHAIN_DEV.silver.hourly_prices_coin_market_cap\n    )\n    AND _inserted_timestamp > (\n        SELECT\n            MAX(_inserted_timestamp)\n        FROM\n            CROSSCHAIN_DEV.silver.hourly_prices_coin_market_cap\n    )\n\n)\nSELECT\n    A.id,\n    DATE_TRUNC(\n        'hour',\n        f.value :quote :USD :timestamp :: timestamp_ntz\n    ) AS recorded_hour,\n    f.value :quote :USD :open::float AS OPEN,\n    f.value :quote :USD :high::float AS high,\n    f.value :quote :USD :low::float AS low,\n    f.value :quote :USD :close::float AS CLOSE,\n    f.value :quote :USD :volume::number AS volume,\n    f.value :quote :USD :market_cap::number AS market_cap,\n    A._inserted_timestamp\nFROM\n    base A,\n    TABLE(FLATTEN(DATA :quotes)) f qualify(ROW_NUMBER() over (PARTITION BY id, recorded_hour\nORDER BY\n    _inserted_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.hourly_prices_coin_market_cap"}, "model.crosschain_models.silver_crosschain__snowflake_Thorchain_satellite": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    incremental_strategy = 'delete+insert',\r\n) }}\r\n\r\nWITH distributor_cex AS (\r\n    -- THIS STATEMENT FINDS KNOWN CEX LABELS WITHIN THE BRONZE ADDRESS LABELS TABLE\r\n\r\n    SELECT\r\n        system_created_at,\r\n        insert_date,\r\n        blockchain,\r\n        address,\r\n        creator,\r\n        l1_label,\r\n        l2_label,\r\n        address_name,\r\n        project_name\r\n    FROM\r\n        {{ ref('silver_crosschain__address_labels') }}\r\n    WHERE\r\n        blockchain = 'thorchain'\r\n        AND l1_label = 'cex'\r\n        AND l2_label = 'hot_wallet'\r\n),\r\npossible_sats AS (\r\n    -- THIS STATEMENT LOCATES POTENTIAL SATELLITE WALLETS BASED ON DEPOSIT BEHAVIOR\r\n    SELECT\r\n        DISTINCT *\r\n    FROM\r\n        (\r\n            SELECT\r\n                DISTINCT dc.system_created_at,\r\n                dc.insert_date,\r\n                dc.blockchain,\r\n                xfer.from_address AS address,\r\n                dc.creator,\r\n                dc.address_name,\r\n                dc.project_name,\r\n                dc.l1_label,\r\n                'deposit_wallet' AS l2_label,\r\n                COUNT(\r\n                    DISTINCT project_name\r\n                ) over(\r\n                    PARTITION BY dc.blockchain,\r\n                    xfer.from_address\r\n                ) AS project_count -- how many projects has each from address sent to\r\n            FROM\r\n                {{ source(\r\n                    'thorchain',\r\n                    'transfers'\r\n                ) }}\r\n                xfer\r\n                JOIN distributor_cex dc\r\n                ON dc.address = xfer.to_address\r\n            WHERE\r\n                rune_amount > 0\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\nGROUP BY\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9\r\n)\r\n),\r\nreal_sats AS (\r\n    SELECT\r\n        from_address,\r\n        COUNT(DISTINCT COALESCE(project_name, 'blunts')) AS project_count\r\n    FROM\r\n        {{ source(\r\n            'thorchain',\r\n            'transfers'\r\n        ) }}\r\n        xfer\r\n        LEFT OUTER JOIN distributor_cex dc\r\n        ON dc.address = xfer.to_address\r\n    WHERE\r\n        rune_amount > 0\r\n        AND from_address IN (\r\n            SELECT\r\n                address\r\n            FROM\r\n                possible_sats\r\n        )\r\n        and to_address != 'thor1dheycdevq39qlkxs2a6wuuzyn4aqxhve4qxtxt'\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\nGROUP BY\r\n    from_address\r\n),\r\nexclusive_sats AS (\r\n    SELECT\r\n        DISTINCT from_address AS address\r\n    FROM\r\n        real_sats\r\n    WHERE\r\n        project_count = 1\r\n    GROUP BY\r\n        1\r\n),\r\nfinal_base AS(\r\n    SELECT\r\n        DISTINCT CURRENT_TIMESTAMP AS system_created_at,\r\n        CURRENT_TIMESTAMP AS insert_date,\r\n        blockchain,\r\n        e.address,\r\n        creator,\r\n        l1_label,\r\n        l2_label,\r\n        project_name,\r\n        CONCAT(\r\n            project_name,\r\n            ' deposit_wallet'\r\n        ) AS address_name\r\n    FROM\r\n        exclusive_sats e\r\n        JOIN possible_sats p\r\n        ON e.address = p.address\r\n)\r\nSELECT\r\n    DISTINCT system_created_at,\r\n    insert_date,\r\n    blockchain,\r\n    address,\r\n    creator,\r\n    l1_label,\r\n    l2_label,\r\n    address_name,\r\n    project_name\r\nFROM\r\n    final_base\r\nWHERE\r\n    address NOT IN (\r\n        SELECT\r\n            DISTINCT address\r\n        FROM\r\n            {{ ref('silver_crosschain__address_labels') }}\r\n        WHERE\r\n            blockchain = 'thorchain'\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.thorchain.transfers", "source.crosschain_models.thorchain.transfers", "model.crosschain_models.silver_crosschain__address_labels", "model.crosschain_models.silver_crosschain__address_labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "silver_crosschain__snowflake_Thorchain_satellite"], "unique_id": "model.crosschain_models.silver_crosschain__snowflake_Thorchain_satellite", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Thorchain_satellite.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Thorchain_satellite.sql", "name": "silver_crosschain__snowflake_Thorchain_satellite", "alias": "snowflake_Thorchain_satellite", "checksum": {"name": "sha256", "checksum": "37dfd3f2f9f33c715b219b6446d4e37d2e9b75d36a5cce5285eff3729b45fe74"}, "tags": [], "refs": [["silver_crosschain__address_labels"], ["silver_crosschain__address_labels"]], "sources": [["thorchain", "transfers"], ["thorchain", "transfers"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Thorchain_satellite.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Thorchain_satellite.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "delete+insert"}, "created_at": 1666821808.1523144, "compiled_sql": "\n\nWITH distributor_cex AS (\n    -- THIS STATEMENT FINDS KNOWN CEX LABELS WITHIN THE BRONZE ADDRESS LABELS TABLE\n\n    SELECT\n        system_created_at,\n        insert_date,\n        blockchain,\n        address,\n        creator,\n        l1_label,\n        l2_label,\n        address_name,\n        project_name\n    FROM\n        CROSSCHAIN_DEV.silver_crosschain.address_labels\n    WHERE\n        blockchain = 'thorchain'\n        AND l1_label = 'cex'\n        AND l2_label = 'hot_wallet'\n),\npossible_sats AS (\n    -- THIS STATEMENT LOCATES POTENTIAL SATELLITE WALLETS BASED ON DEPOSIT BEHAVIOR\n    SELECT\n        DISTINCT *\n    FROM\n        (\n            SELECT\n                DISTINCT dc.system_created_at,\n                dc.insert_date,\n                dc.blockchain,\n                xfer.from_address AS address,\n                dc.creator,\n                dc.address_name,\n                dc.project_name,\n                dc.l1_label,\n                'deposit_wallet' AS l2_label,\n                COUNT(\n                    DISTINCT project_name\n                ) over(\n                    PARTITION BY dc.blockchain,\n                    xfer.from_address\n                ) AS project_count -- how many projects has each from address sent to\n            FROM\n                flipside_prod_db.thorchain.transfers\n                xfer\n                JOIN distributor_cex dc\n                ON dc.address = xfer.to_address\n            WHERE\n                rune_amount > 0\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\nGROUP BY\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9\n)\n),\nreal_sats AS (\n    SELECT\n        from_address,\n        COUNT(DISTINCT COALESCE(project_name, 'blunts')) AS project_count\n    FROM\n        flipside_prod_db.thorchain.transfers\n        xfer\n        LEFT OUTER JOIN distributor_cex dc\n        ON dc.address = xfer.to_address\n    WHERE\n        rune_amount > 0\n        AND from_address IN (\n            SELECT\n                address\n            FROM\n                possible_sats\n        )\n        and to_address != 'thor1dheycdevq39qlkxs2a6wuuzyn4aqxhve4qxtxt'\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\nGROUP BY\n    from_address\n),\nexclusive_sats AS (\n    SELECT\n        DISTINCT from_address AS address\n    FROM\n        real_sats\n    WHERE\n        project_count = 1\n    GROUP BY\n        1\n),\nfinal_base AS(\n    SELECT\n        DISTINCT CURRENT_TIMESTAMP AS system_created_at,\n        CURRENT_TIMESTAMP AS insert_date,\n        blockchain,\n        e.address,\n        creator,\n        l1_label,\n        l2_label,\n        project_name,\n        CONCAT(\n            project_name,\n            ' deposit_wallet'\n        ) AS address_name\n    FROM\n        exclusive_sats e\n        JOIN possible_sats p\n        ON e.address = p.address\n)\nSELECT\n    DISTINCT system_created_at,\n    insert_date,\n    blockchain,\n    address,\n    creator,\n    l1_label,\n    l2_label,\n    address_name,\n    project_name\nFROM\n    final_base\nWHERE\n    address NOT IN (\n        SELECT\n            DISTINCT address\n        FROM\n            CROSSCHAIN_DEV.silver_crosschain.address_labels\n        WHERE\n            blockchain = 'thorchain'\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver_crosschain.snowflake_Thorchain_satellite"}, "model.crosschain_models.silver__tags_active_arbitrum_last_7": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', address, start_date)\",\r\n    incremental_strategy = 'delete+insert',\r\n) }}\r\n\r\n\r\n{% if is_incremental() %}\r\n  with base as (\r\n      select distinct \r\n        from_address as address,\r\n        min(date_trunc('day', block_timestamp)) as start_date\r\n        from     \r\n        {{ source(\r\n        'arbitrum_silver',\r\n        'transactions'\r\n        ) }}\r\n        WHERE block_timestamp >= current_date -7\r\n        group by from_address \r\n  ), current_tagged as (\r\n      select *\r\n      from {{ this }}\r\n      where end_date is null \r\n  ), additions as (\r\n      select distinct \r\n        'arbitrum' as blockchain,\r\n        'flipside' as creator,\r\n        address as address,\r\n        'active on arbitrum last 7' as tag_name,\r\n        'activity' as tag_type,\r\n        start_date::date as start_date, \r\n        null as end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n        from base\r\n        where address not in (select distinct address from current_tagged)\r\n  ),\r\n     cap_end_date as (\r\n      select distinct \r\n        blockchain,\r\n        creator,\r\n        address,\r\n        tag_name,\r\n        tag_type,\r\n        start_date::date, \r\n        date_trunc('DAY', current_date)::date as end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n        from current_tagged\r\n        where address not in (select distinct address from base)\r\n  )\r\n  select * from additions\r\n  union \r\n  select * from cap_end_date\r\n\r\n{% else %}\r\n\r\n    with address_base as (\r\n    select distinct from_address, block_timestamp::date as bt\r\n    from    \r\n    {{ source(\r\n        'arbitrum_silver',\r\n        'transactions'\r\n    ) }}\r\n    ),\r\n    next_date as (\r\n        select *, \r\n            lead(bt) over (partition by from_address order by bt) as nt,\r\n            datediff('day',bt, nt) as days_between_activity\r\n        from address_base\r\n    )\r\n    , conditional_group as (\r\n    select \r\n        *,\r\n        conditional_true_event(days_between_activity > 7) over (partition by from_address order by bt) as e\r\n        from next_date\r\n    )\r\n    , conditional_group_lagged as (\r\n        select *,\r\n        coalesce(lag(e) over (partition by from_address order by bt),0) as grouping_val\r\n        from conditional_group\r\n    )\r\n    , final_base as (\r\n        select \r\n            from_address,\r\n            grouping_val,\r\n            min(bt) as start_date,\r\n            dateadd('day',7,max(bt)) as end_date\r\n        from conditional_group_lagged\r\n        group by 1, 2\r\n    )\r\n    select \r\n        'arbitrum' as blockchain,\r\n        'flipside' as creator,\r\n        from_address as address,\r\n        'active on arbitrum last 7' as tag_name,\r\n        'activity' as tag_type,\r\n        start_date, \r\n        iff(end_date>current_date, null, end_date) as end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    from final_base\r\n\r\n\r\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.arbitrum_silver.transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', address, start_date)", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "tags", "Arbitrum", "silver__tags_active_arbitrum_last_7"], "unique_id": "model.crosschain_models.silver__tags_active_arbitrum_last_7", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\tags\\Arbitrum\\silver__tags_active_arbitrum_last_7.sql", "original_file_path": "models\\silver\\tags\\Arbitrum\\silver__tags_active_arbitrum_last_7.sql", "name": "silver__tags_active_arbitrum_last_7", "alias": "tags_active_arbitrum_last_7", "checksum": {"name": "sha256", "checksum": "151f9d482ddd88d95019317307f2736addc5915596f62d048ead0e8f14684560"}, "tags": [], "refs": [], "sources": [["arbitrum_silver", "transactions"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\tags\\Arbitrum\\silver__tags_active_arbitrum_last_7.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Arbitrum\\silver__tags_active_arbitrum_last_7.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', address, start_date)", "incremental_strategy": "delete+insert"}, "created_at": 1666821807.175314, "compiled_sql": "\n\n\n\n  with base as (\n      select distinct \n        from_address as address,\n        min(date_trunc('day', block_timestamp)) as start_date\n        from     \n        arbitrum.silver.transactions\n        WHERE block_timestamp >= current_date -7\n        group by from_address \n  ), current_tagged as (\n      select *\n      from CROSSCHAIN_DEV.silver.tags_active_arbitrum_last_7\n      where end_date is null \n  ), additions as (\n      select distinct \n        'arbitrum' as blockchain,\n        'flipside' as creator,\n        address as address,\n        'active on arbitrum last 7' as tag_name,\n        'activity' as tag_type,\n        start_date::date as start_date, \n        null as end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n        from base\n        where address not in (select distinct address from current_tagged)\n  ),\n     cap_end_date as (\n      select distinct \n        blockchain,\n        creator,\n        address,\n        tag_name,\n        tag_type,\n        start_date::date, \n        date_trunc('DAY', current_date)::date as end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n        from current_tagged\n        where address not in (select distinct address from base)\n  )\n  select * from additions\n  union \n  select * from cap_end_date\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.tags_active_arbitrum_last_7"}, "model.crosschain_models.silver__tags_cex_user_ETH": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"unique_id\",\r\n    incremental_strategy = 'merge',\r\n    merge_update_columns = ['creator'],\r\n) }}\r\n\r\nWITH from_cex AS (\r\n\r\n    SELECT\r\n        DISTINCT A.to_address AS address,\r\n        b.project_name,\r\n        MIN(\r\n            A.block_timestamp :: DATE\r\n        ) AS start_date,\r\n        MIN(\r\n            A._inserted_timestamp\r\n        ) AS _inserted_timestamp\r\n    FROM\r\n        {{ source(\r\n            'ethereum_silver',\r\n            'transactions'\r\n        ) }} A\r\n        INNER JOIN (\r\n            SELECT\r\n                DISTINCT address,\r\n                project_name\r\n            FROM\r\n                {{ source(\r\n                    'ethereum_silver',\r\n                    'labels'\r\n                ) }}\r\n            WHERE\r\n                blockchain = 'ethereum'\r\n                AND l1_label = 'cex'\r\n        ) b\r\n        ON A.from_address = b.address\r\n    WHERE\r\n        A.to_address IS NOT NULL\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp > (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\nGROUP BY\r\n    1,\r\n    2\r\n),\r\nto_cex AS (\r\n    SELECT\r\n        DISTINCT A.from_address AS address,\r\n        b.project_name,\r\n        MIN(\r\n            A.block_timestamp :: DATE\r\n        ) AS start_date,\r\n        MIN(\r\n            A._inserted_timestamp\r\n        ) AS _inserted_timestamp\r\n    FROM\r\n        {{ source(\r\n            'ethereum_silver',\r\n            'transactions'\r\n        ) }} A\r\n        INNER JOIN (\r\n            SELECT\r\n                DISTINCT address,\r\n                project_name\r\n            FROM\r\n                {{ source(\r\n                    'ethereum_silver',\r\n                    'labels'\r\n                ) }}\r\n            WHERE\r\n                blockchain = 'ethereum'\r\n                AND l1_label = 'cex'\r\n        ) b\r\n        ON A.to_address = b.address\r\n    WHERE\r\n        A.from_address IS NOT NULL\r\n\r\n{% if is_incremental() %}\r\nAND _inserted_timestamp > (\r\n    SELECT\r\n        MAX(_inserted_timestamp)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\nGROUP BY\r\n    1,\r\n    2\r\n),\r\ntotal_table AS (\r\n    SELECT\r\n        DISTINCT 'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        address,\r\n        CONCAT(\r\n            project_name,\r\n            ' user'\r\n        ) AS tag_name,\r\n        'cex' AS tag_type,\r\n        start_date,\r\n        NULL AS end_date,\r\n        _inserted_timestamp,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        from_cex\r\n    UNION\r\n    SELECT\r\n        DISTINCT 'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        address,\r\n        CONCAT(\r\n            project_name,\r\n            ' user'\r\n        ) AS tag_name,\r\n        'cex' AS tag_type,\r\n        start_date,\r\n        NULL AS end_date,\r\n        _inserted_timestamp,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        to_cex\r\n),\r\ntotal_table_small AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        total_table qualify(ROW_NUMBER() over(PARTITION BY address, tag_name\r\n    ORDER BY\r\n        start_date ASC)) = 1\r\n)\r\nSELECT\r\n    *,\r\n     {{ dbt_utils.surrogate_key(['address', 'tag_name']) }} as unique_id\r\nFROM\r\n    total_table_small", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["source.crosschain_models.ethereum_silver.transactions", "source.crosschain_models.ethereum_silver.labels", "source.crosschain_models.ethereum_silver.transactions", "source.crosschain_models.ethereum_silver.labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "unique_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "merge_update_columns": ["creator"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "silver__tags_cex_user_ETH"], "unique_id": "model.crosschain_models.silver__tags_cex_user_ETH", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\tags\\Ethereum\\silver__tags_cex_user_ETH.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_cex_user_ETH.sql", "name": "silver__tags_cex_user_ETH", "alias": "tags_cex_user_ETH", "checksum": {"name": "sha256", "checksum": "33cd67245fc511b2ddbd17262b8db3460d39acd48b6579dd793e5275330ab511"}, "tags": [], "refs": [], "sources": [["ethereum_silver", "transactions"], ["ethereum_silver", "labels"], ["ethereum_silver", "transactions"], ["ethereum_silver", "labels"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\tags\\Ethereum\\silver__tags_cex_user_ETH.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_cex_user_ETH.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "unique_id", "incremental_strategy": "merge", "merge_update_columns": ["creator"]}, "created_at": 1666821808.1074548, "compiled_sql": "\n\nWITH from_cex AS (\n\n    SELECT\n        DISTINCT A.to_address AS address,\n        b.project_name,\n        MIN(\n            A.block_timestamp :: DATE\n        ) AS start_date,\n        MIN(\n            A._inserted_timestamp\n        ) AS _inserted_timestamp\n    FROM\n        ethereum.silver.transactions A\n        INNER JOIN (\n            SELECT\n                DISTINCT address,\n                project_name\n            FROM\n                ethereum.silver.labels\n            WHERE\n                blockchain = 'ethereum'\n                AND l1_label = 'cex'\n        ) b\n        ON A.from_address = b.address\n    WHERE\n        A.to_address IS NOT NULL\n\n\nAND _inserted_timestamp > (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        CROSSCHAIN_DEV.silver.tags_cex_user_ETH\n)\n\nGROUP BY\n    1,\n    2\n),\nto_cex AS (\n    SELECT\n        DISTINCT A.from_address AS address,\n        b.project_name,\n        MIN(\n            A.block_timestamp :: DATE\n        ) AS start_date,\n        MIN(\n            A._inserted_timestamp\n        ) AS _inserted_timestamp\n    FROM\n        ethereum.silver.transactions A\n        INNER JOIN (\n            SELECT\n                DISTINCT address,\n                project_name\n            FROM\n                ethereum.silver.labels\n            WHERE\n                blockchain = 'ethereum'\n                AND l1_label = 'cex'\n        ) b\n        ON A.to_address = b.address\n    WHERE\n        A.from_address IS NOT NULL\n\n\nAND _inserted_timestamp > (\n    SELECT\n        MAX(_inserted_timestamp)\n    FROM\n        CROSSCHAIN_DEV.silver.tags_cex_user_ETH\n)\n\nGROUP BY\n    1,\n    2\n),\ntotal_table AS (\n    SELECT\n        DISTINCT 'ethereum' AS blockchain,\n        'flipside' AS creator,\n        address,\n        CONCAT(\n            project_name,\n            ' user'\n        ) AS tag_name,\n        'cex' AS tag_type,\n        start_date,\n        NULL AS end_date,\n        _inserted_timestamp,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        from_cex\n    UNION\n    SELECT\n        DISTINCT 'ethereum' AS blockchain,\n        'flipside' AS creator,\n        address,\n        CONCAT(\n            project_name,\n            ' user'\n        ) AS tag_name,\n        'cex' AS tag_type,\n        start_date,\n        NULL AS end_date,\n        _inserted_timestamp,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        to_cex\n),\ntotal_table_small AS (\n    SELECT\n        *\n    FROM\n        total_table qualify(ROW_NUMBER() over(PARTITION BY address, tag_name\n    ORDER BY\n        start_date ASC)) = 1\n)\nSELECT\n    *,\n     md5(cast(coalesce(cast(address as \n    varchar\n), '') || '-' || coalesce(cast(tag_name as \n    varchar\n), '') as \n    varchar\n)) as unique_id\nFROM\n    total_table_small", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.tags_cex_user_ETH"}, "model.crosschain_models.silver__ntr_summary": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', blockchain, symbol, xfer_date)\",\r\n    incremental_strategy = 'delete+insert',\r\n) }}\r\n\r\nWITH core_values AS (\r\n    SELECT\r\n        A.blockchain,\r\n        A.symbol,\r\n        b.xfer_date\r\n    FROM\r\n        (\r\n            SELECT\r\n                DISTINCT blockchain,\r\n                symbol\r\n            FROM\r\n                {{ source(\r\n                    'legacy_silver_crosschain',\r\n                    'ntr'\r\n                ) }}\r\n            where blockchain != 'algoana'\r\n            ORDER BY\r\n                blockchain,\r\n                symbol\r\n        ) A\r\n        CROSS JOIN (\r\n            SELECT\r\n                DISTINCT date_trunc('day', hour) AS xfer_date\r\n            FROM\r\n                {{ source(\r\n                    'legacy_db',\r\n                    'hours'\r\n                ) }}\r\n            where xfer_date >= (SELECT\r\n                    MIN(xfer_date)\r\n                FROM\r\n                    {{ source(\r\n                        'legacy_silver_crosschain',\r\n                        'ntr'\r\n                    ) }})\r\n                and xfer_date <= current_date\r\n        ) b\r\n    ORDER BY\r\n        A.blockchain,\r\n        A.symbol,\r\n        b.xfer_date\r\n),\r\nbase AS (\r\n    SELECT\r\n        DISTINCT blockchain,\r\n        symbol,\r\n        xfer_date,\r\n        SUM(reward) AS reward,\r\n        SUM(hodl) AS hodl,\r\n        SUM(unlabeled_transfer) AS unlabeled_transfer,\r\n        SUM(stake) AS stake,\r\n        SUM(cex_deposit) AS cex_deposit,\r\n        SUM(nft_buy) AS nft_buy,\r\n        SUM(dex_swap) AS dex_swap,\r\n        SUM(bridge) AS bridge,\r\n        SUM(\r\n            CASE\r\n                WHEN first_is_bounty = 'TRUE' THEN 1\r\n                ELSE 0\r\n            END\r\n        ) / COUNT(*) AS prop_first_is_bounty,\r\n        SUM(\r\n            CASE\r\n                WHEN did_hunt = 'TRUE' THEN 1\r\n                ELSE 0\r\n            END\r\n        ) / COUNT(*) AS prop_did_hunt,\r\n        SUM(\r\n            CASE\r\n                WHEN did_new_user = 'TRUE' THEN 1\r\n                ELSE 0\r\n            END\r\n        ) / COUNT(*) AS prop_did_new_user,\r\n        SUM(\r\n            CASE\r\n                WHEN did_bounty = 'TRUE' THEN 1\r\n                ELSE 0\r\n            END\r\n        ) / COUNT(*) AS prop_did_bounty\r\n    FROM\r\n        {{ source(\r\n            'legacy_silver_crosschain',\r\n            'ntr'\r\n        ) }}\r\n    WHERE\r\n        reward > 0 and blockchain != 'algoana'\r\n    GROUP BY\r\n        blockchain,\r\n        symbol,\r\n        xfer_date\r\n    ORDER BY\r\n        blockchain,\r\n        symbol,\r\n        xfer_date\r\n),\r\njoined_base AS (\r\n    SELECT\r\n        A.blockchain,\r\n        A.symbol,\r\n        A.xfer_date,\r\n        b.reward,\r\n        b.hodl,\r\n        b.unlabeled_transfer,\r\n        b.stake,\r\n        b.cex_deposit,\r\n        b.nft_buy,\r\n        b.dex_swap,\r\n        b.bridge,\r\n        b.prop_first_is_bounty,\r\n        b.prop_did_hunt,\r\n        b.prop_did_new_user,\r\n        b.prop_did_bounty\r\n    FROM\r\n        core_values A\r\n        LEFT JOIN base b\r\n        ON A.blockchain = b.blockchain\r\n        AND A.symbol = b.symbol\r\n        AND A.xfer_date = b.xfer_date\r\n),\r\nff_base AS(\r\n    SELECT\r\n        *,\r\n        COUNT(\r\n            CASE\r\n                WHEN reward IS NOT NULL THEN 1\r\n            END\r\n        ) over (\r\n            PARTITION BY blockchain,\r\n            symbol\r\n            ORDER BY\r\n                blockchain,\r\n                symbol,\r\n                xfer_Date rows BETWEEN unbounded preceding\r\n                AND CURRENT ROW\r\n        ) AS grp\r\n    FROM\r\n        joined_base\r\n),\r\nfinal_upload as (\r\nSELECT\r\n    blockchain,\r\n    symbol,\r\n    xfer_date,\r\n    MIN(reward) over (\r\n        PARTITION BY blockchain,\r\n        symbol,\r\n        grp\r\n    ) AS reward,\r\n    MIN(hodl) over (\r\n        PARTITION BY blockchain,\r\n        symbol,\r\n        grp\r\n    ) AS hodl,\r\n    MIN(unlabeled_transfer) over (\r\n        PARTITION BY blockchain,\r\n        symbol,\r\n        grp\r\n    ) AS unlabeled_transfer,\r\n    MIN(stake) over (\r\n        PARTITION BY blockchain,\r\n        symbol,\r\n        grp\r\n    ) AS stake,\r\n    MIN(cex_deposit) over (\r\n        PARTITION BY blockchain,\r\n        symbol,\r\n        grp\r\n    ) AS cex_deposit,\r\n    MIN(nft_buy) over (\r\n        PARTITION BY blockchain,\r\n        symbol,\r\n        grp\r\n    ) AS nft_buy,\r\n    MIN(dex_swap) over (\r\n        PARTITION BY blockchain,\r\n        symbol,\r\n        grp\r\n    ) AS dex_swap,\r\n    MIN(bridge) over (\r\n        PARTITION BY blockchain,\r\n        symbol,\r\n        grp\r\n    ) AS bridge,\r\n    MIN(prop_first_is_bounty) over (\r\n        PARTITION BY blockchain,\r\n        symbol,\r\n        grp\r\n    ) AS prop_first_is_bounty,\r\n    MIN(prop_did_hunt) over (\r\n        PARTITION BY blockchain,\r\n        symbol,\r\n        grp\r\n    ) AS prop_did_hunt,\r\n    MIN(prop_did_new_user) over (\r\n        PARTITION BY blockchain,\r\n        symbol,\r\n        grp\r\n    ) AS prop_did_new_user,\r\n    MIN(prop_did_bounty) over (\r\n        PARTITION BY blockchain,\r\n        symbol,\r\n        grp\r\n    ) AS prop_did_bounty\r\nFROM\r\n    ff_base\r\nORDER BY\r\n    blockchain,\r\n    symbol,\r\n    xfer_date\r\n)\r\nselect \r\n    blockchain,\r\n    symbol,\r\n    xfer_date,\r\n    reward,\r\n    hodl,\r\n    unlabeled_transfer,\r\n    stake,\r\n    cex_deposit,\r\n    nft_buy,\r\n    dex_swap,\r\n    bridge,\r\n    prop_first_is_bounty,\r\n    prop_did_hunt,\r\n    prop_did_new_user,\r\n    prop_did_bounty\r\n    from final_upload\r\n    where reward is not null\r\n    order by blockchain, symbol, xfer_date", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.crosschain_models.legacy_silver_crosschain.ntr", "source.crosschain_models.legacy_db.hours"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', blockchain, symbol, xfer_date)", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "ntr", "silver__ntr_summary"], "unique_id": "model.crosschain_models.silver__ntr_summary", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\ntr\\silver__ntr_summary.sql", "original_file_path": "models\\silver\\ntr\\silver__ntr_summary.sql", "name": "silver__ntr_summary", "alias": "ntr_summary", "checksum": {"name": "sha256", "checksum": "b692cf0865a7941fd28bf4af1954f13609e5392e5fcbff330b8a7f6bc987ebc3"}, "tags": [], "refs": [], "sources": [["legacy_silver_crosschain", "ntr"], ["legacy_db", "hours"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\ntr\\silver__ntr_summary.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', blockchain, symbol, xfer_date)", "incremental_strategy": "delete+insert"}, "created_at": 1666821806.7774804, "compiled_sql": "\n\nWITH core_values AS (\n    SELECT\n        A.blockchain,\n        A.symbol,\n        b.xfer_date\n    FROM\n        (\n            SELECT\n                DISTINCT blockchain,\n                symbol\n            FROM\n                flipside_prod_db.silver_crosschain.ntr\n            where blockchain != 'algoana'\n            ORDER BY\n                blockchain,\n                symbol\n        ) A\n        CROSS JOIN (\n            SELECT\n                DISTINCT date_trunc('day', hour) AS xfer_date\n            FROM\n                flipside_prod_db.silver.hours\n            where xfer_date >= (SELECT\n                    MIN(xfer_date)\n                FROM\n                    flipside_prod_db.silver_crosschain.ntr)\n                and xfer_date <= current_date\n        ) b\n    ORDER BY\n        A.blockchain,\n        A.symbol,\n        b.xfer_date\n),\nbase AS (\n    SELECT\n        DISTINCT blockchain,\n        symbol,\n        xfer_date,\n        SUM(reward) AS reward,\n        SUM(hodl) AS hodl,\n        SUM(unlabeled_transfer) AS unlabeled_transfer,\n        SUM(stake) AS stake,\n        SUM(cex_deposit) AS cex_deposit,\n        SUM(nft_buy) AS nft_buy,\n        SUM(dex_swap) AS dex_swap,\n        SUM(bridge) AS bridge,\n        SUM(\n            CASE\n                WHEN first_is_bounty = 'TRUE' THEN 1\n                ELSE 0\n            END\n        ) / COUNT(*) AS prop_first_is_bounty,\n        SUM(\n            CASE\n                WHEN did_hunt = 'TRUE' THEN 1\n                ELSE 0\n            END\n        ) / COUNT(*) AS prop_did_hunt,\n        SUM(\n            CASE\n                WHEN did_new_user = 'TRUE' THEN 1\n                ELSE 0\n            END\n        ) / COUNT(*) AS prop_did_new_user,\n        SUM(\n            CASE\n                WHEN did_bounty = 'TRUE' THEN 1\n                ELSE 0\n            END\n        ) / COUNT(*) AS prop_did_bounty\n    FROM\n        flipside_prod_db.silver_crosschain.ntr\n    WHERE\n        reward > 0 and blockchain != 'algoana'\n    GROUP BY\n        blockchain,\n        symbol,\n        xfer_date\n    ORDER BY\n        blockchain,\n        symbol,\n        xfer_date\n),\njoined_base AS (\n    SELECT\n        A.blockchain,\n        A.symbol,\n        A.xfer_date,\n        b.reward,\n        b.hodl,\n        b.unlabeled_transfer,\n        b.stake,\n        b.cex_deposit,\n        b.nft_buy,\n        b.dex_swap,\n        b.bridge,\n        b.prop_first_is_bounty,\n        b.prop_did_hunt,\n        b.prop_did_new_user,\n        b.prop_did_bounty\n    FROM\n        core_values A\n        LEFT JOIN base b\n        ON A.blockchain = b.blockchain\n        AND A.symbol = b.symbol\n        AND A.xfer_date = b.xfer_date\n),\nff_base AS(\n    SELECT\n        *,\n        COUNT(\n            CASE\n                WHEN reward IS NOT NULL THEN 1\n            END\n        ) over (\n            PARTITION BY blockchain,\n            symbol\n            ORDER BY\n                blockchain,\n                symbol,\n                xfer_Date rows BETWEEN unbounded preceding\n                AND CURRENT ROW\n        ) AS grp\n    FROM\n        joined_base\n),\nfinal_upload as (\nSELECT\n    blockchain,\n    symbol,\n    xfer_date,\n    MIN(reward) over (\n        PARTITION BY blockchain,\n        symbol,\n        grp\n    ) AS reward,\n    MIN(hodl) over (\n        PARTITION BY blockchain,\n        symbol,\n        grp\n    ) AS hodl,\n    MIN(unlabeled_transfer) over (\n        PARTITION BY blockchain,\n        symbol,\n        grp\n    ) AS unlabeled_transfer,\n    MIN(stake) over (\n        PARTITION BY blockchain,\n        symbol,\n        grp\n    ) AS stake,\n    MIN(cex_deposit) over (\n        PARTITION BY blockchain,\n        symbol,\n        grp\n    ) AS cex_deposit,\n    MIN(nft_buy) over (\n        PARTITION BY blockchain,\n        symbol,\n        grp\n    ) AS nft_buy,\n    MIN(dex_swap) over (\n        PARTITION BY blockchain,\n        symbol,\n        grp\n    ) AS dex_swap,\n    MIN(bridge) over (\n        PARTITION BY blockchain,\n        symbol,\n        grp\n    ) AS bridge,\n    MIN(prop_first_is_bounty) over (\n        PARTITION BY blockchain,\n        symbol,\n        grp\n    ) AS prop_first_is_bounty,\n    MIN(prop_did_hunt) over (\n        PARTITION BY blockchain,\n        symbol,\n        grp\n    ) AS prop_did_hunt,\n    MIN(prop_did_new_user) over (\n        PARTITION BY blockchain,\n        symbol,\n        grp\n    ) AS prop_did_new_user,\n    MIN(prop_did_bounty) over (\n        PARTITION BY blockchain,\n        symbol,\n        grp\n    ) AS prop_did_bounty\nFROM\n    ff_base\nORDER BY\n    blockchain,\n    symbol,\n    xfer_date\n)\nselect \n    blockchain,\n    symbol,\n    xfer_date,\n    reward,\n    hodl,\n    unlabeled_transfer,\n    stake,\n    cex_deposit,\n    nft_buy,\n    dex_swap,\n    bridge,\n    prop_first_is_bounty,\n    prop_did_hunt,\n    prop_did_new_user,\n    prop_did_bounty\n    from final_upload\n    where reward is not null\n    order by blockchain, symbol, xfer_date", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.ntr_summary"}, "model.crosschain_models.silver__tags_thor_liquidity_provider": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    incremental_strategy = 'merge',\r\n    merge_update_columns = ['creator'],\r\n) }}\r\n\r\nWITH lp_from AS (\r\n\r\n    SELECT\r\n        DISTINCT 'thorchain' AS blockchain,\r\n        'flipside' AS creator,\r\n        from_address AS address,\r\n        'thorchain liquidity provider' AS tag_name,\r\n        'dex' AS tag_type,\r\n        MIN(block_id) AS block_id,\r\n        MIN(DATE_TRUNC('day', block_timestamp)) AS start_date,\r\n        NULL AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        {{ source(\r\n            'thorchain',\r\n            'liquidity_actions'\r\n        ) }}\r\n    WHERE\r\n        lp_action = 'add_liquidity'\r\n        AND address != 'NULL'\r\n        AND address IS NOT NULL\r\n\r\n{% if is_incremental() %}\r\nAND block_id NOT IN (\r\n    SELECT\r\n        DISTINCT block_id\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\nGROUP BY\r\n    address\r\nORDER BY\r\n    address DESC\r\n),\r\nto_asset AS (\r\n    SELECT\r\n        DISTINCT CASE\r\n            WHEN LEFT(\r\n                asset_address,\r\n                3\r\n            ) = 'bnb' THEN 'bsc'\r\n            WHEN LEFT(\r\n                asset_address,\r\n                6\r\n            ) = 'cosmos' THEN 'cosmos'\r\n            WHEN LEFT(\r\n                asset_address,\r\n                2\r\n            ) = '0x' THEN 'ethereum'\r\n            WHEN LEFT(\r\n                asset_address,\r\n                5\r\n            ) = 'terra' THEN 'terra'\r\n            WHEN LEFT(\r\n                asset_address,\r\n                1\r\n            ) = 'q' THEN 'bitcoin cash'\r\n            WHEN LEFT(\r\n                asset_address,\r\n                4\r\n            ) = 'thor' THEN 'thorchain'\r\n            WHEN LEFT(\r\n                asset_address,\r\n                3\r\n            ) = 'ltc' THEN 'litecoin'\r\n            WHEN LEFT(\r\n                asset_address,\r\n                1\r\n            ) = 'M' THEN 'litecoin'\r\n            WHEN LEFT(\r\n                asset_address,\r\n                1\r\n            ) = 'L' THEN 'litecoin'\r\n            WHEN LEFT(\r\n                asset_address,\r\n                1\r\n            ) = 'D' THEN 'dogechain'\r\n            WHEN LEFT(\r\n                asset_address,\r\n                2\r\n            ) = 'bc' THEN 'bitcoin'\r\n            WHEN LEFT(\r\n                asset_address,\r\n                1\r\n            ) = '1' THEN 'bitcoin'\r\n            WHEN LEFT(\r\n                asset_address,\r\n                1\r\n            ) = '3' THEN 'bitcoin'\r\n            ELSE 'error'\r\n        END AS blockchain,\r\n        'flipside' AS creator,\r\n        asset_address AS address,\r\n        'thorchain liquidity provider' AS tag_name,\r\n        'dex' AS tag_type,\r\n        MIN(block_id) AS block_id,\r\n        MIN(DATE_TRUNC('day', block_timestamp)) AS start_date,\r\n        NULL AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        {{ source(\r\n            'thorchain',\r\n            'liquidity_actions'\r\n        ) }}\r\n    WHERE\r\n        lp_action = 'add_liquidity'\r\n        AND asset_address != 'NULL'\r\n        AND asset_address IS NOT NULL\r\n        AND blockchain != 'error'\r\n\r\n{% if is_incremental() %}\r\nAND block_id NOT IN (\r\n    SELECT\r\n        DISTINCT block_id\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\nGROUP BY\r\n    address\r\nORDER BY\r\n    address DESC\r\n),\r\nfinal_table AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        lp_from\r\n    UNION\r\n    SELECT\r\n        *\r\n    FROM\r\n        to_asset\r\n)\r\nSELECT\r\n    A.*\r\nFROM\r\n    final_table A", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.thorchain.liquidity_actions", "source.crosschain_models.thorchain.liquidity_actions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "merge_update_columns": ["creator"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "tags", "Thorchain", "silver__tags_thor_liquidity_provider"], "unique_id": "model.crosschain_models.silver__tags_thor_liquidity_provider", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\tags\\Thorchain\\silver__tags_thor_liquidity_provider.sql", "original_file_path": "models\\silver\\tags\\Thorchain\\silver__tags_thor_liquidity_provider.sql", "name": "silver__tags_thor_liquidity_provider", "alias": "tags_thor_liquidity_provider", "checksum": {"name": "sha256", "checksum": "a4e278be53f730ba14529b08d68c7fcdde3db4eb0f2127dcd66a2d8554dd6091"}, "tags": [], "refs": [], "sources": [["thorchain", "liquidity_actions"], ["thorchain", "liquidity_actions"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\tags\\Thorchain\\silver__tags_thor_liquidity_provider.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Thorchain\\silver__tags_thor_liquidity_provider.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "merge", "merge_update_columns": ["creator"]}, "created_at": 1666821808.06058, "compiled_sql": "\n\nWITH lp_from AS (\n\n    SELECT\n        DISTINCT 'thorchain' AS blockchain,\n        'flipside' AS creator,\n        from_address AS address,\n        'thorchain liquidity provider' AS tag_name,\n        'dex' AS tag_type,\n        MIN(block_id) AS block_id,\n        MIN(DATE_TRUNC('day', block_timestamp)) AS start_date,\n        NULL AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        flipside_prod_db.thorchain.liquidity_actions\n    WHERE\n        lp_action = 'add_liquidity'\n        AND address != 'NULL'\n        AND address IS NOT NULL\n\n\nAND block_id NOT IN (\n    SELECT\n        DISTINCT block_id\n    FROM\n        CROSSCHAIN_DEV.silver.tags_thor_liquidity_provider\n)\n\nGROUP BY\n    address\nORDER BY\n    address DESC\n),\nto_asset AS (\n    SELECT\n        DISTINCT CASE\n            WHEN LEFT(\n                asset_address,\n                3\n            ) = 'bnb' THEN 'bsc'\n            WHEN LEFT(\n                asset_address,\n                6\n            ) = 'cosmos' THEN 'cosmos'\n            WHEN LEFT(\n                asset_address,\n                2\n            ) = '0x' THEN 'ethereum'\n            WHEN LEFT(\n                asset_address,\n                5\n            ) = 'terra' THEN 'terra'\n            WHEN LEFT(\n                asset_address,\n                1\n            ) = 'q' THEN 'bitcoin cash'\n            WHEN LEFT(\n                asset_address,\n                4\n            ) = 'thor' THEN 'thorchain'\n            WHEN LEFT(\n                asset_address,\n                3\n            ) = 'ltc' THEN 'litecoin'\n            WHEN LEFT(\n                asset_address,\n                1\n            ) = 'M' THEN 'litecoin'\n            WHEN LEFT(\n                asset_address,\n                1\n            ) = 'L' THEN 'litecoin'\n            WHEN LEFT(\n                asset_address,\n                1\n            ) = 'D' THEN 'dogechain'\n            WHEN LEFT(\n                asset_address,\n                2\n            ) = 'bc' THEN 'bitcoin'\n            WHEN LEFT(\n                asset_address,\n                1\n            ) = '1' THEN 'bitcoin'\n            WHEN LEFT(\n                asset_address,\n                1\n            ) = '3' THEN 'bitcoin'\n            ELSE 'error'\n        END AS blockchain,\n        'flipside' AS creator,\n        asset_address AS address,\n        'thorchain liquidity provider' AS tag_name,\n        'dex' AS tag_type,\n        MIN(block_id) AS block_id,\n        MIN(DATE_TRUNC('day', block_timestamp)) AS start_date,\n        NULL AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        flipside_prod_db.thorchain.liquidity_actions\n    WHERE\n        lp_action = 'add_liquidity'\n        AND asset_address != 'NULL'\n        AND asset_address IS NOT NULL\n        AND blockchain != 'error'\n\n\nAND block_id NOT IN (\n    SELECT\n        DISTINCT block_id\n    FROM\n        CROSSCHAIN_DEV.silver.tags_thor_liquidity_provider\n)\n\nGROUP BY\n    address\nORDER BY\n    address DESC\n),\nfinal_table AS (\n    SELECT\n        *\n    FROM\n        lp_from\n    UNION\n    SELECT\n        *\n    FROM\n        to_asset\n)\nSELECT\n    A.*\nFROM\n    final_table A", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.tags_thor_liquidity_provider"}, "model.crosschain_models.silver__tags_airdrop_master_ETH": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', address, tag_name, start_date)\",\r\n    incremental_strategy = 'delete+insert',\r\n) }}\r\n-- We do not want to full refresh this model until we have a historical tags code set up.\r\n-- to full-refresh either include the variable allow_full_refresh: True to command or comment out below code\r\n-- DO NOT FORMAT will break the full refresh code if formatted copy from below\r\n-- {% if execute %}\r\n--   {% if flags.FULL_REFRESH and var('allow_full_refresh', False) != True %}\r\n--       {{ exceptions.raise_compiler_error(\"Full refresh is not allowed for this model unless the argument \\\"- -vars 'allow_full_refresh: True'\\\" is included in the dbt run command.\") }}\r\n--   {% endif %}\r\n-- {% endif %}\r\n{% if execute %}\r\n  {% if flags.FULL_REFRESH and var('allow_full_refresh', False) != True %}\r\n      {{ exceptions.raise_compiler_error(\"Full refresh is not allowed for this model unless the argument \\\"- -vars 'allow_full_refresh: True'\\\" is included in the dbt run command.\") }}\r\n  {% endif %}\r\n{% endif %}\r\n\r\nWITH t1 AS (\r\n    SELECT\r\n        DISTINCT event_inputs :to :: STRING AS wallets,\r\n        x.block_timestamp,\r\n        event_inputs :value /(pow(10, 18)) AS tokens_claimed,\r\n        price AS token_price_usd\r\n    FROM\r\n        ethereum.core.fact_event_logs x\r\n        JOIN ethereum.core.fact_hourly_token_prices y\r\n        ON x.contract_address = y.token_address\r\n        AND TRUNC(\r\n            block_timestamp,\r\n            'hour'\r\n        ) = y.hour\r\n    WHERE\r\n        origin_function_signature = '0x2e7ba6ef' -- Claim function\r\n        AND event_name = 'Transfer'\r\n        AND tx_status = 'SUCCESS'\r\n),\r\nt2 AS (\r\n    SELECT\r\n        wallets,\r\n        block_timestamp,\r\n        CASE\r\n            WHEN token_price_usd IS NULL THEN 0\r\n            ELSE token_price_usd\r\n        END AS final_usd_price,\r\n        final_usd_price * tokens_claimed AS airdrop_received_in_usd\r\n    FROM\r\n        t1\r\n    WHERE\r\n        wallets IN (\r\n            SELECT\r\n                user_address\r\n            FROM\r\n                flipside_prod_db.ethereum.erc20_balances\r\n            WHERE\r\n                address_name IS NULL\r\n                AND label IS NULL\r\n        ) -- filtering treasury, funding wallets, etc.\r\n),\r\nt3 AS (\r\n    SELECT\r\n        COUNT (\r\n            DISTINCT wallets\r\n        ) AS total_airdroppers\r\n    FROM\r\n        t2\r\n),\r\nt4 AS (\r\n    SELECT\r\n        total_airdroppers * 0.1 AS top10\r\n    FROM\r\n        t3\r\n),\r\nt5 AS (\r\n    SELECT\r\n        DISTINCT wallets,\r\n        MAX(block_timestamp) AS start_date,\r\n        SUM(airdrop_received_in_usd) AS total_airdrop_received_in_usd,\r\n        RANK() over (\r\n            ORDER BY\r\n                total_airdrop_received_in_usd DESC\r\n        ) AS POSITION\r\n    FROM\r\n        t2\r\n    GROUP BY\r\n        1\r\n),\r\nbase_table AS (\r\n    SELECT\r\n        wallets,\r\n        start_date,\r\n        'Airdrop Master' AS tag,\r\n        total_airdrop_received_in_usd\r\n    FROM\r\n        t5,\r\n        t4\r\n    WHERE\r\n        POSITION <= top10\r\n    ORDER BY\r\n        3 DESC\r\n),\r\nnew_additions AS (\r\n    SELECT\r\n        DISTINCT 'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        wallets AS address,\r\n        'airdrop master' AS tag_name,\r\n        'wallet' AS tag_type,\r\n        start_date,\r\n        NULL AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        base_table\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    address NOT IN (\r\n        SELECT\r\n            DISTINCT address\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% endif %}\r\n)\r\n\r\n{% if is_incremental() %},\r\ncap_end_date AS (\r\n    SELECT\r\n        DISTINCT 'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        address,\r\n        'airdrop master' AS tag_name,\r\n        'wallet' AS tag_type,\r\n        start_date,\r\n        DATE_TRUNC(\r\n            'DAY',\r\n            CURRENT_DATE\r\n        ) :: DATE AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        {{ this }}\r\n    WHERE\r\n        address NOT IN (\r\n            SELECT\r\n                DISTINCT wallets\r\n            FROM\r\n                base_table\r\n        )\r\n)\r\n{% endif %}\r\nSELECT\r\n    *\r\nFROM\r\n    new_additions\r\n\r\n{% if is_incremental() %}\r\nUNION\r\nSELECT\r\n    *\r\nFROM\r\n    cap_end_date\r\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', address, tag_name, start_date)", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "silver__tags_airdrop_master_ETH"], "unique_id": "model.crosschain_models.silver__tags_airdrop_master_ETH", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\tags\\Ethereum\\silver__tags_airdrop_master_ETH.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_airdrop_master_ETH.sql", "name": "silver__tags_airdrop_master_ETH", "alias": "tags_airdrop_master_ETH", "checksum": {"name": "sha256", "checksum": "052f9d8737803210c9e52543e27b31a9646a9b6dc0eaa65db63cc29eac1e2a34"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TAG_NAME": {"name": "TAG_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\tags\\Ethereum\\silver__tags_airdrop_master_ETH.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_airdrop_master_ETH.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', address, tag_name, start_date)", "incremental_strategy": "delete+insert"}, "created_at": 1666821808.02933, "compiled_sql": "\n-- We do not want to full refresh this model until we have a historical tags code set up.\n-- to full-refresh either include the variable allow_full_refresh: True to command or comment out below code\n-- DO NOT FORMAT will break the full refresh code if formatted copy from below\n-- \n--   \n-- \n\n  \n\n\nWITH t1 AS (\n    SELECT\n        DISTINCT event_inputs :to :: STRING AS wallets,\n        x.block_timestamp,\n        event_inputs :value /(pow(10, 18)) AS tokens_claimed,\n        price AS token_price_usd\n    FROM\n        ethereum.core.fact_event_logs x\n        JOIN ethereum.core.fact_hourly_token_prices y\n        ON x.contract_address = y.token_address\n        AND TRUNC(\n            block_timestamp,\n            'hour'\n        ) = y.hour\n    WHERE\n        origin_function_signature = '0x2e7ba6ef' -- Claim function\n        AND event_name = 'Transfer'\n        AND tx_status = 'SUCCESS'\n),\nt2 AS (\n    SELECT\n        wallets,\n        block_timestamp,\n        CASE\n            WHEN token_price_usd IS NULL THEN 0\n            ELSE token_price_usd\n        END AS final_usd_price,\n        final_usd_price * tokens_claimed AS airdrop_received_in_usd\n    FROM\n        t1\n    WHERE\n        wallets IN (\n            SELECT\n                user_address\n            FROM\n                flipside_prod_db.ethereum.erc20_balances\n            WHERE\n                address_name IS NULL\n                AND label IS NULL\n        ) -- filtering treasury, funding wallets, etc.\n),\nt3 AS (\n    SELECT\n        COUNT (\n            DISTINCT wallets\n        ) AS total_airdroppers\n    FROM\n        t2\n),\nt4 AS (\n    SELECT\n        total_airdroppers * 0.1 AS top10\n    FROM\n        t3\n),\nt5 AS (\n    SELECT\n        DISTINCT wallets,\n        MAX(block_timestamp) AS start_date,\n        SUM(airdrop_received_in_usd) AS total_airdrop_received_in_usd,\n        RANK() over (\n            ORDER BY\n                total_airdrop_received_in_usd DESC\n        ) AS POSITION\n    FROM\n        t2\n    GROUP BY\n        1\n),\nbase_table AS (\n    SELECT\n        wallets,\n        start_date,\n        'Airdrop Master' AS tag,\n        total_airdrop_received_in_usd\n    FROM\n        t5,\n        t4\n    WHERE\n        POSITION <= top10\n    ORDER BY\n        3 DESC\n),\nnew_additions AS (\n    SELECT\n        DISTINCT 'ethereum' AS blockchain,\n        'flipside' AS creator,\n        wallets AS address,\n        'airdrop master' AS tag_name,\n        'wallet' AS tag_type,\n        start_date,\n        NULL AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        base_table\n\n\nWHERE\n    address NOT IN (\n        SELECT\n            DISTINCT address\n        FROM\n            CROSSCHAIN_DEV.silver.tags_airdrop_master_ETH\n    )\n\n)\n\n,\ncap_end_date AS (\n    SELECT\n        DISTINCT 'ethereum' AS blockchain,\n        'flipside' AS creator,\n        address,\n        'airdrop master' AS tag_name,\n        'wallet' AS tag_type,\n        start_date,\n        DATE_TRUNC(\n            'DAY',\n            CURRENT_DATE\n        ) :: DATE AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        CROSSCHAIN_DEV.silver.tags_airdrop_master_ETH\n    WHERE\n        address NOT IN (\n            SELECT\n                DISTINCT wallets\n            FROM\n                base_table\n        )\n)\n\nSELECT\n    *\nFROM\n    new_additions\n\n\nUNION\nSELECT\n    *\nFROM\n    cap_end_date\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.tags_airdrop_master_ETH"}, "model.crosschain_models.silver_crosschain__labels_contracts_polygon": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    incremental_strategy = 'delete+insert',\r\n    tags = ['snowflake', 'crosschain', 'labels']\r\n) }}\r\n\r\nWITH\r\n\r\n{% if is_incremental() %}\r\nmax_date AS (\r\n\r\n    SELECT\r\n        MAX(\r\n            _inserted_timestamp\r\n        ) _inserted_timestamp\r\n    FROM\r\n        {{ this }}\r\n),\r\n{% endif %} \r\n\r\nbase_labels AS (\r\n    SELECT\r\n        tx_hash, \r\n        block_number, \r\n        block_timestamp, \r\n        tx_status, \r\n        from_address, \r\n        to_address,  \r\n        type, \r\n        identifier, \r\n        _inserted_timestamp\r\n    FROM\r\n        {{ source(\r\n            'polygon_silver',\r\n            'traces'\r\n        ) }}\r\n    WHERE\r\n        type in ('CREATE', 'CREATE2')\r\n        AND tx_status = 'SUCCESS'\r\n        AND to_address IS NOT NULL\r\n        AND to_address NOT IN (\r\n            SELECT\r\n                DISTINCT address\r\n            FROM\r\n                {{ source(\r\n                    'crosschain_core',\r\n                    'address_labels'\r\n                ) }}\r\n            WHERE\r\n                blockchain = 'polygon'\r\n        )\r\n\r\n    {% if is_incremental() %}\r\n    AND _inserted_timestamp >= (\r\n        SELECT\r\n            MAX(\r\n                _inserted_timestamp\r\n            )\r\n        FROM\r\n            {{ this }}\r\n    )\r\n    {% endif %}\r\n), \r\nbase_legacy_labels AS (\r\n    SELECT\r\n        DISTINCT \r\n            system_created_at, \r\n            insert_date, \r\n            address, \r\n            label_type as l1_label,\r\n            label_subtype as l2_label,\r\n            address_name,\r\n            project_name\r\n    FROM\r\n        {{ source(\r\n            'crosschain_core',\r\n            'address_labels'\r\n        ) }}\r\n    WHERE\r\n        blockchain = 'polygon'\r\n), \r\nbase_transacts AS (\r\n    SELECT\r\n        b.system_created_at, \r\n        b.insert_date, \r\n        A.tx_hash,\r\n        A.block_timestamp,\r\n        A.from_address,\r\n        A.to_address,\r\n        A.identifier,\r\n        b.l1_label,\r\n        b.l2_label,\r\n        b.address_name,\r\n        b.project_name, \r\n        A._inserted_timestamp\r\n    FROM\r\n       base_labels A\r\nINNER JOIN base_legacy_labels b\r\nON A.from_address = b.address\r\nWHERE\r\n    b.l1_label != 'flotsam'\r\n),\r\nbase_logs AS (\r\n    SELECT\r\n        DISTINCT tx_hash,\r\n        contract_name,\r\n        event_name, \r\n        _inserted_timestamp\r\n    FROM\r\n        {{ source(\r\n            'polygon_silver',\r\n            'logs'\r\n        ) }}\r\n    WHERE\r\n        tx_hash IN (\r\n            SELECT\r\n                DISTINCT tx_hash\r\n            FROM\r\n                base_transacts\r\n        )\r\n    AND (\r\n        event_name IN (\r\n            'NewOracle',\r\n            'NewSwapPool',\r\n            'PairCreated',\r\n            'LogNewWallet',\r\n            'LogUserAdded'\r\n        )\r\n        OR event_name ILIKE '%pool%'\r\n        OR event_name ILIKE '%create%'\r\n    )\r\n    AND event_name != 'SetTokenCreated'\r\n    AND event_name != 'PoolUpdate'\r\n    AND contract_name IS NOT NULL\r\n    AND event_name IS NOT NULL\r\n\r\n    {% if is_incremental() %}\r\n    AND _inserted_timestamp >= (\r\n        SELECT\r\n            MAX(\r\n                _inserted_timestamp\r\n            )\r\n        FROM\r\n            {{ this }}\r\n    )\r\n    {% endif %}\r\n), \r\nfinal_base AS (\r\n    SELECT\r\n        A.system_created_at, \r\n        A.insert_date, \r\n        A.tx_hash,\r\n        A.block_timestamp,\r\n        A.from_address,\r\n        A.to_address,\r\n        A.identifier,\r\n        A.l1_label,\r\n        A.l2_label,\r\n        CASE\r\n            WHEN C.event_name IN (\r\n                'PairCreated',\r\n                'NewSwapPool'\r\n            ) THEN 'pool'\r\n            WHEN C.event_name ILIKE '%pool%'\r\n            AND C.event_name ILIKE '%create%' THEN 'pool'\r\n            WHEN C.event_name IN ('LOG_NEW_POOL') THEN 'pool'\r\n            WHEN C.event_name IN (\r\n                'LogNewWallet',\r\n                'LogUserAdded'\r\n            ) THEN 'deposit_wallet'\r\n            WHEN C.event_name IN ('NewOracle') THEN 'oracle'\r\n            WHEN A.l1_label = 'dapp'\r\n            AND A.l2_label = 'governance' THEN 'governance'\r\n            ELSE 'general_contract'\r\n        END AS l2_label_fixed,\r\n        A.address_name,\r\n        CASE\r\n            WHEN C.event_name IN ('PairCreated') THEN CONCAT(\r\n                A.project_name,\r\n                ': pair'\r\n            )\r\n            WHEN C.event_name IN ('NewSwapPool') THEN CONCAT(\r\n                A.project_name,\r\n                ': pool'\r\n            )\r\n            WHEN C.event_name ILIKE '%pool%'\r\n            AND C.event_name ILIKE '%create%' THEN CONCAT(\r\n                A.project_name,\r\n                ': pool'\r\n            )\r\n            WHEN A.l1_label = 'cex'\r\n            AND C.event_name IN (\r\n                'LogNewWallet',\r\n                'LogUserAdded'\r\n            ) THEN CONCAT(\r\n                A.project_name,\r\n                ': deposit wallet'\r\n            )\r\n            WHEN C.event_name IN ('NewOracle') THEN CONCAT(\r\n                A.project_name,\r\n                ': oracle'\r\n            )\r\n            WHEN C.event_name IN ('LOG_NEW_POOL') THEN CONCAT(\r\n                A.project_name,\r\n                ': pool'\r\n            )\r\n            WHEN A.address_name = ' registry'\r\n            AND A.project_name = 'opensea' THEN 'opensea: proxy registry'\r\n            ELSE CONCAT(\r\n                A.project_name,\r\n                ': general contract'\r\n            )\r\n        END AS address_name_fixed,\r\n        A.project_name,\r\n        C.contract_name,\r\n        C.event_name, \r\n        A._inserted_timestamp\r\n    FROM\r\n        base_transacts A\r\n        LEFT JOIN base_logs C\r\n        ON A.tx_hash = C.tx_hash\r\n)\r\nSELECT\r\n    DISTINCT \r\n    system_created_at, \r\n    insert_date, \r\n    'polygon' AS blockchain,\r\n    to_address AS address,\r\n    'flipside' AS creator,\r\n    l1_label,\r\n    l2_label_fixed AS l2_label,\r\n    address_name_fixed AS address_name,\r\n    project_name, \r\n    _inserted_timestamp\r\nFROM\r\n    final_base qualify(ROW_NUMBER() over(PARTITION BY address\r\nORDER BY\r\n    l2_label_fixed DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.polygon_silver.traces", "source.crosschain_models.crosschain_core.address_labels", "source.crosschain_models.crosschain_core.address_labels", "source.crosschain_models.polygon_silver.logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["snowflake", "crosschain", "labels"], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "silver_crosschain__labels_contracts_polygon"], "unique_id": "model.crosschain_models.silver_crosschain__labels_contracts_polygon", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.sql", "name": "silver_crosschain__labels_contracts_polygon", "alias": "labels_contracts_polygon", "checksum": {"name": "sha256", "checksum": "ba0c851a57ddca63cddc91a64fea7fbf75030ed6a26084f6f612e0555aee1bb8"}, "tags": ["snowflake", "crosschain", "labels"], "refs": [], "sources": [["polygon_silver", "traces"], ["crosschain_core", "address_labels"], ["crosschain_core", "address_labels"], ["polygon_silver", "logs"]], "metrics": [], "description": "", "columns": {"BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "Address that the label is for. This is the field that should be used to join other tables with labels.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR": {"name": "CREATOR", "description": "The name of the creator of the label", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L1_LABEL": {"name": "L1_LABEL", "description": "A high-level category describing the addresses main function or ownership", "meta": {}, "data_type": null, "quote": null, "tags": []}, "L2_LABEL": {"name": "L2_LABEL", "description": "A sub-category nested within label type providing further detail", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS_NAME": {"name": "ADDRESS_NAME", "description": "Name of the address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROJECT_NAME": {"name": "PROJECT_NAME", "description": "Name of the controlling entity of the address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "delete+insert", "tags": ["snowflake", "crosschain", "labels"]}, "created_at": 1666821807.4002638, "compiled_sql": "\n\nWITH\n\n\nmax_date AS (\n\n    SELECT\n        MAX(\n            _inserted_timestamp\n        ) _inserted_timestamp\n    FROM\n        CROSSCHAIN_DEV.silver_crosschain.labels_contracts_polygon\n),\n \n\nbase_labels AS (\n    SELECT\n        tx_hash, \n        block_number, \n        block_timestamp, \n        tx_status, \n        from_address, \n        to_address,  \n        type, \n        identifier, \n        _inserted_timestamp\n    FROM\n        polygon.silver.traces\n    WHERE\n        type in ('CREATE', 'CREATE2')\n        AND tx_status = 'SUCCESS'\n        AND to_address IS NOT NULL\n        AND to_address NOT IN (\n            SELECT\n                DISTINCT address\n            FROM\n                crosschain.core.address_labels\n            WHERE\n                blockchain = 'polygon'\n        )\n\n    \n    AND _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            CROSSCHAIN_DEV.silver_crosschain.labels_contracts_polygon\n    )\n    \n), \nbase_legacy_labels AS (\n    SELECT\n        DISTINCT \n            system_created_at, \n            insert_date, \n            address, \n            label_type as l1_label,\n            label_subtype as l2_label,\n            address_name,\n            project_name\n    FROM\n        crosschain.core.address_labels\n    WHERE\n        blockchain = 'polygon'\n), \nbase_transacts AS (\n    SELECT\n        b.system_created_at, \n        b.insert_date, \n        A.tx_hash,\n        A.block_timestamp,\n        A.from_address,\n        A.to_address,\n        A.identifier,\n        b.l1_label,\n        b.l2_label,\n        b.address_name,\n        b.project_name, \n        A._inserted_timestamp\n    FROM\n       base_labels A\nINNER JOIN base_legacy_labels b\nON A.from_address = b.address\nWHERE\n    b.l1_label != 'flotsam'\n),\nbase_logs AS (\n    SELECT\n        DISTINCT tx_hash,\n        contract_name,\n        event_name, \n        _inserted_timestamp\n    FROM\n        polygon.silver.logs\n    WHERE\n        tx_hash IN (\n            SELECT\n                DISTINCT tx_hash\n            FROM\n                base_transacts\n        )\n    AND (\n        event_name IN (\n            'NewOracle',\n            'NewSwapPool',\n            'PairCreated',\n            'LogNewWallet',\n            'LogUserAdded'\n        )\n        OR event_name ILIKE '%pool%'\n        OR event_name ILIKE '%create%'\n    )\n    AND event_name != 'SetTokenCreated'\n    AND event_name != 'PoolUpdate'\n    AND contract_name IS NOT NULL\n    AND event_name IS NOT NULL\n\n    \n    AND _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            CROSSCHAIN_DEV.silver_crosschain.labels_contracts_polygon\n    )\n    \n), \nfinal_base AS (\n    SELECT\n        A.system_created_at, \n        A.insert_date, \n        A.tx_hash,\n        A.block_timestamp,\n        A.from_address,\n        A.to_address,\n        A.identifier,\n        A.l1_label,\n        A.l2_label,\n        CASE\n            WHEN C.event_name IN (\n                'PairCreated',\n                'NewSwapPool'\n            ) THEN 'pool'\n            WHEN C.event_name ILIKE '%pool%'\n            AND C.event_name ILIKE '%create%' THEN 'pool'\n            WHEN C.event_name IN ('LOG_NEW_POOL') THEN 'pool'\n            WHEN C.event_name IN (\n                'LogNewWallet',\n                'LogUserAdded'\n            ) THEN 'deposit_wallet'\n            WHEN C.event_name IN ('NewOracle') THEN 'oracle'\n            WHEN A.l1_label = 'dapp'\n            AND A.l2_label = 'governance' THEN 'governance'\n            ELSE 'general_contract'\n        END AS l2_label_fixed,\n        A.address_name,\n        CASE\n            WHEN C.event_name IN ('PairCreated') THEN CONCAT(\n                A.project_name,\n                ': pair'\n            )\n            WHEN C.event_name IN ('NewSwapPool') THEN CONCAT(\n                A.project_name,\n                ': pool'\n            )\n            WHEN C.event_name ILIKE '%pool%'\n            AND C.event_name ILIKE '%create%' THEN CONCAT(\n                A.project_name,\n                ': pool'\n            )\n            WHEN A.l1_label = 'cex'\n            AND C.event_name IN (\n                'LogNewWallet',\n                'LogUserAdded'\n            ) THEN CONCAT(\n                A.project_name,\n                ': deposit wallet'\n            )\n            WHEN C.event_name IN ('NewOracle') THEN CONCAT(\n                A.project_name,\n                ': oracle'\n            )\n            WHEN C.event_name IN ('LOG_NEW_POOL') THEN CONCAT(\n                A.project_name,\n                ': pool'\n            )\n            WHEN A.address_name = ' registry'\n            AND A.project_name = 'opensea' THEN 'opensea: proxy registry'\n            ELSE CONCAT(\n                A.project_name,\n                ': general contract'\n            )\n        END AS address_name_fixed,\n        A.project_name,\n        C.contract_name,\n        C.event_name, \n        A._inserted_timestamp\n    FROM\n        base_transacts A\n        LEFT JOIN base_logs C\n        ON A.tx_hash = C.tx_hash\n)\nSELECT\n    DISTINCT \n    system_created_at, \n    insert_date, \n    'polygon' AS blockchain,\n    to_address AS address,\n    'flipside' AS creator,\n    l1_label,\n    l2_label_fixed AS l2_label,\n    address_name_fixed AS address_name,\n    project_name, \n    _inserted_timestamp\nFROM\n    final_base qualify(ROW_NUMBER() over(PARTITION BY address\nORDER BY\n    l2_label_fixed DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver_crosschain.labels_contracts_polygon"}, "model.crosschain_models.core__fact_hourly_prices": {"raw_sql": "{{ config(\r\n    materialized = 'view',\r\n) }}\r\n\r\n\r\nSELECT\r\n    'coingecko' AS provider,\r\n    p.id,\r\n    p.recorded_hour,\r\n    p.open,\r\n    p.high,\r\n    p.low,\r\n    p.close\r\nFROM\r\n    {{ ref('silver__hourly_prices_coin_gecko') }}\r\n    p\r\nUNION\r\nSELECT\r\n    'coinmarketcap' AS provider,\r\n    p.id::string as id,\r\n    p.recorded_hour,\r\n    p.open,\r\n    p.high,\r\n    p.low,\r\n    p.close\r\nFROM\r\n    {{ ref('silver__hourly_prices_coin_market_cap') }}\r\n    p", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.crosschain_models.silver__hourly_prices_coin_gecko", "model.crosschain_models.silver__hourly_prices_coin_market_cap"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "core", "fqn": ["crosschain_models", "core", "core__fact_hourly_prices"], "unique_id": "model.crosschain_models.core__fact_hourly_prices", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "core\\core__fact_hourly_prices.sql", "original_file_path": "models\\core\\core__fact_hourly_prices.sql", "name": "core__fact_hourly_prices", "alias": "fact_hourly_prices", "checksum": {"name": "sha256", "checksum": "f1c146ae50ec0c8605ffe61f4b1b022f5a3188629f6c0a03567393f353f769be"}, "tags": [], "refs": [["silver__hourly_prices_coin_gecko"], ["silver__hourly_prices_coin_market_cap"]], "sources": [], "metrics": [], "description": "A dimension table holding provider specific asset metadata", "columns": {"PROVIDER": {"name": "PROVIDER", "description": "provider of the data", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ID": {"name": "ID", "description": "unique identifier representing the asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECORDED_HOUR": {"name": "RECORDED_HOUR", "description": "opening hour of price data", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OPEN": {"name": "OPEN", "description": "open price of asset for hour", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HIGH": {"name": "HIGH", "description": "high price of asset for hour", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOW": {"name": "LOW", "description": "low price of asset for hour", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CLOSE": {"name": "CLOSE", "description": "close price of asset for hour", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\core\\core__fact_hourly_prices.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__fact_hourly_prices.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1666821808.3248892, "compiled_sql": "\n\n\nSELECT\n    'coingecko' AS provider,\n    p.id,\n    p.recorded_hour,\n    p.open,\n    p.high,\n    p.low,\n    p.close\nFROM\n    CROSSCHAIN_DEV.silver.hourly_prices_coin_gecko\n    p\nUNION\nSELECT\n    'coinmarketcap' AS provider,\n    p.id::string as id,\n    p.recorded_hour,\n    p.open,\n    p.high,\n    p.low,\n    p.close\nFROM\n    CROSSCHAIN_DEV.silver.hourly_prices_coin_market_cap\n    p", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.core.fact_hourly_prices"}, "model.crosschain_models.core__dim_asset_metadata": {"raw_sql": "{{ config(\r\n    materialized = 'view',\r\n) }}\r\n\r\nSELECT\r\n    'coingecko' AS provider,\r\n    id,\r\n    token_address,\r\n    NAME,\r\n    upper(symbol) as symbol,\r\n    platform\r\nFROM\r\n    {{ ref('silver__asset_metadata_coin_gecko') }}\r\nUNION \r\nSELECT\r\n    'coinmarketcap' AS provider,\r\n    id,\r\n    token_address,\r\n    NAME,\r\n    upper(symbol) as symbol,\r\n    platform\r\nFROM\r\n    {{ ref('silver__asset_metadata_coin_market_cap') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.crosschain_models.silver__asset_metadata_coin_gecko", "model.crosschain_models.silver__asset_metadata_coin_market_cap"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "core", "fqn": ["crosschain_models", "core", "core__dim_asset_metadata"], "unique_id": "model.crosschain_models.core__dim_asset_metadata", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "core\\core__dim_asset_metadata.sql", "original_file_path": "models\\core\\core__dim_asset_metadata.sql", "name": "core__dim_asset_metadata", "alias": "dim_asset_metadata", "checksum": {"name": "sha256", "checksum": "f0e9f5f6da6f015401804a50127bb7f421c18305df4df727d5708f5ae6d5a44b"}, "tags": [], "refs": [["silver__asset_metadata_coin_gecko"], ["silver__asset_metadata_coin_market_cap"]], "sources": [], "metrics": [], "description": "A fact table holding provider asset prices", "columns": {"PROVIDER": {"name": "PROVIDER", "description": "provider of the data", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ID": {"name": "ID", "description": "unique identifier representing the asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "name of asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL": {"name": "SYMBOL", "description": "symbol of asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_ADDRESS": {"name": "TOKEN_ADDRESS", "description": "specific address representing the asset in a specific platform", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM": {"name": "PLATFORM", "description": "platform where this asset has a token address", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\core\\core__dim_asset_metadata.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__dim_asset_metadata.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1666821808.3849154, "compiled_sql": "\n\nSELECT\n    'coingecko' AS provider,\n    id,\n    token_address,\n    NAME,\n    upper(symbol) as symbol,\n    platform\nFROM\n    CROSSCHAIN_DEV.silver.asset_metadata_coin_gecko\nUNION \nSELECT\n    'coinmarketcap' AS provider,\n    id,\n    token_address,\n    NAME,\n    upper(symbol) as symbol,\n    platform\nFROM\n    CROSSCHAIN_DEV.silver.asset_metadata_coin_market_cap", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.core.dim_asset_metadata"}, "test.crosschain_models.not_null_silver__tags_thor_dex_user_ADDRESS.61e5f039e2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_thor_dex_user')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_thor_dex_user"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "tags", "Thorchain", "not_null_silver__tags_thor_dex_user_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver__tags_thor_dex_user_ADDRESS.61e5f039e2", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__tags_thor_dex_user_ADDRESS.sql", "original_file_path": "models\\silver\\tags\\Thorchain\\silver__tags_thor_dex_user.yml", "name": "not_null_silver__tags_thor_dex_user_ADDRESS", "alias": "tags_thor_dex_user_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_thor_dex_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Thorchain\\silver__tags_thor_dex_user.yml\\not_null_silver__tags_thor_dex_user_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821806.8588154, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver.tags_thor_dex_user\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_thor_dex_user"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_thor_dex_user_ADDRESS__STRING__VARCHAR.4f34e746f7": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_23922170d50b485a031a42a5426b9a1f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_thor_dex_user')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_thor_dex_user"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_23922170d50b485a031a42a5426b9a1f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "tags", "Thorchain", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_thor_dex_user_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_thor_dex_user_ADDRESS__STRING__VARCHAR.4f34e746f7", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_23922170d50b485a031a42a5426b9a1f.sql", "original_file_path": "models\\silver\\tags\\Thorchain\\silver__tags_thor_dex_user.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_thor_dex_user_ADDRESS__STRING__VARCHAR", "alias": "tags_thor_dex_user_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_thor_dex_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Thorchain\\silver__tags_thor_dex_user.yml\\dbt_expectations_expect_column_23922170d50b485a031a42a5426b9a1f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_23922170d50b485a031a42a5426b9a1f"}, "created_at": 1666821806.8588154, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('START_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('END_DATE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_thor_dex_user"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_thor_dex_user_ADDRESS.5d83f8471c": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3d99c214f6b595942de0d4bd22f0035e\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS"], "model": "{{ get_where_subquery(ref('silver__tags_thor_dex_user')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_thor_dex_user"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3d99c214f6b595942de0d4bd22f0035e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["crosschain_models", "silver", "tags", "Thorchain", "dbt_utils_unique_combination_of_columns_silver__tags_thor_dex_user_ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_thor_dex_user_ADDRESS.5d83f8471c", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_3d99c214f6b595942de0d4bd22f0035e.sql", "original_file_path": "models\\silver\\tags\\Thorchain\\silver__tags_thor_dex_user.yml", "name": "dbt_utils_unique_combination_of_columns_silver__tags_thor_dex_user_ADDRESS", "alias": "tags_thor_dex_user_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_thor_dex_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Thorchain\\silver__tags_thor_dex_user.yml\\dbt_utils_unique_combination_o_3d99c214f6b595942de0d4bd22f0035e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3d99c214f6b595942de0d4bd22f0035e"}, "created_at": 1666821806.8669133, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS\n    from CROSSCHAIN_DEV.silver.tags_thor_dex_user\n    group by ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__tags_thor_dex_user"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_BLOCKCHAIN.c34d4c1b51": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_bsc')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_bsc"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_bsc_BLOCKCHAIN"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_BLOCKCHAIN.c34d4c1b51", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__labels_contracts_bsc_BLOCKCHAIN.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.yml", "name": "not_null_silver_crosschain__labels_contracts_bsc_BLOCKCHAIN", "alias": "labels_contracts_bsc_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_bsc"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.yml\\not_null_silver_crosschain__labels_contracts_bsc_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821806.8749416, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCKCHAIN\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_bsc\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCKCHAIN", "file_key_name": "models.silver_crosschain__labels_contracts_bsc"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_bsc_BLOCKCHAIN__bsc.c87bd17788": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_418cd862b3a44c087ef08a5925edda53\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["bsc"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_bsc')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_bsc"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_418cd862b3a44c087ef08a5925edda53", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_bsc_BLOCKCHAIN__bsc"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_bsc_BLOCKCHAIN__bsc.c87bd17788", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_418cd862b3a44c087ef08a5925edda53.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_bsc_BLOCKCHAIN__bsc", "alias": "labels_contracts_bsc_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_bsc"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.yml\\dbt_expectations_expect_column_418cd862b3a44c087ef08a5925edda53.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_418cd862b3a44c087ef08a5925edda53"}, "created_at": 1666821806.8749416, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        BLOCKCHAIN as value_field\n\n    from CROSSCHAIN_DEV.silver_crosschain.labels_contracts_bsc\n    \n\n),\nset_values as (\n\n    select\n        cast('bsc' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCKCHAIN", "file_key_name": "models.silver_crosschain__labels_contracts_bsc"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_ADDRESS.d4893f74e2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_bsc')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_bsc"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_bsc_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_ADDRESS.d4893f74e2", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__labels_contracts_bsc_ADDRESS.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.yml", "name": "not_null_silver_crosschain__labels_contracts_bsc_ADDRESS", "alias": "labels_contracts_bsc_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_bsc"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.yml\\not_null_silver_crosschain__labels_contracts_bsc_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821806.8856533, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_bsc\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__labels_contracts_bsc"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_bsc_ADDRESS__STRING__VARCHAR.6650460a5d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fe3fcb52e62e2bbc90b4752aa4f4da08\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_bsc')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_bsc"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fe3fcb52e62e2bbc90b4752aa4f4da08", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_bsc_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_bsc_ADDRESS__STRING__VARCHAR.6650460a5d", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_fe3fcb52e62e2bbc90b4752aa4f4da08.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_bsc_ADDRESS__STRING__VARCHAR", "alias": "labels_contracts_bsc_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_bsc"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.yml\\dbt_expectations_expect_column_fe3fcb52e62e2bbc90b4752aa4f4da08.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_fe3fcb52e62e2bbc90b4752aa4f4da08"}, "created_at": 1666821806.8856533, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('SYSTEM_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INSERT_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L2_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__labels_contracts_bsc"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_bsc_ADDRESS__0_xX_0_9a_fA_F_.c421db486b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_da28cc53c16e690f44aa7f4c32d1a769\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_bsc')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_bsc"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_da28cc53c16e690f44aa7f4c32d1a769", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_bsc_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_bsc_ADDRESS__0_xX_0_9a_fA_F_.c421db486b", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_da28cc53c16e690f44aa7f4c32d1a769.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_bsc_ADDRESS__0_xX_0_9a_fA_F_", "alias": "labels_contracts_bsc_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_bsc"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.yml\\dbt_expectations_expect_column_da28cc53c16e690f44aa7f4c32d1a769.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_da28cc53c16e690f44aa7f4c32d1a769"}, "created_at": 1666821806.8937242, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.silver_crosschain.labels_contracts_bsc\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__labels_contracts_bsc"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_CREATOR.110adefd50": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_bsc')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_bsc"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_bsc_CREATOR"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_CREATOR.110adefd50", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__labels_contracts_bsc_CREATOR.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.yml", "name": "not_null_silver_crosschain__labels_contracts_bsc_CREATOR", "alias": "labels_contracts_bsc_CREATOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_bsc"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.yml\\not_null_silver_crosschain__labels_contracts_bsc_CREATOR.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821806.8937242, "compiled_sql": "\n    \n    \n\n\n\nselect CREATOR\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_bsc\nwhere CREATOR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR", "file_key_name": "models.silver_crosschain__labels_contracts_bsc"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_L1_LABEL.40e1b6bc2a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "L1_LABEL", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_bsc')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_bsc"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_bsc_L1_LABEL"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_L1_LABEL.40e1b6bc2a", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__labels_contracts_bsc_L1_LABEL.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.yml", "name": "not_null_silver_crosschain__labels_contracts_bsc_L1_LABEL", "alias": "labels_contracts_bsc_L1_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_bsc"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.yml\\not_null_silver_crosschain__labels_contracts_bsc_L1_LABEL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821806.8937242, "compiled_sql": "\n    \n    \n\n\n\nselect L1_LABEL\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_bsc\nwhere L1_LABEL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "L1_LABEL", "file_key_name": "models.silver_crosschain__labels_contracts_bsc"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_bsc_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.fe0a23eb20": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_117a35870e77029deac60f63020ee110\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["flotsam", "nft", "defi", "dex", "cex", "dapp", "token", "operator", "layer2", "chadmin"], "column_name": "L1_LABEL", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_bsc')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_bsc"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_117a35870e77029deac60f63020ee110", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_bsc_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_bsc_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.fe0a23eb20", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_117a35870e77029deac60f63020ee110.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_bsc_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin", "alias": "labels_contracts_bsc_L1_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_bsc"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.yml\\dbt_expectations_expect_column_117a35870e77029deac60f63020ee110.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_117a35870e77029deac60f63020ee110"}, "created_at": 1666821806.9017475, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        L1_LABEL as value_field\n\n    from CROSSCHAIN_DEV.silver_crosschain.labels_contracts_bsc\n    \n\n),\nset_values as (\n\n    select\n        cast('flotsam' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('nft' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('defi' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('dex' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('cex' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('dapp' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('token' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('operator' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('layer2' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('chadmin' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "L1_LABEL", "file_key_name": "models.silver_crosschain__labels_contracts_bsc"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_L2_LABEL.971dfa3c9e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "L2_LABEL", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_bsc')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_bsc"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_bsc_L2_LABEL"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_L2_LABEL.971dfa3c9e", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__labels_contracts_bsc_L2_LABEL.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.yml", "name": "not_null_silver_crosschain__labels_contracts_bsc_L2_LABEL", "alias": "labels_contracts_bsc_L2_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_bsc"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.yml\\not_null_silver_crosschain__labels_contracts_bsc_L2_LABEL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821806.9097512, "compiled_sql": "\n    \n    \n\n\n\nselect L2_LABEL\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_bsc\nwhere L2_LABEL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "L2_LABEL", "file_key_name": "models.silver_crosschain__labels_contracts_bsc"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_ADDRESS_NAME.3148b29da6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS_NAME", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_bsc')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_bsc"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_bsc_ADDRESS_NAME"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_ADDRESS_NAME.3148b29da6", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__labels_contracts_bsc_ADDRESS_NAME.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.yml", "name": "not_null_silver_crosschain__labels_contracts_bsc_ADDRESS_NAME", "alias": "labels_contracts_bsc_ADDRESS_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_bsc"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.yml\\not_null_silver_crosschain__labels_contracts_bsc_ADDRESS_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821806.9097512, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS_NAME\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_bsc\nwhere ADDRESS_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS_NAME", "file_key_name": "models.silver_crosschain__labels_contracts_bsc"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_PROJECT_NAME.56c75d84d9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROJECT_NAME", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_bsc')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_bsc"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_bsc_PROJECT_NAME"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_PROJECT_NAME.56c75d84d9", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__labels_contracts_bsc_PROJECT_NAME.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.yml", "name": "not_null_silver_crosschain__labels_contracts_bsc_PROJECT_NAME", "alias": "labels_contracts_bsc_PROJECT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_bsc"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.yml\\not_null_silver_crosschain__labels_contracts_bsc_PROJECT_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821806.9097512, "compiled_sql": "\n    \n    \n\n\n\nselect PROJECT_NAME\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_bsc\nwhere PROJECT_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PROJECT_NAME", "file_key_name": "models.silver_crosschain__labels_contracts_bsc"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc__INSERTED_TIMESTAMP.215cf7af1f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_crosschain__la_c8cd6b6ee3f0eab1fd3be89c47d066ae\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_bsc')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_bsc"]}, "config": {"enabled": true, "alias": "not_null_silver_crosschain__la_c8cd6b6ee3f0eab1fd3be89c47d066ae", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_bsc__INSERTED_TIMESTAMP"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc__INSERTED_TIMESTAMP.215cf7af1f", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__la_c8cd6b6ee3f0eab1fd3be89c47d066ae.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.yml", "name": "not_null_silver_crosschain__labels_contracts_bsc__INSERTED_TIMESTAMP", "alias": "labels_contracts_bsc", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_bsc"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.yml\\not_null_silver_crosschain__la_c8cd6b6ee3f0eab1fd3be89c47d066ae.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_silver_crosschain__la_c8cd6b6ee3f0eab1fd3be89c47d066ae"}, "created_at": 1666821806.9177527, "compiled_sql": "\n    \n    \n\n\n\nselect _INSERTED_TIMESTAMP\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_bsc\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver_crosschain__labels_contracts_bsc"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_bsc__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.c471b2157a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3e4481791e7122646838803ec6a3a7d9\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_bsc')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_bsc"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3e4481791e7122646838803ec6a3a7d9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_bsc__INSERTED_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_bsc__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.c471b2157a", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_3e4481791e7122646838803ec6a3a7d9.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_bsc__INSERTED_TIMESTAMP__TIMESTAMP_NTZ", "alias": "labels_contracts_bsc", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_bsc"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.yml\\dbt_expectations_expect_column_3e4481791e7122646838803ec6a3a7d9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_3e4481791e7122646838803ec6a3a7d9"}, "created_at": 1666821806.9177527, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('SYSTEM_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INSERT_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L2_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver_crosschain__labels_contracts_bsc"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_bsc_ADDRESS.c2802608c3": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_594f99cab6d686677b00d2585f47d16b\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS"], "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_bsc')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_bsc"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_594f99cab6d686677b00d2585f47d16b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_bsc_ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_bsc_ADDRESS.c2802608c3", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_594f99cab6d686677b00d2585f47d16b.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.yml", "name": "dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_bsc_ADDRESS", "alias": "labels_contracts_bsc_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_bsc"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_bsc.yml\\dbt_utils_unique_combination_o_594f99cab6d686677b00d2585f47d16b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_594f99cab6d686677b00d2585f47d16b"}, "created_at": 1666821806.9177527, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS\n    from CROSSCHAIN_DEV.silver_crosschain.labels_contracts_bsc\n    group by ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver_crosschain__labels_contracts_bsc"}, "test.crosschain_models.not_null_silver__tags_token_vesting_ETH_ADDRESS.cf9f001da8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_token_vesting_ETH')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_token_vesting_ETH"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "not_null_silver__tags_token_vesting_ETH_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver__tags_token_vesting_ETH_ADDRESS.cf9f001da8", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__tags_token_vesting_ETH_ADDRESS.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_token_vesting_ETH.yml", "name": "not_null_silver__tags_token_vesting_ETH_ADDRESS", "alias": "tags_token_vesting_ETH_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_token_vesting_ETH"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_token_vesting_ETH.yml\\not_null_silver__tags_token_vesting_ETH_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821806.9257574, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver.tags_token_vesting_ETH\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_token_vesting_ETH"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_token_vesting_ETH_ADDRESS__STRING__VARCHAR.cfef06ed72": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7ab59b4bf6dce83f78acba9ca06162d6\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_token_vesting_ETH')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_token_vesting_ETH"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7ab59b4bf6dce83f78acba9ca06162d6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_token_vesting_ETH_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_token_vesting_ETH_ADDRESS__STRING__VARCHAR.cfef06ed72", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_7ab59b4bf6dce83f78acba9ca06162d6.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_token_vesting_ETH.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_token_vesting_ETH_ADDRESS__STRING__VARCHAR", "alias": "tags_token_vesting_ETH_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_token_vesting_ETH"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_token_vesting_ETH.yml\\dbt_expectations_expect_column_7ab59b4bf6dce83f78acba9ca06162d6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_7ab59b4bf6dce83f78acba9ca06162d6"}, "created_at": 1666821806.9257574, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('START_DATE' as \n    varchar\n) as relation_column,\n            cast('DATE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('END_DATE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_token_vesting_ETH"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_token_vesting_ETH_ADDRESS.d7b2a9f7c1": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8f2a86ea37ec6cf6a94e7ead4773b602\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS"], "model": "{{ get_where_subquery(ref('silver__tags_token_vesting_ETH')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_token_vesting_ETH"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8f2a86ea37ec6cf6a94e7ead4773b602", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_utils_unique_combination_of_columns_silver__tags_token_vesting_ETH_ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_token_vesting_ETH_ADDRESS.d7b2a9f7c1", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_8f2a86ea37ec6cf6a94e7ead4773b602.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_token_vesting_ETH.yml", "name": "dbt_utils_unique_combination_of_columns_silver__tags_token_vesting_ETH_ADDRESS", "alias": "tags_token_vesting_ETH_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_token_vesting_ETH"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_token_vesting_ETH.yml\\dbt_utils_unique_combination_o_8f2a86ea37ec6cf6a94e7ead4773b602.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_8f2a86ea37ec6cf6a94e7ead4773b602"}, "created_at": 1666821806.933758, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS\n    from CROSSCHAIN_DEV.silver.tags_token_vesting_ETH\n    group by ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__tags_token_vesting_ETH"}, "test.crosschain_models.not_null_silver__tags_nft_x2y2_user_ADDRESS.bcc2140e27": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_nft_x2y2_user')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_nft_x2y2_user"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "not_null_silver__tags_nft_x2y2_user_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver__tags_nft_x2y2_user_ADDRESS.bcc2140e27", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__tags_nft_x2y2_user_ADDRESS.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_x2y2_user.yml", "name": "not_null_silver__tags_nft_x2y2_user_ADDRESS", "alias": "tags_nft_x2y2_user_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_nft_x2y2_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_x2y2_user.yml\\not_null_silver__tags_nft_x2y2_user_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821806.9417486, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver.tags_nft_x2y2_user\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_nft_x2y2_user"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_x2y2_user_ADDRESS__STRING__VARCHAR.22bb36b9d2": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_75b1852877b9aa7260720c21e4cbe0d8\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_nft_x2y2_user')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_nft_x2y2_user"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_75b1852877b9aa7260720c21e4cbe0d8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_x2y2_user_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_x2y2_user_ADDRESS__STRING__VARCHAR.22bb36b9d2", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_75b1852877b9aa7260720c21e4cbe0d8.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_x2y2_user.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_x2y2_user_ADDRESS__STRING__VARCHAR", "alias": "tags_nft_x2y2_user_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_nft_x2y2_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_x2y2_user.yml\\dbt_expectations_expect_column_75b1852877b9aa7260720c21e4cbe0d8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_75b1852877b9aa7260720c21e4cbe0d8"}, "created_at": 1666821806.9417486, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('START_DATE' as \n    varchar\n) as relation_column,\n            cast('DATE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('END_DATE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_nft_x2y2_user"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_x2y2_user_ADDRESS__0_xX_0_9a_fA_F_.8acab546bd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_80b21b5a8d45f0c54bdc72060533752b\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_nft_x2y2_user')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_nft_x2y2_user"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_80b21b5a8d45f0c54bdc72060533752b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_x2y2_user_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_x2y2_user_ADDRESS__0_xX_0_9a_fA_F_.8acab546bd", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_80b21b5a8d45f0c54bdc72060533752b.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_x2y2_user.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_x2y2_user_ADDRESS__0_xX_0_9a_fA_F_", "alias": "tags_nft_x2y2_user_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_nft_x2y2_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_x2y2_user.yml\\dbt_expectations_expect_column_80b21b5a8d45f0c54bdc72060533752b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_80b21b5a8d45f0c54bdc72060533752b"}, "created_at": 1666821806.9497569, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.silver.tags_nft_x2y2_user\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_nft_x2y2_user"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_x2y2_user_ADDRESS.a6cbb5390d": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_178aa5963e863d1a710b079ef0c34cc9\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS"], "model": "{{ get_where_subquery(ref('silver__tags_nft_x2y2_user')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_nft_x2y2_user"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_178aa5963e863d1a710b079ef0c34cc9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_utils_unique_combination_of_columns_silver__tags_nft_x2y2_user_ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_x2y2_user_ADDRESS.a6cbb5390d", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_178aa5963e863d1a710b079ef0c34cc9.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_x2y2_user.yml", "name": "dbt_utils_unique_combination_of_columns_silver__tags_nft_x2y2_user_ADDRESS", "alias": "tags_nft_x2y2_user_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_nft_x2y2_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_x2y2_user.yml\\dbt_utils_unique_combination_o_178aa5963e863d1a710b079ef0c34cc9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_178aa5963e863d1a710b079ef0c34cc9"}, "created_at": 1666821806.9576974, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS\n    from CROSSCHAIN_DEV.silver.tags_nft_x2y2_user\n    group by ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__tags_nft_x2y2_user"}, "test.crosschain_models.not_null_silver__tags_active_optimism_last_7_ADDRESS.5b419202c3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_active_optimism_last_7')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_active_optimism_last_7"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "tags", "Optimism", "not_null_silver__tags_active_optimism_last_7_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver__tags_active_optimism_last_7_ADDRESS.5b419202c3", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__tags_active_optimism_last_7_ADDRESS.sql", "original_file_path": "models\\silver\\tags\\Optimism\\silver__tags_active_optimism_last_7.yml", "name": "not_null_silver__tags_active_optimism_last_7_ADDRESS", "alias": "tags_active_optimism_last_7_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_active_optimism_last_7"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Optimism\\silver__tags_active_optimism_last_7.yml\\not_null_silver__tags_active_optimism_last_7_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821806.9742546, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver.tags_active_optimism_last_7\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_active_optimism_last_7"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_optimism_last_7_ADDRESS__STRING__VARCHAR.0338b1f161": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9f991aa9c81ef1ceb3d5bac3d2caeb05\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_active_optimism_last_7')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_active_optimism_last_7"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9f991aa9c81ef1ceb3d5bac3d2caeb05", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "tags", "Optimism", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_optimism_last_7_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_optimism_last_7_ADDRESS__STRING__VARCHAR.0338b1f161", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_9f991aa9c81ef1ceb3d5bac3d2caeb05.sql", "original_file_path": "models\\silver\\tags\\Optimism\\silver__tags_active_optimism_last_7.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_optimism_last_7_ADDRESS__STRING__VARCHAR", "alias": "tags_active_optimism_last_7_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_active_optimism_last_7"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Optimism\\silver__tags_active_optimism_last_7.yml\\dbt_expectations_expect_column_9f991aa9c81ef1ceb3d5bac3d2caeb05.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_9f991aa9c81ef1ceb3d5bac3d2caeb05"}, "created_at": 1666821806.9823022, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('START_DATE' as \n    varchar\n) as relation_column,\n            cast('DATE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('END_DATE' as \n    varchar\n) as relation_column,\n            cast('DATE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_active_optimism_last_7"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_optimism_last_7_ADDRESS__0_xX_0_9a_fA_F_.cdaca7bd38": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_47912d35eabbc24bc720f6855394c24b\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_active_optimism_last_7')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_active_optimism_last_7"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_47912d35eabbc24bc720f6855394c24b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["crosschain_models", "silver", "tags", "Optimism", "dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_optimism_last_7_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_optimism_last_7_ADDRESS__0_xX_0_9a_fA_F_.cdaca7bd38", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_47912d35eabbc24bc720f6855394c24b.sql", "original_file_path": "models\\silver\\tags\\Optimism\\silver__tags_active_optimism_last_7.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_optimism_last_7_ADDRESS__0_xX_0_9a_fA_F_", "alias": "tags_active_optimism_last_7_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_active_optimism_last_7"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Optimism\\silver__tags_active_optimism_last_7.yml\\dbt_expectations_expect_column_47912d35eabbc24bc720f6855394c24b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_47912d35eabbc24bc720f6855394c24b"}, "created_at": 1666821806.9823022, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.silver.tags_active_optimism_last_7\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_active_optimism_last_7"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_active_optimism_last_7_ADDRESS__START_DATE.d5c8d43a5a": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ab5b382505930501692674d3c82bcc4a\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS", "START_DATE"], "model": "{{ get_where_subquery(ref('silver__tags_active_optimism_last_7')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_active_optimism_last_7"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ab5b382505930501692674d3c82bcc4a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["crosschain_models", "silver", "tags", "Optimism", "dbt_utils_unique_combination_of_columns_silver__tags_active_optimism_last_7_ADDRESS__START_DATE"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_active_optimism_last_7_ADDRESS__START_DATE.d5c8d43a5a", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_ab5b382505930501692674d3c82bcc4a.sql", "original_file_path": "models\\silver\\tags\\Optimism\\silver__tags_active_optimism_last_7.yml", "name": "dbt_utils_unique_combination_of_columns_silver__tags_active_optimism_last_7_ADDRESS__START_DATE", "alias": "tags_active_optimism_last_7_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_active_optimism_last_7"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Optimism\\silver__tags_active_optimism_last_7.yml\\dbt_utils_unique_combination_o_ab5b382505930501692674d3c82bcc4a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_ab5b382505930501692674d3c82bcc4a"}, "created_at": 1666821806.98925, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS, START_DATE\n    from CROSSCHAIN_DEV.silver.tags_active_optimism_last_7\n    group by ADDRESS, START_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__tags_active_optimism_last_7"}, "test.crosschain_models.not_null_silver__tags_contract_address_avalanche_ADDRESS.be16ad761e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_contract_address_avalanche')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_contract_address_avalanche"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "tags", "Avalanche", "not_null_silver__tags_contract_address_avalanche_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver__tags_contract_address_avalanche_ADDRESS.be16ad761e", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__tags_contract_address_avalanche_ADDRESS.sql", "original_file_path": "models\\silver\\tags\\Avalanche\\silver__tags_contract_address_avalanche.yml", "name": "not_null_silver__tags_contract_address_avalanche_ADDRESS", "alias": "tags_contract_address_avalanche_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_contract_address_avalanche"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Avalanche\\silver__tags_contract_address_avalanche.yml\\not_null_silver__tags_contract_address_avalanche_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821806.9972117, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver.tags_contract_address_avalanche\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_contract_address_avalanche"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_avalanche_ADDRESS__STRING__VARCHAR.39bd6ac8e8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1f693204364349155948bece3192a508\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_contract_address_avalanche')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_contract_address_avalanche"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1f693204364349155948bece3192a508", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "tags", "Avalanche", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_avalanche_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_avalanche_ADDRESS__STRING__VARCHAR.39bd6ac8e8", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_1f693204364349155948bece3192a508.sql", "original_file_path": "models\\silver\\tags\\Avalanche\\silver__tags_contract_address_avalanche.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_avalanche_ADDRESS__STRING__VARCHAR", "alias": "tags_contract_address_avalanche_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_contract_address_avalanche"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Avalanche\\silver__tags_contract_address_avalanche.yml\\dbt_expectations_expect_column_1f693204364349155948bece3192a508.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_1f693204364349155948bece3192a508"}, "created_at": 1666821806.9972117, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('START_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('END_DATE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_contract_address_avalanche"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_avalanche_ADDRESS__0_xX_0_9a_fA_F_.dc688e073a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e4edf730fd121eafa98156ee3420ea69\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_contract_address_avalanche')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_contract_address_avalanche"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e4edf730fd121eafa98156ee3420ea69", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["crosschain_models", "silver", "tags", "Avalanche", "dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_avalanche_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_avalanche_ADDRESS__0_xX_0_9a_fA_F_.dc688e073a", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_e4edf730fd121eafa98156ee3420ea69.sql", "original_file_path": "models\\silver\\tags\\Avalanche\\silver__tags_contract_address_avalanche.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_avalanche_ADDRESS__0_xX_0_9a_fA_F_", "alias": "tags_contract_address_avalanche_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_contract_address_avalanche"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Avalanche\\silver__tags_contract_address_avalanche.yml\\dbt_expectations_expect_column_e4edf730fd121eafa98156ee3420ea69.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e4edf730fd121eafa98156ee3420ea69"}, "created_at": 1666821807.0053265, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.silver.tags_contract_address_avalanche\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_contract_address_avalanche"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_contract_address_avalanche_ADDRESS.2af2628c97": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0e93fd2a9b9dacb8e2d02b04ee540d95\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS"], "model": "{{ get_where_subquery(ref('silver__tags_contract_address_avalanche')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_contract_address_avalanche"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0e93fd2a9b9dacb8e2d02b04ee540d95", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["crosschain_models", "silver", "tags", "Avalanche", "dbt_utils_unique_combination_of_columns_silver__tags_contract_address_avalanche_ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_contract_address_avalanche_ADDRESS.2af2628c97", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_0e93fd2a9b9dacb8e2d02b04ee540d95.sql", "original_file_path": "models\\silver\\tags\\Avalanche\\silver__tags_contract_address_avalanche.yml", "name": "dbt_utils_unique_combination_of_columns_silver__tags_contract_address_avalanche_ADDRESS", "alias": "tags_contract_address_avalanche_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_contract_address_avalanche"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Avalanche\\silver__tags_contract_address_avalanche.yml\\dbt_utils_unique_combination_o_0e93fd2a9b9dacb8e2d02b04ee540d95.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_0e93fd2a9b9dacb8e2d02b04ee540d95"}, "created_at": 1666821807.0053265, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS\n    from CROSSCHAIN_DEV.silver.tags_contract_address_avalanche\n    group by ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__tags_contract_address_avalanche"}, "test.crosschain_models.not_null_silver__tags_nft_looksrare_user_ADDRESS.5bdf86e154": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_nft_looksrare_user')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_nft_looksrare_user"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "not_null_silver__tags_nft_looksrare_user_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver__tags_nft_looksrare_user_ADDRESS.5bdf86e154", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__tags_nft_looksrare_user_ADDRESS.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_looksrare_user.yml", "name": "not_null_silver__tags_nft_looksrare_user_ADDRESS", "alias": "tags_nft_looksrare_user_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_nft_looksrare_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_looksrare_user.yml\\not_null_silver__tags_nft_looksrare_user_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.0133066, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver.tags_nft_looksrare_user\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_nft_looksrare_user"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_looksrare_user_ADDRESS__STRING__VARCHAR.d441de2bd9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_949faa697ff73de73871ab2092965bd1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_nft_looksrare_user')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_nft_looksrare_user"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_949faa697ff73de73871ab2092965bd1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_looksrare_user_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_looksrare_user_ADDRESS__STRING__VARCHAR.d441de2bd9", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_949faa697ff73de73871ab2092965bd1.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_looksrare_user.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_looksrare_user_ADDRESS__STRING__VARCHAR", "alias": "tags_nft_looksrare_user_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_nft_looksrare_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_looksrare_user.yml\\dbt_expectations_expect_column_949faa697ff73de73871ab2092965bd1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_949faa697ff73de73871ab2092965bd1"}, "created_at": 1666821807.0133066, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('START_DATE' as \n    varchar\n) as relation_column,\n            cast('DATE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('END_DATE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_nft_looksrare_user"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_looksrare_user_ADDRESS__0_xX_0_9a_fA_F_.067ec81ea6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_94220ddfa9f4869234460c4ee3923ee3\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_nft_looksrare_user')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_nft_looksrare_user"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_94220ddfa9f4869234460c4ee3923ee3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_looksrare_user_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_looksrare_user_ADDRESS__0_xX_0_9a_fA_F_.067ec81ea6", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_94220ddfa9f4869234460c4ee3923ee3.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_looksrare_user.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_looksrare_user_ADDRESS__0_xX_0_9a_fA_F_", "alias": "tags_nft_looksrare_user_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_nft_looksrare_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_looksrare_user.yml\\dbt_expectations_expect_column_94220ddfa9f4869234460c4ee3923ee3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_94220ddfa9f4869234460c4ee3923ee3"}, "created_at": 1666821807.021326, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.silver.tags_nft_looksrare_user\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_nft_looksrare_user"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_looksrare_user_ADDRESS.dd71e51391": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_20b5d658ca90360fc8bc32e8eaf67433\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS"], "model": "{{ get_where_subquery(ref('silver__tags_nft_looksrare_user')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_nft_looksrare_user"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_20b5d658ca90360fc8bc32e8eaf67433", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_utils_unique_combination_of_columns_silver__tags_nft_looksrare_user_ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_looksrare_user_ADDRESS.dd71e51391", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_20b5d658ca90360fc8bc32e8eaf67433.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_looksrare_user.yml", "name": "dbt_utils_unique_combination_of_columns_silver__tags_nft_looksrare_user_ADDRESS", "alias": "tags_nft_looksrare_user_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_nft_looksrare_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_looksrare_user.yml\\dbt_utils_unique_combination_o_20b5d658ca90360fc8bc32e8eaf67433.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_20b5d658ca90360fc8bc32e8eaf67433"}, "created_at": 1666821807.03167, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS\n    from CROSSCHAIN_DEV.silver.tags_nft_looksrare_user\n    group by ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__tags_nft_looksrare_user"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_BLOCKCHAIN.7186119d86": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_crosschain__la_be5b53975bc4ee2f8ccaa4dce8dcafc6\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_optimism')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_optimism"]}, "config": {"enabled": true, "alias": "not_null_silver_crosschain__la_be5b53975bc4ee2f8ccaa4dce8dcafc6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_optimism_BLOCKCHAIN"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_BLOCKCHAIN.7186119d86", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__la_be5b53975bc4ee2f8ccaa4dce8dcafc6.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.yml", "name": "not_null_silver_crosschain__labels_contracts_optimism_BLOCKCHAIN", "alias": "labels_contracts_optimism_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_optimism"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.yml\\not_null_silver_crosschain__la_be5b53975bc4ee2f8ccaa4dce8dcafc6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_silver_crosschain__la_be5b53975bc4ee2f8ccaa4dce8dcafc6"}, "created_at": 1666821807.0634868, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCKCHAIN\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_optimism\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCKCHAIN", "file_key_name": "models.silver_crosschain__labels_contracts_optimism"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_optimism_BLOCKCHAIN__optimism.cacd01ec06": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6ec2c8d5770555c8e1ee6367845b2751\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["optimism"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_optimism')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_optimism"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6ec2c8d5770555c8e1ee6367845b2751", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_optimism_BLOCKCHAIN__optimism"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_optimism_BLOCKCHAIN__optimism.cacd01ec06", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_6ec2c8d5770555c8e1ee6367845b2751.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_optimism_BLOCKCHAIN__optimism", "alias": "labels_contracts_optimism_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_optimism"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.yml\\dbt_expectations_expect_column_6ec2c8d5770555c8e1ee6367845b2751.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6ec2c8d5770555c8e1ee6367845b2751"}, "created_at": 1666821807.0634868, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        BLOCKCHAIN as value_field\n\n    from CROSSCHAIN_DEV.silver_crosschain.labels_contracts_optimism\n    \n\n),\nset_values as (\n\n    select\n        cast('optimism' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCKCHAIN", "file_key_name": "models.silver_crosschain__labels_contracts_optimism"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_ADDRESS.2bc29a44ab": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_optimism')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_optimism"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_optimism_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_ADDRESS.2bc29a44ab", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__labels_contracts_optimism_ADDRESS.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.yml", "name": "not_null_silver_crosschain__labels_contracts_optimism_ADDRESS", "alias": "labels_contracts_optimism_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_optimism"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.yml\\not_null_silver_crosschain__labels_contracts_optimism_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.0715892, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_optimism\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__labels_contracts_optimism"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_optimism_ADDRESS__STRING__VARCHAR.ee458f5d28": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ddde55c0e04b6f241ba688d165486b7a\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_optimism')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_optimism"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ddde55c0e04b6f241ba688d165486b7a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_optimism_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_optimism_ADDRESS__STRING__VARCHAR.ee458f5d28", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_ddde55c0e04b6f241ba688d165486b7a.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_optimism_ADDRESS__STRING__VARCHAR", "alias": "labels_contracts_optimism_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_optimism"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.yml\\dbt_expectations_expect_column_ddde55c0e04b6f241ba688d165486b7a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ddde55c0e04b6f241ba688d165486b7a"}, "created_at": 1666821807.0715892, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('SYSTEM_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INSERT_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L2_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__labels_contracts_optimism"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_optimism_ADDRESS__0_xX_0_9a_fA_F_.02d6e22b39": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_44e7f5bed1bc0677c6380391f82d2df3\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_optimism')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_optimism"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_44e7f5bed1bc0677c6380391f82d2df3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_optimism_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_optimism_ADDRESS__0_xX_0_9a_fA_F_.02d6e22b39", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_44e7f5bed1bc0677c6380391f82d2df3.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_optimism_ADDRESS__0_xX_0_9a_fA_F_", "alias": "labels_contracts_optimism_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_optimism"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.yml\\dbt_expectations_expect_column_44e7f5bed1bc0677c6380391f82d2df3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_44e7f5bed1bc0677c6380391f82d2df3"}, "created_at": 1666821807.079594, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.silver_crosschain.labels_contracts_optimism\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__labels_contracts_optimism"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_CREATOR.8c73037029": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_optimism')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_optimism"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_optimism_CREATOR"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_CREATOR.8c73037029", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__labels_contracts_optimism_CREATOR.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.yml", "name": "not_null_silver_crosschain__labels_contracts_optimism_CREATOR", "alias": "labels_contracts_optimism_CREATOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_optimism"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.yml\\not_null_silver_crosschain__labels_contracts_optimism_CREATOR.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.079594, "compiled_sql": "\n    \n    \n\n\n\nselect CREATOR\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_optimism\nwhere CREATOR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR", "file_key_name": "models.silver_crosschain__labels_contracts_optimism"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_L1_LABEL.7f4677d3e2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "L1_LABEL", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_optimism')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_optimism"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_optimism_L1_LABEL"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_L1_LABEL.7f4677d3e2", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__labels_contracts_optimism_L1_LABEL.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.yml", "name": "not_null_silver_crosschain__labels_contracts_optimism_L1_LABEL", "alias": "labels_contracts_optimism_L1_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_optimism"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.yml\\not_null_silver_crosschain__labels_contracts_optimism_L1_LABEL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.0875065, "compiled_sql": "\n    \n    \n\n\n\nselect L1_LABEL\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_optimism\nwhere L1_LABEL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "L1_LABEL", "file_key_name": "models.silver_crosschain__labels_contracts_optimism"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_optimism_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.5895da0a9a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_51381e5277b7dcd4dba9aa1dd1263f1c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["flotsam", "nft", "defi", "dex", "cex", "dapp", "token", "operator", "layer2", "chadmin"], "column_name": "L1_LABEL", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_optimism')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_optimism"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_51381e5277b7dcd4dba9aa1dd1263f1c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_optimism_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_optimism_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.5895da0a9a", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_51381e5277b7dcd4dba9aa1dd1263f1c.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_optimism_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin", "alias": "labels_contracts_optimism_L1_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_optimism"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.yml\\dbt_expectations_expect_column_51381e5277b7dcd4dba9aa1dd1263f1c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_51381e5277b7dcd4dba9aa1dd1263f1c"}, "created_at": 1666821807.0875065, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        L1_LABEL as value_field\n\n    from CROSSCHAIN_DEV.silver_crosschain.labels_contracts_optimism\n    \n\n),\nset_values as (\n\n    select\n        cast('flotsam' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('nft' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('defi' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('dex' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('cex' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('dapp' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('token' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('operator' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('layer2' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('chadmin' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "L1_LABEL", "file_key_name": "models.silver_crosschain__labels_contracts_optimism"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_L2_LABEL.c3c28050fb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "L2_LABEL", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_optimism')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_optimism"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_optimism_L2_LABEL"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_L2_LABEL.c3c28050fb", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__labels_contracts_optimism_L2_LABEL.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.yml", "name": "not_null_silver_crosschain__labels_contracts_optimism_L2_LABEL", "alias": "labels_contracts_optimism_L2_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_optimism"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.yml\\not_null_silver_crosschain__labels_contracts_optimism_L2_LABEL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.0956035, "compiled_sql": "\n    \n    \n\n\n\nselect L2_LABEL\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_optimism\nwhere L2_LABEL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "L2_LABEL", "file_key_name": "models.silver_crosschain__labels_contracts_optimism"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_ADDRESS_NAME.06e3d93a9e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_crosschain__la_445e9f619a8e80991555fd1631a33563\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS_NAME", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_optimism')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_optimism"]}, "config": {"enabled": true, "alias": "not_null_silver_crosschain__la_445e9f619a8e80991555fd1631a33563", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_optimism_ADDRESS_NAME"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_ADDRESS_NAME.06e3d93a9e", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__la_445e9f619a8e80991555fd1631a33563.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.yml", "name": "not_null_silver_crosschain__labels_contracts_optimism_ADDRESS_NAME", "alias": "labels_contracts_optimism_ADDRESS_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_optimism"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.yml\\not_null_silver_crosschain__la_445e9f619a8e80991555fd1631a33563.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_silver_crosschain__la_445e9f619a8e80991555fd1631a33563"}, "created_at": 1666821807.1010478, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS_NAME\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_optimism\nwhere ADDRESS_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS_NAME", "file_key_name": "models.silver_crosschain__labels_contracts_optimism"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_PROJECT_NAME.30f676508f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_crosschain__la_19d63351d2272ea4580e9cd6ef9b86b7\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROJECT_NAME", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_optimism')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_optimism"]}, "config": {"enabled": true, "alias": "not_null_silver_crosschain__la_19d63351d2272ea4580e9cd6ef9b86b7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_optimism_PROJECT_NAME"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_PROJECT_NAME.30f676508f", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__la_19d63351d2272ea4580e9cd6ef9b86b7.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.yml", "name": "not_null_silver_crosschain__labels_contracts_optimism_PROJECT_NAME", "alias": "labels_contracts_optimism_PROJECT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_optimism"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.yml\\not_null_silver_crosschain__la_19d63351d2272ea4580e9cd6ef9b86b7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_silver_crosschain__la_19d63351d2272ea4580e9cd6ef9b86b7"}, "created_at": 1666821807.1010478, "compiled_sql": "\n    \n    \n\n\n\nselect PROJECT_NAME\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_optimism\nwhere PROJECT_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PROJECT_NAME", "file_key_name": "models.silver_crosschain__labels_contracts_optimism"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism__INSERTED_TIMESTAMP.522d7dfab8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_crosschain__la_38744d18e8bb79eac9d4e6819aea4bc7\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_optimism')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_optimism"]}, "config": {"enabled": true, "alias": "not_null_silver_crosschain__la_38744d18e8bb79eac9d4e6819aea4bc7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_optimism__INSERTED_TIMESTAMP"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism__INSERTED_TIMESTAMP.522d7dfab8", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__la_38744d18e8bb79eac9d4e6819aea4bc7.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.yml", "name": "not_null_silver_crosschain__labels_contracts_optimism__INSERTED_TIMESTAMP", "alias": "labels_contracts_optimism", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_optimism"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.yml\\not_null_silver_crosschain__la_38744d18e8bb79eac9d4e6819aea4bc7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_silver_crosschain__la_38744d18e8bb79eac9d4e6819aea4bc7"}, "created_at": 1666821807.1010478, "compiled_sql": "\n    \n    \n\n\n\nselect _INSERTED_TIMESTAMP\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_optimism\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver_crosschain__labels_contracts_optimism"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_optimism__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.cfb523ebd3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0fc3f7dc66b37b47c90a4eb23374c416\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_optimism')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_optimism"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0fc3f7dc66b37b47c90a4eb23374c416", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_optimism__INSERTED_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_optimism__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.cfb523ebd3", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_0fc3f7dc66b37b47c90a4eb23374c416.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_optimism__INSERTED_TIMESTAMP__TIMESTAMP_NTZ", "alias": "labels_contracts_optimism", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_optimism"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.yml\\dbt_expectations_expect_column_0fc3f7dc66b37b47c90a4eb23374c416.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_0fc3f7dc66b37b47c90a4eb23374c416"}, "created_at": 1666821807.1088314, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('SYSTEM_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INSERT_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L2_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver_crosschain__labels_contracts_optimism"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_optimism_ADDRESS.83a550d0a5": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4589dbf97a84d9cee20c9b39ecb8b81b\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS"], "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_optimism')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_optimism"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_4589dbf97a84d9cee20c9b39ecb8b81b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_optimism_ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_optimism_ADDRESS.83a550d0a5", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_4589dbf97a84d9cee20c9b39ecb8b81b.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.yml", "name": "dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_optimism_ADDRESS", "alias": "labels_contracts_optimism_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_optimism"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_optimism.yml\\dbt_utils_unique_combination_o_4589dbf97a84d9cee20c9b39ecb8b81b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_4589dbf97a84d9cee20c9b39ecb8b81b"}, "created_at": 1666821807.1092956, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS\n    from CROSSCHAIN_DEV.silver_crosschain.labels_contracts_optimism\n    group by ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver_crosschain__labels_contracts_optimism"}, "test.crosschain_models.not_null_silver__tags_active_bsc_last_7_ADDRESS.b2632993c1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_active_bsc_last_7')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_active_bsc_last_7"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "tags", "BSC", "not_null_silver__tags_active_bsc_last_7_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver__tags_active_bsc_last_7_ADDRESS.b2632993c1", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__tags_active_bsc_last_7_ADDRESS.sql", "original_file_path": "models\\silver\\tags\\BSC\\silver__tags_active_bsc_last_7.yml", "name": "not_null_silver__tags_active_bsc_last_7_ADDRESS", "alias": "tags_active_bsc_last_7_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_active_bsc_last_7"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\BSC\\silver__tags_active_bsc_last_7.yml\\not_null_silver__tags_active_bsc_last_7_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.1175892, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver.tags_active_bsc_last_7\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_active_bsc_last_7"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_bsc_last_7_ADDRESS__STRING__VARCHAR.c259e260d6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0804d0e618951b610c9b116f5413c32b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_active_bsc_last_7')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_active_bsc_last_7"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0804d0e618951b610c9b116f5413c32b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "tags", "BSC", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_bsc_last_7_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_bsc_last_7_ADDRESS__STRING__VARCHAR.c259e260d6", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_0804d0e618951b610c9b116f5413c32b.sql", "original_file_path": "models\\silver\\tags\\BSC\\silver__tags_active_bsc_last_7.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_bsc_last_7_ADDRESS__STRING__VARCHAR", "alias": "tags_active_bsc_last_7_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_active_bsc_last_7"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\BSC\\silver__tags_active_bsc_last_7.yml\\dbt_expectations_expect_column_0804d0e618951b610c9b116f5413c32b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_0804d0e618951b610c9b116f5413c32b"}, "created_at": 1666821807.1175892, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('START_DATE' as \n    varchar\n) as relation_column,\n            cast('DATE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('END_DATE' as \n    varchar\n) as relation_column,\n            cast('DATE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_active_bsc_last_7"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_bsc_last_7_ADDRESS__0_xX_0_9a_fA_F_.a05c7204b4": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_76e24accc701755f5e2387d18548a20b\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_active_bsc_last_7')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_active_bsc_last_7"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_76e24accc701755f5e2387d18548a20b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["crosschain_models", "silver", "tags", "BSC", "dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_bsc_last_7_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_bsc_last_7_ADDRESS__0_xX_0_9a_fA_F_.a05c7204b4", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_76e24accc701755f5e2387d18548a20b.sql", "original_file_path": "models\\silver\\tags\\BSC\\silver__tags_active_bsc_last_7.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_bsc_last_7_ADDRESS__0_xX_0_9a_fA_F_", "alias": "tags_active_bsc_last_7_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_active_bsc_last_7"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\BSC\\silver__tags_active_bsc_last_7.yml\\dbt_expectations_expect_column_76e24accc701755f5e2387d18548a20b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_76e24accc701755f5e2387d18548a20b"}, "created_at": 1666821807.1259408, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.silver.tags_active_bsc_last_7\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_active_bsc_last_7"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_active_bsc_last_7_ADDRESS__START_DATE.bcc44fb57b": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b300fd25dae0ec967266cac4b654503d\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS", "START_DATE"], "model": "{{ get_where_subquery(ref('silver__tags_active_bsc_last_7')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_active_bsc_last_7"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b300fd25dae0ec967266cac4b654503d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["crosschain_models", "silver", "tags", "BSC", "dbt_utils_unique_combination_of_columns_silver__tags_active_bsc_last_7_ADDRESS__START_DATE"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_active_bsc_last_7_ADDRESS__START_DATE.bcc44fb57b", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_b300fd25dae0ec967266cac4b654503d.sql", "original_file_path": "models\\silver\\tags\\BSC\\silver__tags_active_bsc_last_7.yml", "name": "dbt_utils_unique_combination_of_columns_silver__tags_active_bsc_last_7_ADDRESS__START_DATE", "alias": "tags_active_bsc_last_7_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_active_bsc_last_7"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\BSC\\silver__tags_active_bsc_last_7.yml\\dbt_utils_unique_combination_o_b300fd25dae0ec967266cac4b654503d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b300fd25dae0ec967266cac4b654503d"}, "created_at": 1666821807.130766, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS, START_DATE\n    from CROSSCHAIN_DEV.silver.tags_active_bsc_last_7\n    group by ADDRESS, START_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__tags_active_bsc_last_7"}, "test.crosschain_models.not_null_silver__tags_active_arbitrum_last_7_ADDRESS.35d39be09a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_active_arbitrum_last_7')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_active_arbitrum_last_7"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "tags", "Arbitrum", "not_null_silver__tags_active_arbitrum_last_7_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver__tags_active_arbitrum_last_7_ADDRESS.35d39be09a", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__tags_active_arbitrum_last_7_ADDRESS.sql", "original_file_path": "models\\silver\\tags\\Arbitrum\\silver__tags_active_arbitrum_last_7.yml", "name": "not_null_silver__tags_active_arbitrum_last_7_ADDRESS", "alias": "tags_active_arbitrum_last_7_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_active_arbitrum_last_7"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Arbitrum\\silver__tags_active_arbitrum_last_7.yml\\not_null_silver__tags_active_arbitrum_last_7_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.1834116, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver.tags_active_arbitrum_last_7\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_active_arbitrum_last_7"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_arbitrum_last_7_ADDRESS__STRING__VARCHAR.f45b0d6ae8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_85619fec0f56695bd7bfa2ddb9d63a6e\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_active_arbitrum_last_7')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_active_arbitrum_last_7"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_85619fec0f56695bd7bfa2ddb9d63a6e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "tags", "Arbitrum", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_arbitrum_last_7_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_arbitrum_last_7_ADDRESS__STRING__VARCHAR.f45b0d6ae8", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_85619fec0f56695bd7bfa2ddb9d63a6e.sql", "original_file_path": "models\\silver\\tags\\Arbitrum\\silver__tags_active_arbitrum_last_7.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_arbitrum_last_7_ADDRESS__STRING__VARCHAR", "alias": "tags_active_arbitrum_last_7_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_active_arbitrum_last_7"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Arbitrum\\silver__tags_active_arbitrum_last_7.yml\\dbt_expectations_expect_column_85619fec0f56695bd7bfa2ddb9d63a6e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_85619fec0f56695bd7bfa2ddb9d63a6e"}, "created_at": 1666821807.1834116, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('START_DATE' as \n    varchar\n) as relation_column,\n            cast('DATE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('END_DATE' as \n    varchar\n) as relation_column,\n            cast('DATE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_active_arbitrum_last_7"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_arbitrum_last_7_ADDRESS__0_xX_0_9a_fA_F_.7718b6380c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2da403e4d398a1ae2591746eba317551\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_active_arbitrum_last_7')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_active_arbitrum_last_7"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2da403e4d398a1ae2591746eba317551", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["crosschain_models", "silver", "tags", "Arbitrum", "dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_arbitrum_last_7_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_arbitrum_last_7_ADDRESS__0_xX_0_9a_fA_F_.7718b6380c", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_2da403e4d398a1ae2591746eba317551.sql", "original_file_path": "models\\silver\\tags\\Arbitrum\\silver__tags_active_arbitrum_last_7.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_arbitrum_last_7_ADDRESS__0_xX_0_9a_fA_F_", "alias": "tags_active_arbitrum_last_7_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_active_arbitrum_last_7"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Arbitrum\\silver__tags_active_arbitrum_last_7.yml\\dbt_expectations_expect_column_2da403e4d398a1ae2591746eba317551.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_2da403e4d398a1ae2591746eba317551"}, "created_at": 1666821807.1834116, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.silver.tags_active_arbitrum_last_7\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_active_arbitrum_last_7"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_active_arbitrum_last_7_ADDRESS__START_DATE.323f9c19f5": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_5950cdc2890fa209520642dd7263e3fb\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS", "START_DATE"], "model": "{{ get_where_subquery(ref('silver__tags_active_arbitrum_last_7')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_active_arbitrum_last_7"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_5950cdc2890fa209520642dd7263e3fb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["crosschain_models", "silver", "tags", "Arbitrum", "dbt_utils_unique_combination_of_columns_silver__tags_active_arbitrum_last_7_ADDRESS__START_DATE"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_active_arbitrum_last_7_ADDRESS__START_DATE.323f9c19f5", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_5950cdc2890fa209520642dd7263e3fb.sql", "original_file_path": "models\\silver\\tags\\Arbitrum\\silver__tags_active_arbitrum_last_7.yml", "name": "dbt_utils_unique_combination_of_columns_silver__tags_active_arbitrum_last_7_ADDRESS__START_DATE", "alias": "tags_active_arbitrum_last_7_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_active_arbitrum_last_7"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Arbitrum\\silver__tags_active_arbitrum_last_7.yml\\dbt_utils_unique_combination_o_5950cdc2890fa209520642dd7263e3fb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_5950cdc2890fa209520642dd7263e3fb"}, "created_at": 1666821807.191528, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS, START_DATE\n    from CROSSCHAIN_DEV.silver.tags_active_arbitrum_last_7\n    group by ADDRESS, START_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__tags_active_arbitrum_last_7"}, "test.crosschain_models.not_null_silver__tags_gnosis_safe_address_ADDRESS.405287f7ab": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_gnosis_safe_address')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_gnosis_safe_address"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "not_null_silver__tags_gnosis_safe_address_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver__tags_gnosis_safe_address_ADDRESS.405287f7ab", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__tags_gnosis_safe_address_ADDRESS.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_gnosis_safe_address.yml", "name": "not_null_silver__tags_gnosis_safe_address_ADDRESS", "alias": "tags_gnosis_safe_address_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_gnosis_safe_address"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_gnosis_safe_address.yml\\not_null_silver__tags_gnosis_safe_address_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.1995335, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver.tags_gnosis_safe_address\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_gnosis_safe_address"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_gnosis_safe_address_ADDRESS__STRING__VARCHAR.c22d203f33": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_dc681dbd3a25214bdfd149e873870983\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_gnosis_safe_address')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_gnosis_safe_address"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dc681dbd3a25214bdfd149e873870983", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_gnosis_safe_address_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_gnosis_safe_address_ADDRESS__STRING__VARCHAR.c22d203f33", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_dc681dbd3a25214bdfd149e873870983.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_gnosis_safe_address.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_gnosis_safe_address_ADDRESS__STRING__VARCHAR", "alias": "tags_gnosis_safe_address_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_gnosis_safe_address"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_gnosis_safe_address.yml\\dbt_expectations_expect_column_dc681dbd3a25214bdfd149e873870983.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_dc681dbd3a25214bdfd149e873870983"}, "created_at": 1666821807.1995335, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('START_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('END_DATE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_gnosis_safe_address"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_gnosis_safe_address_ADDRESS__0_xX_0_9a_fA_F_.c0cf0413a8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e12831e51fe0ace2547d7e42a74943a4\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_gnosis_safe_address')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_gnosis_safe_address"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e12831e51fe0ace2547d7e42a74943a4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_expectations_expect_column_values_to_match_regex_silver__tags_gnosis_safe_address_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_gnosis_safe_address_ADDRESS__0_xX_0_9a_fA_F_.c0cf0413a8", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_e12831e51fe0ace2547d7e42a74943a4.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_gnosis_safe_address.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__tags_gnosis_safe_address_ADDRESS__0_xX_0_9a_fA_F_", "alias": "tags_gnosis_safe_address_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_gnosis_safe_address"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_gnosis_safe_address.yml\\dbt_expectations_expect_column_e12831e51fe0ace2547d7e42a74943a4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e12831e51fe0ace2547d7e42a74943a4"}, "created_at": 1666821807.2081094, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.silver.tags_gnosis_safe_address\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_gnosis_safe_address"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_gnosis_safe_address_ADDRESS.b4c9864bb4": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_92fe3ffa95c4f2243bc86054861924fb\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS"], "model": "{{ get_where_subquery(ref('silver__tags_gnosis_safe_address')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_gnosis_safe_address"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_92fe3ffa95c4f2243bc86054861924fb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_utils_unique_combination_of_columns_silver__tags_gnosis_safe_address_ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_gnosis_safe_address_ADDRESS.b4c9864bb4", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_92fe3ffa95c4f2243bc86054861924fb.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_gnosis_safe_address.yml", "name": "dbt_utils_unique_combination_of_columns_silver__tags_gnosis_safe_address_ADDRESS", "alias": "tags_gnosis_safe_address_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_gnosis_safe_address"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_gnosis_safe_address.yml\\dbt_utils_unique_combination_o_92fe3ffa95c4f2243bc86054861924fb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_92fe3ffa95c4f2243bc86054861924fb"}, "created_at": 1666821807.2081094, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS\n    from CROSSCHAIN_DEV.silver.tags_gnosis_safe_address\n    group by ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__tags_gnosis_safe_address"}, "test.crosschain_models.not_null_silver__tags_nft_opensea_user_ADDRESS.2d27b0a7a1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_nft_opensea_user')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_nft_opensea_user"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "not_null_silver__tags_nft_opensea_user_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver__tags_nft_opensea_user_ADDRESS.2d27b0a7a1", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__tags_nft_opensea_user_ADDRESS.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_opensea_user.yml", "name": "not_null_silver__tags_nft_opensea_user_ADDRESS", "alias": "tags_nft_opensea_user_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_nft_opensea_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_opensea_user.yml\\not_null_silver__tags_nft_opensea_user_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.2199407, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver.tags_nft_opensea_user\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_nft_opensea_user"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_opensea_user_ADDRESS__STRING__VARCHAR.7b0c3452f8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6a7b1d190f4ab26fa8892ea4302a5508\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_nft_opensea_user')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_nft_opensea_user"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6a7b1d190f4ab26fa8892ea4302a5508", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_opensea_user_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_opensea_user_ADDRESS__STRING__VARCHAR.7b0c3452f8", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_6a7b1d190f4ab26fa8892ea4302a5508.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_opensea_user.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_opensea_user_ADDRESS__STRING__VARCHAR", "alias": "tags_nft_opensea_user_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_nft_opensea_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_opensea_user.yml\\dbt_expectations_expect_column_6a7b1d190f4ab26fa8892ea4302a5508.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6a7b1d190f4ab26fa8892ea4302a5508"}, "created_at": 1666821807.2199407, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('START_DATE' as \n    varchar\n) as relation_column,\n            cast('DATE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('END_DATE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SOURCE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_nft_opensea_user"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_opensea_user_ADDRESS__0_xX_0_9a_fA_F_.c1401dc412": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e4b34296355850e27da2d35d34bb02b3\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_nft_opensea_user')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_nft_opensea_user"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e4b34296355850e27da2d35d34bb02b3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_opensea_user_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_opensea_user_ADDRESS__0_xX_0_9a_fA_F_.c1401dc412", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_e4b34296355850e27da2d35d34bb02b3.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_opensea_user.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_opensea_user_ADDRESS__0_xX_0_9a_fA_F_", "alias": "tags_nft_opensea_user_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_nft_opensea_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_opensea_user.yml\\dbt_expectations_expect_column_e4b34296355850e27da2d35d34bb02b3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e4b34296355850e27da2d35d34bb02b3"}, "created_at": 1666821807.2280815, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.silver.tags_nft_opensea_user\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_nft_opensea_user"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_opensea_user_ADDRESS.94beb06207": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7b433eb388cae65f42b32642e146ede1\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS"], "model": "{{ get_where_subquery(ref('silver__tags_nft_opensea_user')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_nft_opensea_user"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7b433eb388cae65f42b32642e146ede1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_utils_unique_combination_of_columns_silver__tags_nft_opensea_user_ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_opensea_user_ADDRESS.94beb06207", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_7b433eb388cae65f42b32642e146ede1.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_opensea_user.yml", "name": "dbt_utils_unique_combination_of_columns_silver__tags_nft_opensea_user_ADDRESS", "alias": "tags_nft_opensea_user_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_nft_opensea_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_opensea_user.yml\\dbt_utils_unique_combination_o_7b433eb388cae65f42b32642e146ede1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7b433eb388cae65f42b32642e146ede1"}, "created_at": 1666821807.2362309, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS\n    from CROSSCHAIN_DEV.silver.tags_nft_opensea_user\n    group by ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__tags_nft_opensea_user"}, "test.crosschain_models.not_null_silver_crosschain__snowflake_Flow_satellites_ADDRESS.8cd8b369c8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_Flow_satellites')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_Flow_satellites"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "not_null_silver_crosschain__snowflake_Flow_satellites_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__snowflake_Flow_satellites_ADDRESS.8cd8b369c8", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__snowflake_Flow_satellites_ADDRESS.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Flow_satellites.yml", "name": "not_null_silver_crosschain__snowflake_Flow_satellites_ADDRESS", "alias": "snowflake_Flow_satellites_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_Flow_satellites"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Flow_satellites.yml\\not_null_silver_crosschain__snowflake_Flow_satellites_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.2602346, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver_crosschain.snowflake_Flow_satellites\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__snowflake_Flow_satellites"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Flow_satellites_ADDRESS__STRING__VARCHAR.8db41888d5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2c74688ef9d7f59aa73b18713d4a9ee0\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_Flow_satellites')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_Flow_satellites"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2c74688ef9d7f59aa73b18713d4a9ee0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Flow_satellites_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Flow_satellites_ADDRESS__STRING__VARCHAR.8db41888d5", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_2c74688ef9d7f59aa73b18713d4a9ee0.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Flow_satellites.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Flow_satellites_ADDRESS__STRING__VARCHAR", "alias": "snowflake_Flow_satellites_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_Flow_satellites"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Flow_satellites.yml\\dbt_expectations_expect_column_2c74688ef9d7f59aa73b18713d4a9ee0.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_2c74688ef9d7f59aa73b18713d4a9ee0"}, "created_at": 1666821807.2602346, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('SYSTEM_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INSERT_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L2_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__snowflake_Flow_satellites"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Flow_satellites_BLOCKCHAIN__CREATOR__ADDRESS.6d4baa41a7": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_525ae901bef2dfd9af680c445fc4a824\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCKCHAIN", "CREATOR", "ADDRESS"], "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_Flow_satellites')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_Flow_satellites"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_525ae901bef2dfd9af680c445fc4a824", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Flow_satellites_BLOCKCHAIN__CREATOR__ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Flow_satellites_BLOCKCHAIN__CREATOR__ADDRESS.6d4baa41a7", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_525ae901bef2dfd9af680c445fc4a824.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Flow_satellites.yml", "name": "dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Flow_satellites_BLOCKCHAIN__CREATOR__ADDRESS", "alias": "snowflake_Flow_satellites_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_Flow_satellites"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Flow_satellites.yml\\dbt_utils_unique_combination_o_525ae901bef2dfd9af680c445fc4a824.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_525ae901bef2dfd9af680c445fc4a824"}, "created_at": 1666821807.2682338, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCKCHAIN, CREATOR, ADDRESS\n    from CROSSCHAIN_DEV.silver_crosschain.snowflake_Flow_satellites\n    group by BLOCKCHAIN, CREATOR, ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver_crosschain__snowflake_Flow_satellites"}, "test.crosschain_models.not_null_silver_crosschain__snowflake_Polygon_satellites_ADDRESS.c3b22856d7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_crosschain__sn_b8cf1ab4f8f547a07581cdd734d8a4f5\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_Polygon_satellites')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_Polygon_satellites"]}, "config": {"enabled": true, "alias": "not_null_silver_crosschain__sn_b8cf1ab4f8f547a07581cdd734d8a4f5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "not_null_silver_crosschain__snowflake_Polygon_satellites_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__snowflake_Polygon_satellites_ADDRESS.c3b22856d7", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__sn_b8cf1ab4f8f547a07581cdd734d8a4f5.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Polygon_satellites.yml", "name": "not_null_silver_crosschain__snowflake_Polygon_satellites_ADDRESS", "alias": "snowflake_Polygon_satellites_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_Polygon_satellites"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Polygon_satellites.yml\\not_null_silver_crosschain__sn_b8cf1ab4f8f547a07581cdd734d8a4f5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_silver_crosschain__sn_b8cf1ab4f8f547a07581cdd734d8a4f5"}, "created_at": 1666821807.2762387, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver_crosschain.snowflake_Polygon_satellites\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__snowflake_Polygon_satellites"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Polygon_satellites_ADDRESS__STRING__VARCHAR.09f9d7ada4": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e9d39c8783b9088bc0e51ff49ac7952a\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_Polygon_satellites')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_Polygon_satellites"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e9d39c8783b9088bc0e51ff49ac7952a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Polygon_satellites_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Polygon_satellites_ADDRESS__STRING__VARCHAR.09f9d7ada4", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_e9d39c8783b9088bc0e51ff49ac7952a.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Polygon_satellites.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Polygon_satellites_ADDRESS__STRING__VARCHAR", "alias": "snowflake_Polygon_satellites_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_Polygon_satellites"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Polygon_satellites.yml\\dbt_expectations_expect_column_e9d39c8783b9088bc0e51ff49ac7952a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e9d39c8783b9088bc0e51ff49ac7952a"}, "created_at": 1666821807.2762387, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('SYSTEM_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INSERT_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L2_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__snowflake_Polygon_satellites"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Polygon_satellites_BLOCKCHAIN__CREATOR__ADDRESS.6bb7c3da70": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c5409bc71100faa871456c6430fb40f8\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCKCHAIN", "CREATOR", "ADDRESS"], "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_Polygon_satellites')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_Polygon_satellites"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c5409bc71100faa871456c6430fb40f8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Polygon_satellites_BLOCKCHAIN__CREATOR__ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Polygon_satellites_BLOCKCHAIN__CREATOR__ADDRESS.6bb7c3da70", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_c5409bc71100faa871456c6430fb40f8.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Polygon_satellites.yml", "name": "dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Polygon_satellites_BLOCKCHAIN__CREATOR__ADDRESS", "alias": "snowflake_Polygon_satellites_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_Polygon_satellites"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Polygon_satellites.yml\\dbt_utils_unique_combination_o_c5409bc71100faa871456c6430fb40f8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c5409bc71100faa871456c6430fb40f8"}, "created_at": 1666821807.2842462, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCKCHAIN, CREATOR, ADDRESS\n    from CROSSCHAIN_DEV.silver_crosschain.snowflake_Polygon_satellites\n    group by BLOCKCHAIN, CREATOR, ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver_crosschain__snowflake_Polygon_satellites"}, "test.crosschain_models.not_null_silver__tags_active_polygon_last_7_ADDRESS.946434d99c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_active_polygon_last_7')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_active_polygon_last_7"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "tags", "Polygon", "not_null_silver__tags_active_polygon_last_7_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver__tags_active_polygon_last_7_ADDRESS.946434d99c", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__tags_active_polygon_last_7_ADDRESS.sql", "original_file_path": "models\\silver\\tags\\Polygon\\silver__tags_active_polygon_last_7.yml", "name": "not_null_silver__tags_active_polygon_last_7_ADDRESS", "alias": "tags_active_polygon_last_7_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_active_polygon_last_7"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Polygon\\silver__tags_active_polygon_last_7.yml\\not_null_silver__tags_active_polygon_last_7_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.2842462, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver.tags_active_polygon_last_7\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_active_polygon_last_7"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_polygon_last_7_ADDRESS__STRING__VARCHAR.216825937d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bc310bee1bd8c322cbea4c5ca0752281\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_active_polygon_last_7')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_active_polygon_last_7"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bc310bee1bd8c322cbea4c5ca0752281", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "tags", "Polygon", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_polygon_last_7_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_polygon_last_7_ADDRESS__STRING__VARCHAR.216825937d", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_bc310bee1bd8c322cbea4c5ca0752281.sql", "original_file_path": "models\\silver\\tags\\Polygon\\silver__tags_active_polygon_last_7.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_polygon_last_7_ADDRESS__STRING__VARCHAR", "alias": "tags_active_polygon_last_7_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_active_polygon_last_7"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Polygon\\silver__tags_active_polygon_last_7.yml\\dbt_expectations_expect_column_bc310bee1bd8c322cbea4c5ca0752281.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_bc310bee1bd8c322cbea4c5ca0752281"}, "created_at": 1666821807.2924516, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('START_DATE' as \n    varchar\n) as relation_column,\n            cast('DATE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('END_DATE' as \n    varchar\n) as relation_column,\n            cast('DATE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_active_polygon_last_7"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_polygon_last_7_ADDRESS__0_xX_0_9a_fA_F_.6a5dd4ec16": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_50c82774f56fd22ace624c14043039fc\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_active_polygon_last_7')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_active_polygon_last_7"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_50c82774f56fd22ace624c14043039fc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["crosschain_models", "silver", "tags", "Polygon", "dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_polygon_last_7_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_polygon_last_7_ADDRESS__0_xX_0_9a_fA_F_.6a5dd4ec16", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_50c82774f56fd22ace624c14043039fc.sql", "original_file_path": "models\\silver\\tags\\Polygon\\silver__tags_active_polygon_last_7.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_polygon_last_7_ADDRESS__0_xX_0_9a_fA_F_", "alias": "tags_active_polygon_last_7_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_active_polygon_last_7"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Polygon\\silver__tags_active_polygon_last_7.yml\\dbt_expectations_expect_column_50c82774f56fd22ace624c14043039fc.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_50c82774f56fd22ace624c14043039fc"}, "created_at": 1666821807.2924516, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.silver.tags_active_polygon_last_7\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_active_polygon_last_7"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_active_polygon_last_7_ADDRESS__START_DATE.2e3073861f": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0cc390ce5bcc0407026cb01111fb2d93\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS", "START_DATE"], "model": "{{ get_where_subquery(ref('silver__tags_active_polygon_last_7')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_active_polygon_last_7"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0cc390ce5bcc0407026cb01111fb2d93", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["crosschain_models", "silver", "tags", "Polygon", "dbt_utils_unique_combination_of_columns_silver__tags_active_polygon_last_7_ADDRESS__START_DATE"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_active_polygon_last_7_ADDRESS__START_DATE.2e3073861f", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_0cc390ce5bcc0407026cb01111fb2d93.sql", "original_file_path": "models\\silver\\tags\\Polygon\\silver__tags_active_polygon_last_7.yml", "name": "dbt_utils_unique_combination_of_columns_silver__tags_active_polygon_last_7_ADDRESS__START_DATE", "alias": "tags_active_polygon_last_7_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_active_polygon_last_7"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Polygon\\silver__tags_active_polygon_last_7.yml\\dbt_utils_unique_combination_o_0cc390ce5bcc0407026cb01111fb2d93.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_0cc390ce5bcc0407026cb01111fb2d93"}, "created_at": 1666821807.2924516, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS, START_DATE\n    from CROSSCHAIN_DEV.silver.tags_active_polygon_last_7\n    group by ADDRESS, START_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__tags_active_polygon_last_7"}, "test.crosschain_models.not_null_silver_crosschain__snowflake_BSC_satellites_ADDRESS.8e00fbbd29": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_BSC_satellites')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_BSC_satellites"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "not_null_silver_crosschain__snowflake_BSC_satellites_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__snowflake_BSC_satellites_ADDRESS.8e00fbbd29", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__snowflake_BSC_satellites_ADDRESS.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_BSC_satellites.yml", "name": "not_null_silver_crosschain__snowflake_BSC_satellites_ADDRESS", "alias": "snowflake_BSC_satellites_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_BSC_satellites"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_BSC_satellites.yml\\not_null_silver_crosschain__snowflake_BSC_satellites_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.3099518, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver_crosschain.snowflake_BSC_satellites\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__snowflake_BSC_satellites"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_BSC_satellites_ADDRESS__STRING__VARCHAR.8b9a883e71": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1c7aae91330afb478c5cf29203bf09ab\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_BSC_satellites')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_BSC_satellites"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1c7aae91330afb478c5cf29203bf09ab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_BSC_satellites_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_BSC_satellites_ADDRESS__STRING__VARCHAR.8b9a883e71", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_1c7aae91330afb478c5cf29203bf09ab.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_BSC_satellites.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_BSC_satellites_ADDRESS__STRING__VARCHAR", "alias": "snowflake_BSC_satellites_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_BSC_satellites"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_BSC_satellites.yml\\dbt_expectations_expect_column_1c7aae91330afb478c5cf29203bf09ab.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_1c7aae91330afb478c5cf29203bf09ab"}, "created_at": 1666821807.3099518, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('SYSTEM_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INSERT_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L2_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__snowflake_BSC_satellites"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_BSC_satellites_BLOCKCHAIN__CREATOR__ADDRESS.20ad5fc70e": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_79530f08c6855b584ed458b298c5b4e1\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCKCHAIN", "CREATOR", "ADDRESS"], "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_BSC_satellites')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_BSC_satellites"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_79530f08c6855b584ed458b298c5b4e1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_BSC_satellites_BLOCKCHAIN__CREATOR__ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_BSC_satellites_BLOCKCHAIN__CREATOR__ADDRESS.20ad5fc70e", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_79530f08c6855b584ed458b298c5b4e1.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_BSC_satellites.yml", "name": "dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_BSC_satellites_BLOCKCHAIN__CREATOR__ADDRESS", "alias": "snowflake_BSC_satellites_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_BSC_satellites"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_BSC_satellites.yml\\dbt_utils_unique_combination_o_79530f08c6855b584ed458b298c5b4e1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_79530f08c6855b584ed458b298c5b4e1"}, "created_at": 1666821807.3165238, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCKCHAIN, CREATOR, ADDRESS\n    from CROSSCHAIN_DEV.silver_crosschain.snowflake_BSC_satellites\n    group by BLOCKCHAIN, CREATOR, ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver_crosschain__snowflake_BSC_satellites"}, "test.crosschain_models.not_null_silver_crosschain__address_labels_BLOCKCHAIN.a1681eff22": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver_crosschain__address_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__address_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "not_null_silver_crosschain__address_labels_BLOCKCHAIN"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__address_labels_BLOCKCHAIN.a1681eff22", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__address_labels_BLOCKCHAIN.sql", "original_file_path": "models\\silver\\labels\\silver_crosschain__address_labels.yml", "name": "not_null_silver_crosschain__address_labels_BLOCKCHAIN", "alias": "address_labels_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\silver_crosschain__address_labels.yml\\not_null_silver_crosschain__address_labels_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.3336692, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCKCHAIN\nfrom CROSSCHAIN_DEV.silver_crosschain.address_labels\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCKCHAIN", "file_key_name": "models.silver_crosschain__address_labels"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__address_labels_BLOCKCHAIN__ethereum__flow__polygon__terra__algorand__solana__moonriver__avalanche__bittorrent__cronos__fantom__arbitrum__aurora__bsc__heco__optimism__gnosis__thorchain__near__terra_classic__axelar.ac8c70f6a7": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_75198f70477fb4173d7f0f63224c3c9a\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["ethereum", "flow", "polygon", "terra", "algorand", "solana", "moonriver", "avalanche", "bittorrent", "cronos", "fantom", "arbitrum", "aurora", "bsc", "heco", "optimism", "gnosis", "thorchain", "near", "terra_classic", "axelar"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver_crosschain__address_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__address_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_75198f70477fb4173d7f0f63224c3c9a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__address_labels_BLOCKCHAIN__ethereum__flow__polygon__terra__algorand__solana__moonriver__avalanche__bittorrent__cronos__fantom__arbitrum__aurora__bsc__heco__optimism__gnosis__thorchain__near__terra_classic__axelar"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__address_labels_BLOCKCHAIN__ethereum__flow__polygon__terra__algorand__solana__moonriver__avalanche__bittorrent__cronos__fantom__arbitrum__aurora__bsc__heco__optimism__gnosis__thorchain__near__terra_classic__axelar.ac8c70f6a7", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_75198f70477fb4173d7f0f63224c3c9a.sql", "original_file_path": "models\\silver\\labels\\silver_crosschain__address_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__address_labels_BLOCKCHAIN__ethereum__flow__polygon__terra__algorand__solana__moonriver__avalanche__bittorrent__cronos__fantom__arbitrum__aurora__bsc__heco__optimism__gnosis__thorchain__near__terra_classic__axelar", "alias": "address_labels_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\silver_crosschain__address_labels.yml\\dbt_expectations_expect_column_75198f70477fb4173d7f0f63224c3c9a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_75198f70477fb4173d7f0f63224c3c9a"}, "created_at": 1666821807.3336692, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        BLOCKCHAIN as value_field\n\n    from CROSSCHAIN_DEV.silver_crosschain.address_labels\n    \n\n),\nset_values as (\n\n    select\n        cast('ethereum' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('flow' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('polygon' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('terra' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('algorand' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('solana' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('moonriver' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('avalanche' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('bittorrent' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('cronos' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('fantom' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('arbitrum' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('aurora' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('bsc' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('heco' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('optimism' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('gnosis' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('thorchain' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('near' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('terra_classic' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('axelar' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCKCHAIN", "file_key_name": "models.silver_crosschain__address_labels"}, "test.crosschain_models.not_null_silver_crosschain__address_labels_CREATOR.c013bbc905": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR", "model": "{{ get_where_subquery(ref('silver_crosschain__address_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__address_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "not_null_silver_crosschain__address_labels_CREATOR"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__address_labels_CREATOR.c013bbc905", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__address_labels_CREATOR.sql", "original_file_path": "models\\silver\\labels\\silver_crosschain__address_labels.yml", "name": "not_null_silver_crosschain__address_labels_CREATOR", "alias": "address_labels_CREATOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\silver_crosschain__address_labels.yml\\not_null_silver_crosschain__address_labels_CREATOR.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.351943, "compiled_sql": "\n    \n    \n\n\n\nselect CREATOR\nfrom CROSSCHAIN_DEV.silver_crosschain.address_labels\nwhere CREATOR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR", "file_key_name": "models.silver_crosschain__address_labels"}, "test.crosschain_models.not_null_silver_crosschain__address_labels_INSERT_DATE.0a816586a4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INSERT_DATE", "model": "{{ get_where_subquery(ref('silver_crosschain__address_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__address_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "not_null_silver_crosschain__address_labels_INSERT_DATE"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__address_labels_INSERT_DATE.0a816586a4", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__address_labels_INSERT_DATE.sql", "original_file_path": "models\\silver\\labels\\silver_crosschain__address_labels.yml", "name": "not_null_silver_crosschain__address_labels_INSERT_DATE", "alias": "address_labels_INSERT_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\silver_crosschain__address_labels.yml\\not_null_silver_crosschain__address_labels_INSERT_DATE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.3539956, "compiled_sql": "\n    \n    \n\n\n\nselect INSERT_DATE\nfrom CROSSCHAIN_DEV.silver_crosschain.address_labels\nwhere INSERT_DATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INSERT_DATE", "file_key_name": "models.silver_crosschain__address_labels"}, "test.crosschain_models.not_null_silver_crosschain__address_labels_L1_LABEL.7de8180636": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "L1_LABEL", "model": "{{ get_where_subquery(ref('silver_crosschain__address_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__address_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "not_null_silver_crosschain__address_labels_L1_LABEL"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__address_labels_L1_LABEL.7de8180636", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__address_labels_L1_LABEL.sql", "original_file_path": "models\\silver\\labels\\silver_crosschain__address_labels.yml", "name": "not_null_silver_crosschain__address_labels_L1_LABEL", "alias": "address_labels_L1_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\silver_crosschain__address_labels.yml\\not_null_silver_crosschain__address_labels_L1_LABEL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.3562074, "compiled_sql": "\n    \n    \n\n\n\nselect L1_LABEL\nfrom CROSSCHAIN_DEV.silver_crosschain.address_labels\nwhere L1_LABEL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "L1_LABEL", "file_key_name": "models.silver_crosschain__address_labels"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__address_labels_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.b2ca065890": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_460a7ee02fe28f7e4ce366a4a76a5aba\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["flotsam", "nft", "defi", "dex", "cex", "dapp", "token", "operator", "layer2", "chadmin"], "column_name": "L1_LABEL", "model": "{{ get_where_subquery(ref('silver_crosschain__address_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__address_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_460a7ee02fe28f7e4ce366a4a76a5aba", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__address_labels_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__address_labels_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.b2ca065890", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_460a7ee02fe28f7e4ce366a4a76a5aba.sql", "original_file_path": "models\\silver\\labels\\silver_crosschain__address_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__address_labels_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin", "alias": "address_labels_L1_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\silver_crosschain__address_labels.yml\\dbt_expectations_expect_column_460a7ee02fe28f7e4ce366a4a76a5aba.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_460a7ee02fe28f7e4ce366a4a76a5aba"}, "created_at": 1666821807.3574429, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        L1_LABEL as value_field\n\n    from CROSSCHAIN_DEV.silver_crosschain.address_labels\n    \n\n),\nset_values as (\n\n    select\n        cast('flotsam' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('nft' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('defi' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('dex' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('cex' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('dapp' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('token' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('operator' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('layer2' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('chadmin' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "L1_LABEL", "file_key_name": "models.silver_crosschain__address_labels"}, "test.crosschain_models.not_null_silver_crosschain__address_labels_L2_LABEL.ca252aef73": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "L2_LABEL", "model": "{{ get_where_subquery(ref('silver_crosschain__address_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__address_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "not_null_silver_crosschain__address_labels_L2_LABEL"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__address_labels_L2_LABEL.ca252aef73", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__address_labels_L2_LABEL.sql", "original_file_path": "models\\silver\\labels\\silver_crosschain__address_labels.yml", "name": "not_null_silver_crosschain__address_labels_L2_LABEL", "alias": "address_labels_L2_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\silver_crosschain__address_labels.yml\\not_null_silver_crosschain__address_labels_L2_LABEL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.3673627, "compiled_sql": "\n    \n    \n\n\n\nselect L2_LABEL\nfrom CROSSCHAIN_DEV.silver_crosschain.address_labels\nwhere L2_LABEL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "L2_LABEL", "file_key_name": "models.silver_crosschain__address_labels"}, "test.crosschain_models.not_null_silver_crosschain__address_labels_PROJECT_NAME.adff3ea698": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROJECT_NAME", "model": "{{ get_where_subquery(ref('silver_crosschain__address_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__address_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "not_null_silver_crosschain__address_labels_PROJECT_NAME"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__address_labels_PROJECT_NAME.adff3ea698", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__address_labels_PROJECT_NAME.sql", "original_file_path": "models\\silver\\labels\\silver_crosschain__address_labels.yml", "name": "not_null_silver_crosschain__address_labels_PROJECT_NAME", "alias": "address_labels_PROJECT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\silver_crosschain__address_labels.yml\\not_null_silver_crosschain__address_labels_PROJECT_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.36983, "compiled_sql": "\n    \n    \n\n\n\nselect PROJECT_NAME\nfrom CROSSCHAIN_DEV.silver_crosschain.address_labels\nwhere PROJECT_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PROJECT_NAME", "file_key_name": "models.silver_crosschain__address_labels"}, "test.crosschain_models.not_null_silver_crosschain__address_labels_ADDRESS.efe583da6d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__address_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__address_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "not_null_silver_crosschain__address_labels_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__address_labels_ADDRESS.efe583da6d", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__address_labels_ADDRESS.sql", "original_file_path": "models\\silver\\labels\\silver_crosschain__address_labels.yml", "name": "not_null_silver_crosschain__address_labels_ADDRESS", "alias": "address_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\silver_crosschain__address_labels.yml\\not_null_silver_crosschain__address_labels_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.3709207, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver_crosschain.address_labels\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__address_labels"}, "test.crosschain_models.dbt_expectations_expect_column_value_lengths_to_equal_silver_crosschain__address_labels_ADDRESS__58.a6680ed22d": {"raw_sql": "{{ dbt_expectations.test_expect_column_value_lengths_to_equal(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCKCHAIN = 'algorand'\",alias=\"dbt_expectations_expect_column_2e30e9a2141f132cf011db413b824e30\") }}", "test_metadata": {"name": "expect_column_value_lengths_to_equal", "kwargs": {"value": 58, "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__address_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__address_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2e30e9a2141f132cf011db413b824e30", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCKCHAIN = 'algorand'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_value_lengths_to_equal_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "dbt_expectations_expect_column_value_lengths_to_equal_silver_crosschain__address_labels_ADDRESS__58"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_value_lengths_to_equal_silver_crosschain__address_labels_ADDRESS__58.a6680ed22d", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_2e30e9a2141f132cf011db413b824e30.sql", "original_file_path": "models\\silver\\labels\\silver_crosschain__address_labels.yml", "name": "dbt_expectations_expect_column_value_lengths_to_equal_silver_crosschain__address_labels_ADDRESS__58", "alias": "address_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\silver_crosschain__address_labels.yml\\dbt_expectations_expect_column_2e30e9a2141f132cf011db413b824e30.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "BLOCKCHAIN = 'algorand'", "alias": "dbt_expectations_expect_column_2e30e9a2141f132cf011db413b824e30"}, "created_at": 1666821807.3842294, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n    \n    length(\n        ADDRESS\n    ) = 58 as expression\n\n\n    from (select * from CROSSCHAIN_DEV.silver_crosschain.address_labels where BLOCKCHAIN = 'algorand') dbt_subquery\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__address_labels"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__address_labels_BLOCKCHAIN__CREATOR__ADDRESS.17598177be": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e1e4e26a79e7335b957c9e0221a99cc5\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCKCHAIN", "CREATOR", "ADDRESS"], "model": "{{ get_where_subquery(ref('silver_crosschain__address_labels')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__address_labels"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e1e4e26a79e7335b957c9e0221a99cc5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "dbt_utils_unique_combination_of_columns_silver_crosschain__address_labels_BLOCKCHAIN__CREATOR__ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__address_labels_BLOCKCHAIN__CREATOR__ADDRESS.17598177be", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_e1e4e26a79e7335b957c9e0221a99cc5.sql", "original_file_path": "models\\silver\\labels\\silver_crosschain__address_labels.yml", "name": "dbt_utils_unique_combination_of_columns_silver_crosschain__address_labels_BLOCKCHAIN__CREATOR__ADDRESS", "alias": "address_labels_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\silver_crosschain__address_labels.yml\\dbt_utils_unique_combination_o_e1e4e26a79e7335b957c9e0221a99cc5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e1e4e26a79e7335b957c9e0221a99cc5"}, "created_at": 1666821807.3922415, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCKCHAIN, CREATOR, ADDRESS\n    from CROSSCHAIN_DEV.silver_crosschain.address_labels\n    group by BLOCKCHAIN, CREATOR, ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver_crosschain__address_labels"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_BLOCKCHAIN.7d249d5154": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_polygon')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_polygon"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_polygon_BLOCKCHAIN"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_BLOCKCHAIN.7d249d5154", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__labels_contracts_polygon_BLOCKCHAIN.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.yml", "name": "not_null_silver_crosschain__labels_contracts_polygon_BLOCKCHAIN", "alias": "labels_contracts_polygon_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_polygon"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.yml\\not_null_silver_crosschain__labels_contracts_polygon_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.4002638, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCKCHAIN\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_polygon\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCKCHAIN", "file_key_name": "models.silver_crosschain__labels_contracts_polygon"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_polygon_BLOCKCHAIN__polygon.99ecbd9a78": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_38f1c28293dc05bd4e469568aa76ec92\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["polygon"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_polygon')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_polygon"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_38f1c28293dc05bd4e469568aa76ec92", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_polygon_BLOCKCHAIN__polygon"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_polygon_BLOCKCHAIN__polygon.99ecbd9a78", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_38f1c28293dc05bd4e469568aa76ec92.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_polygon_BLOCKCHAIN__polygon", "alias": "labels_contracts_polygon_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_polygon"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.yml\\dbt_expectations_expect_column_38f1c28293dc05bd4e469568aa76ec92.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_38f1c28293dc05bd4e469568aa76ec92"}, "created_at": 1666821807.4082427, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        BLOCKCHAIN as value_field\n\n    from CROSSCHAIN_DEV.silver_crosschain.labels_contracts_polygon\n    \n\n),\nset_values as (\n\n    select\n        cast('polygon' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCKCHAIN", "file_key_name": "models.silver_crosschain__labels_contracts_polygon"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_ADDRESS.942c653587": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_polygon')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_polygon"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_polygon_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_ADDRESS.942c653587", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__labels_contracts_polygon_ADDRESS.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.yml", "name": "not_null_silver_crosschain__labels_contracts_polygon_ADDRESS", "alias": "labels_contracts_polygon_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_polygon"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.yml\\not_null_silver_crosschain__labels_contracts_polygon_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.416248, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_polygon\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__labels_contracts_polygon"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_polygon_ADDRESS__STRING__VARCHAR.3d682457de": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8c1961498b6712f62d5debce1ed577cc\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_polygon')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_polygon"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8c1961498b6712f62d5debce1ed577cc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_polygon_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_polygon_ADDRESS__STRING__VARCHAR.3d682457de", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_8c1961498b6712f62d5debce1ed577cc.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_polygon_ADDRESS__STRING__VARCHAR", "alias": "labels_contracts_polygon_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_polygon"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.yml\\dbt_expectations_expect_column_8c1961498b6712f62d5debce1ed577cc.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_8c1961498b6712f62d5debce1ed577cc"}, "created_at": 1666821807.416248, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('SYSTEM_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INSERT_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L2_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__labels_contracts_polygon"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_polygon_ADDRESS__0_xX_0_9a_fA_F_.7c11cbb828": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_efe38e49c6b20b1d830f47e1f01ce4fc\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_polygon')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_polygon"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_efe38e49c6b20b1d830f47e1f01ce4fc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_polygon_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_polygon_ADDRESS__0_xX_0_9a_fA_F_.7c11cbb828", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_efe38e49c6b20b1d830f47e1f01ce4fc.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_polygon_ADDRESS__0_xX_0_9a_fA_F_", "alias": "labels_contracts_polygon_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_polygon"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.yml\\dbt_expectations_expect_column_efe38e49c6b20b1d830f47e1f01ce4fc.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_efe38e49c6b20b1d830f47e1f01ce4fc"}, "created_at": 1666821807.4242404, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.silver_crosschain.labels_contracts_polygon\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__labels_contracts_polygon"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_CREATOR.eb27492340": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_polygon')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_polygon"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_polygon_CREATOR"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_CREATOR.eb27492340", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__labels_contracts_polygon_CREATOR.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.yml", "name": "not_null_silver_crosschain__labels_contracts_polygon_CREATOR", "alias": "labels_contracts_polygon_CREATOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_polygon"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.yml\\not_null_silver_crosschain__labels_contracts_polygon_CREATOR.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.4322405, "compiled_sql": "\n    \n    \n\n\n\nselect CREATOR\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_polygon\nwhere CREATOR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR", "file_key_name": "models.silver_crosschain__labels_contracts_polygon"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_L1_LABEL.bafce1b953": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "L1_LABEL", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_polygon')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_polygon"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_polygon_L1_LABEL"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_L1_LABEL.bafce1b953", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__labels_contracts_polygon_L1_LABEL.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.yml", "name": "not_null_silver_crosschain__labels_contracts_polygon_L1_LABEL", "alias": "labels_contracts_polygon_L1_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_polygon"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.yml\\not_null_silver_crosschain__labels_contracts_polygon_L1_LABEL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.4322405, "compiled_sql": "\n    \n    \n\n\n\nselect L1_LABEL\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_polygon\nwhere L1_LABEL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "L1_LABEL", "file_key_name": "models.silver_crosschain__labels_contracts_polygon"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_polygon_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.e290bb8e68": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fd0a30f5420384741c22318b034c271c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["flotsam", "nft", "defi", "dex", "cex", "dapp", "token", "operator", "layer2", "chadmin"], "column_name": "L1_LABEL", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_polygon')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_polygon"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fd0a30f5420384741c22318b034c271c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_polygon_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_polygon_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.e290bb8e68", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_fd0a30f5420384741c22318b034c271c.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_polygon_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin", "alias": "labels_contracts_polygon_L1_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_polygon"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.yml\\dbt_expectations_expect_column_fd0a30f5420384741c22318b034c271c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_fd0a30f5420384741c22318b034c271c"}, "created_at": 1666821807.4322405, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        L1_LABEL as value_field\n\n    from CROSSCHAIN_DEV.silver_crosschain.labels_contracts_polygon\n    \n\n),\nset_values as (\n\n    select\n        cast('flotsam' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('nft' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('defi' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('dex' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('cex' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('dapp' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('token' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('operator' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('layer2' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('chadmin' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "L1_LABEL", "file_key_name": "models.silver_crosschain__labels_contracts_polygon"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_L2_LABEL.e61b41b42c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "L2_LABEL", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_polygon')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_polygon"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_polygon_L2_LABEL"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_L2_LABEL.e61b41b42c", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__labels_contracts_polygon_L2_LABEL.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.yml", "name": "not_null_silver_crosschain__labels_contracts_polygon_L2_LABEL", "alias": "labels_contracts_polygon_L2_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_polygon"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.yml\\not_null_silver_crosschain__labels_contracts_polygon_L2_LABEL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.448385, "compiled_sql": "\n    \n    \n\n\n\nselect L2_LABEL\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_polygon\nwhere L2_LABEL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "L2_LABEL", "file_key_name": "models.silver_crosschain__labels_contracts_polygon"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_ADDRESS_NAME.69aa52a279": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_crosschain__la_4dc5bac20d4a5f7236bb34a752ac4ee0\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS_NAME", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_polygon')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_polygon"]}, "config": {"enabled": true, "alias": "not_null_silver_crosschain__la_4dc5bac20d4a5f7236bb34a752ac4ee0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_polygon_ADDRESS_NAME"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_ADDRESS_NAME.69aa52a279", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__la_4dc5bac20d4a5f7236bb34a752ac4ee0.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.yml", "name": "not_null_silver_crosschain__labels_contracts_polygon_ADDRESS_NAME", "alias": "labels_contracts_polygon_ADDRESS_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_polygon"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.yml\\not_null_silver_crosschain__la_4dc5bac20d4a5f7236bb34a752ac4ee0.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_silver_crosschain__la_4dc5bac20d4a5f7236bb34a752ac4ee0"}, "created_at": 1666821807.448385, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS_NAME\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_polygon\nwhere ADDRESS_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS_NAME", "file_key_name": "models.silver_crosschain__labels_contracts_polygon"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_PROJECT_NAME.edcd10ff29": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_crosschain__la_58a8ded13733a7381e3ee5939ecbffdf\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROJECT_NAME", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_polygon')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_polygon"]}, "config": {"enabled": true, "alias": "not_null_silver_crosschain__la_58a8ded13733a7381e3ee5939ecbffdf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_polygon_PROJECT_NAME"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_PROJECT_NAME.edcd10ff29", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__la_58a8ded13733a7381e3ee5939ecbffdf.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.yml", "name": "not_null_silver_crosschain__labels_contracts_polygon_PROJECT_NAME", "alias": "labels_contracts_polygon_PROJECT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_polygon"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.yml\\not_null_silver_crosschain__la_58a8ded13733a7381e3ee5939ecbffdf.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_silver_crosschain__la_58a8ded13733a7381e3ee5939ecbffdf"}, "created_at": 1666821807.448385, "compiled_sql": "\n    \n    \n\n\n\nselect PROJECT_NAME\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_polygon\nwhere PROJECT_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PROJECT_NAME", "file_key_name": "models.silver_crosschain__labels_contracts_polygon"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon__INSERTED_TIMESTAMP.b118c38214": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_crosschain__la_8464110cdd7e878b9cc15ee38770fe80\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_polygon')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_polygon"]}, "config": {"enabled": true, "alias": "not_null_silver_crosschain__la_8464110cdd7e878b9cc15ee38770fe80", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_polygon__INSERTED_TIMESTAMP"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon__INSERTED_TIMESTAMP.b118c38214", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__la_8464110cdd7e878b9cc15ee38770fe80.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.yml", "name": "not_null_silver_crosschain__labels_contracts_polygon__INSERTED_TIMESTAMP", "alias": "labels_contracts_polygon", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_polygon"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.yml\\not_null_silver_crosschain__la_8464110cdd7e878b9cc15ee38770fe80.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_silver_crosschain__la_8464110cdd7e878b9cc15ee38770fe80"}, "created_at": 1666821807.448385, "compiled_sql": "\n    \n    \n\n\n\nselect _INSERTED_TIMESTAMP\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_polygon\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver_crosschain__labels_contracts_polygon"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_polygon__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.a9656b0bcb": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_61aad1e4203eeb66d8bb42938304e421\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_polygon')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_polygon"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_61aad1e4203eeb66d8bb42938304e421", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_polygon__INSERTED_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_polygon__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.a9656b0bcb", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_61aad1e4203eeb66d8bb42938304e421.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_polygon__INSERTED_TIMESTAMP__TIMESTAMP_NTZ", "alias": "labels_contracts_polygon", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_polygon"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.yml\\dbt_expectations_expect_column_61aad1e4203eeb66d8bb42938304e421.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_61aad1e4203eeb66d8bb42938304e421"}, "created_at": 1666821807.448385, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('SYSTEM_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INSERT_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L2_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver_crosschain__labels_contracts_polygon"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_polygon_ADDRESS.8f4b18c9af": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b2902f675811bfa8a44585a66f01c505\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS"], "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_polygon')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_polygon"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b2902f675811bfa8a44585a66f01c505", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_polygon_ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_polygon_ADDRESS.8f4b18c9af", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_b2902f675811bfa8a44585a66f01c505.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.yml", "name": "dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_polygon_ADDRESS", "alias": "labels_contracts_polygon_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_polygon"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_polygon.yml\\dbt_utils_unique_combination_o_b2902f675811bfa8a44585a66f01c505.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b2902f675811bfa8a44585a66f01c505"}, "created_at": 1666821807.4598036, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS\n    from CROSSCHAIN_DEV.silver_crosschain.labels_contracts_polygon\n    group by ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver_crosschain__labels_contracts_polygon"}, "test.crosschain_models.not_null_silver_crosschain__snowflake_Algorand_satellite_ADDRESS.43d72b7430": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_crosschain__sn_c137d6133ac8a78b781bd72cf7cab843\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_Algorand_satellite')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_Algorand_satellite"]}, "config": {"enabled": true, "alias": "not_null_silver_crosschain__sn_c137d6133ac8a78b781bd72cf7cab843", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "not_null_silver_crosschain__snowflake_Algorand_satellite_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__snowflake_Algorand_satellite_ADDRESS.43d72b7430", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__sn_c137d6133ac8a78b781bd72cf7cab843.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Algorand_satellite.yml", "name": "not_null_silver_crosschain__snowflake_Algorand_satellite_ADDRESS", "alias": "snowflake_Algorand_satellite_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_Algorand_satellite"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Algorand_satellite.yml\\not_null_silver_crosschain__sn_c137d6133ac8a78b781bd72cf7cab843.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_silver_crosschain__sn_c137d6133ac8a78b781bd72cf7cab843"}, "created_at": 1666821807.4678936, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver_crosschain.snowflake_Algorand_satellite\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__snowflake_Algorand_satellite"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Algorand_satellite_ADDRESS__STRING__VARCHAR.2af26c0ca4": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d2d8e0154916a391a9383795956af5a1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_Algorand_satellite')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_Algorand_satellite"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d2d8e0154916a391a9383795956af5a1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Algorand_satellite_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Algorand_satellite_ADDRESS__STRING__VARCHAR.2af26c0ca4", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_d2d8e0154916a391a9383795956af5a1.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Algorand_satellite.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Algorand_satellite_ADDRESS__STRING__VARCHAR", "alias": "snowflake_Algorand_satellite_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_Algorand_satellite"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Algorand_satellite.yml\\dbt_expectations_expect_column_d2d8e0154916a391a9383795956af5a1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d2d8e0154916a391a9383795956af5a1"}, "created_at": 1666821807.4678936, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('SYSTEM_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INSERT_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L2_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__snowflake_Algorand_satellite"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Algorand_satellite_BLOCKCHAIN__CREATOR__ADDRESS.c70c222a56": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_27f58810e3990d85abd0195dd052e858\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCKCHAIN", "CREATOR", "ADDRESS"], "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_Algorand_satellite')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_Algorand_satellite"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_27f58810e3990d85abd0195dd052e858", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Algorand_satellite_BLOCKCHAIN__CREATOR__ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Algorand_satellite_BLOCKCHAIN__CREATOR__ADDRESS.c70c222a56", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_27f58810e3990d85abd0195dd052e858.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Algorand_satellite.yml", "name": "dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Algorand_satellite_BLOCKCHAIN__CREATOR__ADDRESS", "alias": "snowflake_Algorand_satellite_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_Algorand_satellite"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Algorand_satellite.yml\\dbt_utils_unique_combination_o_27f58810e3990d85abd0195dd052e858.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_27f58810e3990d85abd0195dd052e858"}, "created_at": 1666821807.4759014, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCKCHAIN, CREATOR, ADDRESS\n    from CROSSCHAIN_DEV.silver_crosschain.snowflake_Algorand_satellite\n    group by BLOCKCHAIN, CREATOR, ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver_crosschain__snowflake_Algorand_satellite"}, "test.crosschain_models.not_null_silver__tags_contract_address_eth_ADDRESS.bc158c86c7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_contract_address_eth')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_contract_address_eth"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "not_null_silver__tags_contract_address_eth_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver__tags_contract_address_eth_ADDRESS.bc158c86c7", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__tags_contract_address_eth_ADDRESS.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_contract_address_eth.yml", "name": "not_null_silver__tags_contract_address_eth_ADDRESS", "alias": "tags_contract_address_eth_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_contract_address_eth"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_contract_address_eth.yml\\not_null_silver__tags_contract_address_eth_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.483912, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver.tags_contract_address_eth\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_contract_address_eth"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_eth_ADDRESS__STRING__VARCHAR.851a1c22db": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4a7c2a601c565f220dbad0785a48a455\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_contract_address_eth')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_contract_address_eth"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4a7c2a601c565f220dbad0785a48a455", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_eth_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_eth_ADDRESS__STRING__VARCHAR.851a1c22db", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_4a7c2a601c565f220dbad0785a48a455.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_contract_address_eth.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_eth_ADDRESS__STRING__VARCHAR", "alias": "tags_contract_address_eth_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_contract_address_eth"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_contract_address_eth.yml\\dbt_expectations_expect_column_4a7c2a601c565f220dbad0785a48a455.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_4a7c2a601c565f220dbad0785a48a455"}, "created_at": 1666821807.483912, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('START_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('END_DATE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_contract_address_eth"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_eth_ADDRESS__0_xX_0_9a_fA_F_.0148e19762": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c32adffa8e07a1d3ab91d1961ab4e8a1\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_contract_address_eth')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_contract_address_eth"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c32adffa8e07a1d3ab91d1961ab4e8a1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_eth_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_eth_ADDRESS__0_xX_0_9a_fA_F_.0148e19762", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_c32adffa8e07a1d3ab91d1961ab4e8a1.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_contract_address_eth.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_eth_ADDRESS__0_xX_0_9a_fA_F_", "alias": "tags_contract_address_eth_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_contract_address_eth"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_contract_address_eth.yml\\dbt_expectations_expect_column_c32adffa8e07a1d3ab91d1961ab4e8a1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c32adffa8e07a1d3ab91d1961ab4e8a1"}, "created_at": 1666821807.4918141, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.silver.tags_contract_address_eth\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_contract_address_eth"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_contract_address_eth_ADDRESS.636c50b1d4": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7cd10ca5c21923d9d7960cc3d9629364\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS"], "model": "{{ get_where_subquery(ref('silver__tags_contract_address_eth')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_contract_address_eth"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7cd10ca5c21923d9d7960cc3d9629364", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_utils_unique_combination_of_columns_silver__tags_contract_address_eth_ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_contract_address_eth_ADDRESS.636c50b1d4", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_7cd10ca5c21923d9d7960cc3d9629364.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_contract_address_eth.yml", "name": "dbt_utils_unique_combination_of_columns_silver__tags_contract_address_eth_ADDRESS", "alias": "tags_contract_address_eth_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_contract_address_eth"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_contract_address_eth.yml\\dbt_utils_unique_combination_o_7cd10ca5c21923d9d7960cc3d9629364.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7cd10ca5c21923d9d7960cc3d9629364"}, "created_at": 1666821807.4998152, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS\n    from CROSSCHAIN_DEV.silver.tags_contract_address_eth\n    group by ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__tags_contract_address_eth"}, "test.crosschain_models.not_null_silver_crosschain__snowflake_Osmosis_satellite_ADDRESS.7aae4b3526": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_Osmosis_satellite')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_Osmosis_satellite"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "not_null_silver_crosschain__snowflake_Osmosis_satellite_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__snowflake_Osmosis_satellite_ADDRESS.7aae4b3526", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__snowflake_Osmosis_satellite_ADDRESS.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Osmosis_satellite.yml", "name": "not_null_silver_crosschain__snowflake_Osmosis_satellite_ADDRESS", "alias": "snowflake_Osmosis_satellite_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_Osmosis_satellite"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Osmosis_satellite.yml\\not_null_silver_crosschain__snowflake_Osmosis_satellite_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.5087519, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver_crosschain.snowflake_Osmosis_satellite\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__snowflake_Osmosis_satellite"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Osmosis_satellite_ADDRESS__STRING__VARCHAR.e280a0e9f9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_178c5416f0c18b69a8ad26061b7e879a\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_Osmosis_satellite')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_Osmosis_satellite"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_178c5416f0c18b69a8ad26061b7e879a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Osmosis_satellite_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Osmosis_satellite_ADDRESS__STRING__VARCHAR.e280a0e9f9", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_178c5416f0c18b69a8ad26061b7e879a.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Osmosis_satellite.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Osmosis_satellite_ADDRESS__STRING__VARCHAR", "alias": "snowflake_Osmosis_satellite_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_Osmosis_satellite"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Osmosis_satellite.yml\\dbt_expectations_expect_column_178c5416f0c18b69a8ad26061b7e879a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_178c5416f0c18b69a8ad26061b7e879a"}, "created_at": 1666821807.5087519, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('SYSTEM_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INSERT_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L2_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__snowflake_Osmosis_satellite"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Osmosis_satellite_BLOCKCHAIN__CREATOR__ADDRESS.d5983929c2": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_94ba98f351bcdd8c67e9a912fca7a4fe\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCKCHAIN", "CREATOR", "ADDRESS"], "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_Osmosis_satellite')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_Osmosis_satellite"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_94ba98f351bcdd8c67e9a912fca7a4fe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Osmosis_satellite_BLOCKCHAIN__CREATOR__ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Osmosis_satellite_BLOCKCHAIN__CREATOR__ADDRESS.d5983929c2", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_94ba98f351bcdd8c67e9a912fca7a4fe.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Osmosis_satellite.yml", "name": "dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Osmosis_satellite_BLOCKCHAIN__CREATOR__ADDRESS", "alias": "snowflake_Osmosis_satellite_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_Osmosis_satellite"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Osmosis_satellite.yml\\dbt_utils_unique_combination_o_94ba98f351bcdd8c67e9a912fca7a4fe.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_94ba98f351bcdd8c67e9a912fca7a4fe"}, "created_at": 1666821807.5087519, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCKCHAIN, CREATOR, ADDRESS\n    from CROSSCHAIN_DEV.silver_crosschain.snowflake_Osmosis_satellite\n    group by BLOCKCHAIN, CREATOR, ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver_crosschain__snowflake_Osmosis_satellite"}, "test.crosschain_models.not_null_silver__asset_metadata_coin_gecko_ID.9cc8e7c8fe": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ID", "model": "{{ get_where_subquery(ref('silver__asset_metadata_coin_gecko')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__asset_metadata_coin_gecko"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "asset_metadata", "not_null_silver__asset_metadata_coin_gecko_ID"], "unique_id": "test.crosschain_models.not_null_silver__asset_metadata_coin_gecko_ID.9cc8e7c8fe", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__asset_metadata_coin_gecko_ID.sql", "original_file_path": "models\\silver\\asset_metadata\\silver__asset_metadata_coin_gecko.yml", "name": "not_null_silver__asset_metadata_coin_gecko_ID", "alias": "asset_metadata_coin_gecko_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__asset_metadata_coin_gecko"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\asset_metadata\\silver__asset_metadata_coin_gecko.yml\\not_null_silver__asset_metadata_coin_gecko_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.5403123, "compiled_sql": "\n    \n    \n\n\n\nselect ID\nfrom CROSSCHAIN_DEV.silver.asset_metadata_coin_gecko\nwhere ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ID", "file_key_name": "models.silver__asset_metadata_coin_gecko"}, "test.crosschain_models.not_null_silver__asset_metadata_coin_gecko_NAME.1a9f576756": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NAME", "model": "{{ get_where_subquery(ref('silver__asset_metadata_coin_gecko')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__asset_metadata_coin_gecko"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "asset_metadata", "not_null_silver__asset_metadata_coin_gecko_NAME"], "unique_id": "test.crosschain_models.not_null_silver__asset_metadata_coin_gecko_NAME.1a9f576756", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__asset_metadata_coin_gecko_NAME.sql", "original_file_path": "models\\silver\\asset_metadata\\silver__asset_metadata_coin_gecko.yml", "name": "not_null_silver__asset_metadata_coin_gecko_NAME", "alias": "asset_metadata_coin_gecko_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__asset_metadata_coin_gecko"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\asset_metadata\\silver__asset_metadata_coin_gecko.yml\\not_null_silver__asset_metadata_coin_gecko_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.5403123, "compiled_sql": "\n    \n    \n\n\n\nselect NAME\nfrom CROSSCHAIN_DEV.silver.asset_metadata_coin_gecko\nwhere NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NAME", "file_key_name": "models.silver__asset_metadata_coin_gecko"}, "test.crosschain_models.not_null_silver__asset_metadata_coin_gecko_SYMBOL.6abaf78cb3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SYMBOL", "model": "{{ get_where_subquery(ref('silver__asset_metadata_coin_gecko')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__asset_metadata_coin_gecko"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "asset_metadata", "not_null_silver__asset_metadata_coin_gecko_SYMBOL"], "unique_id": "test.crosschain_models.not_null_silver__asset_metadata_coin_gecko_SYMBOL.6abaf78cb3", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__asset_metadata_coin_gecko_SYMBOL.sql", "original_file_path": "models\\silver\\asset_metadata\\silver__asset_metadata_coin_gecko.yml", "name": "not_null_silver__asset_metadata_coin_gecko_SYMBOL", "alias": "asset_metadata_coin_gecko_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__asset_metadata_coin_gecko"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\asset_metadata\\silver__asset_metadata_coin_gecko.yml\\not_null_silver__asset_metadata_coin_gecko_SYMBOL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.5403123, "compiled_sql": "\n    \n    \n\n\n\nselect SYMBOL\nfrom CROSSCHAIN_DEV.silver.asset_metadata_coin_gecko\nwhere SYMBOL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SYMBOL", "file_key_name": "models.silver__asset_metadata_coin_gecko"}, "test.crosschain_models.not_null_silver__asset_metadata_coin_gecko_PLATFORM.990cfa7d0b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"token_address is not null\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PLATFORM", "model": "{{ get_where_subquery(ref('silver__asset_metadata_coin_gecko')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__asset_metadata_coin_gecko"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "token_address is not null", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "asset_metadata", "not_null_silver__asset_metadata_coin_gecko_PLATFORM"], "unique_id": "test.crosschain_models.not_null_silver__asset_metadata_coin_gecko_PLATFORM.990cfa7d0b", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__asset_metadata_coin_gecko_PLATFORM.sql", "original_file_path": "models\\silver\\asset_metadata\\silver__asset_metadata_coin_gecko.yml", "name": "not_null_silver__asset_metadata_coin_gecko_PLATFORM", "alias": "asset_metadata_coin_gecko_PLATFORM", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__asset_metadata_coin_gecko"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\asset_metadata\\silver__asset_metadata_coin_gecko.yml\\not_null_silver__asset_metadata_coin_gecko_PLATFORM.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "token_address is not null"}, "created_at": 1666821807.5403123, "compiled_sql": "\n    \n    \n\n\n\nselect PLATFORM\nfrom (select * from CROSSCHAIN_DEV.silver.asset_metadata_coin_gecko where token_address is not null) dbt_subquery\nwhere PLATFORM is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM", "file_key_name": "models.silver__asset_metadata_coin_gecko"}, "test.crosschain_models.not_null_silver__asset_metadata_coin_gecko__INSERTED_TIMESTAMP.c4f0e940b7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__asset_metadata_coin_gecko')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__asset_metadata_coin_gecko"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "asset_metadata", "not_null_silver__asset_metadata_coin_gecko__INSERTED_TIMESTAMP"], "unique_id": "test.crosschain_models.not_null_silver__asset_metadata_coin_gecko__INSERTED_TIMESTAMP.c4f0e940b7", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__asset_metadata_coin_gecko__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\asset_metadata\\silver__asset_metadata_coin_gecko.yml", "name": "not_null_silver__asset_metadata_coin_gecko__INSERTED_TIMESTAMP", "alias": "asset_metadata_coin_gecko", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__asset_metadata_coin_gecko"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\asset_metadata\\silver__asset_metadata_coin_gecko.yml\\not_null_silver__asset_metadata_coin_gecko__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.5403123, "compiled_sql": "\n    \n    \n\n\n\nselect _INSERTED_TIMESTAMP\nfrom CROSSCHAIN_DEV.silver.asset_metadata_coin_gecko\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__asset_metadata_coin_gecko"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__asset_metadata_coin_gecko_ID__TOKEN_ADDRESS.a8199a41f6": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_286649ee286b061f55d0c32960509a6d\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ID", "TOKEN_ADDRESS"], "model": "{{ get_where_subquery(ref('silver__asset_metadata_coin_gecko')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__asset_metadata_coin_gecko"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_286649ee286b061f55d0c32960509a6d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["crosschain_models", "silver", "asset_metadata", "dbt_utils_unique_combination_of_columns_silver__asset_metadata_coin_gecko_ID__TOKEN_ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__asset_metadata_coin_gecko_ID__TOKEN_ADDRESS.a8199a41f6", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_286649ee286b061f55d0c32960509a6d.sql", "original_file_path": "models\\silver\\asset_metadata\\silver__asset_metadata_coin_gecko.yml", "name": "dbt_utils_unique_combination_of_columns_silver__asset_metadata_coin_gecko_ID__TOKEN_ADDRESS", "alias": "asset_metadata_coin_gecko_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__asset_metadata_coin_gecko"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\asset_metadata\\silver__asset_metadata_coin_gecko.yml\\dbt_utils_unique_combination_o_286649ee286b061f55d0c32960509a6d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_286649ee286b061f55d0c32960509a6d"}, "created_at": 1666821807.5403123, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ID, TOKEN_ADDRESS\n    from CROSSCHAIN_DEV.silver.asset_metadata_coin_gecko\n    group by ID, TOKEN_ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__asset_metadata_coin_gecko"}, "test.crosschain_models.not_null_silver__tags_contract_address_polygon_ADDRESS.5e8971ba99": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_contract_address_polygon')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_contract_address_polygon"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "tags", "Polygon", "not_null_silver__tags_contract_address_polygon_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver__tags_contract_address_polygon_ADDRESS.5e8971ba99", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__tags_contract_address_polygon_ADDRESS.sql", "original_file_path": "models\\silver\\tags\\Polygon\\silver__tags_contract_address_polygon.yml", "name": "not_null_silver__tags_contract_address_polygon_ADDRESS", "alias": "tags_contract_address_polygon_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_contract_address_polygon"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Polygon\\silver__tags_contract_address_polygon.yml\\not_null_silver__tags_contract_address_polygon_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.555485, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver.tags_contract_address_polygon\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_contract_address_polygon"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_polygon_ADDRESS__STRING__VARCHAR.473432ebfb": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e31149dad991d22ab129b267224ca116\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_contract_address_polygon')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_contract_address_polygon"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e31149dad991d22ab129b267224ca116", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "tags", "Polygon", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_polygon_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_polygon_ADDRESS__STRING__VARCHAR.473432ebfb", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_e31149dad991d22ab129b267224ca116.sql", "original_file_path": "models\\silver\\tags\\Polygon\\silver__tags_contract_address_polygon.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_polygon_ADDRESS__STRING__VARCHAR", "alias": "tags_contract_address_polygon_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_contract_address_polygon"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Polygon\\silver__tags_contract_address_polygon.yml\\dbt_expectations_expect_column_e31149dad991d22ab129b267224ca116.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e31149dad991d22ab129b267224ca116"}, "created_at": 1666821807.555485, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('START_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('END_DATE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_contract_address_polygon"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_polygon_ADDRESS__0_xX_0_9a_fA_F_.c8565696cf": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bd016e0b8205a1caaab71a4e95766cd5\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_contract_address_polygon')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_contract_address_polygon"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bd016e0b8205a1caaab71a4e95766cd5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["crosschain_models", "silver", "tags", "Polygon", "dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_polygon_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_polygon_ADDRESS__0_xX_0_9a_fA_F_.c8565696cf", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_bd016e0b8205a1caaab71a4e95766cd5.sql", "original_file_path": "models\\silver\\tags\\Polygon\\silver__tags_contract_address_polygon.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_polygon_ADDRESS__0_xX_0_9a_fA_F_", "alias": "tags_contract_address_polygon_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_contract_address_polygon"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Polygon\\silver__tags_contract_address_polygon.yml\\dbt_expectations_expect_column_bd016e0b8205a1caaab71a4e95766cd5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_bd016e0b8205a1caaab71a4e95766cd5"}, "created_at": 1666821807.5634906, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.silver.tags_contract_address_polygon\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_contract_address_polygon"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_contract_address_polygon_ADDRESS.fbffea5810": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b665b56cab9343d444682059109a90e7\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS"], "model": "{{ get_where_subquery(ref('silver__tags_contract_address_polygon')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_contract_address_polygon"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b665b56cab9343d444682059109a90e7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["crosschain_models", "silver", "tags", "Polygon", "dbt_utils_unique_combination_of_columns_silver__tags_contract_address_polygon_ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_contract_address_polygon_ADDRESS.fbffea5810", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_b665b56cab9343d444682059109a90e7.sql", "original_file_path": "models\\silver\\tags\\Polygon\\silver__tags_contract_address_polygon.yml", "name": "dbt_utils_unique_combination_of_columns_silver__tags_contract_address_polygon_ADDRESS", "alias": "tags_contract_address_polygon_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_contract_address_polygon"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Polygon\\silver__tags_contract_address_polygon.yml\\dbt_utils_unique_combination_o_b665b56cab9343d444682059109a90e7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b665b56cab9343d444682059109a90e7"}, "created_at": 1666821807.573512, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS\n    from CROSSCHAIN_DEV.silver.tags_contract_address_polygon\n    group by ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__tags_contract_address_polygon"}, "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_ID.81e3fd83b3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ID", "model": "{{ get_where_subquery(ref('silver__hourly_prices_coin_market_cap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__hourly_prices_coin_market_cap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "hourly_prices", "not_null_silver__hourly_prices_coin_market_cap_ID"], "unique_id": "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_ID.81e3fd83b3", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__hourly_prices_coin_market_cap_ID.sql", "original_file_path": "models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.yml", "name": "not_null_silver__hourly_prices_coin_market_cap_ID", "alias": "hourly_prices_coin_market_cap_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_prices_coin_market_cap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.yml\\not_null_silver__hourly_prices_coin_market_cap_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.573512, "compiled_sql": "\n    \n    \n\n\n\nselect ID\nfrom CROSSCHAIN_DEV.silver.hourly_prices_coin_market_cap\nwhere ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ID", "file_key_name": "models.silver__hourly_prices_coin_market_cap"}, "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_RECORDED_HOUR.4bf12c012b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECORDED_HOUR", "model": "{{ get_where_subquery(ref('silver__hourly_prices_coin_market_cap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__hourly_prices_coin_market_cap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "hourly_prices", "not_null_silver__hourly_prices_coin_market_cap_RECORDED_HOUR"], "unique_id": "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_RECORDED_HOUR.4bf12c012b", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__hourly_prices_coin_market_cap_RECORDED_HOUR.sql", "original_file_path": "models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.yml", "name": "not_null_silver__hourly_prices_coin_market_cap_RECORDED_HOUR", "alias": "hourly_prices_coin_market_cap_RECORDED_HOUR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_prices_coin_market_cap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.yml\\not_null_silver__hourly_prices_coin_market_cap_RECORDED_HOUR.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.573512, "compiled_sql": "\n    \n    \n\n\n\nselect RECORDED_HOUR\nfrom CROSSCHAIN_DEV.silver.hourly_prices_coin_market_cap\nwhere RECORDED_HOUR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RECORDED_HOUR", "file_key_name": "models.silver__hourly_prices_coin_market_cap"}, "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_OPEN.0afac19e4c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "OPEN", "model": "{{ get_where_subquery(ref('silver__hourly_prices_coin_market_cap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__hourly_prices_coin_market_cap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "hourly_prices", "not_null_silver__hourly_prices_coin_market_cap_OPEN"], "unique_id": "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_OPEN.0afac19e4c", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__hourly_prices_coin_market_cap_OPEN.sql", "original_file_path": "models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.yml", "name": "not_null_silver__hourly_prices_coin_market_cap_OPEN", "alias": "hourly_prices_coin_market_cap_OPEN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_prices_coin_market_cap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.yml\\not_null_silver__hourly_prices_coin_market_cap_OPEN.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.573512, "compiled_sql": "\n    \n    \n\n\n\nselect OPEN\nfrom CROSSCHAIN_DEV.silver.hourly_prices_coin_market_cap\nwhere OPEN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "OPEN", "file_key_name": "models.silver__hourly_prices_coin_market_cap"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_OPEN__FLOAT__DOUBLE.b9986d4560": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c6720a3d8d786af53b75009896bf8b0b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["FLOAT", "DOUBLE"], "column_name": "OPEN", "model": "{{ get_where_subquery(ref('silver__hourly_prices_coin_market_cap')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__hourly_prices_coin_market_cap"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c6720a3d8d786af53b75009896bf8b0b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "hourly_prices", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_OPEN__FLOAT__DOUBLE"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_OPEN__FLOAT__DOUBLE.b9986d4560", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_c6720a3d8d786af53b75009896bf8b0b.sql", "original_file_path": "models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_OPEN__FLOAT__DOUBLE", "alias": "hourly_prices_coin_market_cap_OPEN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_prices_coin_market_cap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.yml\\dbt_expectations_expect_column_c6720a3d8d786af53b75009896bf8b0b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c6720a3d8d786af53b75009896bf8b0b"}, "created_at": 1666821807.573512, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECORDED_HOUR' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OPEN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HIGH' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOW' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLOSE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VOLUME' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MARKET_CAP' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'OPEN'\n            and\n            relation_column_type not in ('FLOAT', 'DOUBLE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "OPEN", "file_key_name": "models.silver__hourly_prices_coin_market_cap"}, "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_HIGH.3375deccb4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "HIGH", "model": "{{ get_where_subquery(ref('silver__hourly_prices_coin_market_cap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__hourly_prices_coin_market_cap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "hourly_prices", "not_null_silver__hourly_prices_coin_market_cap_HIGH"], "unique_id": "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_HIGH.3375deccb4", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__hourly_prices_coin_market_cap_HIGH.sql", "original_file_path": "models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.yml", "name": "not_null_silver__hourly_prices_coin_market_cap_HIGH", "alias": "hourly_prices_coin_market_cap_HIGH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_prices_coin_market_cap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.yml\\not_null_silver__hourly_prices_coin_market_cap_HIGH.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.5891201, "compiled_sql": "\n    \n    \n\n\n\nselect HIGH\nfrom CROSSCHAIN_DEV.silver.hourly_prices_coin_market_cap\nwhere HIGH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "HIGH", "file_key_name": "models.silver__hourly_prices_coin_market_cap"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_HIGH__FLOAT__DOUBLE.fadb3ead13": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_64d35d0e1fcd333f33068f0f39d2f930\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["FLOAT", "DOUBLE"], "column_name": "HIGH", "model": "{{ get_where_subquery(ref('silver__hourly_prices_coin_market_cap')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__hourly_prices_coin_market_cap"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_64d35d0e1fcd333f33068f0f39d2f930", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "hourly_prices", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_HIGH__FLOAT__DOUBLE"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_HIGH__FLOAT__DOUBLE.fadb3ead13", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_64d35d0e1fcd333f33068f0f39d2f930.sql", "original_file_path": "models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_HIGH__FLOAT__DOUBLE", "alias": "hourly_prices_coin_market_cap_HIGH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_prices_coin_market_cap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.yml\\dbt_expectations_expect_column_64d35d0e1fcd333f33068f0f39d2f930.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_64d35d0e1fcd333f33068f0f39d2f930"}, "created_at": 1666821807.5891201, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECORDED_HOUR' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OPEN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HIGH' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOW' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLOSE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VOLUME' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MARKET_CAP' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'HIGH'\n            and\n            relation_column_type not in ('FLOAT', 'DOUBLE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "HIGH", "file_key_name": "models.silver__hourly_prices_coin_market_cap"}, "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_LOW.47b7c01027": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LOW", "model": "{{ get_where_subquery(ref('silver__hourly_prices_coin_market_cap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__hourly_prices_coin_market_cap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "hourly_prices", "not_null_silver__hourly_prices_coin_market_cap_LOW"], "unique_id": "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_LOW.47b7c01027", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__hourly_prices_coin_market_cap_LOW.sql", "original_file_path": "models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.yml", "name": "not_null_silver__hourly_prices_coin_market_cap_LOW", "alias": "hourly_prices_coin_market_cap_LOW", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_prices_coin_market_cap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.yml\\not_null_silver__hourly_prices_coin_market_cap_LOW.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.5891201, "compiled_sql": "\n    \n    \n\n\n\nselect LOW\nfrom CROSSCHAIN_DEV.silver.hourly_prices_coin_market_cap\nwhere LOW is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LOW", "file_key_name": "models.silver__hourly_prices_coin_market_cap"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_LOW__FLOAT__DOUBLE.306784522f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_aa8b181a4df59b6d7a83ea391d7b66f7\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["FLOAT", "DOUBLE"], "column_name": "LOW", "model": "{{ get_where_subquery(ref('silver__hourly_prices_coin_market_cap')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__hourly_prices_coin_market_cap"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_aa8b181a4df59b6d7a83ea391d7b66f7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "hourly_prices", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_LOW__FLOAT__DOUBLE"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_LOW__FLOAT__DOUBLE.306784522f", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_aa8b181a4df59b6d7a83ea391d7b66f7.sql", "original_file_path": "models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_LOW__FLOAT__DOUBLE", "alias": "hourly_prices_coin_market_cap_LOW", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_prices_coin_market_cap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.yml\\dbt_expectations_expect_column_aa8b181a4df59b6d7a83ea391d7b66f7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_aa8b181a4df59b6d7a83ea391d7b66f7"}, "created_at": 1666821807.5891201, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECORDED_HOUR' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OPEN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HIGH' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOW' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLOSE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VOLUME' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MARKET_CAP' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LOW'\n            and\n            relation_column_type not in ('FLOAT', 'DOUBLE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LOW", "file_key_name": "models.silver__hourly_prices_coin_market_cap"}, "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_CLOSE.745c907e01": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CLOSE", "model": "{{ get_where_subquery(ref('silver__hourly_prices_coin_market_cap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__hourly_prices_coin_market_cap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "hourly_prices", "not_null_silver__hourly_prices_coin_market_cap_CLOSE"], "unique_id": "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_CLOSE.745c907e01", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__hourly_prices_coin_market_cap_CLOSE.sql", "original_file_path": "models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.yml", "name": "not_null_silver__hourly_prices_coin_market_cap_CLOSE", "alias": "hourly_prices_coin_market_cap_CLOSE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_prices_coin_market_cap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.yml\\not_null_silver__hourly_prices_coin_market_cap_CLOSE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.6047482, "compiled_sql": "\n    \n    \n\n\n\nselect CLOSE\nfrom CROSSCHAIN_DEV.silver.hourly_prices_coin_market_cap\nwhere CLOSE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CLOSE", "file_key_name": "models.silver__hourly_prices_coin_market_cap"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_CLOSE__FLOAT__DOUBLE.a0524933c6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_18ad3c378a0cdc9df4a4edf8d039b3ba\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["FLOAT", "DOUBLE"], "column_name": "CLOSE", "model": "{{ get_where_subquery(ref('silver__hourly_prices_coin_market_cap')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__hourly_prices_coin_market_cap"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_18ad3c378a0cdc9df4a4edf8d039b3ba", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "hourly_prices", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_CLOSE__FLOAT__DOUBLE"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_CLOSE__FLOAT__DOUBLE.a0524933c6", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_18ad3c378a0cdc9df4a4edf8d039b3ba.sql", "original_file_path": "models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_CLOSE__FLOAT__DOUBLE", "alias": "hourly_prices_coin_market_cap_CLOSE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_prices_coin_market_cap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.yml\\dbt_expectations_expect_column_18ad3c378a0cdc9df4a4edf8d039b3ba.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_18ad3c378a0cdc9df4a4edf8d039b3ba"}, "created_at": 1666821807.6047482, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECORDED_HOUR' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OPEN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HIGH' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOW' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLOSE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VOLUME' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MARKET_CAP' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CLOSE'\n            and\n            relation_column_type not in ('FLOAT', 'DOUBLE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CLOSE", "file_key_name": "models.silver__hourly_prices_coin_market_cap"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_VOLUME__NUMBER__INTEGER.0175a85069": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_830c26b86c6f96810ac27f0bc8d16319\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "INTEGER"], "column_name": "VOLUME", "model": "{{ get_where_subquery(ref('silver__hourly_prices_coin_market_cap')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__hourly_prices_coin_market_cap"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_830c26b86c6f96810ac27f0bc8d16319", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "hourly_prices", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_VOLUME__NUMBER__INTEGER"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_VOLUME__NUMBER__INTEGER.0175a85069", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_830c26b86c6f96810ac27f0bc8d16319.sql", "original_file_path": "models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_VOLUME__NUMBER__INTEGER", "alias": "hourly_prices_coin_market_cap_VOLUME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_prices_coin_market_cap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.yml\\dbt_expectations_expect_column_830c26b86c6f96810ac27f0bc8d16319.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_830c26b86c6f96810ac27f0bc8d16319"}, "created_at": 1666821807.6047482, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECORDED_HOUR' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OPEN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HIGH' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOW' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLOSE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VOLUME' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MARKET_CAP' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'VOLUME'\n            and\n            relation_column_type not in ('NUMBER', 'INTEGER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "VOLUME", "file_key_name": "models.silver__hourly_prices_coin_market_cap"}, "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_MARKET_CAP.151b40e5a9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MARKET_CAP", "model": "{{ get_where_subquery(ref('silver__hourly_prices_coin_market_cap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__hourly_prices_coin_market_cap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "hourly_prices", "not_null_silver__hourly_prices_coin_market_cap_MARKET_CAP"], "unique_id": "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_MARKET_CAP.151b40e5a9", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__hourly_prices_coin_market_cap_MARKET_CAP.sql", "original_file_path": "models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.yml", "name": "not_null_silver__hourly_prices_coin_market_cap_MARKET_CAP", "alias": "hourly_prices_coin_market_cap_MARKET_CAP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_prices_coin_market_cap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.yml\\not_null_silver__hourly_prices_coin_market_cap_MARKET_CAP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.6047482, "compiled_sql": "\n    \n    \n\n\n\nselect MARKET_CAP\nfrom CROSSCHAIN_DEV.silver.hourly_prices_coin_market_cap\nwhere MARKET_CAP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "MARKET_CAP", "file_key_name": "models.silver__hourly_prices_coin_market_cap"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_MARKET_CAP__NUMBER__INTEGER.6bfce9ea83": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_33f405bdc9b9bb74b2af9cff3fcde656\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "INTEGER"], "column_name": "MARKET_CAP", "model": "{{ get_where_subquery(ref('silver__hourly_prices_coin_market_cap')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__hourly_prices_coin_market_cap"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_33f405bdc9b9bb74b2af9cff3fcde656", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "hourly_prices", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_MARKET_CAP__NUMBER__INTEGER"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_MARKET_CAP__NUMBER__INTEGER.6bfce9ea83", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_33f405bdc9b9bb74b2af9cff3fcde656.sql", "original_file_path": "models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_MARKET_CAP__NUMBER__INTEGER", "alias": "hourly_prices_coin_market_cap_MARKET_CAP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_prices_coin_market_cap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.yml\\dbt_expectations_expect_column_33f405bdc9b9bb74b2af9cff3fcde656.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_33f405bdc9b9bb74b2af9cff3fcde656"}, "created_at": 1666821807.6047482, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECORDED_HOUR' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OPEN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HIGH' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOW' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLOSE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('VOLUME' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MARKET_CAP' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MARKET_CAP'\n            and\n            relation_column_type not in ('NUMBER', 'INTEGER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "MARKET_CAP", "file_key_name": "models.silver__hourly_prices_coin_market_cap"}, "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap__INSERTED_TIMESTAMP.5729e3c243": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver__hourly_prices_6d532028d4b6ff64b214e629c2770acd\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__hourly_prices_coin_market_cap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__hourly_prices_coin_market_cap"]}, "config": {"enabled": true, "alias": "not_null_silver__hourly_prices_6d532028d4b6ff64b214e629c2770acd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "hourly_prices", "not_null_silver__hourly_prices_coin_market_cap__INSERTED_TIMESTAMP"], "unique_id": "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap__INSERTED_TIMESTAMP.5729e3c243", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__hourly_prices_6d532028d4b6ff64b214e629c2770acd.sql", "original_file_path": "models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.yml", "name": "not_null_silver__hourly_prices_coin_market_cap__INSERTED_TIMESTAMP", "alias": "hourly_prices_coin_market_cap", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_prices_coin_market_cap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.yml\\not_null_silver__hourly_prices_6d532028d4b6ff64b214e629c2770acd.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_silver__hourly_prices_6d532028d4b6ff64b214e629c2770acd"}, "created_at": 1666821807.620693, "compiled_sql": "\n    \n    \n\n\n\nselect _INSERTED_TIMESTAMP\nfrom CROSSCHAIN_DEV.silver.hourly_prices_coin_market_cap\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__hourly_prices_coin_market_cap"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__hourly_prices_coin_market_cap_ID__RECORDED_HOUR.14f42f9016": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d5c346d94b7e3b437bacd22d2488008f\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ID", "RECORDED_HOUR"], "model": "{{ get_where_subquery(ref('silver__hourly_prices_coin_market_cap')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__hourly_prices_coin_market_cap"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d5c346d94b7e3b437bacd22d2488008f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["crosschain_models", "silver", "hourly_prices", "dbt_utils_unique_combination_of_columns_silver__hourly_prices_coin_market_cap_ID__RECORDED_HOUR"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__hourly_prices_coin_market_cap_ID__RECORDED_HOUR.14f42f9016", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_d5c346d94b7e3b437bacd22d2488008f.sql", "original_file_path": "models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.yml", "name": "dbt_utils_unique_combination_of_columns_silver__hourly_prices_coin_market_cap_ID__RECORDED_HOUR", "alias": "hourly_prices_coin_market_cap_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_prices_coin_market_cap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\hourly_prices\\silver__hourly_prices_coin_market_cap.yml\\dbt_utils_unique_combination_o_d5c346d94b7e3b437bacd22d2488008f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d5c346d94b7e3b437bacd22d2488008f"}, "created_at": 1666821807.620693, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ID, RECORDED_HOUR\n    from CROSSCHAIN_DEV.silver.hourly_prices_coin_market_cap\n    group by ID, RECORDED_HOUR\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__hourly_prices_coin_market_cap"}, "test.crosschain_models.not_null_silver_crosschain__snowflake_Near_satellite_ADDRESS.a7558af6f3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_Near_satellite')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_Near_satellite"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "not_null_silver_crosschain__snowflake_Near_satellite_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__snowflake_Near_satellite_ADDRESS.a7558af6f3", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__snowflake_Near_satellite_ADDRESS.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Near_satellite.yml", "name": "not_null_silver_crosschain__snowflake_Near_satellite_ADDRESS", "alias": "snowflake_Near_satellite_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_Near_satellite"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Near_satellite.yml\\not_null_silver_crosschain__snowflake_Near_satellite_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.620693, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver_crosschain.snowflake_Near_satellite\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__snowflake_Near_satellite"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Near_satellite_ADDRESS__STRING__VARCHAR.cbff05943f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d526f20072a9d1f58434de094cd23054\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_Near_satellite')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_Near_satellite"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d526f20072a9d1f58434de094cd23054", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Near_satellite_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Near_satellite_ADDRESS__STRING__VARCHAR.cbff05943f", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_d526f20072a9d1f58434de094cd23054.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Near_satellite.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Near_satellite_ADDRESS__STRING__VARCHAR", "alias": "snowflake_Near_satellite_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_Near_satellite"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Near_satellite.yml\\dbt_expectations_expect_column_d526f20072a9d1f58434de094cd23054.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d526f20072a9d1f58434de094cd23054"}, "created_at": 1666821807.620693, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('SYSTEM_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INSERT_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L2_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__snowflake_Near_satellite"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Near_satellite_BLOCKCHAIN__CREATOR__ADDRESS.75d2c769fa": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_de419465935bbcf6335850fe35535f0c\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCKCHAIN", "CREATOR", "ADDRESS"], "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_Near_satellite')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_Near_satellite"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_de419465935bbcf6335850fe35535f0c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Near_satellite_BLOCKCHAIN__CREATOR__ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Near_satellite_BLOCKCHAIN__CREATOR__ADDRESS.75d2c769fa", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_de419465935bbcf6335850fe35535f0c.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Near_satellite.yml", "name": "dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Near_satellite_BLOCKCHAIN__CREATOR__ADDRESS", "alias": "snowflake_Near_satellite_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_Near_satellite"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Near_satellite.yml\\dbt_utils_unique_combination_o_de419465935bbcf6335850fe35535f0c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_de419465935bbcf6335850fe35535f0c"}, "created_at": 1666821807.636448, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCKCHAIN, CREATOR, ADDRESS\n    from CROSSCHAIN_DEV.silver_crosschain.snowflake_Near_satellite\n    group by BLOCKCHAIN, CREATOR, ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver_crosschain__snowflake_Near_satellite"}, "test.crosschain_models.not_null_silver__tags_contract_address_optimism_ADDRESS.bb286d2156": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_contract_address_optimism')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_contract_address_optimism"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "tags", "Optimism", "not_null_silver__tags_contract_address_optimism_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver__tags_contract_address_optimism_ADDRESS.bb286d2156", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__tags_contract_address_optimism_ADDRESS.sql", "original_file_path": "models\\silver\\tags\\Optimism\\silver__tags_contract_address_optimism.yml", "name": "not_null_silver__tags_contract_address_optimism_ADDRESS", "alias": "tags_contract_address_optimism_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_contract_address_optimism"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Optimism\\silver__tags_contract_address_optimism.yml\\not_null_silver__tags_contract_address_optimism_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.6523764, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver.tags_contract_address_optimism\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_contract_address_optimism"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_optimism_ADDRESS__STRING__VARCHAR.d1f34fa4bc": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_16cf2795608e08805414e004a831f966\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_contract_address_optimism')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_contract_address_optimism"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_16cf2795608e08805414e004a831f966", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "tags", "Optimism", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_optimism_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_optimism_ADDRESS__STRING__VARCHAR.d1f34fa4bc", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_16cf2795608e08805414e004a831f966.sql", "original_file_path": "models\\silver\\tags\\Optimism\\silver__tags_contract_address_optimism.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_optimism_ADDRESS__STRING__VARCHAR", "alias": "tags_contract_address_optimism_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_contract_address_optimism"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Optimism\\silver__tags_contract_address_optimism.yml\\dbt_expectations_expect_column_16cf2795608e08805414e004a831f966.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_16cf2795608e08805414e004a831f966"}, "created_at": 1666821807.6523764, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('START_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('END_DATE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_contract_address_optimism"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_optimism_ADDRESS__0_xX_0_9a_fA_F_.f01de82cce": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4a55f84bd534e14f9cfc54e0b7930e25\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_contract_address_optimism')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_contract_address_optimism"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4a55f84bd534e14f9cfc54e0b7930e25", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["crosschain_models", "silver", "tags", "Optimism", "dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_optimism_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_optimism_ADDRESS__0_xX_0_9a_fA_F_.f01de82cce", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_4a55f84bd534e14f9cfc54e0b7930e25.sql", "original_file_path": "models\\silver\\tags\\Optimism\\silver__tags_contract_address_optimism.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_optimism_ADDRESS__0_xX_0_9a_fA_F_", "alias": "tags_contract_address_optimism_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_contract_address_optimism"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Optimism\\silver__tags_contract_address_optimism.yml\\dbt_expectations_expect_column_4a55f84bd534e14f9cfc54e0b7930e25.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_4a55f84bd534e14f9cfc54e0b7930e25"}, "created_at": 1666821807.6653574, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.silver.tags_contract_address_optimism\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_contract_address_optimism"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_contract_address_optimism_ADDRESS.e7827fdf84": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_afee28b594b3a213dda42def2f7f36de\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS"], "model": "{{ get_where_subquery(ref('silver__tags_contract_address_optimism')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_contract_address_optimism"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_afee28b594b3a213dda42def2f7f36de", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["crosschain_models", "silver", "tags", "Optimism", "dbt_utils_unique_combination_of_columns_silver__tags_contract_address_optimism_ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_contract_address_optimism_ADDRESS.e7827fdf84", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_afee28b594b3a213dda42def2f7f36de.sql", "original_file_path": "models\\silver\\tags\\Optimism\\silver__tags_contract_address_optimism.yml", "name": "dbt_utils_unique_combination_of_columns_silver__tags_contract_address_optimism_ADDRESS", "alias": "tags_contract_address_optimism_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_contract_address_optimism"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Optimism\\silver__tags_contract_address_optimism.yml\\dbt_utils_unique_combination_o_afee28b594b3a213dda42def2f7f36de.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_afee28b594b3a213dda42def2f7f36de"}, "created_at": 1666821807.6733017, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS\n    from CROSSCHAIN_DEV.silver.tags_contract_address_optimism\n    group by ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__tags_contract_address_optimism"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_BLOCKCHAIN.6703493e03": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_crosschain__la_ba45e4d2c11dce9207a1d5eb6b4fe5a8\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_avalanche')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_avalanche"]}, "config": {"enabled": true, "alias": "not_null_silver_crosschain__la_ba45e4d2c11dce9207a1d5eb6b4fe5a8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_avalanche_BLOCKCHAIN"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_BLOCKCHAIN.6703493e03", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__la_ba45e4d2c11dce9207a1d5eb6b4fe5a8.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.yml", "name": "not_null_silver_crosschain__labels_contracts_avalanche_BLOCKCHAIN", "alias": "labels_contracts_avalanche_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_avalanche"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.yml\\not_null_silver_crosschain__la_ba45e4d2c11dce9207a1d5eb6b4fe5a8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_silver_crosschain__la_ba45e4d2c11dce9207a1d5eb6b4fe5a8"}, "created_at": 1666821807.7024813, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCKCHAIN\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_avalanche\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCKCHAIN", "file_key_name": "models.silver_crosschain__labels_contracts_avalanche"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_avalanche_BLOCKCHAIN__avalanche.006b5d970f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d61da863f5b57ac7403acd5b39cfa45d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["avalanche"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_avalanche')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_avalanche"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d61da863f5b57ac7403acd5b39cfa45d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_avalanche_BLOCKCHAIN__avalanche"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_avalanche_BLOCKCHAIN__avalanche.006b5d970f", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_d61da863f5b57ac7403acd5b39cfa45d.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_avalanche_BLOCKCHAIN__avalanche", "alias": "labels_contracts_avalanche_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_avalanche"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.yml\\dbt_expectations_expect_column_d61da863f5b57ac7403acd5b39cfa45d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d61da863f5b57ac7403acd5b39cfa45d"}, "created_at": 1666821807.7055054, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        BLOCKCHAIN as value_field\n\n    from CROSSCHAIN_DEV.silver_crosschain.labels_contracts_avalanche\n    \n\n),\nset_values as (\n\n    select\n        cast('avalanche' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCKCHAIN", "file_key_name": "models.silver_crosschain__labels_contracts_avalanche"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_ADDRESS.63f0b2baae": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_avalanche')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_avalanche"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_avalanche_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_ADDRESS.63f0b2baae", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__labels_contracts_avalanche_ADDRESS.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.yml", "name": "not_null_silver_crosschain__labels_contracts_avalanche_ADDRESS", "alias": "labels_contracts_avalanche_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_avalanche"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.yml\\not_null_silver_crosschain__labels_contracts_avalanche_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.7135248, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_avalanche\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__labels_contracts_avalanche"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_avalanche_ADDRESS__STRING__VARCHAR.e574633947": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_734a5b530e65b067addd6b3416ecc208\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_avalanche')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_avalanche"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_734a5b530e65b067addd6b3416ecc208", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_avalanche_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_avalanche_ADDRESS__STRING__VARCHAR.e574633947", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_734a5b530e65b067addd6b3416ecc208.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_avalanche_ADDRESS__STRING__VARCHAR", "alias": "labels_contracts_avalanche_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_avalanche"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.yml\\dbt_expectations_expect_column_734a5b530e65b067addd6b3416ecc208.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_734a5b530e65b067addd6b3416ecc208"}, "created_at": 1666821807.7245874, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('SYSTEM_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INSERT_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L2_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__labels_contracts_avalanche"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_avalanche_ADDRESS__0_xX_0_9a_fA_F_.a65cf64677": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e4ed9e234780cadcf681b0b54db9d420\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_avalanche')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_avalanche"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e4ed9e234780cadcf681b0b54db9d420", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_avalanche_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_avalanche_ADDRESS__0_xX_0_9a_fA_F_.a65cf64677", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_e4ed9e234780cadcf681b0b54db9d420.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_avalanche_ADDRESS__0_xX_0_9a_fA_F_", "alias": "labels_contracts_avalanche_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_avalanche"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.yml\\dbt_expectations_expect_column_e4ed9e234780cadcf681b0b54db9d420.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e4ed9e234780cadcf681b0b54db9d420"}, "created_at": 1666821807.7245874, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.silver_crosschain.labels_contracts_avalanche\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__labels_contracts_avalanche"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_CREATOR.b2139e1096": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_avalanche')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_avalanche"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_avalanche_CREATOR"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_CREATOR.b2139e1096", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__labels_contracts_avalanche_CREATOR.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.yml", "name": "not_null_silver_crosschain__labels_contracts_avalanche_CREATOR", "alias": "labels_contracts_avalanche_CREATOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_avalanche"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.yml\\not_null_silver_crosschain__labels_contracts_avalanche_CREATOR.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.750462, "compiled_sql": "\n    \n    \n\n\n\nselect CREATOR\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_avalanche\nwhere CREATOR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR", "file_key_name": "models.silver_crosschain__labels_contracts_avalanche"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_L1_LABEL.700360d60c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "L1_LABEL", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_avalanche')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_avalanche"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_avalanche_L1_LABEL"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_L1_LABEL.700360d60c", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__labels_contracts_avalanche_L1_LABEL.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.yml", "name": "not_null_silver_crosschain__labels_contracts_avalanche_L1_LABEL", "alias": "labels_contracts_avalanche_L1_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_avalanche"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.yml\\not_null_silver_crosschain__labels_contracts_avalanche_L1_LABEL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.750462, "compiled_sql": "\n    \n    \n\n\n\nselect L1_LABEL\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_avalanche\nwhere L1_LABEL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "L1_LABEL", "file_key_name": "models.silver_crosschain__labels_contracts_avalanche"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_avalanche_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.942796fe32": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6288d31df95d4b17a52845074be68f9d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["flotsam", "nft", "defi", "dex", "cex", "dapp", "token", "operator", "layer2", "chadmin"], "column_name": "L1_LABEL", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_avalanche')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_avalanche"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6288d31df95d4b17a52845074be68f9d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_avalanche_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_avalanche_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.942796fe32", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_6288d31df95d4b17a52845074be68f9d.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_avalanche_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin", "alias": "labels_contracts_avalanche_L1_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_avalanche"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.yml\\dbt_expectations_expect_column_6288d31df95d4b17a52845074be68f9d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6288d31df95d4b17a52845074be68f9d"}, "created_at": 1666821807.758505, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        L1_LABEL as value_field\n\n    from CROSSCHAIN_DEV.silver_crosschain.labels_contracts_avalanche\n    \n\n),\nset_values as (\n\n    select\n        cast('flotsam' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('nft' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('defi' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('dex' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('cex' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('dapp' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('token' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('operator' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('layer2' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('chadmin' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "L1_LABEL", "file_key_name": "models.silver_crosschain__labels_contracts_avalanche"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_L2_LABEL.d1ef269c45": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "L2_LABEL", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_avalanche')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_avalanche"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_avalanche_L2_LABEL"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_L2_LABEL.d1ef269c45", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__labels_contracts_avalanche_L2_LABEL.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.yml", "name": "not_null_silver_crosschain__labels_contracts_avalanche_L2_LABEL", "alias": "labels_contracts_avalanche_L2_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_avalanche"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.yml\\not_null_silver_crosschain__labels_contracts_avalanche_L2_LABEL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.7748008, "compiled_sql": "\n    \n    \n\n\n\nselect L2_LABEL\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_avalanche\nwhere L2_LABEL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "L2_LABEL", "file_key_name": "models.silver_crosschain__labels_contracts_avalanche"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_ADDRESS_NAME.9ffb95412b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_crosschain__la_060efb497f7eeb775fffc60241f1a60e\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS_NAME", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_avalanche')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_avalanche"]}, "config": {"enabled": true, "alias": "not_null_silver_crosschain__la_060efb497f7eeb775fffc60241f1a60e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_avalanche_ADDRESS_NAME"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_ADDRESS_NAME.9ffb95412b", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__la_060efb497f7eeb775fffc60241f1a60e.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.yml", "name": "not_null_silver_crosschain__labels_contracts_avalanche_ADDRESS_NAME", "alias": "labels_contracts_avalanche_ADDRESS_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_avalanche"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.yml\\not_null_silver_crosschain__la_060efb497f7eeb775fffc60241f1a60e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_silver_crosschain__la_060efb497f7eeb775fffc60241f1a60e"}, "created_at": 1666821807.7748008, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS_NAME\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_avalanche\nwhere ADDRESS_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS_NAME", "file_key_name": "models.silver_crosschain__labels_contracts_avalanche"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_PROJECT_NAME.95cdf4d8ec": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_crosschain__la_337996cf54df7ab6a8f709c08d3c58d2\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROJECT_NAME", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_avalanche')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_avalanche"]}, "config": {"enabled": true, "alias": "not_null_silver_crosschain__la_337996cf54df7ab6a8f709c08d3c58d2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_avalanche_PROJECT_NAME"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_PROJECT_NAME.95cdf4d8ec", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__la_337996cf54df7ab6a8f709c08d3c58d2.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.yml", "name": "not_null_silver_crosschain__labels_contracts_avalanche_PROJECT_NAME", "alias": "labels_contracts_avalanche_PROJECT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_avalanche"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.yml\\not_null_silver_crosschain__la_337996cf54df7ab6a8f709c08d3c58d2.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_silver_crosschain__la_337996cf54df7ab6a8f709c08d3c58d2"}, "created_at": 1666821807.7748008, "compiled_sql": "\n    \n    \n\n\n\nselect PROJECT_NAME\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_avalanche\nwhere PROJECT_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PROJECT_NAME", "file_key_name": "models.silver_crosschain__labels_contracts_avalanche"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche__INSERTED_TIMESTAMP.aa23e2b009": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_crosschain__la_41a209f1905780d3897956c4db04d001\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_avalanche')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_avalanche"]}, "config": {"enabled": true, "alias": "not_null_silver_crosschain__la_41a209f1905780d3897956c4db04d001", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_avalanche__INSERTED_TIMESTAMP"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche__INSERTED_TIMESTAMP.aa23e2b009", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__la_41a209f1905780d3897956c4db04d001.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.yml", "name": "not_null_silver_crosschain__labels_contracts_avalanche__INSERTED_TIMESTAMP", "alias": "labels_contracts_avalanche", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_avalanche"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.yml\\not_null_silver_crosschain__la_41a209f1905780d3897956c4db04d001.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_silver_crosschain__la_41a209f1905780d3897956c4db04d001"}, "created_at": 1666821807.7748008, "compiled_sql": "\n    \n    \n\n\n\nselect _INSERTED_TIMESTAMP\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts_avalanche\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver_crosschain__labels_contracts_avalanche"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_avalanche__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.3b7cd469d7": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8d5d5f65b84d7a516ea02033cac9cfc6\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_avalanche')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_avalanche"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8d5d5f65b84d7a516ea02033cac9cfc6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_avalanche__INSERTED_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_avalanche__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.3b7cd469d7", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_8d5d5f65b84d7a516ea02033cac9cfc6.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_avalanche__INSERTED_TIMESTAMP__TIMESTAMP_NTZ", "alias": "labels_contracts_avalanche", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_avalanche"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.yml\\dbt_expectations_expect_column_8d5d5f65b84d7a516ea02033cac9cfc6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_8d5d5f65b84d7a516ea02033cac9cfc6"}, "created_at": 1666821807.7829666, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('SYSTEM_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INSERT_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L2_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver_crosschain__labels_contracts_avalanche"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_avalanche_ADDRESS.0cb9b87c66": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_daf5045bda90856f074a8f106feaa849\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS"], "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts_avalanche')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts_avalanche"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_daf5045bda90856f074a8f106feaa849", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_avalanche_ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_avalanche_ADDRESS.0cb9b87c66", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_daf5045bda90856f074a8f106feaa849.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.yml", "name": "dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_avalanche_ADDRESS", "alias": "labels_contracts_avalanche_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts_avalanche"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts_avalanche.yml\\dbt_utils_unique_combination_o_daf5045bda90856f074a8f106feaa849.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_daf5045bda90856f074a8f106feaa849"}, "created_at": 1666821807.7915864, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS\n    from CROSSCHAIN_DEV.silver_crosschain.labels_contracts_avalanche\n    group by ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver_crosschain__labels_contracts_avalanche"}, "test.crosschain_models.not_null_silver__asset_metadata_coin_market_cap_ID.757aac2eb7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ID", "model": "{{ get_where_subquery(ref('silver__asset_metadata_coin_market_cap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__asset_metadata_coin_market_cap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "asset_metadata", "not_null_silver__asset_metadata_coin_market_cap_ID"], "unique_id": "test.crosschain_models.not_null_silver__asset_metadata_coin_market_cap_ID.757aac2eb7", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__asset_metadata_coin_market_cap_ID.sql", "original_file_path": "models\\silver\\asset_metadata\\silver__asset_metadata_coin_market_cap.yml", "name": "not_null_silver__asset_metadata_coin_market_cap_ID", "alias": "asset_metadata_coin_market_cap_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__asset_metadata_coin_market_cap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\asset_metadata\\silver__asset_metadata_coin_market_cap.yml\\not_null_silver__asset_metadata_coin_market_cap_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.8054347, "compiled_sql": "\n    \n    \n\n\n\nselect ID\nfrom CROSSCHAIN_DEV.silver.asset_metadata_coin_market_cap\nwhere ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ID", "file_key_name": "models.silver__asset_metadata_coin_market_cap"}, "test.crosschain_models.not_null_silver__asset_metadata_coin_market_cap_NAME.56bd578cbc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NAME", "model": "{{ get_where_subquery(ref('silver__asset_metadata_coin_market_cap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__asset_metadata_coin_market_cap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "asset_metadata", "not_null_silver__asset_metadata_coin_market_cap_NAME"], "unique_id": "test.crosschain_models.not_null_silver__asset_metadata_coin_market_cap_NAME.56bd578cbc", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__asset_metadata_coin_market_cap_NAME.sql", "original_file_path": "models\\silver\\asset_metadata\\silver__asset_metadata_coin_market_cap.yml", "name": "not_null_silver__asset_metadata_coin_market_cap_NAME", "alias": "asset_metadata_coin_market_cap_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__asset_metadata_coin_market_cap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\asset_metadata\\silver__asset_metadata_coin_market_cap.yml\\not_null_silver__asset_metadata_coin_market_cap_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.8054347, "compiled_sql": "\n    \n    \n\n\n\nselect NAME\nfrom CROSSCHAIN_DEV.silver.asset_metadata_coin_market_cap\nwhere NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NAME", "file_key_name": "models.silver__asset_metadata_coin_market_cap"}, "test.crosschain_models.not_null_silver__asset_metadata_coin_market_cap_SYMBOL.dfed76153a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SYMBOL", "model": "{{ get_where_subquery(ref('silver__asset_metadata_coin_market_cap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__asset_metadata_coin_market_cap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "asset_metadata", "not_null_silver__asset_metadata_coin_market_cap_SYMBOL"], "unique_id": "test.crosschain_models.not_null_silver__asset_metadata_coin_market_cap_SYMBOL.dfed76153a", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__asset_metadata_coin_market_cap_SYMBOL.sql", "original_file_path": "models\\silver\\asset_metadata\\silver__asset_metadata_coin_market_cap.yml", "name": "not_null_silver__asset_metadata_coin_market_cap_SYMBOL", "alias": "asset_metadata_coin_market_cap_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__asset_metadata_coin_market_cap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\asset_metadata\\silver__asset_metadata_coin_market_cap.yml\\not_null_silver__asset_metadata_coin_market_cap_SYMBOL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.8054347, "compiled_sql": "\n    \n    \n\n\n\nselect SYMBOL\nfrom CROSSCHAIN_DEV.silver.asset_metadata_coin_market_cap\nwhere SYMBOL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SYMBOL", "file_key_name": "models.silver__asset_metadata_coin_market_cap"}, "test.crosschain_models.not_null_silver__asset_metadata_coin_market_cap_PLATFORM.5f3a0c3e87": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"token_address is not null\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PLATFORM", "model": "{{ get_where_subquery(ref('silver__asset_metadata_coin_market_cap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__asset_metadata_coin_market_cap"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "token_address is not null", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "asset_metadata", "not_null_silver__asset_metadata_coin_market_cap_PLATFORM"], "unique_id": "test.crosschain_models.not_null_silver__asset_metadata_coin_market_cap_PLATFORM.5f3a0c3e87", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__asset_metadata_coin_market_cap_PLATFORM.sql", "original_file_path": "models\\silver\\asset_metadata\\silver__asset_metadata_coin_market_cap.yml", "name": "not_null_silver__asset_metadata_coin_market_cap_PLATFORM", "alias": "asset_metadata_coin_market_cap_PLATFORM", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__asset_metadata_coin_market_cap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\asset_metadata\\silver__asset_metadata_coin_market_cap.yml\\not_null_silver__asset_metadata_coin_market_cap_PLATFORM.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "token_address is not null"}, "created_at": 1666821807.8054347, "compiled_sql": "\n    \n    \n\n\n\nselect PLATFORM\nfrom (select * from CROSSCHAIN_DEV.silver.asset_metadata_coin_market_cap where token_address is not null) dbt_subquery\nwhere PLATFORM is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM", "file_key_name": "models.silver__asset_metadata_coin_market_cap"}, "test.crosschain_models.not_null_silver__asset_metadata_coin_market_cap__INSERTED_TIMESTAMP.3a37d1a1ff": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver__asset_metadat_7e386263aee4e92e0b41ddf40f018bd2\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__asset_metadata_coin_market_cap')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__asset_metadata_coin_market_cap"]}, "config": {"enabled": true, "alias": "not_null_silver__asset_metadat_7e386263aee4e92e0b41ddf40f018bd2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "asset_metadata", "not_null_silver__asset_metadata_coin_market_cap__INSERTED_TIMESTAMP"], "unique_id": "test.crosschain_models.not_null_silver__asset_metadata_coin_market_cap__INSERTED_TIMESTAMP.3a37d1a1ff", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__asset_metadat_7e386263aee4e92e0b41ddf40f018bd2.sql", "original_file_path": "models\\silver\\asset_metadata\\silver__asset_metadata_coin_market_cap.yml", "name": "not_null_silver__asset_metadata_coin_market_cap__INSERTED_TIMESTAMP", "alias": "asset_metadata_coin_market_cap", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__asset_metadata_coin_market_cap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\asset_metadata\\silver__asset_metadata_coin_market_cap.yml\\not_null_silver__asset_metadat_7e386263aee4e92e0b41ddf40f018bd2.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_silver__asset_metadat_7e386263aee4e92e0b41ddf40f018bd2"}, "created_at": 1666821807.8054347, "compiled_sql": "\n    \n    \n\n\n\nselect _INSERTED_TIMESTAMP\nfrom CROSSCHAIN_DEV.silver.asset_metadata_coin_market_cap\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__asset_metadata_coin_market_cap"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__asset_metadata_coin_market_cap_ID__TOKEN_ADDRESS.3bae856e75": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_1cd7d9718dd47e41e5854a295e9256b0\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ID", "TOKEN_ADDRESS"], "model": "{{ get_where_subquery(ref('silver__asset_metadata_coin_market_cap')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__asset_metadata_coin_market_cap"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_1cd7d9718dd47e41e5854a295e9256b0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["crosschain_models", "silver", "asset_metadata", "dbt_utils_unique_combination_of_columns_silver__asset_metadata_coin_market_cap_ID__TOKEN_ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__asset_metadata_coin_market_cap_ID__TOKEN_ADDRESS.3bae856e75", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_1cd7d9718dd47e41e5854a295e9256b0.sql", "original_file_path": "models\\silver\\asset_metadata\\silver__asset_metadata_coin_market_cap.yml", "name": "dbt_utils_unique_combination_of_columns_silver__asset_metadata_coin_market_cap_ID__TOKEN_ADDRESS", "alias": "asset_metadata_coin_market_cap_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__asset_metadata_coin_market_cap"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\asset_metadata\\silver__asset_metadata_coin_market_cap.yml\\dbt_utils_unique_combination_o_1cd7d9718dd47e41e5854a295e9256b0.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_1cd7d9718dd47e41e5854a295e9256b0"}, "created_at": 1666821807.8216524, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ID, TOKEN_ADDRESS\n    from CROSSCHAIN_DEV.silver.asset_metadata_coin_market_cap\n    group by ID, TOKEN_ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__asset_metadata_coin_market_cap"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_BLOCKCHAIN.44a2f1a898": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_BLOCKCHAIN"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_BLOCKCHAIN.44a2f1a898", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__labels_contracts_BLOCKCHAIN.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.yml", "name": "not_null_silver_crosschain__labels_contracts_BLOCKCHAIN", "alias": "labels_contracts_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.yml\\not_null_silver_crosschain__labels_contracts_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.8216524, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCKCHAIN\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCKCHAIN", "file_key_name": "models.silver_crosschain__labels_contracts"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_BLOCKCHAIN__ethereum.cfbc7085d9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5dcf12accda66f254389e89b0ade374f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["ethereum"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5dcf12accda66f254389e89b0ade374f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_BLOCKCHAIN__ethereum"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_BLOCKCHAIN__ethereum.cfbc7085d9", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_5dcf12accda66f254389e89b0ade374f.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_BLOCKCHAIN__ethereum", "alias": "labels_contracts_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.yml\\dbt_expectations_expect_column_5dcf12accda66f254389e89b0ade374f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_5dcf12accda66f254389e89b0ade374f"}, "created_at": 1666821807.8216524, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        BLOCKCHAIN as value_field\n\n    from CROSSCHAIN_DEV.silver_crosschain.labels_contracts\n    \n\n),\nset_values as (\n\n    select\n        cast('ethereum' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCKCHAIN", "file_key_name": "models.silver_crosschain__labels_contracts"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_ADDRESS.1147ea62d2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_ADDRESS.1147ea62d2", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__labels_contracts_ADDRESS.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.yml", "name": "not_null_silver_crosschain__labels_contracts_ADDRESS", "alias": "labels_contracts_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.yml\\not_null_silver_crosschain__labels_contracts_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.8392525, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__labels_contracts"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_ADDRESS__STRING__VARCHAR.fefb7618d7": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6e6d5054fa1765524dc79203b0da8c2c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6e6d5054fa1765524dc79203b0da8c2c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_ADDRESS__STRING__VARCHAR.fefb7618d7", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_6e6d5054fa1765524dc79203b0da8c2c.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_ADDRESS__STRING__VARCHAR", "alias": "labels_contracts_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.yml\\dbt_expectations_expect_column_6e6d5054fa1765524dc79203b0da8c2c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6e6d5054fa1765524dc79203b0da8c2c"}, "created_at": 1666821807.8392525, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('SYSTEM_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INSERT_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L2_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__labels_contracts"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_ADDRESS__0_xX_0_9a_fA_F_.10b83b7ade": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a594bf8966abeb6cd4fac3f8d3f46368\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a594bf8966abeb6cd4fac3f8d3f46368", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_ADDRESS__0_xX_0_9a_fA_F_.10b83b7ade", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_a594bf8966abeb6cd4fac3f8d3f46368.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_ADDRESS__0_xX_0_9a_fA_F_", "alias": "labels_contracts_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.yml\\dbt_expectations_expect_column_a594bf8966abeb6cd4fac3f8d3f46368.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a594bf8966abeb6cd4fac3f8d3f46368"}, "created_at": 1666821807.84734, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.silver_crosschain.labels_contracts\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__labels_contracts"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_CREATOR.b3b4375a91": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_CREATOR"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_CREATOR.b3b4375a91", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__labels_contracts_CREATOR.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.yml", "name": "not_null_silver_crosschain__labels_contracts_CREATOR", "alias": "labels_contracts_CREATOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.yml\\not_null_silver_crosschain__labels_contracts_CREATOR.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.84734, "compiled_sql": "\n    \n    \n\n\n\nselect CREATOR\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts\nwhere CREATOR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR", "file_key_name": "models.silver_crosschain__labels_contracts"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_L1_LABEL.95bc2a4325": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "L1_LABEL", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_L1_LABEL"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_L1_LABEL.95bc2a4325", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__labels_contracts_L1_LABEL.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.yml", "name": "not_null_silver_crosschain__labels_contracts_L1_LABEL", "alias": "labels_contracts_L1_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.yml\\not_null_silver_crosschain__labels_contracts_L1_LABEL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.855384, "compiled_sql": "\n    \n    \n\n\n\nselect L1_LABEL\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts\nwhere L1_LABEL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "L1_LABEL", "file_key_name": "models.silver_crosschain__labels_contracts"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.82c6a23d00": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d3f96b626fadc6fcf2e584ce7a57ad8d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["flotsam", "nft", "defi", "dex", "cex", "dapp", "token", "operator", "layer2", "chadmin"], "column_name": "L1_LABEL", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d3f96b626fadc6fcf2e584ce7a57ad8d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.82c6a23d00", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_d3f96b626fadc6fcf2e584ce7a57ad8d.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin", "alias": "labels_contracts_L1_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.yml\\dbt_expectations_expect_column_d3f96b626fadc6fcf2e584ce7a57ad8d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d3f96b626fadc6fcf2e584ce7a57ad8d"}, "created_at": 1666821807.855384, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        L1_LABEL as value_field\n\n    from CROSSCHAIN_DEV.silver_crosschain.labels_contracts\n    \n\n),\nset_values as (\n\n    select\n        cast('flotsam' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('nft' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('defi' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('dex' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('cex' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('dapp' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('token' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('operator' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('layer2' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('chadmin' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "L1_LABEL", "file_key_name": "models.silver_crosschain__labels_contracts"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_L2_LABEL.5f04962e99": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "L2_LABEL", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_L2_LABEL"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_L2_LABEL.5f04962e99", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__labels_contracts_L2_LABEL.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.yml", "name": "not_null_silver_crosschain__labels_contracts_L2_LABEL", "alias": "labels_contracts_L2_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.yml\\not_null_silver_crosschain__labels_contracts_L2_LABEL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.863668, "compiled_sql": "\n    \n    \n\n\n\nselect L2_LABEL\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts\nwhere L2_LABEL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "L2_LABEL", "file_key_name": "models.silver_crosschain__labels_contracts"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_ADDRESS_NAME.ed60bb7d8d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS_NAME", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_ADDRESS_NAME"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_ADDRESS_NAME.ed60bb7d8d", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__labels_contracts_ADDRESS_NAME.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.yml", "name": "not_null_silver_crosschain__labels_contracts_ADDRESS_NAME", "alias": "labels_contracts_ADDRESS_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.yml\\not_null_silver_crosschain__labels_contracts_ADDRESS_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.872121, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS_NAME\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts\nwhere ADDRESS_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS_NAME", "file_key_name": "models.silver_crosschain__labels_contracts"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts_PROJECT_NAME.89d7a3c8be": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROJECT_NAME", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts_PROJECT_NAME"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts_PROJECT_NAME.89d7a3c8be", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__labels_contracts_PROJECT_NAME.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.yml", "name": "not_null_silver_crosschain__labels_contracts_PROJECT_NAME", "alias": "labels_contracts_PROJECT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.yml\\not_null_silver_crosschain__labels_contracts_PROJECT_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.872121, "compiled_sql": "\n    \n    \n\n\n\nselect PROJECT_NAME\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts\nwhere PROJECT_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PROJECT_NAME", "file_key_name": "models.silver_crosschain__labels_contracts"}, "test.crosschain_models.not_null_silver_crosschain__labels_contracts__INSERTED_TIMESTAMP.0c46996794": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_crosschain__la_4635d1102d86413859fd2930588ac447\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts"]}, "config": {"enabled": true, "alias": "not_null_silver_crosschain__la_4635d1102d86413859fd2930588ac447", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "not_null_silver_crosschain__labels_contracts__INSERTED_TIMESTAMP"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__labels_contracts__INSERTED_TIMESTAMP.0c46996794", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__la_4635d1102d86413859fd2930588ac447.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.yml", "name": "not_null_silver_crosschain__labels_contracts__INSERTED_TIMESTAMP", "alias": "labels_contracts", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.yml\\not_null_silver_crosschain__la_4635d1102d86413859fd2930588ac447.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_silver_crosschain__la_4635d1102d86413859fd2930588ac447"}, "created_at": 1666821807.8801727, "compiled_sql": "\n    \n    \n\n\n\nselect _INSERTED_TIMESTAMP\nfrom CROSSCHAIN_DEV.silver_crosschain.labels_contracts\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver_crosschain__labels_contracts"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.f0c369857d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b8016bea252bbaf170aafad2570fccec\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b8016bea252bbaf170aafad2570fccec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts__INSERTED_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.f0c369857d", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_b8016bea252bbaf170aafad2570fccec.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts__INSERTED_TIMESTAMP__TIMESTAMP_NTZ", "alias": "labels_contracts", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.yml\\dbt_expectations_expect_column_b8016bea252bbaf170aafad2570fccec.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b8016bea252bbaf170aafad2570fccec"}, "created_at": 1666821807.8801727, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('SYSTEM_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INSERT_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L2_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver_crosschain__labels_contracts"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_ADDRESS.a06df4578d": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c0756f06231ee72e86b22e81dbfee078\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS"], "model": "{{ get_where_subquery(ref('silver_crosschain__labels_contracts')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__labels_contracts"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c0756f06231ee72e86b22e81dbfee078", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "contract_autolabel", "dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_ADDRESS.a06df4578d", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_c0756f06231ee72e86b22e81dbfee078.sql", "original_file_path": "models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.yml", "name": "dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_ADDRESS", "alias": "labels_contracts_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__labels_contracts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\contract_autolabel\\silver_crosschain__labels_contracts.yml\\dbt_utils_unique_combination_o_c0756f06231ee72e86b22e81dbfee078.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c0756f06231ee72e86b22e81dbfee078"}, "created_at": 1666821807.8887057, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS\n    from CROSSCHAIN_DEV.silver_crosschain.labels_contracts\n    group by ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver_crosschain__labels_contracts"}, "test.crosschain_models.not_null_silver__tags_nft_larva_labs_user_ADDRESS.2b9b0c77f5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_nft_larva_labs_user')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_nft_larva_labs_user"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "not_null_silver__tags_nft_larva_labs_user_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver__tags_nft_larva_labs_user_ADDRESS.2b9b0c77f5", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__tags_nft_larva_labs_user_ADDRESS.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_larva_labs_user.yml", "name": "not_null_silver__tags_nft_larva_labs_user_ADDRESS", "alias": "tags_nft_larva_labs_user_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_nft_larva_labs_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_larva_labs_user.yml\\not_null_silver__tags_nft_larva_labs_user_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.8887057, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver.tags_nft_larva_labs_user\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_nft_larva_labs_user"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_larva_labs_user_ADDRESS__STRING__VARCHAR.0d888d343e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_056e53d768151bc17318c4e50d72331d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_nft_larva_labs_user')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_nft_larva_labs_user"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_056e53d768151bc17318c4e50d72331d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_larva_labs_user_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_larva_labs_user_ADDRESS__STRING__VARCHAR.0d888d343e", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_056e53d768151bc17318c4e50d72331d.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_larva_labs_user.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_larva_labs_user_ADDRESS__STRING__VARCHAR", "alias": "tags_nft_larva_labs_user_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_nft_larva_labs_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_larva_labs_user.yml\\dbt_expectations_expect_column_056e53d768151bc17318c4e50d72331d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_056e53d768151bc17318c4e50d72331d"}, "created_at": 1666821807.8887057, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('START_DATE' as \n    varchar\n) as relation_column,\n            cast('DATE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('END_DATE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_nft_larva_labs_user"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_larva_labs_user_ADDRESS__0_xX_0_9a_fA_F_.5ecc1ff31f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c3d3365f4e128146705a28a3ffaa659d\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_nft_larva_labs_user')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_nft_larva_labs_user"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c3d3365f4e128146705a28a3ffaa659d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_larva_labs_user_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_larva_labs_user_ADDRESS__0_xX_0_9a_fA_F_.5ecc1ff31f", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_c3d3365f4e128146705a28a3ffaa659d.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_larva_labs_user.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_larva_labs_user_ADDRESS__0_xX_0_9a_fA_F_", "alias": "tags_nft_larva_labs_user_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_nft_larva_labs_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_larva_labs_user.yml\\dbt_expectations_expect_column_c3d3365f4e128146705a28a3ffaa659d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c3d3365f4e128146705a28a3ffaa659d"}, "created_at": 1666821807.9044025, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.silver.tags_nft_larva_labs_user\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_nft_larva_labs_user"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_larva_labs_user_ADDRESS.19773c98fc": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_60e2dd424284cb8434670711d8827094\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS"], "model": "{{ get_where_subquery(ref('silver__tags_nft_larva_labs_user')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_nft_larva_labs_user"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_60e2dd424284cb8434670711d8827094", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_utils_unique_combination_of_columns_silver__tags_nft_larva_labs_user_ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_larva_labs_user_ADDRESS.19773c98fc", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_60e2dd424284cb8434670711d8827094.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_larva_labs_user.yml", "name": "dbt_utils_unique_combination_of_columns_silver__tags_nft_larva_labs_user_ADDRESS", "alias": "tags_nft_larva_labs_user_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_nft_larva_labs_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_larva_labs_user.yml\\dbt_utils_unique_combination_o_60e2dd424284cb8434670711d8827094.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_60e2dd424284cb8434670711d8827094"}, "created_at": 1666821807.9044025, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS\n    from CROSSCHAIN_DEV.silver.tags_nft_larva_labs_user\n    group by ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__tags_nft_larva_labs_user"}, "test.crosschain_models.not_null_silver_crosschain__snowflake_Avalanche_satellites_ADDRESS.aa828063b8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_crosschain__sn_fe494860b500db7309aa75efa9b0701a\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_Avalanche_satellites')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_Avalanche_satellites"]}, "config": {"enabled": true, "alias": "not_null_silver_crosschain__sn_fe494860b500db7309aa75efa9b0701a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "not_null_silver_crosschain__snowflake_Avalanche_satellites_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__snowflake_Avalanche_satellites_ADDRESS.aa828063b8", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__sn_fe494860b500db7309aa75efa9b0701a.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Avalanche_satellites.yml", "name": "not_null_silver_crosschain__snowflake_Avalanche_satellites_ADDRESS", "alias": "snowflake_Avalanche_satellites_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_Avalanche_satellites"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Avalanche_satellites.yml\\not_null_silver_crosschain__sn_fe494860b500db7309aa75efa9b0701a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_silver_crosschain__sn_fe494860b500db7309aa75efa9b0701a"}, "created_at": 1666821807.9200459, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver_crosschain.snowflake_Avalanche_satellites\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__snowflake_Avalanche_satellites"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Avalanche_satellites_ADDRESS__STRING__VARCHAR.aa40e57912": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c6ce8d1708343a8fb0bb0711ee663b74\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_Avalanche_satellites')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_Avalanche_satellites"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c6ce8d1708343a8fb0bb0711ee663b74", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Avalanche_satellites_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Avalanche_satellites_ADDRESS__STRING__VARCHAR.aa40e57912", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_c6ce8d1708343a8fb0bb0711ee663b74.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Avalanche_satellites.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Avalanche_satellites_ADDRESS__STRING__VARCHAR", "alias": "snowflake_Avalanche_satellites_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_Avalanche_satellites"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Avalanche_satellites.yml\\dbt_expectations_expect_column_c6ce8d1708343a8fb0bb0711ee663b74.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c6ce8d1708343a8fb0bb0711ee663b74"}, "created_at": 1666821807.9200459, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('SYSTEM_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INSERT_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L2_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__snowflake_Avalanche_satellites"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Avalanche_satellites_BLOCKCHAIN__CREATOR__ADDRESS.75ee624c69": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b00226aa887a620c716486aecf27d1ea\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCKCHAIN", "CREATOR", "ADDRESS"], "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_Avalanche_satellites')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_Avalanche_satellites"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b00226aa887a620c716486aecf27d1ea", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Avalanche_satellites_BLOCKCHAIN__CREATOR__ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Avalanche_satellites_BLOCKCHAIN__CREATOR__ADDRESS.75ee624c69", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_b00226aa887a620c716486aecf27d1ea.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Avalanche_satellites.yml", "name": "dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Avalanche_satellites_BLOCKCHAIN__CREATOR__ADDRESS", "alias": "snowflake_Avalanche_satellites_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_Avalanche_satellites"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Avalanche_satellites.yml\\dbt_utils_unique_combination_o_b00226aa887a620c716486aecf27d1ea.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b00226aa887a620c716486aecf27d1ea"}, "created_at": 1666821807.9200459, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCKCHAIN, CREATOR, ADDRESS\n    from CROSSCHAIN_DEV.silver_crosschain.snowflake_Avalanche_satellites\n    group by BLOCKCHAIN, CREATOR, ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver_crosschain__snowflake_Avalanche_satellites"}, "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko_ID.5787109793": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ID", "model": "{{ get_where_subquery(ref('silver__hourly_prices_coin_gecko')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__hourly_prices_coin_gecko"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "hourly_prices", "not_null_silver__hourly_prices_coin_gecko_ID"], "unique_id": "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko_ID.5787109793", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__hourly_prices_coin_gecko_ID.sql", "original_file_path": "models\\silver\\hourly_prices\\silver__hourly_prices_coin_gecko.yml", "name": "not_null_silver__hourly_prices_coin_gecko_ID", "alias": "hourly_prices_coin_gecko_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_prices_coin_gecko"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\hourly_prices\\silver__hourly_prices_coin_gecko.yml\\not_null_silver__hourly_prices_coin_gecko_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.93567, "compiled_sql": "\n    \n    \n\n\n\nselect ID\nfrom CROSSCHAIN_DEV.silver.hourly_prices_coin_gecko\nwhere ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ID", "file_key_name": "models.silver__hourly_prices_coin_gecko"}, "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko_RECORDED_HOUR.c307ae993c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECORDED_HOUR", "model": "{{ get_where_subquery(ref('silver__hourly_prices_coin_gecko')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__hourly_prices_coin_gecko"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "hourly_prices", "not_null_silver__hourly_prices_coin_gecko_RECORDED_HOUR"], "unique_id": "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko_RECORDED_HOUR.c307ae993c", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__hourly_prices_coin_gecko_RECORDED_HOUR.sql", "original_file_path": "models\\silver\\hourly_prices\\silver__hourly_prices_coin_gecko.yml", "name": "not_null_silver__hourly_prices_coin_gecko_RECORDED_HOUR", "alias": "hourly_prices_coin_gecko_RECORDED_HOUR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_prices_coin_gecko"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\hourly_prices\\silver__hourly_prices_coin_gecko.yml\\not_null_silver__hourly_prices_coin_gecko_RECORDED_HOUR.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.93567, "compiled_sql": "\n    \n    \n\n\n\nselect RECORDED_HOUR\nfrom CROSSCHAIN_DEV.silver.hourly_prices_coin_gecko\nwhere RECORDED_HOUR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RECORDED_HOUR", "file_key_name": "models.silver__hourly_prices_coin_gecko"}, "test.crosschain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__hourly_prices_coin_gecko_RECORDED_HOUR__day__1.d8f930130d": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_4ee9e2eb67c3caad855c6a5b986c8a6b\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "RECORDED_HOUR", "model": "{{ get_where_subquery(ref('silver__hourly_prices_coin_gecko')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__hourly_prices_coin_gecko"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_4ee9e2eb67c3caad855c6a5b986c8a6b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["crosschain_models", "silver", "hourly_prices", "dbt_expectations_expect_row_values_to_have_recent_data_silver__hourly_prices_coin_gecko_RECORDED_HOUR__day__1"], "unique_id": "test.crosschain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__hourly_prices_coin_gecko_RECORDED_HOUR__day__1.d8f930130d", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_row_va_4ee9e2eb67c3caad855c6a5b986c8a6b.sql", "original_file_path": "models\\silver\\hourly_prices\\silver__hourly_prices_coin_gecko.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__hourly_prices_coin_gecko_RECORDED_HOUR__day__1", "alias": "hourly_prices_coin_gecko_RECORDED_HOUR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_prices_coin_gecko"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\hourly_prices\\silver__hourly_prices_coin_gecko.yml\\dbt_expectations_expect_row_va_4ee9e2eb67c3caad855c6a5b986c8a6b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_4ee9e2eb67c3caad855c6a5b986c8a6b"}, "created_at": 1666821807.93567, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(RECORDED_HOUR as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        CROSSCHAIN_DEV.silver.hourly_prices_coin_gecko\n    where\n        -- to exclude erroneous future dates\n        cast(RECORDED_HOUR as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RECORDED_HOUR", "file_key_name": "models.silver__hourly_prices_coin_gecko"}, "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko_OPEN.3de377b73e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "OPEN", "model": "{{ get_where_subquery(ref('silver__hourly_prices_coin_gecko')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__hourly_prices_coin_gecko"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "hourly_prices", "not_null_silver__hourly_prices_coin_gecko_OPEN"], "unique_id": "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko_OPEN.3de377b73e", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__hourly_prices_coin_gecko_OPEN.sql", "original_file_path": "models\\silver\\hourly_prices\\silver__hourly_prices_coin_gecko.yml", "name": "not_null_silver__hourly_prices_coin_gecko_OPEN", "alias": "hourly_prices_coin_gecko_OPEN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_prices_coin_gecko"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\hourly_prices\\silver__hourly_prices_coin_gecko.yml\\not_null_silver__hourly_prices_coin_gecko_OPEN.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.93567, "compiled_sql": "\n    \n    \n\n\n\nselect OPEN\nfrom CROSSCHAIN_DEV.silver.hourly_prices_coin_gecko\nwhere OPEN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "OPEN", "file_key_name": "models.silver__hourly_prices_coin_gecko"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_gecko_OPEN__FLOAT__DOUBLE.b944c5092d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e3b9374f7c037fef84e2426a094be0de\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["FLOAT", "DOUBLE"], "column_name": "OPEN", "model": "{{ get_where_subquery(ref('silver__hourly_prices_coin_gecko')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__hourly_prices_coin_gecko"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e3b9374f7c037fef84e2426a094be0de", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "hourly_prices", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_gecko_OPEN__FLOAT__DOUBLE"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_gecko_OPEN__FLOAT__DOUBLE.b944c5092d", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_e3b9374f7c037fef84e2426a094be0de.sql", "original_file_path": "models\\silver\\hourly_prices\\silver__hourly_prices_coin_gecko.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_gecko_OPEN__FLOAT__DOUBLE", "alias": "hourly_prices_coin_gecko_OPEN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_prices_coin_gecko"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\hourly_prices\\silver__hourly_prices_coin_gecko.yml\\dbt_expectations_expect_column_e3b9374f7c037fef84e2426a094be0de.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e3b9374f7c037fef84e2426a094be0de"}, "created_at": 1666821807.93567, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECORDED_HOUR' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OPEN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HIGH' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOW' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLOSE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'OPEN'\n            and\n            relation_column_type not in ('FLOAT', 'DOUBLE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "OPEN", "file_key_name": "models.silver__hourly_prices_coin_gecko"}, "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko_HIGH.6d22a61317": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "HIGH", "model": "{{ get_where_subquery(ref('silver__hourly_prices_coin_gecko')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__hourly_prices_coin_gecko"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "hourly_prices", "not_null_silver__hourly_prices_coin_gecko_HIGH"], "unique_id": "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko_HIGH.6d22a61317", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__hourly_prices_coin_gecko_HIGH.sql", "original_file_path": "models\\silver\\hourly_prices\\silver__hourly_prices_coin_gecko.yml", "name": "not_null_silver__hourly_prices_coin_gecko_HIGH", "alias": "hourly_prices_coin_gecko_HIGH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_prices_coin_gecko"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\hourly_prices\\silver__hourly_prices_coin_gecko.yml\\not_null_silver__hourly_prices_coin_gecko_HIGH.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.9512966, "compiled_sql": "\n    \n    \n\n\n\nselect HIGH\nfrom CROSSCHAIN_DEV.silver.hourly_prices_coin_gecko\nwhere HIGH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "HIGH", "file_key_name": "models.silver__hourly_prices_coin_gecko"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_gecko_HIGH__FLOAT__DOUBLE.451197e764": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9dea3368cd443c59e39f3dbc528efbe6\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["FLOAT", "DOUBLE"], "column_name": "HIGH", "model": "{{ get_where_subquery(ref('silver__hourly_prices_coin_gecko')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__hourly_prices_coin_gecko"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9dea3368cd443c59e39f3dbc528efbe6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "hourly_prices", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_gecko_HIGH__FLOAT__DOUBLE"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_gecko_HIGH__FLOAT__DOUBLE.451197e764", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_9dea3368cd443c59e39f3dbc528efbe6.sql", "original_file_path": "models\\silver\\hourly_prices\\silver__hourly_prices_coin_gecko.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_gecko_HIGH__FLOAT__DOUBLE", "alias": "hourly_prices_coin_gecko_HIGH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_prices_coin_gecko"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\hourly_prices\\silver__hourly_prices_coin_gecko.yml\\dbt_expectations_expect_column_9dea3368cd443c59e39f3dbc528efbe6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_9dea3368cd443c59e39f3dbc528efbe6"}, "created_at": 1666821807.9512966, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECORDED_HOUR' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OPEN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HIGH' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOW' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLOSE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'HIGH'\n            and\n            relation_column_type not in ('FLOAT', 'DOUBLE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "HIGH", "file_key_name": "models.silver__hourly_prices_coin_gecko"}, "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko_LOW.049aed28b0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LOW", "model": "{{ get_where_subquery(ref('silver__hourly_prices_coin_gecko')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__hourly_prices_coin_gecko"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "hourly_prices", "not_null_silver__hourly_prices_coin_gecko_LOW"], "unique_id": "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko_LOW.049aed28b0", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__hourly_prices_coin_gecko_LOW.sql", "original_file_path": "models\\silver\\hourly_prices\\silver__hourly_prices_coin_gecko.yml", "name": "not_null_silver__hourly_prices_coin_gecko_LOW", "alias": "hourly_prices_coin_gecko_LOW", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_prices_coin_gecko"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\hourly_prices\\silver__hourly_prices_coin_gecko.yml\\not_null_silver__hourly_prices_coin_gecko_LOW.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.9512966, "compiled_sql": "\n    \n    \n\n\n\nselect LOW\nfrom CROSSCHAIN_DEV.silver.hourly_prices_coin_gecko\nwhere LOW is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LOW", "file_key_name": "models.silver__hourly_prices_coin_gecko"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_gecko_LOW__FLOAT__DOUBLE.85d9c10d3e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8f28cfcf87cd6a34cd5d607d05108d3b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["FLOAT", "DOUBLE"], "column_name": "LOW", "model": "{{ get_where_subquery(ref('silver__hourly_prices_coin_gecko')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__hourly_prices_coin_gecko"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8f28cfcf87cd6a34cd5d607d05108d3b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "hourly_prices", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_gecko_LOW__FLOAT__DOUBLE"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_gecko_LOW__FLOAT__DOUBLE.85d9c10d3e", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_8f28cfcf87cd6a34cd5d607d05108d3b.sql", "original_file_path": "models\\silver\\hourly_prices\\silver__hourly_prices_coin_gecko.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_gecko_LOW__FLOAT__DOUBLE", "alias": "hourly_prices_coin_gecko_LOW", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_prices_coin_gecko"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\hourly_prices\\silver__hourly_prices_coin_gecko.yml\\dbt_expectations_expect_column_8f28cfcf87cd6a34cd5d607d05108d3b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_8f28cfcf87cd6a34cd5d607d05108d3b"}, "created_at": 1666821807.9512966, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECORDED_HOUR' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OPEN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HIGH' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOW' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLOSE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LOW'\n            and\n            relation_column_type not in ('FLOAT', 'DOUBLE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LOW", "file_key_name": "models.silver__hourly_prices_coin_gecko"}, "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko_CLOSE.483d35fc1d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CLOSE", "model": "{{ get_where_subquery(ref('silver__hourly_prices_coin_gecko')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__hourly_prices_coin_gecko"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "hourly_prices", "not_null_silver__hourly_prices_coin_gecko_CLOSE"], "unique_id": "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko_CLOSE.483d35fc1d", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__hourly_prices_coin_gecko_CLOSE.sql", "original_file_path": "models\\silver\\hourly_prices\\silver__hourly_prices_coin_gecko.yml", "name": "not_null_silver__hourly_prices_coin_gecko_CLOSE", "alias": "hourly_prices_coin_gecko_CLOSE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_prices_coin_gecko"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\hourly_prices\\silver__hourly_prices_coin_gecko.yml\\not_null_silver__hourly_prices_coin_gecko_CLOSE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.96683, "compiled_sql": "\n    \n    \n\n\n\nselect CLOSE\nfrom CROSSCHAIN_DEV.silver.hourly_prices_coin_gecko\nwhere CLOSE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CLOSE", "file_key_name": "models.silver__hourly_prices_coin_gecko"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_gecko_CLOSE__FLOAT__DOUBLE.3682844202": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0bdbb6b8474ac6681a2760b53a5e2b44\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["FLOAT", "DOUBLE"], "column_name": "CLOSE", "model": "{{ get_where_subquery(ref('silver__hourly_prices_coin_gecko')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__hourly_prices_coin_gecko"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0bdbb6b8474ac6681a2760b53a5e2b44", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "hourly_prices", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_gecko_CLOSE__FLOAT__DOUBLE"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_gecko_CLOSE__FLOAT__DOUBLE.3682844202", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_0bdbb6b8474ac6681a2760b53a5e2b44.sql", "original_file_path": "models\\silver\\hourly_prices\\silver__hourly_prices_coin_gecko.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_gecko_CLOSE__FLOAT__DOUBLE", "alias": "hourly_prices_coin_gecko_CLOSE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_prices_coin_gecko"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\hourly_prices\\silver__hourly_prices_coin_gecko.yml\\dbt_expectations_expect_column_0bdbb6b8474ac6681a2760b53a5e2b44.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_0bdbb6b8474ac6681a2760b53a5e2b44"}, "created_at": 1666821807.96683, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECORDED_HOUR' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OPEN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HIGH' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOW' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLOSE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CLOSE'\n            and\n            relation_column_type not in ('FLOAT', 'DOUBLE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CLOSE", "file_key_name": "models.silver__hourly_prices_coin_gecko"}, "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko__INSERTED_TIMESTAMP.8a9c4c622d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__hourly_prices_coin_gecko')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__hourly_prices_coin_gecko"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "hourly_prices", "not_null_silver__hourly_prices_coin_gecko__INSERTED_TIMESTAMP"], "unique_id": "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko__INSERTED_TIMESTAMP.8a9c4c622d", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__hourly_prices_coin_gecko__INSERTED_TIMESTAMP.sql", "original_file_path": "models\\silver\\hourly_prices\\silver__hourly_prices_coin_gecko.yml", "name": "not_null_silver__hourly_prices_coin_gecko__INSERTED_TIMESTAMP", "alias": "hourly_prices_coin_gecko", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_prices_coin_gecko"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\hourly_prices\\silver__hourly_prices_coin_gecko.yml\\not_null_silver__hourly_prices_coin_gecko__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.96683, "compiled_sql": "\n    \n    \n\n\n\nselect _INSERTED_TIMESTAMP\nfrom CROSSCHAIN_DEV.silver.hourly_prices_coin_gecko\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__hourly_prices_coin_gecko"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__hourly_prices_coin_gecko_ID__RECORDED_HOUR.89152c02c9": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_865c9b50440e2c815d9920a79807d7bf\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ID", "RECORDED_HOUR"], "model": "{{ get_where_subquery(ref('silver__hourly_prices_coin_gecko')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__hourly_prices_coin_gecko"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_865c9b50440e2c815d9920a79807d7bf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["crosschain_models", "silver", "hourly_prices", "dbt_utils_unique_combination_of_columns_silver__hourly_prices_coin_gecko_ID__RECORDED_HOUR"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__hourly_prices_coin_gecko_ID__RECORDED_HOUR.89152c02c9", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_865c9b50440e2c815d9920a79807d7bf.sql", "original_file_path": "models\\silver\\hourly_prices\\silver__hourly_prices_coin_gecko.yml", "name": "dbt_utils_unique_combination_of_columns_silver__hourly_prices_coin_gecko_ID__RECORDED_HOUR", "alias": "hourly_prices_coin_gecko_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__hourly_prices_coin_gecko"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\hourly_prices\\silver__hourly_prices_coin_gecko.yml\\dbt_utils_unique_combination_o_865c9b50440e2c815d9920a79807d7bf.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_865c9b50440e2c815d9920a79807d7bf"}, "created_at": 1666821807.96683, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ID, RECORDED_HOUR\n    from CROSSCHAIN_DEV.silver.hourly_prices_coin_gecko\n    group by ID, RECORDED_HOUR\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__hourly_prices_coin_gecko"}, "test.crosschain_models.not_null_silver__tags_nft_rarible_user_ADDRESS.65708ea50e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_nft_rarible_user')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_nft_rarible_user"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "not_null_silver__tags_nft_rarible_user_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver__tags_nft_rarible_user_ADDRESS.65708ea50e", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__tags_nft_rarible_user_ADDRESS.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_rarible_user.yml", "name": "not_null_silver__tags_nft_rarible_user_ADDRESS", "alias": "tags_nft_rarible_user_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_nft_rarible_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_rarible_user.yml\\not_null_silver__tags_nft_rarible_user_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821807.9824579, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver.tags_nft_rarible_user\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_nft_rarible_user"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_rarible_user_ADDRESS__STRING__VARCHAR.2e901e783c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_820f223fffd5d3f08a991afc682f1185\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_nft_rarible_user')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_nft_rarible_user"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_820f223fffd5d3f08a991afc682f1185", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_rarible_user_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_rarible_user_ADDRESS__STRING__VARCHAR.2e901e783c", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_820f223fffd5d3f08a991afc682f1185.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_rarible_user.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_rarible_user_ADDRESS__STRING__VARCHAR", "alias": "tags_nft_rarible_user_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_nft_rarible_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_rarible_user.yml\\dbt_expectations_expect_column_820f223fffd5d3f08a991afc682f1185.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_820f223fffd5d3f08a991afc682f1185"}, "created_at": 1666821807.9824579, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('START_DATE' as \n    varchar\n) as relation_column,\n            cast('DATE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('END_DATE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_nft_rarible_user"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_rarible_user_ADDRESS__0_xX_0_9a_fA_F_.a6314feeac": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f2c0cb53dc14e9f4e3a181807de2d839\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_nft_rarible_user')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_nft_rarible_user"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f2c0cb53dc14e9f4e3a181807de2d839", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_rarible_user_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_rarible_user_ADDRESS__0_xX_0_9a_fA_F_.a6314feeac", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_f2c0cb53dc14e9f4e3a181807de2d839.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_rarible_user.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_rarible_user_ADDRESS__0_xX_0_9a_fA_F_", "alias": "tags_nft_rarible_user_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_nft_rarible_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_rarible_user.yml\\dbt_expectations_expect_column_f2c0cb53dc14e9f4e3a181807de2d839.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f2c0cb53dc14e9f4e3a181807de2d839"}, "created_at": 1666821807.9980814, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.silver.tags_nft_rarible_user\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_nft_rarible_user"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_rarible_user_ADDRESS.3054ef0c41": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_15e986d7df0f60ac5b9b13cb195285b6\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS"], "model": "{{ get_where_subquery(ref('silver__tags_nft_rarible_user')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_nft_rarible_user"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_15e986d7df0f60ac5b9b13cb195285b6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_utils_unique_combination_of_columns_silver__tags_nft_rarible_user_ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_rarible_user_ADDRESS.3054ef0c41", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_15e986d7df0f60ac5b9b13cb195285b6.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_rarible_user.yml", "name": "dbt_utils_unique_combination_of_columns_silver__tags_nft_rarible_user_ADDRESS", "alias": "tags_nft_rarible_user_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_nft_rarible_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_rarible_user.yml\\dbt_utils_unique_combination_o_15e986d7df0f60ac5b9b13cb195285b6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_15e986d7df0f60ac5b9b13cb195285b6"}, "created_at": 1666821807.9980814, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS\n    from CROSSCHAIN_DEV.silver.tags_nft_rarible_user\n    group by ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__tags_nft_rarible_user"}, "test.crosschain_models.not_null_silver_crosschain__snowflake_Arbitrum_satellites_ADDRESS.ee854fd345": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_crosschain__sn_f5363e1add733e799122fe6d7a9a3284\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_Arbitrum_satellites')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_Arbitrum_satellites"]}, "config": {"enabled": true, "alias": "not_null_silver_crosschain__sn_f5363e1add733e799122fe6d7a9a3284", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "not_null_silver_crosschain__snowflake_Arbitrum_satellites_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__snowflake_Arbitrum_satellites_ADDRESS.ee854fd345", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__sn_f5363e1add733e799122fe6d7a9a3284.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Arbitrum_satellites.yml", "name": "not_null_silver_crosschain__snowflake_Arbitrum_satellites_ADDRESS", "alias": "snowflake_Arbitrum_satellites_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_Arbitrum_satellites"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Arbitrum_satellites.yml\\not_null_silver_crosschain__sn_f5363e1add733e799122fe6d7a9a3284.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_silver_crosschain__sn_f5363e1add733e799122fe6d7a9a3284"}, "created_at": 1666821808.013706, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver_crosschain.snowflake_Arbitrum_satellites\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__snowflake_Arbitrum_satellites"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Arbitrum_satellites_ADDRESS__STRING__VARCHAR.2b4af34dc4": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1b50bca8f14528cb589c520fc1f83df7\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_Arbitrum_satellites')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_Arbitrum_satellites"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1b50bca8f14528cb589c520fc1f83df7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Arbitrum_satellites_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Arbitrum_satellites_ADDRESS__STRING__VARCHAR.2b4af34dc4", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_1b50bca8f14528cb589c520fc1f83df7.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Arbitrum_satellites.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Arbitrum_satellites_ADDRESS__STRING__VARCHAR", "alias": "snowflake_Arbitrum_satellites_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_Arbitrum_satellites"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Arbitrum_satellites.yml\\dbt_expectations_expect_column_1b50bca8f14528cb589c520fc1f83df7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_1b50bca8f14528cb589c520fc1f83df7"}, "created_at": 1666821808.013706, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('SYSTEM_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INSERT_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L2_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__snowflake_Arbitrum_satellites"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Arbitrum_satellites_BLOCKCHAIN__CREATOR__ADDRESS.c09a6d7245": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_14972f1d3dc58600a07a20ee8f8a3a5d\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCKCHAIN", "CREATOR", "ADDRESS"], "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_Arbitrum_satellites')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_Arbitrum_satellites"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_14972f1d3dc58600a07a20ee8f8a3a5d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Arbitrum_satellites_BLOCKCHAIN__CREATOR__ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Arbitrum_satellites_BLOCKCHAIN__CREATOR__ADDRESS.c09a6d7245", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_14972f1d3dc58600a07a20ee8f8a3a5d.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Arbitrum_satellites.yml", "name": "dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Arbitrum_satellites_BLOCKCHAIN__CREATOR__ADDRESS", "alias": "snowflake_Arbitrum_satellites_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_Arbitrum_satellites"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Arbitrum_satellites.yml\\dbt_utils_unique_combination_o_14972f1d3dc58600a07a20ee8f8a3a5d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_14972f1d3dc58600a07a20ee8f8a3a5d"}, "created_at": 1666821808.013706, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCKCHAIN, CREATOR, ADDRESS\n    from CROSSCHAIN_DEV.silver_crosschain.snowflake_Arbitrum_satellites\n    group by BLOCKCHAIN, CREATOR, ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver_crosschain__snowflake_Arbitrum_satellites"}, "test.crosschain_models.not_null_silver__tags_airdrop_master_ETH_ADDRESS.1d8d807d61": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_airdrop_master_ETH')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_airdrop_master_ETH"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "not_null_silver__tags_airdrop_master_ETH_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver__tags_airdrop_master_ETH_ADDRESS.1d8d807d61", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__tags_airdrop_master_ETH_ADDRESS.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_airdrop_master_ETH.yml", "name": "not_null_silver__tags_airdrop_master_ETH_ADDRESS", "alias": "tags_airdrop_master_ETH_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_airdrop_master_ETH"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_airdrop_master_ETH.yml\\not_null_silver__tags_airdrop_master_ETH_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821808.02933, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver.tags_airdrop_master_ETH\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_airdrop_master_ETH"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_airdrop_master_ETH_ADDRESS__STRING__VARCHAR.991a7dc76b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b8ee28576f6406f59fe7b4a0bb4efea4\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_airdrop_master_ETH')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_airdrop_master_ETH"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b8ee28576f6406f59fe7b4a0bb4efea4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_airdrop_master_ETH_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_airdrop_master_ETH_ADDRESS__STRING__VARCHAR.991a7dc76b", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_b8ee28576f6406f59fe7b4a0bb4efea4.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_airdrop_master_ETH.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_airdrop_master_ETH_ADDRESS__STRING__VARCHAR", "alias": "tags_airdrop_master_ETH_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_airdrop_master_ETH"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_airdrop_master_ETH.yml\\dbt_expectations_expect_column_b8ee28576f6406f59fe7b4a0bb4efea4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b8ee28576f6406f59fe7b4a0bb4efea4"}, "created_at": 1666821808.02933, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('START_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('END_DATE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_airdrop_master_ETH"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_airdrop_master_ETH_ADDRESS__0_xX_0_9a_fA_F_.a92e5cbe4d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4581b809618d7f180db1c887acd6faea\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_airdrop_master_ETH')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_airdrop_master_ETH"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4581b809618d7f180db1c887acd6faea", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_expectations_expect_column_values_to_match_regex_silver__tags_airdrop_master_ETH_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_airdrop_master_ETH_ADDRESS__0_xX_0_9a_fA_F_.a92e5cbe4d", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_4581b809618d7f180db1c887acd6faea.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_airdrop_master_ETH.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__tags_airdrop_master_ETH_ADDRESS__0_xX_0_9a_fA_F_", "alias": "tags_airdrop_master_ETH_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_airdrop_master_ETH"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_airdrop_master_ETH.yml\\dbt_expectations_expect_column_4581b809618d7f180db1c887acd6faea.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_4581b809618d7f180db1c887acd6faea"}, "created_at": 1666821808.02933, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.silver.tags_airdrop_master_ETH\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_airdrop_master_ETH"}, "test.crosschain_models.not_null_silver__tags_airdrop_master_ETH_TAG_NAME.79303f25f5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TAG_NAME", "model": "{{ get_where_subquery(ref('silver__tags_airdrop_master_ETH')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_airdrop_master_ETH"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "not_null_silver__tags_airdrop_master_ETH_TAG_NAME"], "unique_id": "test.crosschain_models.not_null_silver__tags_airdrop_master_ETH_TAG_NAME.79303f25f5", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__tags_airdrop_master_ETH_TAG_NAME.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_airdrop_master_ETH.yml", "name": "not_null_silver__tags_airdrop_master_ETH_TAG_NAME", "alias": "tags_airdrop_master_ETH_TAG_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_airdrop_master_ETH"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_airdrop_master_ETH.yml\\not_null_silver__tags_airdrop_master_ETH_TAG_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821808.0449553, "compiled_sql": "\n    \n    \n\n\n\nselect TAG_NAME\nfrom CROSSCHAIN_DEV.silver.tags_airdrop_master_ETH\nwhere TAG_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TAG_NAME", "file_key_name": "models.silver__tags_airdrop_master_ETH"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_airdrop_master_ETH_ADDRESS__TAG_NAME__START_DATE.af378860dd": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a482454997a2f29a02192797cdcba224\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS", "TAG_NAME", "START_DATE"], "model": "{{ get_where_subquery(ref('silver__tags_airdrop_master_ETH')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_airdrop_master_ETH"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a482454997a2f29a02192797cdcba224", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_utils_unique_combination_of_columns_silver__tags_airdrop_master_ETH_ADDRESS__TAG_NAME__START_DATE"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_airdrop_master_ETH_ADDRESS__TAG_NAME__START_DATE.af378860dd", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_a482454997a2f29a02192797cdcba224.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_airdrop_master_ETH.yml", "name": "dbt_utils_unique_combination_of_columns_silver__tags_airdrop_master_ETH_ADDRESS__TAG_NAME__START_DATE", "alias": "tags_airdrop_master_ETH_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_airdrop_master_ETH"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_airdrop_master_ETH.yml\\dbt_utils_unique_combination_o_a482454997a2f29a02192797cdcba224.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a482454997a2f29a02192797cdcba224"}, "created_at": 1666821808.0449553, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS, TAG_NAME, START_DATE\n    from CROSSCHAIN_DEV.silver.tags_airdrop_master_ETH\n    group by ADDRESS, TAG_NAME, START_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__tags_airdrop_master_ETH"}, "test.crosschain_models.not_null_silver_crosschain__snowflake_Optimism_satellites_ADDRESS.3005aafddd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_crosschain__sn_8576ec8242b418ed7453a7018442287e\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_Optimism_satellites')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_Optimism_satellites"]}, "config": {"enabled": true, "alias": "not_null_silver_crosschain__sn_8576ec8242b418ed7453a7018442287e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "not_null_silver_crosschain__snowflake_Optimism_satellites_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__snowflake_Optimism_satellites_ADDRESS.3005aafddd", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__sn_8576ec8242b418ed7453a7018442287e.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Optimism_satellites.yml", "name": "not_null_silver_crosschain__snowflake_Optimism_satellites_ADDRESS", "alias": "snowflake_Optimism_satellites_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_Optimism_satellites"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Optimism_satellites.yml\\not_null_silver_crosschain__sn_8576ec8242b418ed7453a7018442287e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_silver_crosschain__sn_8576ec8242b418ed7453a7018442287e"}, "created_at": 1666821808.0449553, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver_crosschain.snowflake_Optimism_satellites\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__snowflake_Optimism_satellites"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Optimism_satellites_ADDRESS__STRING__VARCHAR.43a5ee481e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9594895a80937b7fc62e55a1d9fa9ed0\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_Optimism_satellites')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_Optimism_satellites"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9594895a80937b7fc62e55a1d9fa9ed0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Optimism_satellites_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Optimism_satellites_ADDRESS__STRING__VARCHAR.43a5ee481e", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_9594895a80937b7fc62e55a1d9fa9ed0.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Optimism_satellites.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Optimism_satellites_ADDRESS__STRING__VARCHAR", "alias": "snowflake_Optimism_satellites_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_Optimism_satellites"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Optimism_satellites.yml\\dbt_expectations_expect_column_9594895a80937b7fc62e55a1d9fa9ed0.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_9594895a80937b7fc62e55a1d9fa9ed0"}, "created_at": 1666821808.0449553, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('SYSTEM_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INSERT_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L2_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__snowflake_Optimism_satellites"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Optimism_satellites_BLOCKCHAIN__CREATOR__ADDRESS.61688ab7e3": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f1ccf059ae83ab651c9c087956fe57b3\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCKCHAIN", "CREATOR", "ADDRESS"], "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_Optimism_satellites')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_Optimism_satellites"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f1ccf059ae83ab651c9c087956fe57b3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Optimism_satellites_BLOCKCHAIN__CREATOR__ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Optimism_satellites_BLOCKCHAIN__CREATOR__ADDRESS.61688ab7e3", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_f1ccf059ae83ab651c9c087956fe57b3.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Optimism_satellites.yml", "name": "dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Optimism_satellites_BLOCKCHAIN__CREATOR__ADDRESS", "alias": "snowflake_Optimism_satellites_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_Optimism_satellites"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Optimism_satellites.yml\\dbt_utils_unique_combination_o_f1ccf059ae83ab651c9c087956fe57b3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_f1ccf059ae83ab651c9c087956fe57b3"}, "created_at": 1666821808.06058, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCKCHAIN, CREATOR, ADDRESS\n    from CROSSCHAIN_DEV.silver_crosschain.snowflake_Optimism_satellites\n    group by BLOCKCHAIN, CREATOR, ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver_crosschain__snowflake_Optimism_satellites"}, "test.crosschain_models.not_null_silver__tags_thor_liquidity_provider_ADDRESS.42acd8cc75": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_thor_liquidity_provider')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_thor_liquidity_provider"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "tags", "Thorchain", "not_null_silver__tags_thor_liquidity_provider_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver__tags_thor_liquidity_provider_ADDRESS.42acd8cc75", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__tags_thor_liquidity_provider_ADDRESS.sql", "original_file_path": "models\\silver\\tags\\Thorchain\\silver__tags_thor_liquidity_provider.yml", "name": "not_null_silver__tags_thor_liquidity_provider_ADDRESS", "alias": "tags_thor_liquidity_provider_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_thor_liquidity_provider"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Thorchain\\silver__tags_thor_liquidity_provider.yml\\not_null_silver__tags_thor_liquidity_provider_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821808.06058, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver.tags_thor_liquidity_provider\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_thor_liquidity_provider"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_thor_liquidity_provider_ADDRESS__STRING__VARCHAR.f7e3d5c6f3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_abbe5dd110024760eac3ebe70b9d6b75\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_thor_liquidity_provider')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_thor_liquidity_provider"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_abbe5dd110024760eac3ebe70b9d6b75", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "tags", "Thorchain", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_thor_liquidity_provider_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_thor_liquidity_provider_ADDRESS__STRING__VARCHAR.f7e3d5c6f3", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_abbe5dd110024760eac3ebe70b9d6b75.sql", "original_file_path": "models\\silver\\tags\\Thorchain\\silver__tags_thor_liquidity_provider.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_thor_liquidity_provider_ADDRESS__STRING__VARCHAR", "alias": "tags_thor_liquidity_provider_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_thor_liquidity_provider"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Thorchain\\silver__tags_thor_liquidity_provider.yml\\dbt_expectations_expect_column_abbe5dd110024760eac3ebe70b9d6b75.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_abbe5dd110024760eac3ebe70b9d6b75"}, "created_at": 1666821808.06058, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('START_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('END_DATE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_thor_liquidity_provider"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_thor_liquidity_provider_ADDRESS.f7e5c290eb": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0bf9eb39ecc46a11a5923a010fbc7d26\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS"], "model": "{{ get_where_subquery(ref('silver__tags_thor_liquidity_provider')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_thor_liquidity_provider"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0bf9eb39ecc46a11a5923a010fbc7d26", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["crosschain_models", "silver", "tags", "Thorchain", "dbt_utils_unique_combination_of_columns_silver__tags_thor_liquidity_provider_ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_thor_liquidity_provider_ADDRESS.f7e5c290eb", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_0bf9eb39ecc46a11a5923a010fbc7d26.sql", "original_file_path": "models\\silver\\tags\\Thorchain\\silver__tags_thor_liquidity_provider.yml", "name": "dbt_utils_unique_combination_of_columns_silver__tags_thor_liquidity_provider_ADDRESS", "alias": "tags_thor_liquidity_provider_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_thor_liquidity_provider"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Thorchain\\silver__tags_thor_liquidity_provider.yml\\dbt_utils_unique_combination_o_0bf9eb39ecc46a11a5923a010fbc7d26.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_0bf9eb39ecc46a11a5923a010fbc7d26"}, "created_at": 1666821808.0762064, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS\n    from CROSSCHAIN_DEV.silver.tags_thor_liquidity_provider\n    group by ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__tags_thor_liquidity_provider"}, "test.crosschain_models.not_null_silver__tags_active_avalanche_last_7_ADDRESS.37f6953e76": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_active_avalanche_last_7')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_active_avalanche_last_7"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "tags", "Avalanche", "not_null_silver__tags_active_avalanche_last_7_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver__tags_active_avalanche_last_7_ADDRESS.37f6953e76", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__tags_active_avalanche_last_7_ADDRESS.sql", "original_file_path": "models\\silver\\tags\\Avalanche\\silver__tags_active_avalanche_last_7.yml", "name": "not_null_silver__tags_active_avalanche_last_7_ADDRESS", "alias": "tags_active_avalanche_last_7_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_active_avalanche_last_7"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Avalanche\\silver__tags_active_avalanche_last_7.yml\\not_null_silver__tags_active_avalanche_last_7_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821808.0762064, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver.tags_active_avalanche_last_7\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_active_avalanche_last_7"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_avalanche_last_7_ADDRESS__STRING__VARCHAR.21ffeb7af9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cf9907034349a7aefacfb92fb47ed8a6\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_active_avalanche_last_7')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_active_avalanche_last_7"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cf9907034349a7aefacfb92fb47ed8a6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "tags", "Avalanche", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_avalanche_last_7_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_avalanche_last_7_ADDRESS__STRING__VARCHAR.21ffeb7af9", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_cf9907034349a7aefacfb92fb47ed8a6.sql", "original_file_path": "models\\silver\\tags\\Avalanche\\silver__tags_active_avalanche_last_7.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_avalanche_last_7_ADDRESS__STRING__VARCHAR", "alias": "tags_active_avalanche_last_7_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_active_avalanche_last_7"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Avalanche\\silver__tags_active_avalanche_last_7.yml\\dbt_expectations_expect_column_cf9907034349a7aefacfb92fb47ed8a6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_cf9907034349a7aefacfb92fb47ed8a6"}, "created_at": 1666821808.0762064, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('START_DATE' as \n    varchar\n) as relation_column,\n            cast('DATE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('END_DATE' as \n    varchar\n) as relation_column,\n            cast('DATE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_active_avalanche_last_7"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_avalanche_last_7_ADDRESS__0_xX_0_9a_fA_F_.c4581326b9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cc74c4000498cab7b4e85ee6ce52e383\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_active_avalanche_last_7')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_active_avalanche_last_7"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cc74c4000498cab7b4e85ee6ce52e383", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["crosschain_models", "silver", "tags", "Avalanche", "dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_avalanche_last_7_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_avalanche_last_7_ADDRESS__0_xX_0_9a_fA_F_.c4581326b9", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_cc74c4000498cab7b4e85ee6ce52e383.sql", "original_file_path": "models\\silver\\tags\\Avalanche\\silver__tags_active_avalanche_last_7.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_avalanche_last_7_ADDRESS__0_xX_0_9a_fA_F_", "alias": "tags_active_avalanche_last_7_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_active_avalanche_last_7"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Avalanche\\silver__tags_active_avalanche_last_7.yml\\dbt_expectations_expect_column_cc74c4000498cab7b4e85ee6ce52e383.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_cc74c4000498cab7b4e85ee6ce52e383"}, "created_at": 1666821808.0918307, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.silver.tags_active_avalanche_last_7\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_active_avalanche_last_7"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_active_avalanche_last_7_ADDRESS__START_DATE.90bfb821b6": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d65dcbc03143986218c9513565a8e181\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS", "START_DATE"], "model": "{{ get_where_subquery(ref('silver__tags_active_avalanche_last_7')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_active_avalanche_last_7"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d65dcbc03143986218c9513565a8e181", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["crosschain_models", "silver", "tags", "Avalanche", "dbt_utils_unique_combination_of_columns_silver__tags_active_avalanche_last_7_ADDRESS__START_DATE"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_active_avalanche_last_7_ADDRESS__START_DATE.90bfb821b6", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_d65dcbc03143986218c9513565a8e181.sql", "original_file_path": "models\\silver\\tags\\Avalanche\\silver__tags_active_avalanche_last_7.yml", "name": "dbt_utils_unique_combination_of_columns_silver__tags_active_avalanche_last_7_ADDRESS__START_DATE", "alias": "tags_active_avalanche_last_7_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_active_avalanche_last_7"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Avalanche\\silver__tags_active_avalanche_last_7.yml\\dbt_utils_unique_combination_o_d65dcbc03143986218c9513565a8e181.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d65dcbc03143986218c9513565a8e181"}, "created_at": 1666821808.0918307, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS, START_DATE\n    from CROSSCHAIN_DEV.silver.tags_active_avalanche_last_7\n    group by ADDRESS, START_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__tags_active_avalanche_last_7"}, "test.crosschain_models.not_null_silver__tags_cex_user_ETH_ADDRESS.8f5bc8abef": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_cex_user_ETH')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_cex_user_ETH"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "not_null_silver__tags_cex_user_ETH_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver__tags_cex_user_ETH_ADDRESS.8f5bc8abef", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__tags_cex_user_ETH_ADDRESS.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_cex_user_ETH.yml", "name": "not_null_silver__tags_cex_user_ETH_ADDRESS", "alias": "tags_cex_user_ETH_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_cex_user_ETH"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_cex_user_ETH.yml\\not_null_silver__tags_cex_user_ETH_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821808.1082847, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver.tags_cex_user_ETH\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_cex_user_ETH"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_cex_user_ETH_ADDRESS__STRING__VARCHAR.ca63271ea1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a0d01ea245311b66d24491d77f87c7ca\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_cex_user_ETH')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_cex_user_ETH"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a0d01ea245311b66d24491d77f87c7ca", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_cex_user_ETH_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_cex_user_ETH_ADDRESS__STRING__VARCHAR.ca63271ea1", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_a0d01ea245311b66d24491d77f87c7ca.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_cex_user_ETH.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_cex_user_ETH_ADDRESS__STRING__VARCHAR", "alias": "tags_cex_user_ETH_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_cex_user_ETH"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_cex_user_ETH.yml\\dbt_expectations_expect_column_a0d01ea245311b66d24491d77f87c7ca.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a0d01ea245311b66d24491d77f87c7ca"}, "created_at": 1666821808.1082847, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('START_DATE' as \n    varchar\n) as relation_column,\n            cast('DATE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('END_DATE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_cex_user_ETH"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_cex_user_ETH_ADDRESS__0_xX_0_9a_fA_F_.6bd28cb52c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8b9b2384695a2aed27187ca152c320be\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_cex_user_ETH')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_cex_user_ETH"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8b9b2384695a2aed27187ca152c320be", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_expectations_expect_column_values_to_match_regex_silver__tags_cex_user_ETH_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_cex_user_ETH_ADDRESS__0_xX_0_9a_fA_F_.6bd28cb52c", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_8b9b2384695a2aed27187ca152c320be.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_cex_user_ETH.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__tags_cex_user_ETH_ADDRESS__0_xX_0_9a_fA_F_", "alias": "tags_cex_user_ETH_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_cex_user_ETH"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_cex_user_ETH.yml\\dbt_expectations_expect_column_8b9b2384695a2aed27187ca152c320be.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_8b9b2384695a2aed27187ca152c320be"}, "created_at": 1666821808.1082847, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.silver.tags_cex_user_ETH\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_cex_user_ETH"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_cex_user_ETH_ADDRESS__TAG_NAME.7a31800d9f": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a5bccd5e01d6b71287c1d82c18bdb345\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS", "TAG_NAME"], "model": "{{ get_where_subquery(ref('silver__tags_cex_user_ETH')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_cex_user_ETH"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a5bccd5e01d6b71287c1d82c18bdb345", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_utils_unique_combination_of_columns_silver__tags_cex_user_ETH_ADDRESS__TAG_NAME"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_cex_user_ETH_ADDRESS__TAG_NAME.7a31800d9f", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_a5bccd5e01d6b71287c1d82c18bdb345.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_cex_user_ETH.yml", "name": "dbt_utils_unique_combination_of_columns_silver__tags_cex_user_ETH_ADDRESS__TAG_NAME", "alias": "tags_cex_user_ETH_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_cex_user_ETH"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_cex_user_ETH.yml\\dbt_utils_unique_combination_o_a5bccd5e01d6b71287c1d82c18bdb345.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a5bccd5e01d6b71287c1d82c18bdb345"}, "created_at": 1666821808.1082847, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS, TAG_NAME\n    from CROSSCHAIN_DEV.silver.tags_cex_user_ETH\n    group by ADDRESS, TAG_NAME\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__tags_cex_user_ETH"}, "test.crosschain_models.not_null_silver__tags_nft_transactor_ETH_ADDRESS.0cb0dba3eb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_nft_transactor_ETH')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_nft_transactor_ETH"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "not_null_silver__tags_nft_transactor_ETH_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver__tags_nft_transactor_ETH_ADDRESS.0cb0dba3eb", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__tags_nft_transactor_ETH_ADDRESS.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_transactor_ETH.yml", "name": "not_null_silver__tags_nft_transactor_ETH_ADDRESS", "alias": "tags_nft_transactor_ETH_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_nft_transactor_ETH"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_transactor_ETH.yml\\not_null_silver__tags_nft_transactor_ETH_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821808.1267266, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver.tags_nft_transactor_ETH\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_nft_transactor_ETH"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_transactor_ETH_ADDRESS__STRING__VARCHAR.8076e07574": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_31af7ce1c74f269e9136eced1d5e59ca\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_nft_transactor_ETH')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_nft_transactor_ETH"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_31af7ce1c74f269e9136eced1d5e59ca", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_transactor_ETH_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_transactor_ETH_ADDRESS__STRING__VARCHAR.8076e07574", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_31af7ce1c74f269e9136eced1d5e59ca.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_transactor_ETH.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_transactor_ETH_ADDRESS__STRING__VARCHAR", "alias": "tags_nft_transactor_ETH_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_nft_transactor_ETH"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_transactor_ETH.yml\\dbt_expectations_expect_column_31af7ce1c74f269e9136eced1d5e59ca.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_31af7ce1c74f269e9136eced1d5e59ca"}, "created_at": 1666821808.1267266, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('START_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('END_DATE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_nft_transactor_ETH"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_transactor_ETH_ADDRESS__0_xX_0_9a_fA_F_.88897ddbfd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_052e0c69c6fd114709940e7c9819d7ba\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_nft_transactor_ETH')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_nft_transactor_ETH"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_052e0c69c6fd114709940e7c9819d7ba", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_transactor_ETH_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_transactor_ETH_ADDRESS__0_xX_0_9a_fA_F_.88897ddbfd", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_052e0c69c6fd114709940e7c9819d7ba.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_transactor_ETH.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_transactor_ETH_ADDRESS__0_xX_0_9a_fA_F_", "alias": "tags_nft_transactor_ETH_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_nft_transactor_ETH"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_transactor_ETH.yml\\dbt_expectations_expect_column_052e0c69c6fd114709940e7c9819d7ba.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_052e0c69c6fd114709940e7c9819d7ba"}, "created_at": 1666821808.1347306, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.silver.tags_nft_transactor_ETH\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_nft_transactor_ETH"}, "test.crosschain_models.not_null_silver__tags_nft_transactor_ETH_TAG_NAME.39732b6234": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TAG_NAME", "model": "{{ get_where_subquery(ref('silver__tags_nft_transactor_ETH')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_nft_transactor_ETH"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "not_null_silver__tags_nft_transactor_ETH_TAG_NAME"], "unique_id": "test.crosschain_models.not_null_silver__tags_nft_transactor_ETH_TAG_NAME.39732b6234", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__tags_nft_transactor_ETH_TAG_NAME.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_transactor_ETH.yml", "name": "not_null_silver__tags_nft_transactor_ETH_TAG_NAME", "alias": "tags_nft_transactor_ETH_TAG_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_nft_transactor_ETH"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_transactor_ETH.yml\\not_null_silver__tags_nft_transactor_ETH_TAG_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821808.1347306, "compiled_sql": "\n    \n    \n\n\n\nselect TAG_NAME\nfrom CROSSCHAIN_DEV.silver.tags_nft_transactor_ETH\nwhere TAG_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TAG_NAME", "file_key_name": "models.silver__tags_nft_transactor_ETH"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_transactor_ETH_ADDRESS__TAG_NAME__START_DATE.568aebebc1": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_30588a9d8af07e3497b1e61778a5f4c7\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS", "TAG_NAME", "START_DATE"], "model": "{{ get_where_subquery(ref('silver__tags_nft_transactor_ETH')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_nft_transactor_ETH"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_30588a9d8af07e3497b1e61778a5f4c7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_utils_unique_combination_of_columns_silver__tags_nft_transactor_ETH_ADDRESS__TAG_NAME__START_DATE"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_transactor_ETH_ADDRESS__TAG_NAME__START_DATE.568aebebc1", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_30588a9d8af07e3497b1e61778a5f4c7.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_transactor_ETH.yml", "name": "dbt_utils_unique_combination_of_columns_silver__tags_nft_transactor_ETH_ADDRESS__TAG_NAME__START_DATE", "alias": "tags_nft_transactor_ETH_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_nft_transactor_ETH"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_transactor_ETH.yml\\dbt_utils_unique_combination_o_30588a9d8af07e3497b1e61778a5f4c7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_30588a9d8af07e3497b1e61778a5f4c7"}, "created_at": 1666821808.1347306, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS, TAG_NAME, START_DATE\n    from CROSSCHAIN_DEV.silver.tags_nft_transactor_ETH\n    group by ADDRESS, TAG_NAME, START_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__tags_nft_transactor_ETH"}, "test.crosschain_models.not_null_silver__tags_contract_address_bsc_ADDRESS.c6d445ef31": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_contract_address_bsc')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_contract_address_bsc"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "tags", "BSC", "not_null_silver__tags_contract_address_bsc_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver__tags_contract_address_bsc_ADDRESS.c6d445ef31", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__tags_contract_address_bsc_ADDRESS.sql", "original_file_path": "models\\silver\\tags\\BSC\\silver__tags_contract_address_bsc.yml", "name": "not_null_silver__tags_contract_address_bsc_ADDRESS", "alias": "tags_contract_address_bsc_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_contract_address_bsc"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\BSC\\silver__tags_contract_address_bsc.yml\\not_null_silver__tags_contract_address_bsc_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821808.1427317, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver.tags_contract_address_bsc\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_contract_address_bsc"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_bsc_ADDRESS__STRING__VARCHAR.b3e54467e4": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_da4d04371b304b7a67b6b51e1ff6d61c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_contract_address_bsc')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_contract_address_bsc"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_da4d04371b304b7a67b6b51e1ff6d61c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "tags", "BSC", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_bsc_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_bsc_ADDRESS__STRING__VARCHAR.b3e54467e4", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_da4d04371b304b7a67b6b51e1ff6d61c.sql", "original_file_path": "models\\silver\\tags\\BSC\\silver__tags_contract_address_bsc.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_bsc_ADDRESS__STRING__VARCHAR", "alias": "tags_contract_address_bsc_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_contract_address_bsc"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\BSC\\silver__tags_contract_address_bsc.yml\\dbt_expectations_expect_column_da4d04371b304b7a67b6b51e1ff6d61c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_da4d04371b304b7a67b6b51e1ff6d61c"}, "created_at": 1666821808.15115, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('START_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('END_DATE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_contract_address_bsc"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_bsc_ADDRESS__0_xX_0_9a_fA_F_.496673602d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1d32968f5426bb1910007ed062dfe843\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_contract_address_bsc')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_contract_address_bsc"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1d32968f5426bb1910007ed062dfe843", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["crosschain_models", "silver", "tags", "BSC", "dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_bsc_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_bsc_ADDRESS__0_xX_0_9a_fA_F_.496673602d", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_1d32968f5426bb1910007ed062dfe843.sql", "original_file_path": "models\\silver\\tags\\BSC\\silver__tags_contract_address_bsc.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_bsc_ADDRESS__0_xX_0_9a_fA_F_", "alias": "tags_contract_address_bsc_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_contract_address_bsc"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\BSC\\silver__tags_contract_address_bsc.yml\\dbt_expectations_expect_column_1d32968f5426bb1910007ed062dfe843.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_1d32968f5426bb1910007ed062dfe843"}, "created_at": 1666821808.1523144, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.silver.tags_contract_address_bsc\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_contract_address_bsc"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_contract_address_bsc_ADDRESS.68c3a1e502": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7a9249dc724050da1d401c8fcf3759a6\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS"], "model": "{{ get_where_subquery(ref('silver__tags_contract_address_bsc')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_contract_address_bsc"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7a9249dc724050da1d401c8fcf3759a6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["crosschain_models", "silver", "tags", "BSC", "dbt_utils_unique_combination_of_columns_silver__tags_contract_address_bsc_ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_contract_address_bsc_ADDRESS.68c3a1e502", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_7a9249dc724050da1d401c8fcf3759a6.sql", "original_file_path": "models\\silver\\tags\\BSC\\silver__tags_contract_address_bsc.yml", "name": "dbt_utils_unique_combination_of_columns_silver__tags_contract_address_bsc_ADDRESS", "alias": "tags_contract_address_bsc_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_contract_address_bsc"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\BSC\\silver__tags_contract_address_bsc.yml\\dbt_utils_unique_combination_o_7a9249dc724050da1d401c8fcf3759a6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7a9249dc724050da1d401c8fcf3759a6"}, "created_at": 1666821808.1523144, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS\n    from CROSSCHAIN_DEV.silver.tags_contract_address_bsc\n    group by ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__tags_contract_address_bsc"}, "test.crosschain_models.not_null_silver_crosschain__snowflake_Thorchain_satellite_ADDRESS.94e8a409e0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_crosschain__sn_6dfccf381687701b08e0ecc2ecfe5ac7\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_Thorchain_satellite')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_Thorchain_satellite"]}, "config": {"enabled": true, "alias": "not_null_silver_crosschain__sn_6dfccf381687701b08e0ecc2ecfe5ac7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "not_null_silver_crosschain__snowflake_Thorchain_satellite_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__snowflake_Thorchain_satellite_ADDRESS.94e8a409e0", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__sn_6dfccf381687701b08e0ecc2ecfe5ac7.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Thorchain_satellite.yml", "name": "not_null_silver_crosschain__snowflake_Thorchain_satellite_ADDRESS", "alias": "snowflake_Thorchain_satellite_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_Thorchain_satellite"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Thorchain_satellite.yml\\not_null_silver_crosschain__sn_6dfccf381687701b08e0ecc2ecfe5ac7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_silver_crosschain__sn_6dfccf381687701b08e0ecc2ecfe5ac7"}, "created_at": 1666821808.1523144, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver_crosschain.snowflake_Thorchain_satellite\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__snowflake_Thorchain_satellite"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Thorchain_satellite_ADDRESS__STRING__VARCHAR.8b884fa762": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_000b332ca376e2ec56ff458e3df8dc5a\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_Thorchain_satellite')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_Thorchain_satellite"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_000b332ca376e2ec56ff458e3df8dc5a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Thorchain_satellite_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Thorchain_satellite_ADDRESS__STRING__VARCHAR.8b884fa762", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_000b332ca376e2ec56ff458e3df8dc5a.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Thorchain_satellite.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Thorchain_satellite_ADDRESS__STRING__VARCHAR", "alias": "snowflake_Thorchain_satellite_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_Thorchain_satellite"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Thorchain_satellite.yml\\dbt_expectations_expect_column_000b332ca376e2ec56ff458e3df8dc5a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_000b332ca376e2ec56ff458e3df8dc5a"}, "created_at": 1666821808.168195, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('SYSTEM_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INSERT_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L2_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__snowflake_Thorchain_satellite"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Thorchain_satellite_BLOCKCHAIN__CREATOR__ADDRESS.ba657294c5": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_bc1f5619a08793f9710a58e353e72d1e\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCKCHAIN", "CREATOR", "ADDRESS"], "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_Thorchain_satellite')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_Thorchain_satellite"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_bc1f5619a08793f9710a58e353e72d1e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Thorchain_satellite_BLOCKCHAIN__CREATOR__ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Thorchain_satellite_BLOCKCHAIN__CREATOR__ADDRESS.ba657294c5", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_bc1f5619a08793f9710a58e353e72d1e.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Thorchain_satellite.yml", "name": "dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Thorchain_satellite_BLOCKCHAIN__CREATOR__ADDRESS", "alias": "snowflake_Thorchain_satellite_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_Thorchain_satellite"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_Thorchain_satellite.yml\\dbt_utils_unique_combination_o_bc1f5619a08793f9710a58e353e72d1e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_bc1f5619a08793f9710a58e353e72d1e"}, "created_at": 1666821808.168195, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCKCHAIN, CREATOR, ADDRESS\n    from CROSSCHAIN_DEV.silver_crosschain.snowflake_Thorchain_satellite\n    group by BLOCKCHAIN, CREATOR, ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver_crosschain__snowflake_Thorchain_satellite"}, "test.crosschain_models.not_null_silver__tags_nft_nftx_user_ADDRESS.ea3334c966": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_nft_nftx_user')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_nft_nftx_user"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "not_null_silver__tags_nft_nftx_user_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver__tags_nft_nftx_user_ADDRESS.ea3334c966", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__tags_nft_nftx_user_ADDRESS.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_nftx_user.yml", "name": "not_null_silver__tags_nft_nftx_user_ADDRESS", "alias": "tags_nft_nftx_user_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_nft_nftx_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_nftx_user.yml\\not_null_silver__tags_nft_nftx_user_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821808.168195, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver.tags_nft_nftx_user\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_nft_nftx_user"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_nftx_user_ADDRESS__STRING__VARCHAR.58c89e1a26": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6b339b12ed70c32a9dd699447eb6dccc\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_nft_nftx_user')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_nft_nftx_user"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6b339b12ed70c32a9dd699447eb6dccc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_nftx_user_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_nftx_user_ADDRESS__STRING__VARCHAR.58c89e1a26", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_6b339b12ed70c32a9dd699447eb6dccc.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_nftx_user.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_nftx_user_ADDRESS__STRING__VARCHAR", "alias": "tags_nft_nftx_user_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_nft_nftx_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_nftx_user.yml\\dbt_expectations_expect_column_6b339b12ed70c32a9dd699447eb6dccc.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6b339b12ed70c32a9dd699447eb6dccc"}, "created_at": 1666821808.168195, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('START_DATE' as \n    varchar\n) as relation_column,\n            cast('DATE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('END_DATE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_nft_nftx_user"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_nftx_user_ADDRESS__0_xX_0_9a_fA_F_.4a534aeb27": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e26c90f0cca053ffc742cfcf421474a1\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_nft_nftx_user')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_nft_nftx_user"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e26c90f0cca053ffc742cfcf421474a1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_nftx_user_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_nftx_user_ADDRESS__0_xX_0_9a_fA_F_.4a534aeb27", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_e26c90f0cca053ffc742cfcf421474a1.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_nftx_user.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_nftx_user_ADDRESS__0_xX_0_9a_fA_F_", "alias": "tags_nft_nftx_user_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_nft_nftx_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_nftx_user.yml\\dbt_expectations_expect_column_e26c90f0cca053ffc742cfcf421474a1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e26c90f0cca053ffc742cfcf421474a1"}, "created_at": 1666821808.1838248, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.silver.tags_nft_nftx_user\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_nft_nftx_user"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_nftx_user_ADDRESS.2742e2114d": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_878a7771edc3e44f363d05adc6f6a301\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS"], "model": "{{ get_where_subquery(ref('silver__tags_nft_nftx_user')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_nft_nftx_user"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_878a7771edc3e44f363d05adc6f6a301", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_utils_unique_combination_of_columns_silver__tags_nft_nftx_user_ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_nftx_user_ADDRESS.2742e2114d", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_878a7771edc3e44f363d05adc6f6a301.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_nft_nftx_user.yml", "name": "dbt_utils_unique_combination_of_columns_silver__tags_nft_nftx_user_ADDRESS", "alias": "tags_nft_nftx_user_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_nft_nftx_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_nft_nftx_user.yml\\dbt_utils_unique_combination_o_878a7771edc3e44f363d05adc6f6a301.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_878a7771edc3e44f363d05adc6f6a301"}, "created_at": 1666821808.1838248, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS\n    from CROSSCHAIN_DEV.silver.tags_nft_nftx_user\n    group by ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__tags_nft_nftx_user"}, "test.crosschain_models.not_null_silver_crosschain__snowflake_SOL_satellites_ADDRESS.c659cc60f8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_SOL_satellites')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_SOL_satellites"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "not_null_silver_crosschain__snowflake_SOL_satellites_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__snowflake_SOL_satellites_ADDRESS.c659cc60f8", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__snowflake_SOL_satellites_ADDRESS.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_SOL_satellites.yml", "name": "not_null_silver_crosschain__snowflake_SOL_satellites_ADDRESS", "alias": "snowflake_SOL_satellites_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_SOL_satellites"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_SOL_satellites.yml\\not_null_silver_crosschain__snowflake_SOL_satellites_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821808.1994488, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver_crosschain.snowflake_SOL_satellites\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__snowflake_SOL_satellites"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_SOL_satellites_ADDRESS__STRING__VARCHAR.62aaa4ddf0": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4a2f3afa1221a8c16597d3087d0614f7\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_SOL_satellites')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_SOL_satellites"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4a2f3afa1221a8c16597d3087d0614f7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_SOL_satellites_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_SOL_satellites_ADDRESS__STRING__VARCHAR.62aaa4ddf0", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_4a2f3afa1221a8c16597d3087d0614f7.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_SOL_satellites.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_SOL_satellites_ADDRESS__STRING__VARCHAR", "alias": "snowflake_SOL_satellites_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_SOL_satellites"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_SOL_satellites.yml\\dbt_expectations_expect_column_4a2f3afa1221a8c16597d3087d0614f7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_4a2f3afa1221a8c16597d3087d0614f7"}, "created_at": 1666821808.1994488, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('SYSTEM_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INSERT_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L2_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__snowflake_SOL_satellites"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_SOL_satellites_BLOCKCHAIN__CREATOR__ADDRESS.8436e4fa2b": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c6df806d2224bdce1d4b96391722c4a5\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCKCHAIN", "CREATOR", "ADDRESS"], "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_SOL_satellites')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_SOL_satellites"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c6df806d2224bdce1d4b96391722c4a5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_SOL_satellites_BLOCKCHAIN__CREATOR__ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_SOL_satellites_BLOCKCHAIN__CREATOR__ADDRESS.8436e4fa2b", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_c6df806d2224bdce1d4b96391722c4a5.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_SOL_satellites.yml", "name": "dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_SOL_satellites_BLOCKCHAIN__CREATOR__ADDRESS", "alias": "snowflake_SOL_satellites_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_SOL_satellites"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_SOL_satellites.yml\\dbt_utils_unique_combination_o_c6df806d2224bdce1d4b96391722c4a5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c6df806d2224bdce1d4b96391722c4a5"}, "created_at": 1666821808.1994488, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCKCHAIN, CREATOR, ADDRESS\n    from CROSSCHAIN_DEV.silver_crosschain.snowflake_SOL_satellites\n    group by BLOCKCHAIN, CREATOR, ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver_crosschain__snowflake_SOL_satellites"}, "test.crosschain_models.not_null_core__fact_hourly_prices_PROVIDER.91ee2e8c6b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROVIDER", "model": "{{ get_where_subquery(ref('core__fact_hourly_prices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.core__fact_hourly_prices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_core", "fqn": ["crosschain_models", "core", "not_null_core__fact_hourly_prices_PROVIDER"], "unique_id": "test.crosschain_models.not_null_core__fact_hourly_prices_PROVIDER.91ee2e8c6b", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_core__fact_hourly_prices_PROVIDER.sql", "original_file_path": "models\\core\\core__fact_hourly_prices.yml", "name": "not_null_core__fact_hourly_prices_PROVIDER", "alias": "fact_hourly_prices_PROVIDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_hourly_prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__fact_hourly_prices.yml\\not_null_core__fact_hourly_prices_PROVIDER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821808.3248892, "compiled_sql": "\n    \n    \n\n\n\nselect PROVIDER\nfrom CROSSCHAIN_DEV.core.fact_hourly_prices\nwhere PROVIDER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PROVIDER", "file_key_name": "models.core__fact_hourly_prices"}, "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_PROVIDER.235f59cf8a": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ee8c93d18df60f1e19bf73bf040e7a6f\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROVIDER", "model": "{{ get_where_subquery(ref('core__fact_hourly_prices')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.core__fact_hourly_prices"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ee8c93d18df60f1e19bf73bf040e7a6f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["crosschain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_PROVIDER"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_PROVIDER.235f59cf8a", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_ee8c93d18df60f1e19bf73bf040e7a6f.sql", "original_file_path": "models\\core\\core__fact_hourly_prices.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_PROVIDER", "alias": "fact_hourly_prices_PROVIDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_hourly_prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__fact_hourly_prices.yml\\dbt_expectations_expect_column_ee8c93d18df60f1e19bf73bf040e7a6f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ee8c93d18df60f1e19bf73bf040e7a6f"}, "created_at": 1666821808.3248892, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PROVIDER' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PROVIDER", "file_key_name": "models.core__fact_hourly_prices"}, "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_ID.15d6edcab1": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_43e4714ecbda07ea324f4a23f5f7f1f4\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ID", "model": "{{ get_where_subquery(ref('core__fact_hourly_prices')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.core__fact_hourly_prices"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_43e4714ecbda07ea324f4a23f5f7f1f4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["crosschain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_ID"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_ID.15d6edcab1", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_43e4714ecbda07ea324f4a23f5f7f1f4.sql", "original_file_path": "models\\core\\core__fact_hourly_prices.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_ID", "alias": "fact_hourly_prices_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_hourly_prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__fact_hourly_prices.yml\\dbt_expectations_expect_column_43e4714ecbda07ea324f4a23f5f7f1f4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_43e4714ecbda07ea324f4a23f5f7f1f4"}, "created_at": 1666821808.3248892, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('ID' as \n    varchar\n) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ID", "file_key_name": "models.core__fact_hourly_prices"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_hourly_prices_ID__STRING__VARCHAR.1c2074ca53": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fcc07b058a8397ab2dcc75b946a6a1fb\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ID", "model": "{{ get_where_subquery(ref('core__fact_hourly_prices')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.core__fact_hourly_prices"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fcc07b058a8397ab2dcc75b946a6a1fb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["crosschain_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_hourly_prices_ID__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_hourly_prices_ID__STRING__VARCHAR.1c2074ca53", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_fcc07b058a8397ab2dcc75b946a6a1fb.sql", "original_file_path": "models\\core\\core__fact_hourly_prices.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_hourly_prices_ID__STRING__VARCHAR", "alias": "fact_hourly_prices_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_hourly_prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__fact_hourly_prices.yml\\dbt_expectations_expect_column_fcc07b058a8397ab2dcc75b946a6a1fb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_fcc07b058a8397ab2dcc75b946a6a1fb"}, "created_at": 1666821808.3248892, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('PROVIDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECORDED_HOUR' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OPEN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HIGH' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOW' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CLOSE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ID", "file_key_name": "models.core__fact_hourly_prices"}, "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_RECORDED_HOUR.e5de74b9af": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cfa961a4309578fa3ea76f15ced072b1\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "RECORDED_HOUR", "model": "{{ get_where_subquery(ref('core__fact_hourly_prices')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.core__fact_hourly_prices"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cfa961a4309578fa3ea76f15ced072b1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["crosschain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_RECORDED_HOUR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_RECORDED_HOUR.e5de74b9af", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_cfa961a4309578fa3ea76f15ced072b1.sql", "original_file_path": "models\\core\\core__fact_hourly_prices.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_RECORDED_HOUR", "alias": "fact_hourly_prices_RECORDED_HOUR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_hourly_prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__fact_hourly_prices.yml\\dbt_expectations_expect_column_cfa961a4309578fa3ea76f15ced072b1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_cfa961a4309578fa3ea76f15ced072b1"}, "created_at": 1666821808.3441098, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('RECORDED_HOUR' as \n    varchar\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RECORDED_HOUR", "file_key_name": "models.core__fact_hourly_prices"}, "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_OPEN.0cd8663dd3": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5fbd4effa0f96c288fae29d7047776ee\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "OPEN", "model": "{{ get_where_subquery(ref('core__fact_hourly_prices')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.core__fact_hourly_prices"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5fbd4effa0f96c288fae29d7047776ee", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["crosschain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_OPEN"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_OPEN.0cd8663dd3", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_5fbd4effa0f96c288fae29d7047776ee.sql", "original_file_path": "models\\core\\core__fact_hourly_prices.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_OPEN", "alias": "fact_hourly_prices_OPEN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_hourly_prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__fact_hourly_prices.yml\\dbt_expectations_expect_column_5fbd4effa0f96c288fae29d7047776ee.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_5fbd4effa0f96c288fae29d7047776ee"}, "created_at": 1666821808.3441098, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('OPEN' as \n    varchar\n) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "OPEN", "file_key_name": "models.core__fact_hourly_prices"}, "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_HIGH.59af6120cb": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6f999d53681ead47eaff970d30e4dec0\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "HIGH", "model": "{{ get_where_subquery(ref('core__fact_hourly_prices')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.core__fact_hourly_prices"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6f999d53681ead47eaff970d30e4dec0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["crosschain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_HIGH"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_HIGH.59af6120cb", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_6f999d53681ead47eaff970d30e4dec0.sql", "original_file_path": "models\\core\\core__fact_hourly_prices.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_HIGH", "alias": "fact_hourly_prices_HIGH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_hourly_prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__fact_hourly_prices.yml\\dbt_expectations_expect_column_6f999d53681ead47eaff970d30e4dec0.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6f999d53681ead47eaff970d30e4dec0"}, "created_at": 1666821808.3521178, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('HIGH' as \n    varchar\n) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "HIGH", "file_key_name": "models.core__fact_hourly_prices"}, "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_LOW.9231b3f78d": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7a420f8c28cd0bf88ac3c4c0075d34f6\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LOW", "model": "{{ get_where_subquery(ref('core__fact_hourly_prices')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.core__fact_hourly_prices"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7a420f8c28cd0bf88ac3c4c0075d34f6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["crosschain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_LOW"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_LOW.9231b3f78d", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_7a420f8c28cd0bf88ac3c4c0075d34f6.sql", "original_file_path": "models\\core\\core__fact_hourly_prices.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_LOW", "alias": "fact_hourly_prices_LOW", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_hourly_prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__fact_hourly_prices.yml\\dbt_expectations_expect_column_7a420f8c28cd0bf88ac3c4c0075d34f6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_7a420f8c28cd0bf88ac3c4c0075d34f6"}, "created_at": 1666821808.3608553, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('LOW' as \n    varchar\n) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LOW", "file_key_name": "models.core__fact_hourly_prices"}, "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_CLOSE.24f933b9a0": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9115495499287a881fac7913b9b6e852\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CLOSE", "model": "{{ get_where_subquery(ref('core__fact_hourly_prices')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.core__fact_hourly_prices"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9115495499287a881fac7913b9b6e852", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["crosschain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_CLOSE"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_CLOSE.24f933b9a0", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_9115495499287a881fac7913b9b6e852.sql", "original_file_path": "models\\core\\core__fact_hourly_prices.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_CLOSE", "alias": "fact_hourly_prices_CLOSE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_hourly_prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__fact_hourly_prices.yml\\dbt_expectations_expect_column_9115495499287a881fac7913b9b6e852.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_9115495499287a881fac7913b9b6e852"}, "created_at": 1666821808.3608553, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('CLOSE' as \n    varchar\n) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CLOSE", "file_key_name": "models.core__fact_hourly_prices"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_core__fact_hourly_prices_PROVIDER__ID__RECORDED_HOUR.e34d5489bd": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0f9cee461305b10fc27c0e39e51ae940\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["PROVIDER", "ID", "RECORDED_HOUR"], "model": "{{ get_where_subquery(ref('core__fact_hourly_prices')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.core__fact_hourly_prices"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0f9cee461305b10fc27c0e39e51ae940", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["crosschain_models", "core", "dbt_utils_unique_combination_of_columns_core__fact_hourly_prices_PROVIDER__ID__RECORDED_HOUR"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_core__fact_hourly_prices_PROVIDER__ID__RECORDED_HOUR.e34d5489bd", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_0f9cee461305b10fc27c0e39e51ae940.sql", "original_file_path": "models\\core\\core__fact_hourly_prices.yml", "name": "dbt_utils_unique_combination_of_columns_core__fact_hourly_prices_PROVIDER__ID__RECORDED_HOUR", "alias": "fact_hourly_prices_PROVIDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_hourly_prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__fact_hourly_prices.yml\\dbt_utils_unique_combination_o_0f9cee461305b10fc27c0e39e51ae940.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_0f9cee461305b10fc27c0e39e51ae940"}, "created_at": 1666821808.3689768, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        PROVIDER, ID, RECORDED_HOUR\n    from CROSSCHAIN_DEV.core.fact_hourly_prices\n    group by PROVIDER, ID, RECORDED_HOUR\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__fact_hourly_prices"}, "test.crosschain_models.not_null_core__dim_asset_metadata_PROVIDER.1e680f5a1d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROVIDER", "model": "{{ get_where_subquery(ref('core__dim_asset_metadata')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.core__dim_asset_metadata"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_core", "fqn": ["crosschain_models", "core", "not_null_core__dim_asset_metadata_PROVIDER"], "unique_id": "test.crosschain_models.not_null_core__dim_asset_metadata_PROVIDER.1e680f5a1d", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_core__dim_asset_metadata_PROVIDER.sql", "original_file_path": "models\\core\\core__dim_asset_metadata.yml", "name": "not_null_core__dim_asset_metadata_PROVIDER", "alias": "dim_asset_metadata_PROVIDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_asset_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__dim_asset_metadata.yml\\not_null_core__dim_asset_metadata_PROVIDER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666821808.3849154, "compiled_sql": "\n    \n    \n\n\n\nselect PROVIDER\nfrom CROSSCHAIN_DEV.core.dim_asset_metadata\nwhere PROVIDER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PROVIDER", "file_key_name": "models.core__dim_asset_metadata"}, "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_PROVIDER.e50103dc5d": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5f5a786b1514726aa982781db59c5c5a\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROVIDER", "model": "{{ get_where_subquery(ref('core__dim_asset_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.core__dim_asset_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5f5a786b1514726aa982781db59c5c5a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["crosschain_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_PROVIDER"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_PROVIDER.e50103dc5d", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_5f5a786b1514726aa982781db59c5c5a.sql", "original_file_path": "models\\core\\core__dim_asset_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_PROVIDER", "alias": "dim_asset_metadata_PROVIDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_asset_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__dim_asset_metadata.yml\\dbt_expectations_expect_column_5f5a786b1514726aa982781db59c5c5a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_5f5a786b1514726aa982781db59c5c5a"}, "created_at": 1666821808.3849154, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PROVIDER' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PROVIDER", "file_key_name": "models.core__dim_asset_metadata"}, "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_ID.593e500776": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c34463a064adbc54e62d51ac2e53b60f\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ID", "model": "{{ get_where_subquery(ref('core__dim_asset_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.core__dim_asset_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c34463a064adbc54e62d51ac2e53b60f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["crosschain_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_ID"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_ID.593e500776", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_c34463a064adbc54e62d51ac2e53b60f.sql", "original_file_path": "models\\core\\core__dim_asset_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_ID", "alias": "dim_asset_metadata_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_asset_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__dim_asset_metadata.yml\\dbt_expectations_expect_column_c34463a064adbc54e62d51ac2e53b60f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c34463a064adbc54e62d51ac2e53b60f"}, "created_at": 1666821808.3929636, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('ID' as \n    varchar\n) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ID", "file_key_name": "models.core__dim_asset_metadata"}, "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_NAME.7af2219c96": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_694d271ed850dbab43f561dc2c06f0e1\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "NAME", "model": "{{ get_where_subquery(ref('core__dim_asset_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.core__dim_asset_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_694d271ed850dbab43f561dc2c06f0e1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["crosschain_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_NAME"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_NAME.7af2219c96", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_694d271ed850dbab43f561dc2c06f0e1.sql", "original_file_path": "models\\core\\core__dim_asset_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_NAME", "alias": "dim_asset_metadata_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_asset_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__dim_asset_metadata.yml\\dbt_expectations_expect_column_694d271ed850dbab43f561dc2c06f0e1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_694d271ed850dbab43f561dc2c06f0e1"}, "created_at": 1666821808.3929636, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('NAME' as \n    varchar\n) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NAME", "file_key_name": "models.core__dim_asset_metadata"}, "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_SYMBOL.6dbcec9f41": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_14de92c4217f3e1fbe9e234fc75b4975\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SYMBOL", "model": "{{ get_where_subquery(ref('core__dim_asset_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.core__dim_asset_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_14de92c4217f3e1fbe9e234fc75b4975", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["crosschain_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_SYMBOL"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_SYMBOL.6dbcec9f41", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_14de92c4217f3e1fbe9e234fc75b4975.sql", "original_file_path": "models\\core\\core__dim_asset_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_SYMBOL", "alias": "dim_asset_metadata_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_asset_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__dim_asset_metadata.yml\\dbt_expectations_expect_column_14de92c4217f3e1fbe9e234fc75b4975.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_14de92c4217f3e1fbe9e234fc75b4975"}, "created_at": 1666821808.400961, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('SYMBOL' as \n    varchar\n) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SYMBOL", "file_key_name": "models.core__dim_asset_metadata"}, "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_TOKEN_ADDRESS.3e0ba95440": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cd2bad7d824d31745ebb1c425aa90f7e\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TOKEN_ADDRESS", "model": "{{ get_where_subquery(ref('core__dim_asset_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.core__dim_asset_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cd2bad7d824d31745ebb1c425aa90f7e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["crosschain_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_TOKEN_ADDRESS"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_TOKEN_ADDRESS.3e0ba95440", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_cd2bad7d824d31745ebb1c425aa90f7e.sql", "original_file_path": "models\\core\\core__dim_asset_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_TOKEN_ADDRESS", "alias": "dim_asset_metadata_TOKEN_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_asset_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__dim_asset_metadata.yml\\dbt_expectations_expect_column_cd2bad7d824d31745ebb1c425aa90f7e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_cd2bad7d824d31745ebb1c425aa90f7e"}, "created_at": 1666821808.4089832, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TOKEN_ADDRESS' as \n    varchar\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_ADDRESS", "file_key_name": "models.core__dim_asset_metadata"}, "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_PLATFORM.08a4b73a08": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_feb0f1e9826804d588aa720336c468ab\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PLATFORM", "model": "{{ get_where_subquery(ref('core__dim_asset_metadata')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.core__dim_asset_metadata"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_feb0f1e9826804d588aa720336c468ab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["crosschain_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_PLATFORM"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_PLATFORM.08a4b73a08", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_feb0f1e9826804d588aa720336c468ab.sql", "original_file_path": "models\\core\\core__dim_asset_metadata.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_PLATFORM", "alias": "dim_asset_metadata_PLATFORM", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_asset_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__dim_asset_metadata.yml\\dbt_expectations_expect_column_feb0f1e9826804d588aa720336c468ab.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_feb0f1e9826804d588aa720336c468ab"}, "created_at": 1666821808.4089832, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PLATFORM' as \n    varchar\n) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM", "file_key_name": "models.core__dim_asset_metadata"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_core__dim_asset_metadata_PROVIDER__ID__TOKEN_ADDRESS.d333e4d78b": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3e5885875f6a70598590f8d44b853497\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["PROVIDER", "ID", "TOKEN_ADDRESS"], "model": "{{ get_where_subquery(ref('core__dim_asset_metadata')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.core__dim_asset_metadata"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3e5885875f6a70598590f8d44b853497", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["crosschain_models", "core", "dbt_utils_unique_combination_of_columns_core__dim_asset_metadata_PROVIDER__ID__TOKEN_ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_core__dim_asset_metadata_PROVIDER__ID__TOKEN_ADDRESS.d333e4d78b", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_3e5885875f6a70598590f8d44b853497.sql", "original_file_path": "models\\core\\core__dim_asset_metadata.yml", "name": "dbt_utils_unique_combination_of_columns_core__dim_asset_metadata_PROVIDER__ID__TOKEN_ADDRESS", "alias": "dim_asset_metadata_PROVIDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_asset_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__dim_asset_metadata.yml\\dbt_utils_unique_combination_o_3e5885875f6a70598590f8d44b853497.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3e5885875f6a70598590f8d44b853497"}, "created_at": 1666821808.4168801, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        PROVIDER, ID, TOKEN_ADDRESS\n    from CROSSCHAIN_DEV.core.dim_asset_metadata\n    group by PROVIDER, ID, TOKEN_ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__dim_asset_metadata"}, "model.crosschain_models.core__address_tags": {"raw_sql": "{{ config(\r\n    materialized = 'view',\r\n) }}\r\n\r\nSELECT\r\n    blockchain,\r\n    creator,\r\n    address,\r\n    tag_name,\r\n    tag_type,\r\n    start_date,\r\n    end_date,\r\n    tag_created_at\r\nFROM\r\n    {{ ref('silver__tags_contract_address_eth') }}\r\nUNION\r\nSELECT\r\n    blockchain,\r\n    creator,\r\n    address,\r\n    tag_name,\r\n    tag_type,\r\n    start_date,\r\n    end_date,\r\n    tag_created_at\r\nFROM\r\n    {{ ref('silver__tags_contract_address_avalanche') }}\r\nUNION\r\nSELECT\r\n    blockchain,\r\n    creator,\r\n    address,\r\n    tag_name,\r\n    tag_type,\r\n    start_date,\r\n    end_date,\r\n    tag_created_at\r\nFROM\r\n    {{ ref('silver__tags_contract_address_bsc') }}\r\nUNION\r\nSELECT\r\n    blockchain,\r\n    creator,\r\n    address,\r\n    tag_name,\r\n    tag_type,\r\n    start_date,\r\n    end_date,\r\n    tag_created_at\r\nFROM\r\n    {{ ref('silver__tags_contract_address_optimism') }}\r\nUNION\r\nSELECT\r\n    blockchain,\r\n    creator,\r\n    address,\r\n    tag_name,\r\n    tag_type,\r\n    start_date,\r\n    end_date,\r\n    tag_created_at\r\nFROM\r\n    {{ ref('silver__tags_contract_address_polygon') }}\r\nUNION\r\nSELECT\r\n    blockchain,\r\n    creator,\r\n    address,\r\n    tag_name,\r\n    tag_type,\r\n    start_date,\r\n    end_date,\r\n    tag_created_at\r\nFROM\r\n    {{ ref('silver__tags_gnosis_safe_address') }}\r\nUNION\r\nSELECT\r\n    blockchain,\r\n    creator,\r\n    address,\r\n    tag_name,\r\n    tag_type,\r\n    start_date,\r\n    end_date,\r\n    tag_created_at\r\nFROM\r\n    {{ ref('silver__tags_thor_dex_user') }}\r\nUNION\r\nSELECT\r\n    blockchain,\r\n    creator,\r\n    address,\r\n    tag_name,\r\n    tag_type,\r\n    start_date,\r\n    end_date,\r\n    tag_created_at\r\nFROM\r\n    {{ ref('silver__tags_thor_liquidity_provider') }}\r\nUNION\r\nSELECT\r\n    blockchain,\r\n    creator,\r\n    address,\r\n    tag_name,\r\n    tag_type,\r\n    start_date,\r\n    end_date,\r\n    tag_created_at\r\nFROM\r\n    {{ ref('silver__tags_active_arbitrum_last_7') }}\r\nUNION\r\nSELECT\r\n    blockchain,\r\n    creator,\r\n    address,\r\n    tag_name,\r\n    tag_type,\r\n    start_date,\r\n    end_date,\r\n    tag_created_at\r\nFROM\r\n    {{ ref('silver__tags_active_avalanche_last_7') }}\r\nUNION\r\nSELECT\r\n    blockchain,\r\n    creator,\r\n    address,\r\n    tag_name,\r\n    tag_type,\r\n    start_date,\r\n    end_date,\r\n    tag_created_at\r\nFROM\r\n    {{ ref('silver__tags_active_bsc_last_7') }}\r\nUNION\r\nSELECT\r\n    blockchain,\r\n    creator,\r\n    address,\r\n    tag_name,\r\n    tag_type,\r\n    start_date,\r\n    end_date,\r\n    tag_created_at\r\nFROM\r\n    {{ ref('silver__tags_active_eth_last_7') }}\r\nUNION\r\nSELECT\r\n    blockchain,\r\n    creator,\r\n    address,\r\n    tag_name,\r\n    tag_type,\r\n    start_date,\r\n    end_date,\r\n    tag_created_at\r\nFROM\r\n    {{ ref('silver__tags_active_optimism_last_7') }}\r\nUNION\r\nSELECT\r\n    blockchain,\r\n    creator,\r\n    address,\r\n    tag_name,\r\n    tag_type,\r\n    start_date,\r\n    end_date,\r\n    tag_created_at\r\nFROM\r\n    {{ ref('silver__tags_active_polygon_last_7') }}\r\nUNION\r\nSELECT\r\n    blockchain,\r\n    creator,\r\n    address,\r\n    tag_name,\r\n    tag_type,\r\n    start_date,\r\n    end_date,\r\n    tag_created_at\r\nFROM\r\n    {{ ref('silver__tags_nft_larva_labs_user') }}\r\nUNION\r\nSELECT\r\n    blockchain,\r\n    creator,\r\n    address,\r\n    tag_name,\r\n    tag_type,\r\n    start_date,\r\n    end_date,\r\n    tag_created_at\r\nFROM\r\n    {{ ref('silver__tags_nft_looksrare_user') }}\r\nUNION\r\nSELECT\r\n    blockchain,\r\n    creator,\r\n    address,\r\n    tag_name,\r\n    tag_type,\r\n    start_date,\r\n    end_date,\r\n    tag_created_at\r\nFROM\r\n    {{ ref('silver__tags_nft_nftx_user') }}\r\nUNION\r\nSELECT\r\n    blockchain,\r\n    creator,\r\n    address,\r\n    tag_name,\r\n    tag_type,\r\n    start_date,\r\n    end_date,\r\n    tag_created_at\r\nFROM\r\n    {{ ref('silver__tags_nft_opensea_user') }}\r\nUNION\r\nSELECT\r\n    blockchain,\r\n    creator,\r\n    address,\r\n    tag_name,\r\n    tag_type,\r\n    start_date,\r\n    end_date,\r\n    tag_created_at\r\nFROM\r\n    {{ ref('silver__tags_nft_rarible_user') }}\r\nUNION\r\nSELECT\r\n    blockchain,\r\n    creator,\r\n    address,\r\n    tag_name,\r\n    tag_type,\r\n    start_date,\r\n    end_date,\r\n    tag_created_at\r\nFROM\r\n    {{ ref('silver__tags_nft_x2y2_user') }}\r\nUNION\r\nSELECT\r\n    blockchain,\r\n    creator,\r\n    address,\r\n    tag_name,\r\n    tag_type,\r\n    start_date,\r\n    end_date,\r\n    tag_created_at\r\nFROM\r\n    {{ ref('silver__tags_wallet_ETH_value') }}\r\nUNION\r\nSELECT\r\n    blockchain,\r\n    creator,\r\n    address,\r\n    tag_name,\r\n    tag_type,\r\n    start_date,\r\n    end_date,\r\n    tag_created_at\r\nFROM\r\n    {{ ref('silver__tags_wallet_TOKEN_value') }}\r\nUNION\r\nSELECT\r\n    blockchain,\r\n    creator,\r\n    address,\r\n    tag_name,\r\n    tag_type,\r\n    start_date,\r\n    end_date,\r\n    tag_created_at\r\nFROM\r\n    {{ ref('silver__tags_wallet_value') }}\r\nUNION\r\nSELECT\r\n    blockchain,\r\n    creator,\r\n    address,\r\n    tag_name,\r\n    tag_type,\r\n    start_date :: date,\r\n    null as end_date,\r\n    '2022-09-06' :: TIMESTAMP AS tag_created_at\r\nFROM\r\n    {{ source(\r\n        'crosschain_silver',\r\n        'godmode_nft_minters'\r\n    ) }}\r\nUNION\r\nSELECT\r\n    blockchain,\r\n    creator,\r\n    address,\r\n    tag_name,\r\n    tag_type,\r\n    start_date,\r\n    end_date,\r\n    tag_created_at\r\nFROM\r\n    {{ ref('silver__tags_cex_user_ETH') }}\r\nUNION\r\nSELECT\r\n    blockchain,\r\n    creator,\r\n    address,\r\n    tag_name,\r\n    tag_type,\r\n    start_date,\r\n    end_date,\r\n    tag_created_at\r\nFROM\r\n    {{ ref('silver__tags_token_vesting_ETH') }}\r\nUNION\r\nSELECT\r\n    blockchain,\r\n    creator,\r\n    address,\r\n    tag_name,\r\n    tag_type,\r\n    start_date,\r\n    end_date,\r\n    tag_created_at\r\nFROM\r\n    {{ ref('silver__tags_nft_transactor_ETH') }}\r\nUNION\r\nSELECT\r\n    blockchain,\r\n    creator,\r\n    address,\r\n    tag_name,\r\n    tag_type,\r\n    start_date,\r\n    end_date,\r\n    tag_created_at\r\nFROM\r\n    {{ ref('silver__tags_airdrop_master_ETH') }}\r\nUNION \r\nSELECT \r\n    blockchain, \r\n    creator, \r\n    address, \r\n    tag_name, \r\n    tag_type, \r\n    to_date(start_date) AS start_date, \r\n    NULL AS end_date, \r\n    NULL as tag_created_at\r\nFROM \r\n    {{ source(\r\n        'crosschain_silver',\r\n        'optimism_delegates'\r\n    )}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.crosschain_models.crosschain_silver.optimism_delegates", "source.crosschain_models.crosschain_silver.godmode_nft_minters", "model.crosschain_models.silver__tags_contract_address_eth", "model.crosschain_models.silver__tags_contract_address_avalanche", "model.crosschain_models.silver__tags_contract_address_bsc", "model.crosschain_models.silver__tags_contract_address_optimism", "model.crosschain_models.silver__tags_contract_address_polygon", "model.crosschain_models.silver__tags_gnosis_safe_address", "model.crosschain_models.silver__tags_thor_dex_user", "model.crosschain_models.silver__tags_thor_liquidity_provider", "model.crosschain_models.silver__tags_active_arbitrum_last_7", "model.crosschain_models.silver__tags_active_avalanche_last_7", "model.crosschain_models.silver__tags_active_bsc_last_7", "model.crosschain_models.silver__tags_active_eth_last_7", "model.crosschain_models.silver__tags_active_optimism_last_7", "model.crosschain_models.silver__tags_active_polygon_last_7", "model.crosschain_models.silver__tags_nft_larva_labs_user", "model.crosschain_models.silver__tags_nft_looksrare_user", "model.crosschain_models.silver__tags_nft_nftx_user", "model.crosschain_models.silver__tags_nft_opensea_user", "model.crosschain_models.silver__tags_nft_rarible_user", "model.crosschain_models.silver__tags_nft_x2y2_user", "model.crosschain_models.silver__tags_wallet_ETH_value", "model.crosschain_models.silver__tags_wallet_TOKEN_value", "model.crosschain_models.silver__tags_wallet_value", "model.crosschain_models.silver__tags_cex_user_ETH", "model.crosschain_models.silver__tags_token_vesting_ETH", "model.crosschain_models.silver__tags_nft_transactor_ETH", "model.crosschain_models.silver__tags_airdrop_master_ETH"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "core", "fqn": ["crosschain_models", "core", "core__address_tags"], "unique_id": "model.crosschain_models.core__address_tags", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "core\\core__address_tags.sql", "original_file_path": "models\\core\\core__address_tags.sql", "name": "core__address_tags", "alias": "address_tags", "checksum": {"name": "sha256", "checksum": "4efc22c48c4610e2a79c5de877d5f08c01b9b3074e9f9af6e2232d4060d83a29"}, "tags": [], "refs": [["silver__tags_contract_address_eth"], ["silver__tags_contract_address_avalanche"], ["silver__tags_contract_address_bsc"], ["silver__tags_contract_address_optimism"], ["silver__tags_contract_address_polygon"], ["silver__tags_gnosis_safe_address"], ["silver__tags_thor_dex_user"], ["silver__tags_thor_liquidity_provider"], ["silver__tags_active_arbitrum_last_7"], ["silver__tags_active_avalanche_last_7"], ["silver__tags_active_bsc_last_7"], ["silver__tags_active_eth_last_7"], ["silver__tags_active_optimism_last_7"], ["silver__tags_active_polygon_last_7"], ["silver__tags_nft_larva_labs_user"], ["silver__tags_nft_looksrare_user"], ["silver__tags_nft_nftx_user"], ["silver__tags_nft_opensea_user"], ["silver__tags_nft_rarible_user"], ["silver__tags_nft_x2y2_user"], ["silver__tags_wallet_ETH_value"], ["silver__tags_wallet_TOKEN_value"], ["silver__tags_wallet_value"], ["silver__tags_cex_user_ETH"], ["silver__tags_token_vesting_ETH"], ["silver__tags_nft_transactor_ETH"], ["silver__tags_airdrop_master_ETH"]], "sources": [["crosschain_silver", "optimism_delegates"], ["crosschain_silver", "godmode_nft_minters"]], "metrics": [], "description": "Holds data for our address tags.", "columns": {"BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The blockchain that the address belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR": {"name": "CREATOR", "description": "Who created the tag. 'flipside' for official flipside tags.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "The address of the contract or wallet the tag describes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TAG_NAME": {"name": "TAG_NAME", "description": "Tag name (sub-category).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TAG_TYPE": {"name": "TAG_TYPE", "description": "Tag type (high-level category).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "START_DATE": {"name": "START_DATE", "description": "Date the tag first applies. For tags that are permanent, this might be the date the address had its first behavior that warrants its tag, or the addresses' first transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "END_DATE": {"name": "END_DATE", "description": "Date the tag no longer applies (for tags that are permanent or currently active, end_date can be NULL).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TAG_CREATED_AT": {"name": "TAG_CREATED_AT", "description": "Date the tag was added to our data.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\core\\core__address_tags.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__address_tags.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1666882899.8066833, "compiled_sql": "\n\nSELECT\n    blockchain,\n    creator,\n    address,\n    tag_name,\n    tag_type,\n    start_date,\n    end_date,\n    tag_created_at\nFROM\n    CROSSCHAIN_DEV.silver.tags_contract_address_eth\nUNION\nSELECT\n    blockchain,\n    creator,\n    address,\n    tag_name,\n    tag_type,\n    start_date,\n    end_date,\n    tag_created_at\nFROM\n    CROSSCHAIN_DEV.silver.tags_contract_address_avalanche\nUNION\nSELECT\n    blockchain,\n    creator,\n    address,\n    tag_name,\n    tag_type,\n    start_date,\n    end_date,\n    tag_created_at\nFROM\n    CROSSCHAIN_DEV.silver.tags_contract_address_bsc\nUNION\nSELECT\n    blockchain,\n    creator,\n    address,\n    tag_name,\n    tag_type,\n    start_date,\n    end_date,\n    tag_created_at\nFROM\n    CROSSCHAIN_DEV.silver.tags_contract_address_optimism\nUNION\nSELECT\n    blockchain,\n    creator,\n    address,\n    tag_name,\n    tag_type,\n    start_date,\n    end_date,\n    tag_created_at\nFROM\n    CROSSCHAIN_DEV.silver.tags_contract_address_polygon\nUNION\nSELECT\n    blockchain,\n    creator,\n    address,\n    tag_name,\n    tag_type,\n    start_date,\n    end_date,\n    tag_created_at\nFROM\n    CROSSCHAIN_DEV.silver.tags_gnosis_safe_address\nUNION\nSELECT\n    blockchain,\n    creator,\n    address,\n    tag_name,\n    tag_type,\n    start_date,\n    end_date,\n    tag_created_at\nFROM\n    CROSSCHAIN_DEV.silver.tags_thor_dex_user\nUNION\nSELECT\n    blockchain,\n    creator,\n    address,\n    tag_name,\n    tag_type,\n    start_date,\n    end_date,\n    tag_created_at\nFROM\n    CROSSCHAIN_DEV.silver.tags_thor_liquidity_provider\nUNION\nSELECT\n    blockchain,\n    creator,\n    address,\n    tag_name,\n    tag_type,\n    start_date,\n    end_date,\n    tag_created_at\nFROM\n    CROSSCHAIN_DEV.silver.tags_active_arbitrum_last_7\nUNION\nSELECT\n    blockchain,\n    creator,\n    address,\n    tag_name,\n    tag_type,\n    start_date,\n    end_date,\n    tag_created_at\nFROM\n    CROSSCHAIN_DEV.silver.tags_active_avalanche_last_7\nUNION\nSELECT\n    blockchain,\n    creator,\n    address,\n    tag_name,\n    tag_type,\n    start_date,\n    end_date,\n    tag_created_at\nFROM\n    CROSSCHAIN_DEV.silver.tags_active_bsc_last_7\nUNION\nSELECT\n    blockchain,\n    creator,\n    address,\n    tag_name,\n    tag_type,\n    start_date,\n    end_date,\n    tag_created_at\nFROM\n    CROSSCHAIN_DEV.silver.tags_active_eth_last_7\nUNION\nSELECT\n    blockchain,\n    creator,\n    address,\n    tag_name,\n    tag_type,\n    start_date,\n    end_date,\n    tag_created_at\nFROM\n    CROSSCHAIN_DEV.silver.tags_active_optimism_last_7\nUNION\nSELECT\n    blockchain,\n    creator,\n    address,\n    tag_name,\n    tag_type,\n    start_date,\n    end_date,\n    tag_created_at\nFROM\n    CROSSCHAIN_DEV.silver.tags_active_polygon_last_7\nUNION\nSELECT\n    blockchain,\n    creator,\n    address,\n    tag_name,\n    tag_type,\n    start_date,\n    end_date,\n    tag_created_at\nFROM\n    CROSSCHAIN_DEV.silver.tags_nft_larva_labs_user\nUNION\nSELECT\n    blockchain,\n    creator,\n    address,\n    tag_name,\n    tag_type,\n    start_date,\n    end_date,\n    tag_created_at\nFROM\n    CROSSCHAIN_DEV.silver.tags_nft_looksrare_user\nUNION\nSELECT\n    blockchain,\n    creator,\n    address,\n    tag_name,\n    tag_type,\n    start_date,\n    end_date,\n    tag_created_at\nFROM\n    CROSSCHAIN_DEV.silver.tags_nft_nftx_user\nUNION\nSELECT\n    blockchain,\n    creator,\n    address,\n    tag_name,\n    tag_type,\n    start_date,\n    end_date,\n    tag_created_at\nFROM\n    CROSSCHAIN_DEV.silver.tags_nft_opensea_user\nUNION\nSELECT\n    blockchain,\n    creator,\n    address,\n    tag_name,\n    tag_type,\n    start_date,\n    end_date,\n    tag_created_at\nFROM\n    CROSSCHAIN_DEV.silver.tags_nft_rarible_user\nUNION\nSELECT\n    blockchain,\n    creator,\n    address,\n    tag_name,\n    tag_type,\n    start_date,\n    end_date,\n    tag_created_at\nFROM\n    CROSSCHAIN_DEV.silver.tags_nft_x2y2_user\nUNION\nSELECT\n    blockchain,\n    creator,\n    address,\n    tag_name,\n    tag_type,\n    start_date,\n    end_date,\n    tag_created_at\nFROM\n    CROSSCHAIN_DEV.silver.tags_wallet_ETH_value\nUNION\nSELECT\n    blockchain,\n    creator,\n    address,\n    tag_name,\n    tag_type,\n    start_date,\n    end_date,\n    tag_created_at\nFROM\n    CROSSCHAIN_DEV.silver.tags_wallet_TOKEN_value\nUNION\nSELECT\n    blockchain,\n    creator,\n    address,\n    tag_name,\n    tag_type,\n    start_date,\n    end_date,\n    tag_created_at\nFROM\n    CROSSCHAIN_DEV.silver.tags_wallet_value\nUNION\nSELECT\n    blockchain,\n    creator,\n    address,\n    tag_name,\n    tag_type,\n    start_date :: date,\n    null as end_date,\n    '2022-09-06' :: TIMESTAMP AS tag_created_at\nFROM\n    crosschain.silver.godmode_nft_minters\nUNION\nSELECT\n    blockchain,\n    creator,\n    address,\n    tag_name,\n    tag_type,\n    start_date,\n    end_date,\n    tag_created_at\nFROM\n    CROSSCHAIN_DEV.silver.tags_cex_user_ETH\nUNION\nSELECT\n    blockchain,\n    creator,\n    address,\n    tag_name,\n    tag_type,\n    start_date,\n    end_date,\n    tag_created_at\nFROM\n    CROSSCHAIN_DEV.silver.tags_token_vesting_ETH\nUNION\nSELECT\n    blockchain,\n    creator,\n    address,\n    tag_name,\n    tag_type,\n    start_date,\n    end_date,\n    tag_created_at\nFROM\n    CROSSCHAIN_DEV.silver.tags_nft_transactor_ETH\nUNION\nSELECT\n    blockchain,\n    creator,\n    address,\n    tag_name,\n    tag_type,\n    start_date,\n    end_date,\n    tag_created_at\nFROM\n    CROSSCHAIN_DEV.silver.tags_airdrop_master_ETH\nUNION \nSELECT \n    blockchain, \n    creator, \n    address, \n    tag_name, \n    tag_type, \n    to_date(start_date) AS start_date, \n    NULL AS end_date, \n    NULL as tag_created_at\nFROM \n    crosschain.silver.optimism_delegates", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.core.address_tags"}, "model.crosschain_models.silver__tags_active_eth_last_7": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', address, start_date)\",\r\n    incremental_strategy = 'delete+insert',\r\n) }}\r\n\r\n\r\n{% if is_incremental() %}\r\n  with base_eth as (\r\n      select distinct \r\n        from_address as address,\r\n        min(date_trunc('day', block_timestamp)) as start_date\r\n        from     \r\n        {{ source(\r\n        'ethereum_silver',\r\n        'transactions'\r\n        ) }}\r\n        WHERE block_timestamp >= current_date -7\r\n        group by from_address\r\n  ), current_tagged as (\r\n      select *\r\n      from {{ this }}\r\n      where end_date is null\r\n  ), additions as (\r\n      select distinct \r\n        'ethereum' as blockchain,\r\n        'flipside' as creator,\r\n        address as address,\r\n        'active on ethereum last 7' as tag_name,\r\n        'activity' as tag_type,\r\n        start_date::date as start_date, \r\n        null as end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n        from base_eth\r\n        where address not in (select distinct address from current_tagged)\r\n  ),\r\n     cap_end_date as (\r\n      select distinct \r\n        blockchain,\r\n        creator,\r\n        address,\r\n        tag_name,\r\n        tag_type,\r\n        start_date::date, \r\n        date_trunc('DAY', current_date)::date as end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n        from current_tagged\r\n        where address not in (select distinct address from base_eth)\r\n  )\r\n  select * from additions\r\n  union \r\n  select * from cap_end_date\r\n\r\n{% else %}\r\n\r\n    with address_base as (\r\n    select distinct from_address, block_timestamp::date as bt\r\n    from    \r\n    {{ source(\r\n        'ethereum_core',\r\n        'fact_transactions'\r\n    ) }}\r\n    ),\r\n    next_date as (\r\n        select *, \r\n            lead(bt) over (partition by from_address order by bt) as nt,\r\n            datediff('day',bt, nt) as days_between_activity\r\n        from address_base\r\n    )\r\n    , conditional_group as (\r\n    select \r\n        *,\r\n        conditional_true_event(days_between_activity > 7) over (partition by from_address order by bt) as e\r\n        from next_date\r\n    )\r\n    , conditional_group_lagged as (\r\n        select *,\r\n        coalesce(lag(e) over (partition by from_address order by bt),0) as grouping_val\r\n        from conditional_group\r\n    )\r\n    , final_base as (\r\n        select \r\n            from_address,\r\n            grouping_val,\r\n            min(bt) as start_date,\r\n            dateadd('day',7,max(bt)) as end_date\r\n        from conditional_group_lagged\r\n        group by 1, 2\r\n    )\r\n    select \r\n        'ethereum' as blockchain,\r\n        'flipside' as creator,\r\n        from_address as address,\r\n        'active on ethereum last 7' as tag_name,\r\n        'activity' as tag_type,\r\n        start_date, \r\n        iff(end_date>current_date, null, end_date) as end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    from final_base\r\n\r\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.ethereum_core.fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', address, start_date)", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "silver__tags_active_eth_last_7"], "unique_id": "model.crosschain_models.silver__tags_active_eth_last_7", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\tags\\Ethereum\\silver__tags_active_eth_last_7.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_active_eth_last_7.sql", "name": "silver__tags_active_eth_last_7", "alias": "tags_active_eth_last_7", "checksum": {"name": "sha256", "checksum": "0db0729530caca5dce7435c6cabb04d44c3bc6b3a9904d9c6427dbd05cd8fb48"}, "tags": [], "refs": [], "sources": [["ethereum_core", "fact_transactions"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\tags\\Ethereum\\silver__tags_active_eth_last_7.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_active_eth_last_7.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', address, start_date)", "incremental_strategy": "delete+insert"}, "created_at": 1666882899.7917607, "compiled_sql": "\n\n\n\n  with base_eth as (\n      select distinct \n        from_address as address,\n        min(date_trunc('day', block_timestamp)) as start_date\n        from     \n        ethereum.silver.transactions\n        WHERE block_timestamp >= current_date -7\n        group by from_address\n  ), current_tagged as (\n      select *\n      from CROSSCHAIN_DEV.silver.tags_active_eth_last_7\n      where end_date is null\n  ), additions as (\n      select distinct \n        'ethereum' as blockchain,\n        'flipside' as creator,\n        address as address,\n        'active on ethereum last 7' as tag_name,\n        'activity' as tag_type,\n        start_date::date as start_date, \n        null as end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n        from base_eth\n        where address not in (select distinct address from current_tagged)\n  ),\n     cap_end_date as (\n      select distinct \n        blockchain,\n        creator,\n        address,\n        tag_name,\n        tag_type,\n        start_date::date, \n        date_trunc('DAY', current_date)::date as end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n        from current_tagged\n        where address not in (select distinct address from base_eth)\n  )\n  select * from additions\n  union \n  select * from cap_end_date\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.tags_active_eth_last_7"}, "model.crosschain_models.core__address_labels": {"raw_sql": "{{ config(\r\n    materialized = 'view',\r\n    tags = ['snowflake', 'crosschain', 'labels', 'gold_address_labels'],\r\n) }}\r\n\r\nSELECT\r\n    system_created_at,\r\n    insert_date,\r\n    blockchain,\r\n    address,\r\n    creator,\r\n    l1_label AS label_type,\r\n    l2_label AS label_subtype,\r\n    address_name,\r\n    project_name\r\nFROM\r\n    {{ ref('silver_crosschain__address_labels') }}\r\n    -- deposit wallet algos\r\nUNION ALL\r\nSELECT\r\n    system_created_at,\r\n    insert_date,\r\n    blockchain,\r\n    address,\r\n    creator,\r\n    l1_label AS label_type,\r\n    l2_label AS label_subtype,\r\n    address_name,\r\n    project_name\r\nFROM\r\n    {{ ref('silver_crosschain__snowflake_Algorand_satellite') }}\r\nUNION ALL\r\nSELECT\r\n    system_created_at,\r\n    insert_date,\r\n    blockchain,\r\n    address,\r\n    creator,\r\n    l1_label AS label_type,\r\n    l2_label AS label_subtype,\r\n    address_name,\r\n    project_name\r\nFROM\r\n    {{ ref('silver_crosschain__snowflake_Arbitrum_satellites') }}\r\nUNION ALL\r\nSELECT\r\n    system_created_at,\r\n    insert_date,\r\n    blockchain,\r\n    address,\r\n    creator,\r\n    l1_label AS label_type,\r\n    l2_label AS label_subtype,\r\n    address_name,\r\n    project_name\r\nFROM\r\n    {{ ref('silver_crosschain__snowflake_Avalanche_satellites') }}\r\nUNION ALL\r\nSELECT\r\n    system_created_at,\r\n    insert_date,\r\n    blockchain,\r\n    address,\r\n    creator,\r\n    l1_label AS label_type,\r\n    l2_label AS label_subtype,\r\n    address_name,\r\n    project_name\r\nFROM\r\n    {{ ref('silver_crosschain__snowflake_BSC_satellites') }}\r\nUNION ALL\r\nSELECT\r\n    system_created_at,\r\n    insert_date,\r\n    blockchain,\r\n    address,\r\n    creator,\r\n    l1_label AS label_type,\r\n    l2_label AS label_subtype,\r\n    address_name,\r\n    project_name\r\nFROM\r\n    {{ ref('silver_crosschain__snowflake_ETH_satellites') }}\r\nUNION ALL\r\nSELECT\r\n    system_created_at,\r\n    insert_date,\r\n    blockchain,\r\n    address,\r\n    creator,\r\n    l1_label AS label_type,\r\n    l2_label AS label_subtype,\r\n    address_name,\r\n    project_name\r\nFROM\r\n    {{ ref('silver_crosschain__snowflake_Flow_satellites') }}\r\nUNION ALL\r\nSELECT\r\n    system_created_at,\r\n    insert_date,\r\n    blockchain,\r\n    address,\r\n    creator,\r\n    l1_label AS label_type,\r\n    l2_label AS label_subtype,\r\n    address_name,\r\n    project_name\r\nFROM\r\n    {{ ref('silver_crosschain__snowflake_Near_satellite') }}\r\nUNION ALL\r\nSELECT\r\n    system_created_at,\r\n    insert_date,\r\n    blockchain,\r\n    address,\r\n    creator,\r\n    l1_label AS label_type,\r\n    l2_label AS label_subtype,\r\n    address_name,\r\n    project_name\r\nFROM\r\n    {{ ref('silver_crosschain__snowflake_Optimism_satellites') }}\r\nUNION ALL\r\nSELECT\r\n    system_created_at,\r\n    insert_date,\r\n    blockchain,\r\n    address,\r\n    creator,\r\n    l1_label AS label_type,\r\n    l2_label AS label_subtype,\r\n    address_name,\r\n    project_name\r\nFROM\r\n    {{ ref('silver_crosschain__snowflake_Osmosis_satellite') }}\r\nUNION ALL\r\nSELECT\r\n    system_created_at,\r\n    insert_date,\r\n    blockchain,\r\n    address,\r\n    creator,\r\n    l1_label AS label_type,\r\n    l2_label AS label_subtype,\r\n    address_name,\r\n    project_name\r\nFROM\r\n    {{ ref('silver_crosschain__snowflake_Polygon_satellites') }}\r\nUNION ALL\r\nSELECT\r\n    system_created_at,\r\n    insert_date,\r\n    blockchain,\r\n    address,\r\n    creator,\r\n    l1_label AS label_type,\r\n    l2_label AS label_subtype,\r\n    address_name,\r\n    project_name\r\nFROM\r\n    {{ ref('silver_crosschain__snowflake_SOL_satellites') }}\r\nUNION ALL\r\nSELECT\r\n    system_created_at,\r\n    insert_date,\r\n    blockchain,\r\n    address,\r\n    creator,\r\n    l1_label AS label_type,\r\n    l2_label AS label_subtype,\r\n    address_name,\r\n    project_name\r\nFROM\r\n    {{ ref('silver_crosschain__snowflake_Thorchain_satellite') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.crosschain_models.silver_crosschain__address_labels", "model.crosschain_models.silver_crosschain__snowflake_Algorand_satellite", "model.crosschain_models.silver_crosschain__snowflake_Arbitrum_satellites", "model.crosschain_models.silver_crosschain__snowflake_Avalanche_satellites", "model.crosschain_models.silver_crosschain__snowflake_BSC_satellites", "model.crosschain_models.silver_crosschain__snowflake_ETH_satellites", "model.crosschain_models.silver_crosschain__snowflake_Flow_satellites", "model.crosschain_models.silver_crosschain__snowflake_Near_satellite", "model.crosschain_models.silver_crosschain__snowflake_Optimism_satellites", "model.crosschain_models.silver_crosschain__snowflake_Osmosis_satellite", "model.crosschain_models.silver_crosschain__snowflake_Polygon_satellites", "model.crosschain_models.silver_crosschain__snowflake_SOL_satellites", "model.crosschain_models.silver_crosschain__snowflake_Thorchain_satellite"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["snowflake", "crosschain", "labels", "gold_address_labels"], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "core", "fqn": ["crosschain_models", "core", "core__address_labels"], "unique_id": "model.crosschain_models.core__address_labels", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "core\\core__address_labels.sql", "original_file_path": "models\\core\\core__address_labels.sql", "name": "core__address_labels", "alias": "address_labels", "checksum": {"name": "sha256", "checksum": "b42847ec901bd96fe4aa28e746cabb9f4f41f9cefed0226534f873c61792fa70"}, "tags": ["snowflake", "crosschain", "labels", "gold_address_labels"], "refs": [["silver_crosschain__address_labels"], ["silver_crosschain__snowflake_Algorand_satellite"], ["silver_crosschain__snowflake_Arbitrum_satellites"], ["silver_crosschain__snowflake_Avalanche_satellites"], ["silver_crosschain__snowflake_BSC_satellites"], ["silver_crosschain__snowflake_ETH_satellites"], ["silver_crosschain__snowflake_Flow_satellites"], ["silver_crosschain__snowflake_Near_satellite"], ["silver_crosschain__snowflake_Optimism_satellites"], ["silver_crosschain__snowflake_Osmosis_satellite"], ["silver_crosschain__snowflake_Polygon_satellites"], ["silver_crosschain__snowflake_SOL_satellites"], ["silver_crosschain__snowflake_Thorchain_satellite"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR": {"name": "CREATOR", "description": "The name of the creator of the label", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INSERT_DATE": {"name": "INSERT_DATE", "description": "The date the label was inserted in the table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_TYPE": {"name": "LABEL_TYPE", "description": "A high-level category describing the addresses main function or ownership", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_SUBTYPE": {"name": "LABEL_SUBTYPE", "description": "A sub-category nested within label type providing further detail", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS_NAME": {"name": "ADDRESS_NAME", "description": "Name of the address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROJECT_NAME": {"name": "PROJECT_NAME", "description": "Name of the controlling entity of the address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "Address that the label is for. This is the field that should be used to join other tables with labels.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\core\\core__address_labels.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__address_labels.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view", "tags": ["snowflake", "crosschain", "labels", "gold_address_labels"]}, "created_at": 1666882899.8226829, "compiled_sql": "\n\nSELECT\n    system_created_at,\n    insert_date,\n    blockchain,\n    address,\n    creator,\n    l1_label AS label_type,\n    l2_label AS label_subtype,\n    address_name,\n    project_name\nFROM\n    CROSSCHAIN_DEV.silver_crosschain.address_labels\n    -- deposit wallet algos\nUNION ALL\nSELECT\n    system_created_at,\n    insert_date,\n    blockchain,\n    address,\n    creator,\n    l1_label AS label_type,\n    l2_label AS label_subtype,\n    address_name,\n    project_name\nFROM\n    CROSSCHAIN_DEV.silver_crosschain.snowflake_Algorand_satellite\nUNION ALL\nSELECT\n    system_created_at,\n    insert_date,\n    blockchain,\n    address,\n    creator,\n    l1_label AS label_type,\n    l2_label AS label_subtype,\n    address_name,\n    project_name\nFROM\n    CROSSCHAIN_DEV.silver_crosschain.snowflake_Arbitrum_satellites\nUNION ALL\nSELECT\n    system_created_at,\n    insert_date,\n    blockchain,\n    address,\n    creator,\n    l1_label AS label_type,\n    l2_label AS label_subtype,\n    address_name,\n    project_name\nFROM\n    CROSSCHAIN_DEV.silver_crosschain.snowflake_Avalanche_satellites\nUNION ALL\nSELECT\n    system_created_at,\n    insert_date,\n    blockchain,\n    address,\n    creator,\n    l1_label AS label_type,\n    l2_label AS label_subtype,\n    address_name,\n    project_name\nFROM\n    CROSSCHAIN_DEV.silver_crosschain.snowflake_BSC_satellites\nUNION ALL\nSELECT\n    system_created_at,\n    insert_date,\n    blockchain,\n    address,\n    creator,\n    l1_label AS label_type,\n    l2_label AS label_subtype,\n    address_name,\n    project_name\nFROM\n    CROSSCHAIN_DEV.silver_crosschain.snowflake_ETH_satellites\nUNION ALL\nSELECT\n    system_created_at,\n    insert_date,\n    blockchain,\n    address,\n    creator,\n    l1_label AS label_type,\n    l2_label AS label_subtype,\n    address_name,\n    project_name\nFROM\n    CROSSCHAIN_DEV.silver_crosschain.snowflake_Flow_satellites\nUNION ALL\nSELECT\n    system_created_at,\n    insert_date,\n    blockchain,\n    address,\n    creator,\n    l1_label AS label_type,\n    l2_label AS label_subtype,\n    address_name,\n    project_name\nFROM\n    CROSSCHAIN_DEV.silver_crosschain.snowflake_Near_satellite\nUNION ALL\nSELECT\n    system_created_at,\n    insert_date,\n    blockchain,\n    address,\n    creator,\n    l1_label AS label_type,\n    l2_label AS label_subtype,\n    address_name,\n    project_name\nFROM\n    CROSSCHAIN_DEV.silver_crosschain.snowflake_Optimism_satellites\nUNION ALL\nSELECT\n    system_created_at,\n    insert_date,\n    blockchain,\n    address,\n    creator,\n    l1_label AS label_type,\n    l2_label AS label_subtype,\n    address_name,\n    project_name\nFROM\n    CROSSCHAIN_DEV.silver_crosschain.snowflake_Osmosis_satellite\nUNION ALL\nSELECT\n    system_created_at,\n    insert_date,\n    blockchain,\n    address,\n    creator,\n    l1_label AS label_type,\n    l2_label AS label_subtype,\n    address_name,\n    project_name\nFROM\n    CROSSCHAIN_DEV.silver_crosschain.snowflake_Polygon_satellites\nUNION ALL\nSELECT\n    system_created_at,\n    insert_date,\n    blockchain,\n    address,\n    creator,\n    l1_label AS label_type,\n    l2_label AS label_subtype,\n    address_name,\n    project_name\nFROM\n    CROSSCHAIN_DEV.silver_crosschain.snowflake_SOL_satellites\nUNION ALL\nSELECT\n    system_created_at,\n    insert_date,\n    blockchain,\n    address,\n    creator,\n    l1_label AS label_type,\n    l2_label AS label_subtype,\n    address_name,\n    project_name\nFROM\n    CROSSCHAIN_DEV.silver_crosschain.snowflake_Thorchain_satellite", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.core.address_labels"}, "model.crosschain_models.silver_crosschain__snowflake_ETH_satellites": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"address\",\r\n    incremental_strategy = 'delete+insert',\r\n) }}\r\n\r\nWITH distributor_cex AS (\r\n    -- THIS STATEMENT FINDS KNOWN CEX LABELS WITHIN THE BRONZE ADDRESS LABELS TABLE\r\n\r\n    SELECT\r\n        system_created_at,\r\n        insert_date,\r\n        blockchain,\r\n        address,\r\n        creator,\r\n        l1_label,\r\n        l2_label,\r\n        address_name,\r\n        project_name\r\n    FROM\r\n        {{ ref('silver_crosschain__address_labels') }}\r\n    WHERE\r\n        blockchain = 'ethereum'\r\n        AND l1_label = 'cex'\r\n        AND l2_label = 'hot_wallet'\r\n),\r\npossible_sats AS (\r\n    -- THIS STATEMENT LOCATES POTENTIAL SATELLITE WALLETS BASED ON DEPOSIT BEHAVIOR\r\n    SELECT\r\n        DISTINCT *\r\n    FROM\r\n        (\r\n            SELECT\r\n                DISTINCT dc.system_created_at,\r\n                dc.insert_date,\r\n                dc.blockchain,\r\n                xfer.from_address AS address,\r\n                dc.creator,\r\n                dc.address_name,\r\n                dc.project_name,\r\n                dc.l1_label,\r\n                'deposit_wallet' AS l2_label,\r\n                COUNT(\r\n                    DISTINCT project_name\r\n                ) over(\r\n                    PARTITION BY dc.blockchain,\r\n                    xfer.from_address\r\n                ) AS project_count -- how many projects has each from address sent to\r\n            FROM\r\n                {{ source(\r\n                    'ethereum_core',\r\n                    'fact_token_transfers'\r\n                ) }}\r\n                xfer\r\n                JOIN distributor_cex dc\r\n                ON dc.address = xfer.to_address\r\n            WHERE\r\n                raw_amount > 0\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\nGROUP BY\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9\r\nUNION\r\nSELECT\r\n    DISTINCT dc.system_created_at,\r\n    dc.insert_date,\r\n    dc.blockchain,\r\n    tr.from_address AS address,\r\n    dc.creator,\r\n    dc.address_name,\r\n    dc.project_name,\r\n    dc.l1_label,\r\n    'deposit_wallet' AS l2_label,\r\n    COUNT(\r\n        DISTINCT project_name\r\n    ) over(\r\n        PARTITION BY dc.blockchain,\r\n        tr.from_address\r\n    ) AS project_count\r\nFROM\r\n    {{ source(\r\n        'ethereum_core',\r\n        'fact_traces'\r\n    ) }}\r\n    tr\r\n    JOIN distributor_cex dc\r\n    ON dc.address = tr.to_address\r\nWHERE\r\n    tx_status = 'SUCCESS'\r\n    AND eth_value > 0\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\nGROUP BY\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9\r\n)\r\n),\r\nreal_sats AS (\r\n    SELECT\r\n        from_address,\r\n        COALESCE(project_name, 'blunts') AS project_names\r\n    FROM\r\n        {{ source(\r\n            'ethereum_core',\r\n            'fact_token_transfers'\r\n        ) }}\r\n        xfer\r\n        LEFT OUTER JOIN distributor_cex dc\r\n        ON dc.address = xfer.to_address\r\n    WHERE\r\n        from_address IN (\r\n            SELECT\r\n                address\r\n            FROM\r\n                possible_sats\r\n        )\r\n        AND raw_amount > 0\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\nUNION\r\nSELECT\r\n    from_address,\r\n    COALESCE(project_name, 'blunts') AS project_names\r\nFROM\r\n    {{ source(\r\n        'ethereum_core',\r\n        'fact_traces'\r\n    ) }}\r\n    tr\r\n    LEFT OUTER JOIN distributor_cex dc\r\n    ON dc.address = tr.to_address\r\nWHERE\r\n    from_address IN (\r\n        SELECT\r\n            address\r\n        FROM\r\n            possible_sats\r\n    )\r\n    AND tx_status = 'SUCCESS'\r\n    AND eth_value > 0\r\n\r\n{% if is_incremental() %}\r\nAND block_timestamp > CURRENT_DATE - 10\r\n{% endif %}\r\n),\r\nproject_counts as (\r\n    select distinct from_address, \r\n    count(distinct project_names) as project_count\r\n    from real_sats\r\n    group by from_address\r\n),\r\nexclusive_sats AS (\r\n    SELECT\r\n        DISTINCT from_address AS address\r\n    FROM\r\n        project_counts\r\n    WHERE\r\n        project_count = 1\r\n    GROUP BY\r\n        1\r\n),\r\nfinal_base AS(\r\n    SELECT\r\n        DISTINCT CURRENT_TIMESTAMP AS system_created_at,\r\n        CURRENT_TIMESTAMP AS insert_date,\r\n        blockchain,\r\n        e.address,\r\n        creator,\r\n        l1_label,\r\n        l2_label,\r\n        project_name,\r\n        CONCAT(\r\n            project_name,\r\n            ' deposit_wallet'\r\n        ) AS address_name\r\n    FROM\r\n        exclusive_sats e\r\n        LEFT JOIN possible_sats p\r\n        ON e.address = p.address\r\n)\r\nSELECT\r\n    DISTINCT system_created_at,\r\n    insert_date,\r\n    blockchain,\r\n    address,\r\n    creator,\r\n    l1_label,\r\n    l2_label,\r\n    address_name,\r\n    project_name\r\nFROM\r\n    final_base\r\nWHERE\r\n    address NOT IN (\r\n        SELECT\r\n            DISTINCT address\r\n        FROM\r\n            {{ ref('silver_crosschain__address_labels') }}\r\n        WHERE\r\n            blockchain = 'ethereum'\r\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.ethereum_core.fact_token_transfers", "source.crosschain_models.ethereum_core.fact_traces", "source.crosschain_models.ethereum_core.fact_token_transfers", "source.crosschain_models.ethereum_core.fact_traces", "model.crosschain_models.silver_crosschain__address_labels", "model.crosschain_models.silver_crosschain__address_labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "silver_crosschain__snowflake_ETH_satellites"], "unique_id": "model.crosschain_models.silver_crosschain__snowflake_ETH_satellites", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_ETH_satellites.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_ETH_satellites.sql", "name": "silver_crosschain__snowflake_ETH_satellites", "alias": "snowflake_ETH_satellites", "checksum": {"name": "sha256", "checksum": "d98734727868d9cd2b0a61b146a28eedaed8704ceec6300881e6820d6ab41ee7"}, "tags": [], "refs": [["silver_crosschain__address_labels"], ["silver_crosschain__address_labels"]], "sources": [["ethereum_core", "fact_token_transfers"], ["ethereum_core", "fact_traces"], ["ethereum_core", "fact_token_transfers"], ["ethereum_core", "fact_traces"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_ETH_satellites.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_ETH_satellites.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "address", "incremental_strategy": "delete+insert"}, "created_at": 1666882899.8076835, "compiled_sql": "\n\nWITH distributor_cex AS (\n    -- THIS STATEMENT FINDS KNOWN CEX LABELS WITHIN THE BRONZE ADDRESS LABELS TABLE\n\n    SELECT\n        system_created_at,\n        insert_date,\n        blockchain,\n        address,\n        creator,\n        l1_label,\n        l2_label,\n        address_name,\n        project_name\n    FROM\n        CROSSCHAIN_DEV.silver_crosschain.address_labels\n    WHERE\n        blockchain = 'ethereum'\n        AND l1_label = 'cex'\n        AND l2_label = 'hot_wallet'\n),\npossible_sats AS (\n    -- THIS STATEMENT LOCATES POTENTIAL SATELLITE WALLETS BASED ON DEPOSIT BEHAVIOR\n    SELECT\n        DISTINCT *\n    FROM\n        (\n            SELECT\n                DISTINCT dc.system_created_at,\n                dc.insert_date,\n                dc.blockchain,\n                xfer.from_address AS address,\n                dc.creator,\n                dc.address_name,\n                dc.project_name,\n                dc.l1_label,\n                'deposit_wallet' AS l2_label,\n                COUNT(\n                    DISTINCT project_name\n                ) over(\n                    PARTITION BY dc.blockchain,\n                    xfer.from_address\n                ) AS project_count -- how many projects has each from address sent to\n            FROM\n                ethereum.core.fact_token_transfers\n                xfer\n                JOIN distributor_cex dc\n                ON dc.address = xfer.to_address\n            WHERE\n                raw_amount > 0\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\nGROUP BY\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9\nUNION\nSELECT\n    DISTINCT dc.system_created_at,\n    dc.insert_date,\n    dc.blockchain,\n    tr.from_address AS address,\n    dc.creator,\n    dc.address_name,\n    dc.project_name,\n    dc.l1_label,\n    'deposit_wallet' AS l2_label,\n    COUNT(\n        DISTINCT project_name\n    ) over(\n        PARTITION BY dc.blockchain,\n        tr.from_address\n    ) AS project_count\nFROM\n    ethereum.core.fact_traces\n    tr\n    JOIN distributor_cex dc\n    ON dc.address = tr.to_address\nWHERE\n    tx_status = 'SUCCESS'\n    AND eth_value > 0\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\nGROUP BY\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9\n)\n),\nreal_sats AS (\n    SELECT\n        from_address,\n        COALESCE(project_name, 'blunts') AS project_names\n    FROM\n        ethereum.core.fact_token_transfers\n        xfer\n        LEFT OUTER JOIN distributor_cex dc\n        ON dc.address = xfer.to_address\n    WHERE\n        from_address IN (\n            SELECT\n                address\n            FROM\n                possible_sats\n        )\n        AND raw_amount > 0\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\nUNION\nSELECT\n    from_address,\n    COALESCE(project_name, 'blunts') AS project_names\nFROM\n    ethereum.core.fact_traces\n    tr\n    LEFT OUTER JOIN distributor_cex dc\n    ON dc.address = tr.to_address\nWHERE\n    from_address IN (\n        SELECT\n            address\n        FROM\n            possible_sats\n    )\n    AND tx_status = 'SUCCESS'\n    AND eth_value > 0\n\n\nAND block_timestamp > CURRENT_DATE - 10\n\n),\nproject_counts as (\n    select distinct from_address, \n    count(distinct project_names) as project_count\n    from real_sats\n    group by from_address\n),\nexclusive_sats AS (\n    SELECT\n        DISTINCT from_address AS address\n    FROM\n        project_counts\n    WHERE\n        project_count = 1\n    GROUP BY\n        1\n),\nfinal_base AS(\n    SELECT\n        DISTINCT CURRENT_TIMESTAMP AS system_created_at,\n        CURRENT_TIMESTAMP AS insert_date,\n        blockchain,\n        e.address,\n        creator,\n        l1_label,\n        l2_label,\n        project_name,\n        CONCAT(\n            project_name,\n            ' deposit_wallet'\n        ) AS address_name\n    FROM\n        exclusive_sats e\n        LEFT JOIN possible_sats p\n        ON e.address = p.address\n)\nSELECT\n    DISTINCT system_created_at,\n    insert_date,\n    blockchain,\n    address,\n    creator,\n    l1_label,\n    l2_label,\n    address_name,\n    project_name\nFROM\n    final_base\nWHERE\n    address NOT IN (\n        SELECT\n            DISTINCT address\n        FROM\n            CROSSCHAIN_DEV.silver_crosschain.address_labels\n        WHERE\n            blockchain = 'ethereum'\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver_crosschain.snowflake_ETH_satellites"}, "model.crosschain_models.silver__tags_wallet_ETH_value": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', address, tag_name, start_date)\",\r\n    incremental_strategy = 'delete+insert',\r\n) }}\r\n-- We do not want to full refresh this model until we have a historical tags code set up.\r\n-- to full-refresh either include the variable allow_full_refresh: True to command or comment out below code\r\n-- DO NOT FORMAT will break the full refresh code if formatted copy from below\r\n\r\n-- {% if execute %}\r\n--   {% if flags.FULL_REFRESH and var('allow_full_refresh', False) != True %}\r\n--       {{ exceptions.raise_compiler_error(\"Full refresh is not allowed for this model unless the argument \\\"- -vars 'allow_full_refresh: True'\\\" is included in the dbt run command.\") }}\r\n--   {% endif %}\r\n-- {% endif %}\r\n{% if execute %}\r\n  {% if flags.FULL_REFRESH and var('allow_full_refresh', False) != True %}\r\n      {{ exceptions.raise_compiler_error(\"Full refresh is not allowed for this model unless the argument \\\"- -vars 'allow_full_refresh: True'\\\" is included in the dbt run command.\") }}\r\n  {% endif %}\r\n{% endif %}\r\n\r\nWITH current_totals AS (\r\n    SELECT\r\n        DISTINCT user_address,\r\n        MAX(\r\n            last_activity_block_timestamp :: DATE\r\n        ) AS start_date,\r\n        SUM(usd_value_now) AS wallet_value,\r\n        CASE\r\n            WHEN SUM(usd_value_now) >= 1000000000 THEN 'eth billionaire'\r\n            WHEN SUM(usd_value_now) >= 1000000\r\n            AND SUM(usd_value_now) < 1000000000 THEN 'eth millionaire'\r\n            ELSE 'NONE'\r\n        END AS wallet_flag,\r\n        NTILE(100) over(\r\n            ORDER BY\r\n                wallet_value\r\n        ) AS wallet_group\r\n    FROM\r\n        {{ source(\r\n            'ethereum_core',\r\n            'ez_current_balances'\r\n        ) }}\r\n    WHERE\r\n        symbol = 'ETH'\r\n        AND contract_address IS NULL\r\n    GROUP BY\r\n        1\r\n    HAVING\r\n        SUM(usd_value_now) >= 0\r\n),\r\nnew_wallet_oner AS (\r\n    SELECT\r\n        'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        A.user_address AS address,\r\n        'eth top 1%' AS tag_name,\r\n        'wallet' AS tag_type,\r\n        A.start_date,\r\n        NULL AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        current_totals A\r\n    WHERE\r\n        A.wallet_group = 100\r\n\r\n{% if is_incremental() %}\r\nAND A.user_address NOT IN (\r\n    SELECT\r\n        DISTINCT address\r\n    FROM\r\n        {{ this }}\r\n    WHERE\r\n        tag_name = 'eth top 1%'\r\n)\r\n{% endif %}\r\n),\r\nnew_billionaires AS (\r\n    SELECT\r\n        'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        A.user_address AS address,\r\n        'eth billionaire' AS tag_name,\r\n        'wallet' AS tag_type,\r\n        A.start_date,\r\n        NULL AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        current_totals A\r\n    WHERE\r\n        A.wallet_flag = 'eth billionaire'\r\n\r\n{% if is_incremental() %}\r\nAND A.user_address NOT IN (\r\n    SELECT\r\n        DISTINCT address\r\n    FROM\r\n        {{ this }}\r\n    WHERE\r\n        tag_name = 'eth billionaire'\r\n)\r\n{% endif %}\r\n),\r\nnew_millionaires AS (\r\n    SELECT\r\n        'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        A.user_address AS address,\r\n        'eth millionaire' AS tag_name,\r\n        'wallet' AS tag_type,\r\n        A.start_date,\r\n        NULL AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        current_totals A\r\n    WHERE\r\n        A.wallet_flag = 'eth millionaire'\r\n\r\n{% if is_incremental() %}\r\nAND A.user_address NOT IN (\r\n    SELECT\r\n        DISTINCT address\r\n    FROM\r\n        {{ this }}\r\n    WHERE\r\n        tag_name = 'eth millionaire'\r\n)\r\n{% endif %}\r\n)\r\n\r\n{% if is_incremental() %},\r\ncap_wallet_oner AS (\r\n    SELECT\r\n        'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        address,\r\n        'eth top 1%' AS tag_name,\r\n        'wallet' AS tag_type,\r\n        start_date,\r\n        DATE_TRUNC(\r\n            'DAY',\r\n            CURRENT_DATE\r\n        ) :: DATE AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        (\r\n            SELECT\r\n                *\r\n            FROM\r\n                {{ this }}\r\n            WHERE\r\n                tag_name = 'eth top 1%'\r\n        )\r\n    WHERE\r\n        address NOT IN (\r\n            SELECT\r\n                DISTINCT user_address\r\n            FROM\r\n                current_totals\r\n            WHERE\r\n                wallet_group = 100\r\n        )\r\n),\r\ncap_billionaires AS (\r\n    SELECT\r\n        'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        address,\r\n        'eth billionaire' AS tag_name,\r\n        'wallet' AS tag_type,\r\n        start_date,\r\n        DATE_TRUNC(\r\n            'DAY',\r\n            CURRENT_DATE\r\n        ) :: DATE AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        (\r\n            SELECT\r\n                *\r\n            FROM\r\n                {{ this }}\r\n            WHERE\r\n                tag_name = 'eth billionaire'\r\n        )\r\n    WHERE\r\n        address NOT IN (\r\n            SELECT\r\n                DISTINCT user_address\r\n            FROM\r\n                current_totals\r\n            WHERE\r\n                wallet_flag = 'eth billionaire'\r\n        )\r\n),\r\ncap_millionaires AS (\r\n    SELECT\r\n        'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        address,\r\n        'eth millionaire' AS tag_name,\r\n        'wallet' AS tag_type,\r\n        start_date,\r\n        DATE_TRUNC(\r\n            'DAY',\r\n            CURRENT_DATE\r\n        ) :: DATE AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        (\r\n            SELECT\r\n                *\r\n            FROM\r\n                {{ this }}\r\n            WHERE\r\n                tag_name = 'eth millionaire'\r\n        )\r\n    WHERE\r\n        address NOT IN (\r\n            SELECT\r\n                DISTINCT user_address\r\n            FROM\r\n                current_totals\r\n            WHERE\r\n                wallet_flag = 'eth millionaire'\r\n        )\r\n)\r\n{% endif %}\r\nSELECT\r\n    *\r\nFROM\r\n    new_wallet_oner\r\nUNION\r\nSELECT\r\n    *\r\nFROM\r\n    new_billionaires\r\nUNION\r\nSELECT\r\n    *\r\nFROM\r\n    new_millionaires\r\n\r\n{% if is_incremental() %}\r\nUNION\r\nSELECT\r\n    *\r\nFROM\r\n    cap_wallet_oner\r\nUNION\r\nSELECT\r\n    *\r\nFROM\r\n    cap_billionaires\r\nUNION\r\nSELECT\r\n    *\r\nFROM\r\n    cap_millionaires\r\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.ethereum_core.ez_current_balances"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', address, tag_name, start_date)", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "silver__tags_wallet_ETH_value"], "unique_id": "model.crosschain_models.silver__tags_wallet_ETH_value", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\tags\\Ethereum\\silver__tags_wallet_ETH_value.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_wallet_ETH_value.sql", "name": "silver__tags_wallet_ETH_value", "alias": "tags_wallet_ETH_value", "checksum": {"name": "sha256", "checksum": "670992548c09cf7b43690c5faa2c6f99631b2c2891de07b1a2534f0af8230d54"}, "tags": [], "refs": [], "sources": [["ethereum_core", "ez_current_balances"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\tags\\Ethereum\\silver__tags_wallet_ETH_value.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_wallet_ETH_value.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', address, tag_name, start_date)", "incremental_strategy": "delete+insert"}, "created_at": 1666882899.8616824, "compiled_sql": "\n-- We do not want to full refresh this model until we have a historical tags code set up.\n-- to full-refresh either include the variable allow_full_refresh: True to command or comment out below code\n-- DO NOT FORMAT will break the full refresh code if formatted copy from below\n\n-- \n--   \n-- \n\n  \n\n\nWITH current_totals AS (\n    SELECT\n        DISTINCT user_address,\n        MAX(\n            last_activity_block_timestamp :: DATE\n        ) AS start_date,\n        SUM(usd_value_now) AS wallet_value,\n        CASE\n            WHEN SUM(usd_value_now) >= 1000000000 THEN 'eth billionaire'\n            WHEN SUM(usd_value_now) >= 1000000\n            AND SUM(usd_value_now) < 1000000000 THEN 'eth millionaire'\n            ELSE 'NONE'\n        END AS wallet_flag,\n        NTILE(100) over(\n            ORDER BY\n                wallet_value\n        ) AS wallet_group\n    FROM\n        ethereum.core.ez_current_balances\n    WHERE\n        symbol = 'ETH'\n        AND contract_address IS NULL\n    GROUP BY\n        1\n    HAVING\n        SUM(usd_value_now) >= 0\n),\nnew_wallet_oner AS (\n    SELECT\n        'ethereum' AS blockchain,\n        'flipside' AS creator,\n        A.user_address AS address,\n        'eth top 1%' AS tag_name,\n        'wallet' AS tag_type,\n        A.start_date,\n        NULL AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        current_totals A\n    WHERE\n        A.wallet_group = 100\n\n\nAND A.user_address NOT IN (\n    SELECT\n        DISTINCT address\n    FROM\n        CROSSCHAIN_DEV.silver.tags_wallet_ETH_value\n    WHERE\n        tag_name = 'eth top 1%'\n)\n\n),\nnew_billionaires AS (\n    SELECT\n        'ethereum' AS blockchain,\n        'flipside' AS creator,\n        A.user_address AS address,\n        'eth billionaire' AS tag_name,\n        'wallet' AS tag_type,\n        A.start_date,\n        NULL AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        current_totals A\n    WHERE\n        A.wallet_flag = 'eth billionaire'\n\n\nAND A.user_address NOT IN (\n    SELECT\n        DISTINCT address\n    FROM\n        CROSSCHAIN_DEV.silver.tags_wallet_ETH_value\n    WHERE\n        tag_name = 'eth billionaire'\n)\n\n),\nnew_millionaires AS (\n    SELECT\n        'ethereum' AS blockchain,\n        'flipside' AS creator,\n        A.user_address AS address,\n        'eth millionaire' AS tag_name,\n        'wallet' AS tag_type,\n        A.start_date,\n        NULL AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        current_totals A\n    WHERE\n        A.wallet_flag = 'eth millionaire'\n\n\nAND A.user_address NOT IN (\n    SELECT\n        DISTINCT address\n    FROM\n        CROSSCHAIN_DEV.silver.tags_wallet_ETH_value\n    WHERE\n        tag_name = 'eth millionaire'\n)\n\n)\n\n,\ncap_wallet_oner AS (\n    SELECT\n        'ethereum' AS blockchain,\n        'flipside' AS creator,\n        address,\n        'eth top 1%' AS tag_name,\n        'wallet' AS tag_type,\n        start_date,\n        DATE_TRUNC(\n            'DAY',\n            CURRENT_DATE\n        ) :: DATE AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        (\n            SELECT\n                *\n            FROM\n                CROSSCHAIN_DEV.silver.tags_wallet_ETH_value\n            WHERE\n                tag_name = 'eth top 1%'\n        )\n    WHERE\n        address NOT IN (\n            SELECT\n                DISTINCT user_address\n            FROM\n                current_totals\n            WHERE\n                wallet_group = 100\n        )\n),\ncap_billionaires AS (\n    SELECT\n        'ethereum' AS blockchain,\n        'flipside' AS creator,\n        address,\n        'eth billionaire' AS tag_name,\n        'wallet' AS tag_type,\n        start_date,\n        DATE_TRUNC(\n            'DAY',\n            CURRENT_DATE\n        ) :: DATE AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        (\n            SELECT\n                *\n            FROM\n                CROSSCHAIN_DEV.silver.tags_wallet_ETH_value\n            WHERE\n                tag_name = 'eth billionaire'\n        )\n    WHERE\n        address NOT IN (\n            SELECT\n                DISTINCT user_address\n            FROM\n                current_totals\n            WHERE\n                wallet_flag = 'eth billionaire'\n        )\n),\ncap_millionaires AS (\n    SELECT\n        'ethereum' AS blockchain,\n        'flipside' AS creator,\n        address,\n        'eth millionaire' AS tag_name,\n        'wallet' AS tag_type,\n        start_date,\n        DATE_TRUNC(\n            'DAY',\n            CURRENT_DATE\n        ) :: DATE AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        (\n            SELECT\n                *\n            FROM\n                CROSSCHAIN_DEV.silver.tags_wallet_ETH_value\n            WHERE\n                tag_name = 'eth millionaire'\n        )\n    WHERE\n        address NOT IN (\n            SELECT\n                DISTINCT user_address\n            FROM\n                current_totals\n            WHERE\n                wallet_flag = 'eth millionaire'\n        )\n)\n\nSELECT\n    *\nFROM\n    new_wallet_oner\nUNION\nSELECT\n    *\nFROM\n    new_billionaires\nUNION\nSELECT\n    *\nFROM\n    new_millionaires\n\n\nUNION\nSELECT\n    *\nFROM\n    cap_wallet_oner\nUNION\nSELECT\n    *\nFROM\n    cap_billionaires\nUNION\nSELECT\n    *\nFROM\n    cap_millionaires\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.tags_wallet_ETH_value"}, "model.crosschain_models.silver__tags_wallet_TOKEN_value": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', address, tag_name, start_date)\",\r\n    incremental_strategy = 'delete+insert',\r\n) }}\r\n-- We do not want to full refresh this model until we have a historical tags code set up.\r\n-- to full-refresh either include the variable allow_full_refresh: True to command or comment out below code\r\n-- DO NOT FORMAT will break the full refresh code if formatted copy from below\r\n\r\n-- {% if execute %}\r\n--   {% if flags.FULL_REFRESH and var('allow_full_refresh', False) != True %}\r\n--       {{ exceptions.raise_compiler_error(\"Full refresh is not allowed for this model unless the argument \\\"- -vars 'allow_full_refresh: True'\\\" is included in the dbt run command.\") }}\r\n--   {% endif %}\r\n-- {% endif %}\r\n{% if execute %}\r\n  {% if flags.FULL_REFRESH and var('allow_full_refresh', False) != True %}\r\n      {{ exceptions.raise_compiler_error(\"Full refresh is not allowed for this model unless the argument \\\"- -vars 'allow_full_refresh: True'\\\" is included in the dbt run command.\") }}\r\n  {% endif %}\r\n{% endif %}\r\n\r\nWITH current_totals AS (\r\n    SELECT\r\n        DISTINCT user_address,\r\n        MAX(\r\n            last_activity_block_timestamp :: DATE\r\n        ) AS start_date,\r\n        SUM(usd_value_now) AS wallet_value,\r\n        CASE\r\n            WHEN SUM(usd_value_now) >= 1000000000 THEN 'token billionaire'\r\n            WHEN SUM(usd_value_now) >= 1000000\r\n            AND SUM(usd_value_now) < 1000000000 THEN 'token millionaire'\r\n            ELSE 'NONE'\r\n        END AS wallet_flag,\r\n        NTILE(100) over(\r\n            ORDER BY\r\n                wallet_value\r\n        ) AS wallet_group\r\n    FROM\r\n        {{ source(\r\n            'ethereum_core',\r\n            'ez_current_balances'\r\n        ) }}\r\n    WHERE\r\n        symbol != 'ETH'\r\n        AND contract_address IS NOT NULL\r\n    GROUP BY\r\n        1\r\n    HAVING\r\n        SUM(usd_value_now) >= 0\r\n),\r\nnew_wallet_oner AS (\r\n    SELECT\r\n        'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        A.user_address AS address,\r\n        'token top 1%' AS tag_name,\r\n        'wallet' AS tag_type,\r\n        A.start_date,\r\n        NULL AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        current_totals A\r\n    WHERE\r\n        A.wallet_group = 100\r\n\r\n{% if is_incremental() %}\r\nAND A.user_address NOT IN (\r\n    SELECT\r\n        DISTINCT address\r\n    FROM\r\n        {{ this }}\r\n    WHERE\r\n        tag_name = 'token top 1%'\r\n)\r\n{% endif %}\r\n),\r\nnew_billionaires AS (\r\n    SELECT\r\n        'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        A.user_address AS address,\r\n        'token billionaire' AS tag_name,\r\n        'wallet' AS tag_type,\r\n        A.start_date,\r\n        NULL AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        current_totals A\r\n    WHERE\r\n        A.wallet_flag = 'token billionaire'\r\n\r\n{% if is_incremental() %}\r\nAND A.user_address NOT IN (\r\n    SELECT\r\n        DISTINCT address\r\n    FROM\r\n        {{ this }}\r\n    WHERE\r\n        tag_name = 'token billionaire'\r\n)\r\n{% endif %}\r\n),\r\nnew_millionaires AS (\r\n    SELECT\r\n        'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        A.user_address AS address,\r\n        'token millionaire' AS tag_name,\r\n        'wallet' AS tag_type,\r\n        A.start_date,\r\n        NULL AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        current_totals A\r\n    WHERE\r\n        A.wallet_flag = 'token millionaire'\r\n\r\n{% if is_incremental() %}\r\nAND A.user_address NOT IN (\r\n    SELECT\r\n        DISTINCT address\r\n    FROM\r\n        {{ this }}\r\n    WHERE\r\n        tag_name = 'token millionaire'\r\n)\r\n{% endif %}\r\n)\r\n\r\n{% if is_incremental() %},\r\ncap_wallet_oner AS (\r\n    SELECT\r\n        'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        address,\r\n        'token top 1%' AS tag_name,\r\n        'wallet' AS tag_type,\r\n        start_date,\r\n        DATE_TRUNC(\r\n            'DAY',\r\n            CURRENT_DATE\r\n        ) :: DATE AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        (\r\n            SELECT\r\n                *\r\n            FROM\r\n                {{ this }}\r\n            WHERE\r\n                tag_name = 'token top 1%'\r\n        )\r\n    WHERE\r\n        address NOT IN (\r\n            SELECT\r\n                DISTINCT user_address\r\n            FROM\r\n                current_totals\r\n            WHERE\r\n                wallet_group = 100\r\n        )\r\n),\r\ncap_billionaires AS (\r\n    SELECT\r\n        'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        address,\r\n        'token billionaire' AS tag_name,\r\n        'wallet' AS tag_type,\r\n        start_date,\r\n        DATE_TRUNC(\r\n            'DAY',\r\n            CURRENT_DATE\r\n        ) :: DATE AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        (\r\n            SELECT\r\n                *\r\n            FROM\r\n                {{ this }}\r\n            WHERE\r\n                tag_name = 'token billionaire'\r\n        )\r\n    WHERE\r\n        address NOT IN (\r\n            SELECT\r\n                DISTINCT user_address\r\n            FROM\r\n                current_totals\r\n            WHERE\r\n                wallet_flag = 'token billionaire'\r\n        )\r\n),\r\ncap_millionaires AS (\r\n    SELECT\r\n        'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        address,\r\n        'token millionaire' AS tag_name,\r\n        'wallet' AS tag_type,\r\n        start_date,\r\n        DATE_TRUNC(\r\n            'DAY',\r\n            CURRENT_DATE\r\n        ) :: DATE AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        (\r\n            SELECT\r\n                *\r\n            FROM\r\n                {{ this }}\r\n            WHERE\r\n                tag_name = 'token millionaire'\r\n        )\r\n    WHERE\r\n        address NOT IN (\r\n            SELECT\r\n                DISTINCT user_address\r\n            FROM\r\n                current_totals\r\n            WHERE\r\n                wallet_flag = 'token millionaire'\r\n        )\r\n)\r\n{% endif %}\r\nSELECT\r\n    *\r\nFROM\r\n    new_wallet_oner\r\nUNION\r\nSELECT\r\n    *\r\nFROM\r\n    new_billionaires\r\nUNION\r\nSELECT\r\n    *\r\nFROM\r\n    new_millionaires\r\n\r\n{% if is_incremental() %}\r\nUNION\r\nSELECT\r\n    *\r\nFROM\r\n    cap_wallet_oner\r\nUNION\r\nSELECT\r\n    *\r\nFROM\r\n    cap_billionaires\r\nUNION\r\nSELECT\r\n    *\r\nFROM\r\n    cap_millionaires\r\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.ethereum_core.ez_current_balances"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', address, tag_name, start_date)", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "silver__tags_wallet_TOKEN_value"], "unique_id": "model.crosschain_models.silver__tags_wallet_TOKEN_value", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\tags\\Ethereum\\silver__tags_wallet_TOKEN_value.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_wallet_TOKEN_value.sql", "name": "silver__tags_wallet_TOKEN_value", "alias": "tags_wallet_TOKEN_value", "checksum": {"name": "sha256", "checksum": "de8c537bc8b7e61be5058583acaad94282075ca89407c15240b3c132f444905a"}, "tags": [], "refs": [], "sources": [["ethereum_core", "ez_current_balances"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\tags\\Ethereum\\silver__tags_wallet_TOKEN_value.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_wallet_TOKEN_value.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', address, tag_name, start_date)", "incremental_strategy": "delete+insert"}, "created_at": 1666882899.874683, "compiled_sql": "\n-- We do not want to full refresh this model until we have a historical tags code set up.\n-- to full-refresh either include the variable allow_full_refresh: True to command or comment out below code\n-- DO NOT FORMAT will break the full refresh code if formatted copy from below\n\n-- \n--   \n-- \n\n  \n\n\nWITH current_totals AS (\n    SELECT\n        DISTINCT user_address,\n        MAX(\n            last_activity_block_timestamp :: DATE\n        ) AS start_date,\n        SUM(usd_value_now) AS wallet_value,\n        CASE\n            WHEN SUM(usd_value_now) >= 1000000000 THEN 'token billionaire'\n            WHEN SUM(usd_value_now) >= 1000000\n            AND SUM(usd_value_now) < 1000000000 THEN 'token millionaire'\n            ELSE 'NONE'\n        END AS wallet_flag,\n        NTILE(100) over(\n            ORDER BY\n                wallet_value\n        ) AS wallet_group\n    FROM\n        ethereum.core.ez_current_balances\n    WHERE\n        symbol != 'ETH'\n        AND contract_address IS NOT NULL\n    GROUP BY\n        1\n    HAVING\n        SUM(usd_value_now) >= 0\n),\nnew_wallet_oner AS (\n    SELECT\n        'ethereum' AS blockchain,\n        'flipside' AS creator,\n        A.user_address AS address,\n        'token top 1%' AS tag_name,\n        'wallet' AS tag_type,\n        A.start_date,\n        NULL AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        current_totals A\n    WHERE\n        A.wallet_group = 100\n\n\nAND A.user_address NOT IN (\n    SELECT\n        DISTINCT address\n    FROM\n        CROSSCHAIN_DEV.silver.tags_wallet_TOKEN_value\n    WHERE\n        tag_name = 'token top 1%'\n)\n\n),\nnew_billionaires AS (\n    SELECT\n        'ethereum' AS blockchain,\n        'flipside' AS creator,\n        A.user_address AS address,\n        'token billionaire' AS tag_name,\n        'wallet' AS tag_type,\n        A.start_date,\n        NULL AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        current_totals A\n    WHERE\n        A.wallet_flag = 'token billionaire'\n\n\nAND A.user_address NOT IN (\n    SELECT\n        DISTINCT address\n    FROM\n        CROSSCHAIN_DEV.silver.tags_wallet_TOKEN_value\n    WHERE\n        tag_name = 'token billionaire'\n)\n\n),\nnew_millionaires AS (\n    SELECT\n        'ethereum' AS blockchain,\n        'flipside' AS creator,\n        A.user_address AS address,\n        'token millionaire' AS tag_name,\n        'wallet' AS tag_type,\n        A.start_date,\n        NULL AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        current_totals A\n    WHERE\n        A.wallet_flag = 'token millionaire'\n\n\nAND A.user_address NOT IN (\n    SELECT\n        DISTINCT address\n    FROM\n        CROSSCHAIN_DEV.silver.tags_wallet_TOKEN_value\n    WHERE\n        tag_name = 'token millionaire'\n)\n\n)\n\n,\ncap_wallet_oner AS (\n    SELECT\n        'ethereum' AS blockchain,\n        'flipside' AS creator,\n        address,\n        'token top 1%' AS tag_name,\n        'wallet' AS tag_type,\n        start_date,\n        DATE_TRUNC(\n            'DAY',\n            CURRENT_DATE\n        ) :: DATE AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        (\n            SELECT\n                *\n            FROM\n                CROSSCHAIN_DEV.silver.tags_wallet_TOKEN_value\n            WHERE\n                tag_name = 'token top 1%'\n        )\n    WHERE\n        address NOT IN (\n            SELECT\n                DISTINCT user_address\n            FROM\n                current_totals\n            WHERE\n                wallet_group = 100\n        )\n),\ncap_billionaires AS (\n    SELECT\n        'ethereum' AS blockchain,\n        'flipside' AS creator,\n        address,\n        'token billionaire' AS tag_name,\n        'wallet' AS tag_type,\n        start_date,\n        DATE_TRUNC(\n            'DAY',\n            CURRENT_DATE\n        ) :: DATE AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        (\n            SELECT\n                *\n            FROM\n                CROSSCHAIN_DEV.silver.tags_wallet_TOKEN_value\n            WHERE\n                tag_name = 'token billionaire'\n        )\n    WHERE\n        address NOT IN (\n            SELECT\n                DISTINCT user_address\n            FROM\n                current_totals\n            WHERE\n                wallet_flag = 'token billionaire'\n        )\n),\ncap_millionaires AS (\n    SELECT\n        'ethereum' AS blockchain,\n        'flipside' AS creator,\n        address,\n        'token millionaire' AS tag_name,\n        'wallet' AS tag_type,\n        start_date,\n        DATE_TRUNC(\n            'DAY',\n            CURRENT_DATE\n        ) :: DATE AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        (\n            SELECT\n                *\n            FROM\n                CROSSCHAIN_DEV.silver.tags_wallet_TOKEN_value\n            WHERE\n                tag_name = 'token millionaire'\n        )\n    WHERE\n        address NOT IN (\n            SELECT\n                DISTINCT user_address\n            FROM\n                current_totals\n            WHERE\n                wallet_flag = 'token millionaire'\n        )\n)\n\nSELECT\n    *\nFROM\n    new_wallet_oner\nUNION\nSELECT\n    *\nFROM\n    new_billionaires\nUNION\nSELECT\n    *\nFROM\n    new_millionaires\n\n\nUNION\nSELECT\n    *\nFROM\n    cap_wallet_oner\nUNION\nSELECT\n    *\nFROM\n    cap_billionaires\nUNION\nSELECT\n    *\nFROM\n    cap_millionaires\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.tags_wallet_TOKEN_value"}, "model.crosschain_models.silver__tags_wallet_value": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"CONCAT_WS('-', address, tag_name, start_date)\",\r\n    incremental_strategy = 'delete+insert',\r\n) }}\r\n-- We do not want to full refresh this model until we have a historical tags code set up.\r\n-- to full-refresh either include the variable allow_full_refresh: True to command or comment out below code\r\n-- DO NOT FORMAT will break the full refresh code if formatted copy from below\r\n\r\n-- {% if execute %}\r\n--   {% if flags.FULL_REFRESH and var('allow_full_refresh', False) != True %}\r\n--       {{ exceptions.raise_compiler_error(\"Full refresh is not allowed for this model unless the argument \\\"- -vars 'allow_full_refresh: True'\\\" is included in the dbt run command.\") }}\r\n--   {% endif %}\r\n-- {% endif %}\r\n{% if execute %}\r\n  {% if flags.FULL_REFRESH and var('allow_full_refresh', False) != True %}\r\n      {{ exceptions.raise_compiler_error(\"Full refresh is not allowed for this model unless the argument \\\"- -vars 'allow_full_refresh: True'\\\" is included in the dbt run command.\") }}\r\n  {% endif %}\r\n{% endif %}\r\n\r\nWITH current_totals AS (\r\n    SELECT\r\n        DISTINCT user_address,\r\n        MAX(\r\n            last_activity_block_timestamp :: DATE\r\n        ) AS start_date,\r\n        SUM(usd_value_now) AS wallet_value,\r\n        CASE\r\n            WHEN SUM(usd_value_now) >= 1000000000 THEN 'wallet billionaire'\r\n            WHEN SUM(usd_value_now) >= 1000000\r\n            AND SUM(usd_value_now) < 1000000000 THEN 'wallet millionaire'\r\n            ELSE 'NONE'\r\n        END AS wallet_flag,\r\n        NTILE(100) over(\r\n            ORDER BY\r\n                wallet_value\r\n        ) AS wallet_group\r\n    FROM\r\n        {{ source(\r\n            'ethereum_core',\r\n            'ez_current_balances'\r\n        ) }}\r\n    GROUP BY\r\n        1\r\n    HAVING\r\n        SUM(usd_value_now) >= 0\r\n),\r\nnew_wallet_oner AS (\r\n    SELECT\r\n        'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        A.user_address AS address,\r\n        'wallet top 1%' AS tag_name,\r\n        'wallet' AS tag_type,\r\n        A.start_date,\r\n        NULL AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        current_totals A\r\n    WHERE\r\n        A.wallet_group = 100\r\n\r\n{% if is_incremental() %}\r\nAND A.user_address NOT IN (\r\n    SELECT\r\n        DISTINCT address\r\n    FROM\r\n        {{ this }}\r\n    WHERE\r\n        tag_name = 'wallet top 1%'\r\n)\r\n{% endif %}\r\n),\r\nnew_billionaires AS (\r\n    SELECT\r\n        'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        A.user_address AS address,\r\n        'wallet billionaire' AS tag_name,\r\n        'wallet' AS tag_type,\r\n        A.start_date,\r\n        NULL AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        current_totals A\r\n    WHERE\r\n        A.wallet_flag = 'wallet billionaire'\r\n\r\n{% if is_incremental() %}\r\nAND A.user_address NOT IN (\r\n    SELECT\r\n        DISTINCT address\r\n    FROM\r\n        {{ this }}\r\n    WHERE\r\n        tag_name = 'wallet billionaire'\r\n)\r\n{% endif %}\r\n),\r\nnew_millionaires AS (\r\n    SELECT\r\n        'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        A.user_address AS address,\r\n        'wallet millionaire' AS tag_name,\r\n        'wallet' AS tag_type,\r\n        A.start_date,\r\n        NULL AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        current_totals A\r\n    WHERE\r\n        A.wallet_flag = 'wallet millionaire'\r\n\r\n{% if is_incremental() %}\r\nAND A.user_address NOT IN (\r\n    SELECT\r\n        DISTINCT address\r\n    FROM\r\n        {{ this }}\r\n    WHERE\r\n        tag_name = 'wallet millionaire'\r\n)\r\n{% endif %}\r\n)\r\n\r\n{% if is_incremental() %},\r\ncap_wallet_oner AS (\r\n    SELECT\r\n        'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        address,\r\n        'wallet top 1%' AS tag_name,\r\n        'wallet' AS tag_type,\r\n        start_date,\r\n        DATE_TRUNC(\r\n            'DAY',\r\n            CURRENT_DATE\r\n        ) :: DATE AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        (\r\n            SELECT\r\n                *\r\n            FROM\r\n                {{ this }}\r\n            WHERE\r\n                tag_name = 'wallet top 1%'\r\n        )\r\n    WHERE\r\n        address NOT IN (\r\n            SELECT\r\n                DISTINCT user_address\r\n            FROM\r\n                current_totals\r\n            WHERE\r\n                wallet_group = 100\r\n        )\r\n),\r\ncap_billionaires AS (\r\n    SELECT\r\n        'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        address,\r\n        'wallet billionaire' AS tag_name,\r\n        'wallet' AS tag_type,\r\n        start_date,\r\n        DATE_TRUNC(\r\n            'DAY',\r\n            CURRENT_DATE\r\n        ) :: DATE AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        (\r\n            SELECT\r\n                *\r\n            FROM\r\n                {{ this }}\r\n            WHERE\r\n                tag_name = 'wallet billionaire'\r\n        )\r\n    WHERE\r\n        address NOT IN (\r\n            SELECT\r\n                DISTINCT user_address\r\n            FROM\r\n                current_totals\r\n            WHERE\r\n                wallet_flag = 'wallet billionaire'\r\n        )\r\n),\r\ncap_millionaires AS (\r\n    SELECT\r\n        'ethereum' AS blockchain,\r\n        'flipside' AS creator,\r\n        address,\r\n        'wallet millionaire' AS tag_name,\r\n        'wallet' AS tag_type,\r\n        start_date,\r\n        DATE_TRUNC(\r\n            'DAY',\r\n            CURRENT_DATE\r\n        ) :: DATE AS end_date,\r\n        CURRENT_TIMESTAMP AS tag_created_at\r\n    FROM\r\n        (\r\n            SELECT\r\n                *\r\n            FROM\r\n                {{ this }}\r\n            WHERE\r\n                tag_name = 'wallet millionaire'\r\n        )\r\n    WHERE\r\n        address NOT IN (\r\n            SELECT\r\n                DISTINCT user_address\r\n            FROM\r\n                current_totals\r\n            WHERE\r\n                wallet_flag = 'wallet millionaire'\r\n        )\r\n)\r\n{% endif %}\r\nSELECT\r\n    *\r\nFROM\r\n    new_wallet_oner\r\nUNION\r\nSELECT\r\n    *\r\nFROM\r\n    new_billionaires\r\nUNION\r\nSELECT\r\n    *\r\nFROM\r\n    new_millionaires\r\n\r\n{% if is_incremental() %}\r\nUNION\r\nSELECT\r\n    *\r\nFROM\r\n    cap_wallet_oner\r\nUNION\r\nSELECT\r\n    *\r\nFROM\r\n    cap_billionaires\r\nUNION\r\nSELECT\r\n    *\r\nFROM\r\n    cap_millionaires\r\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.crosschain_models.ethereum_core.ez_current_balances"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', address, tag_name, start_date)", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "silver__tags_wallet_value"], "unique_id": "model.crosschain_models.silver__tags_wallet_value", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "silver\\tags\\Ethereum\\silver__tags_wallet_value.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_wallet_value.sql", "name": "silver__tags_wallet_value", "alias": "tags_wallet_value", "checksum": {"name": "sha256", "checksum": "0aee39903590046af703408587d046c37458bca100cb09d95019484e8555da2c"}, "tags": [], "refs": [], "sources": [["ethereum_core", "ez_current_balances"]], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\silver\\tags\\Ethereum\\silver__tags_wallet_value.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_wallet_value.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "CONCAT_WS('-', address, tag_name, start_date)", "incremental_strategy": "delete+insert"}, "created_at": 1666882899.887683, "compiled_sql": "\n-- We do not want to full refresh this model until we have a historical tags code set up.\n-- to full-refresh either include the variable allow_full_refresh: True to command or comment out below code\n-- DO NOT FORMAT will break the full refresh code if formatted copy from below\n\n-- \n--   \n-- \n\n  \n\n\nWITH current_totals AS (\n    SELECT\n        DISTINCT user_address,\n        MAX(\n            last_activity_block_timestamp :: DATE\n        ) AS start_date,\n        SUM(usd_value_now) AS wallet_value,\n        CASE\n            WHEN SUM(usd_value_now) >= 1000000000 THEN 'wallet billionaire'\n            WHEN SUM(usd_value_now) >= 1000000\n            AND SUM(usd_value_now) < 1000000000 THEN 'wallet millionaire'\n            ELSE 'NONE'\n        END AS wallet_flag,\n        NTILE(100) over(\n            ORDER BY\n                wallet_value\n        ) AS wallet_group\n    FROM\n        ethereum.core.ez_current_balances\n    GROUP BY\n        1\n    HAVING\n        SUM(usd_value_now) >= 0\n),\nnew_wallet_oner AS (\n    SELECT\n        'ethereum' AS blockchain,\n        'flipside' AS creator,\n        A.user_address AS address,\n        'wallet top 1%' AS tag_name,\n        'wallet' AS tag_type,\n        A.start_date,\n        NULL AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        current_totals A\n    WHERE\n        A.wallet_group = 100\n\n\nAND A.user_address NOT IN (\n    SELECT\n        DISTINCT address\n    FROM\n        CROSSCHAIN_DEV.silver.tags_wallet_value\n    WHERE\n        tag_name = 'wallet top 1%'\n)\n\n),\nnew_billionaires AS (\n    SELECT\n        'ethereum' AS blockchain,\n        'flipside' AS creator,\n        A.user_address AS address,\n        'wallet billionaire' AS tag_name,\n        'wallet' AS tag_type,\n        A.start_date,\n        NULL AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        current_totals A\n    WHERE\n        A.wallet_flag = 'wallet billionaire'\n\n\nAND A.user_address NOT IN (\n    SELECT\n        DISTINCT address\n    FROM\n        CROSSCHAIN_DEV.silver.tags_wallet_value\n    WHERE\n        tag_name = 'wallet billionaire'\n)\n\n),\nnew_millionaires AS (\n    SELECT\n        'ethereum' AS blockchain,\n        'flipside' AS creator,\n        A.user_address AS address,\n        'wallet millionaire' AS tag_name,\n        'wallet' AS tag_type,\n        A.start_date,\n        NULL AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        current_totals A\n    WHERE\n        A.wallet_flag = 'wallet millionaire'\n\n\nAND A.user_address NOT IN (\n    SELECT\n        DISTINCT address\n    FROM\n        CROSSCHAIN_DEV.silver.tags_wallet_value\n    WHERE\n        tag_name = 'wallet millionaire'\n)\n\n)\n\n,\ncap_wallet_oner AS (\n    SELECT\n        'ethereum' AS blockchain,\n        'flipside' AS creator,\n        address,\n        'wallet top 1%' AS tag_name,\n        'wallet' AS tag_type,\n        start_date,\n        DATE_TRUNC(\n            'DAY',\n            CURRENT_DATE\n        ) :: DATE AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        (\n            SELECT\n                *\n            FROM\n                CROSSCHAIN_DEV.silver.tags_wallet_value\n            WHERE\n                tag_name = 'wallet top 1%'\n        )\n    WHERE\n        address NOT IN (\n            SELECT\n                DISTINCT user_address\n            FROM\n                current_totals\n            WHERE\n                wallet_group = 100\n        )\n),\ncap_billionaires AS (\n    SELECT\n        'ethereum' AS blockchain,\n        'flipside' AS creator,\n        address,\n        'wallet billionaire' AS tag_name,\n        'wallet' AS tag_type,\n        start_date,\n        DATE_TRUNC(\n            'DAY',\n            CURRENT_DATE\n        ) :: DATE AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        (\n            SELECT\n                *\n            FROM\n                CROSSCHAIN_DEV.silver.tags_wallet_value\n            WHERE\n                tag_name = 'wallet billionaire'\n        )\n    WHERE\n        address NOT IN (\n            SELECT\n                DISTINCT user_address\n            FROM\n                current_totals\n            WHERE\n                wallet_flag = 'wallet billionaire'\n        )\n),\ncap_millionaires AS (\n    SELECT\n        'ethereum' AS blockchain,\n        'flipside' AS creator,\n        address,\n        'wallet millionaire' AS tag_name,\n        'wallet' AS tag_type,\n        start_date,\n        DATE_TRUNC(\n            'DAY',\n            CURRENT_DATE\n        ) :: DATE AS end_date,\n        CURRENT_TIMESTAMP AS tag_created_at\n    FROM\n        (\n            SELECT\n                *\n            FROM\n                CROSSCHAIN_DEV.silver.tags_wallet_value\n            WHERE\n                tag_name = 'wallet millionaire'\n        )\n    WHERE\n        address NOT IN (\n            SELECT\n                DISTINCT user_address\n            FROM\n                current_totals\n            WHERE\n                wallet_flag = 'wallet millionaire'\n        )\n)\n\nSELECT\n    *\nFROM\n    new_wallet_oner\nUNION\nSELECT\n    *\nFROM\n    new_billionaires\nUNION\nSELECT\n    *\nFROM\n    new_millionaires\n\n\nUNION\nSELECT\n    *\nFROM\n    cap_wallet_oner\nUNION\nSELECT\n    *\nFROM\n    cap_billionaires\nUNION\nSELECT\n    *\nFROM\n    cap_millionaires\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.silver.tags_wallet_value"}, "test.crosschain_models.not_null_silver__tags_active_eth_last_7_ADDRESS.1867ec5e2e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_active_eth_last_7')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_active_eth_last_7"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "not_null_silver__tags_active_eth_last_7_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver__tags_active_eth_last_7_ADDRESS.1867ec5e2e", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__tags_active_eth_last_7_ADDRESS.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_active_eth_last_7.yml", "name": "not_null_silver__tags_active_eth_last_7_ADDRESS", "alias": "tags_active_eth_last_7_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_active_eth_last_7"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_active_eth_last_7.yml\\not_null_silver__tags_active_eth_last_7_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666882899.7917607, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver.tags_active_eth_last_7\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_active_eth_last_7"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_eth_last_7_ADDRESS__STRING__VARCHAR.54c7d7db19": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_657400c48f9ef07047c2b6ba7b7f5811\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_active_eth_last_7')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_active_eth_last_7"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_657400c48f9ef07047c2b6ba7b7f5811", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_eth_last_7_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_eth_last_7_ADDRESS__STRING__VARCHAR.54c7d7db19", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_657400c48f9ef07047c2b6ba7b7f5811.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_active_eth_last_7.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_eth_last_7_ADDRESS__STRING__VARCHAR", "alias": "tags_active_eth_last_7_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_active_eth_last_7"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_active_eth_last_7.yml\\dbt_expectations_expect_column_657400c48f9ef07047c2b6ba7b7f5811.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_657400c48f9ef07047c2b6ba7b7f5811"}, "created_at": 1666882899.7927642, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('START_DATE' as \n    varchar\n) as relation_column,\n            cast('DATE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('END_DATE' as \n    varchar\n) as relation_column,\n            cast('DATE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_active_eth_last_7"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_eth_last_7_ADDRESS__0_xX_0_9a_fA_F_.64e986e9e7": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_33a4f5a7f234652efa1ee3173781239c\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_active_eth_last_7')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_active_eth_last_7"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_33a4f5a7f234652efa1ee3173781239c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_eth_last_7_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_eth_last_7_ADDRESS__0_xX_0_9a_fA_F_.64e986e9e7", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_33a4f5a7f234652efa1ee3173781239c.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_active_eth_last_7.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_eth_last_7_ADDRESS__0_xX_0_9a_fA_F_", "alias": "tags_active_eth_last_7_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_active_eth_last_7"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_active_eth_last_7.yml\\dbt_expectations_expect_column_33a4f5a7f234652efa1ee3173781239c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_33a4f5a7f234652efa1ee3173781239c"}, "created_at": 1666882899.7967682, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.silver.tags_active_eth_last_7\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_active_eth_last_7"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_active_eth_last_7_ADDRESS__START_DATE.e38f6662b0": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b7dbf122b200e4844dfac2b3c37fcf0c\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS", "START_DATE"], "model": "{{ get_where_subquery(ref('silver__tags_active_eth_last_7')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_active_eth_last_7"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b7dbf122b200e4844dfac2b3c37fcf0c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_utils_unique_combination_of_columns_silver__tags_active_eth_last_7_ADDRESS__START_DATE"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_active_eth_last_7_ADDRESS__START_DATE.e38f6662b0", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_b7dbf122b200e4844dfac2b3c37fcf0c.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_active_eth_last_7.yml", "name": "dbt_utils_unique_combination_of_columns_silver__tags_active_eth_last_7_ADDRESS__START_DATE", "alias": "tags_active_eth_last_7_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_active_eth_last_7"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_active_eth_last_7.yml\\dbt_utils_unique_combination_o_b7dbf122b200e4844dfac2b3c37fcf0c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b7dbf122b200e4844dfac2b3c37fcf0c"}, "created_at": 1666882899.8006833, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS, START_DATE\n    from CROSSCHAIN_DEV.silver.tags_active_eth_last_7\n    group by ADDRESS, START_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__tags_active_eth_last_7"}, "test.crosschain_models.not_null_silver_crosschain__snowflake_ETH_satellites_ADDRESS.53f250ee3b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_ETH_satellites')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_ETH_satellites"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "not_null_silver_crosschain__snowflake_ETH_satellites_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver_crosschain__snowflake_ETH_satellites_ADDRESS.53f250ee3b", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver_crosschain__snowflake_ETH_satellites_ADDRESS.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_ETH_satellites.yml", "name": "not_null_silver_crosschain__snowflake_ETH_satellites_ADDRESS", "alias": "snowflake_ETH_satellites_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_ETH_satellites"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_ETH_satellites.yml\\not_null_silver_crosschain__snowflake_ETH_satellites_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666882899.808683, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver_crosschain.snowflake_ETH_satellites\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__snowflake_ETH_satellites"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_ETH_satellites_ADDRESS__STRING__VARCHAR.b8cc2128ec": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_986b0cdeeaa3f9c2d8fc272947c4fc9f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_ETH_satellites')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_ETH_satellites"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_986b0cdeeaa3f9c2d8fc272947c4fc9f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_ETH_satellites_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_ETH_satellites_ADDRESS__STRING__VARCHAR.b8cc2128ec", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_986b0cdeeaa3f9c2d8fc272947c4fc9f.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_ETH_satellites.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_ETH_satellites_ADDRESS__STRING__VARCHAR", "alias": "snowflake_ETH_satellites_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_ETH_satellites"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_ETH_satellites.yml\\dbt_expectations_expect_column_986b0cdeeaa3f9c2d8fc272947c4fc9f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_986b0cdeeaa3f9c2d8fc272947c4fc9f"}, "created_at": 1666882899.8106828, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('SYSTEM_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INSERT_DATE' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L1_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('L2_LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__snowflake_ETH_satellites"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_ETH_satellites_BLOCKCHAIN__CREATOR__ADDRESS.22cce8e38e": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_714a681ee3195fd9f3325be27b99a9dd\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCKCHAIN", "CREATOR", "ADDRESS"], "model": "{{ get_where_subquery(ref('silver_crosschain__snowflake_ETH_satellites')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver_crosschain__snowflake_ETH_satellites"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_714a681ee3195fd9f3325be27b99a9dd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "deposit_wallets", "dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_ETH_satellites_BLOCKCHAIN__CREATOR__ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_ETH_satellites_BLOCKCHAIN__CREATOR__ADDRESS.22cce8e38e", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_714a681ee3195fd9f3325be27b99a9dd.sql", "original_file_path": "models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_ETH_satellites.yml", "name": "dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_ETH_satellites_BLOCKCHAIN__CREATOR__ADDRESS", "alias": "snowflake_ETH_satellites_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__snowflake_ETH_satellites"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\labels\\deposit_wallets\\silver_crosschain__snowflake_ETH_satellites.yml\\dbt_utils_unique_combination_o_714a681ee3195fd9f3325be27b99a9dd.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_714a681ee3195fd9f3325be27b99a9dd"}, "created_at": 1666882899.813684, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCKCHAIN, CREATOR, ADDRESS\n    from CROSSCHAIN_DEV.silver_crosschain.snowflake_ETH_satellites\n    group by BLOCKCHAIN, CREATOR, ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver_crosschain__snowflake_ETH_satellites"}, "test.crosschain_models.not_null_core__address_labels_BLOCKCHAIN.cee6eb8213": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__address_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.core__address_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_core", "fqn": ["crosschain_models", "core", "not_null_core__address_labels_BLOCKCHAIN"], "unique_id": "test.crosschain_models.not_null_core__address_labels_BLOCKCHAIN.cee6eb8213", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_core__address_labels_BLOCKCHAIN.sql", "original_file_path": "models\\core\\core__address_labels.yml", "name": "not_null_core__address_labels_BLOCKCHAIN", "alias": "address_labels_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__address_labels.yml\\not_null_core__address_labels_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666882899.8226829, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCKCHAIN\nfrom CROSSCHAIN_DEV.core.address_labels\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCKCHAIN", "file_key_name": "models.core__address_labels"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_core__address_labels_BLOCKCHAIN__ethereum__flow__polygon__terra__algorand__solana__moonriver__avalanche__bittorrent__cronos__fantom__arbitrum__aurora__bsc__heco__optimism__gnosis__thorchain__near__terra_classic__axelar.2973734426": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d784ca0370e7fe970db4932510bf67ab\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["ethereum", "flow", "polygon", "terra", "algorand", "solana", "moonriver", "avalanche", "bittorrent", "cronos", "fantom", "arbitrum", "aurora", "bsc", "heco", "optimism", "gnosis", "thorchain", "near", "terra_classic", "axelar"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__address_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.core__address_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d784ca0370e7fe970db4932510bf67ab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_core", "fqn": ["crosschain_models", "core", "dbt_expectations_expect_column_values_to_be_in_set_core__address_labels_BLOCKCHAIN__ethereum__flow__polygon__terra__algorand__solana__moonriver__avalanche__bittorrent__cronos__fantom__arbitrum__aurora__bsc__heco__optimism__gnosis__thorchain__near__terra_classic__axelar"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_core__address_labels_BLOCKCHAIN__ethereum__flow__polygon__terra__algorand__solana__moonriver__avalanche__bittorrent__cronos__fantom__arbitrum__aurora__bsc__heco__optimism__gnosis__thorchain__near__terra_classic__axelar.2973734426", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_d784ca0370e7fe970db4932510bf67ab.sql", "original_file_path": "models\\core\\core__address_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_core__address_labels_BLOCKCHAIN__ethereum__flow__polygon__terra__algorand__solana__moonriver__avalanche__bittorrent__cronos__fantom__arbitrum__aurora__bsc__heco__optimism__gnosis__thorchain__near__terra_classic__axelar", "alias": "address_labels_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__address_labels.yml\\dbt_expectations_expect_column_d784ca0370e7fe970db4932510bf67ab.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d784ca0370e7fe970db4932510bf67ab"}, "created_at": 1666882899.8246827, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        BLOCKCHAIN as value_field\n\n    from CROSSCHAIN_DEV.core.address_labels\n    \n\n),\nset_values as (\n\n    select\n        cast('ethereum' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('flow' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('polygon' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('terra' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('algorand' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('solana' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('moonriver' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('avalanche' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('bittorrent' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('cronos' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('fantom' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('arbitrum' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('aurora' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('bsc' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('heco' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('optimism' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('gnosis' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('thorchain' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('near' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('terra_classic' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('axelar' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCKCHAIN", "file_key_name": "models.core__address_labels"}, "test.crosschain_models.not_null_core__address_labels_CREATOR.679a91da92": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR", "model": "{{ get_where_subquery(ref('core__address_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.core__address_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_core", "fqn": ["crosschain_models", "core", "not_null_core__address_labels_CREATOR"], "unique_id": "test.crosschain_models.not_null_core__address_labels_CREATOR.679a91da92", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_core__address_labels_CREATOR.sql", "original_file_path": "models\\core\\core__address_labels.yml", "name": "not_null_core__address_labels_CREATOR", "alias": "address_labels_CREATOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__address_labels.yml\\not_null_core__address_labels_CREATOR.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666882899.833684, "compiled_sql": "\n    \n    \n\n\n\nselect CREATOR\nfrom CROSSCHAIN_DEV.core.address_labels\nwhere CREATOR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR", "file_key_name": "models.core__address_labels"}, "test.crosschain_models.not_null_core__address_labels_LABEL_TYPE.470bc3151f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('core__address_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.core__address_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_core", "fqn": ["crosschain_models", "core", "not_null_core__address_labels_LABEL_TYPE"], "unique_id": "test.crosschain_models.not_null_core__address_labels_LABEL_TYPE.470bc3151f", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_core__address_labels_LABEL_TYPE.sql", "original_file_path": "models\\core\\core__address_labels.yml", "name": "not_null_core__address_labels_LABEL_TYPE", "alias": "address_labels_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__address_labels.yml\\not_null_core__address_labels_LABEL_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666882899.8346827, "compiled_sql": "\n    \n    \n\n\n\nselect LABEL_TYPE\nfrom CROSSCHAIN_DEV.core.address_labels\nwhere LABEL_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LABEL_TYPE", "file_key_name": "models.core__address_labels"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_core__address_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.f24edce2b6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_248f0dc9dd72453202723b71b4c7c425\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["flotsam", "nft", "defi", "dex", "cex", "dapp", "token", "operator", "layer2", "chadmin"], "column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('core__address_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.core__address_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_248f0dc9dd72453202723b71b4c7c425", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_core", "fqn": ["crosschain_models", "core", "dbt_expectations_expect_column_values_to_be_in_set_core__address_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_core__address_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.f24edce2b6", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_248f0dc9dd72453202723b71b4c7c425.sql", "original_file_path": "models\\core\\core__address_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_core__address_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin", "alias": "address_labels_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__address_labels.yml\\dbt_expectations_expect_column_248f0dc9dd72453202723b71b4c7c425.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_248f0dc9dd72453202723b71b4c7c425"}, "created_at": 1666882899.8356829, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        LABEL_TYPE as value_field\n\n    from CROSSCHAIN_DEV.core.address_labels\n    \n\n),\nset_values as (\n\n    select\n        cast('flotsam' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('nft' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('defi' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('dex' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('cex' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('dapp' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('token' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('operator' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('layer2' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('chadmin' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LABEL_TYPE", "file_key_name": "models.core__address_labels"}, "test.crosschain_models.not_null_core__address_labels_LABEL_SUBTYPE.a78cdf8328": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL_SUBTYPE", "model": "{{ get_where_subquery(ref('core__address_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.core__address_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_core", "fqn": ["crosschain_models", "core", "not_null_core__address_labels_LABEL_SUBTYPE"], "unique_id": "test.crosschain_models.not_null_core__address_labels_LABEL_SUBTYPE.a78cdf8328", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_core__address_labels_LABEL_SUBTYPE.sql", "original_file_path": "models\\core\\core__address_labels.yml", "name": "not_null_core__address_labels_LABEL_SUBTYPE", "alias": "address_labels_LABEL_SUBTYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__address_labels.yml\\not_null_core__address_labels_LABEL_SUBTYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666882899.8416834, "compiled_sql": "\n    \n    \n\n\n\nselect LABEL_SUBTYPE\nfrom CROSSCHAIN_DEV.core.address_labels\nwhere LABEL_SUBTYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LABEL_SUBTYPE", "file_key_name": "models.core__address_labels"}, "test.crosschain_models.not_null_core__address_labels_ADDRESS_NAME.24eb73bccd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS_NAME", "model": "{{ get_where_subquery(ref('core__address_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.core__address_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_core", "fqn": ["crosschain_models", "core", "not_null_core__address_labels_ADDRESS_NAME"], "unique_id": "test.crosschain_models.not_null_core__address_labels_ADDRESS_NAME.24eb73bccd", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_core__address_labels_ADDRESS_NAME.sql", "original_file_path": "models\\core\\core__address_labels.yml", "name": "not_null_core__address_labels_ADDRESS_NAME", "alias": "address_labels_ADDRESS_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__address_labels.yml\\not_null_core__address_labels_ADDRESS_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666882899.842683, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS_NAME\nfrom CROSSCHAIN_DEV.core.address_labels\nwhere ADDRESS_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS_NAME", "file_key_name": "models.core__address_labels"}, "test.crosschain_models.not_null_core__address_labels_PROJECT_NAME.e5dcff5a5d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROJECT_NAME", "model": "{{ get_where_subquery(ref('core__address_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.core__address_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_core", "fqn": ["crosschain_models", "core", "not_null_core__address_labels_PROJECT_NAME"], "unique_id": "test.crosschain_models.not_null_core__address_labels_PROJECT_NAME.e5dcff5a5d", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_core__address_labels_PROJECT_NAME.sql", "original_file_path": "models\\core\\core__address_labels.yml", "name": "not_null_core__address_labels_PROJECT_NAME", "alias": "address_labels_PROJECT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__address_labels.yml\\not_null_core__address_labels_PROJECT_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666882899.844683, "compiled_sql": "\n    \n    \n\n\n\nselect PROJECT_NAME\nfrom CROSSCHAIN_DEV.core.address_labels\nwhere PROJECT_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PROJECT_NAME", "file_key_name": "models.core__address_labels"}, "test.crosschain_models.not_null_core__address_labels_ADDRESS.658975b23a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__address_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.core__address_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_core", "fqn": ["crosschain_models", "core", "not_null_core__address_labels_ADDRESS"], "unique_id": "test.crosschain_models.not_null_core__address_labels_ADDRESS.658975b23a", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_core__address_labels_ADDRESS.sql", "original_file_path": "models\\core\\core__address_labels.yml", "name": "not_null_core__address_labels_ADDRESS", "alias": "address_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__address_labels.yml\\not_null_core__address_labels_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666882899.8456836, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.core.address_labels\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.core__address_labels"}, "test.crosschain_models.dbt_expectations_expect_column_value_lengths_to_equal_core__address_labels_ADDRESS__58.d14dc96ad9": {"raw_sql": "{{ dbt_expectations.test_expect_column_value_lengths_to_equal(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCKCHAIN = 'algorand'\",alias=\"dbt_expectations_expect_column_c604f2c8d0590f021b53e56ce7cb0a5c\") }}", "test_metadata": {"name": "expect_column_value_lengths_to_equal", "kwargs": {"value": 58, "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__address_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.core__address_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c604f2c8d0590f021b53e56ce7cb0a5c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCKCHAIN = 'algorand'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_value_lengths_to_equal_core", "fqn": ["crosschain_models", "core", "dbt_expectations_expect_column_value_lengths_to_equal_core__address_labels_ADDRESS__58"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_value_lengths_to_equal_core__address_labels_ADDRESS__58.d14dc96ad9", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_c604f2c8d0590f021b53e56ce7cb0a5c.sql", "original_file_path": "models\\core\\core__address_labels.yml", "name": "dbt_expectations_expect_column_value_lengths_to_equal_core__address_labels_ADDRESS__58", "alias": "address_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__address_labels.yml\\dbt_expectations_expect_column_c604f2c8d0590f021b53e56ce7cb0a5c.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "BLOCKCHAIN = 'algorand'", "alias": "dbt_expectations_expect_column_c604f2c8d0590f021b53e56ce7cb0a5c"}, "created_at": 1666882899.8546827, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n    \n    length(\n        ADDRESS\n    ) = 58 as expression\n\n\n    from (select * from CROSSCHAIN_DEV.core.address_labels where BLOCKCHAIN = 'algorand') dbt_subquery\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.core__address_labels"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_core__address_labels_BLOCKCHAIN__CREATOR__ADDRESS.ca8dfe5952": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f419076e4dc59fc79fb84cd98b967eb8\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCKCHAIN", "CREATOR", "ADDRESS"], "model": "{{ get_where_subquery(ref('core__address_labels')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.core__address_labels"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f419076e4dc59fc79fb84cd98b967eb8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["crosschain_models", "core", "dbt_utils_unique_combination_of_columns_core__address_labels_BLOCKCHAIN__CREATOR__ADDRESS"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_core__address_labels_BLOCKCHAIN__CREATOR__ADDRESS.ca8dfe5952", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_f419076e4dc59fc79fb84cd98b967eb8.sql", "original_file_path": "models\\core\\core__address_labels.yml", "name": "dbt_utils_unique_combination_of_columns_core__address_labels_BLOCKCHAIN__CREATOR__ADDRESS", "alias": "address_labels_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\core\\core__address_labels.yml\\dbt_utils_unique_combination_o_f419076e4dc59fc79fb84cd98b967eb8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_f419076e4dc59fc79fb84cd98b967eb8"}, "created_at": 1666882899.8576834, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCKCHAIN, CREATOR, ADDRESS\n    from CROSSCHAIN_DEV.core.address_labels\n    group by BLOCKCHAIN, CREATOR, ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__address_labels"}, "test.crosschain_models.not_null_silver__tags_wallet_ETH_value_ADDRESS.878867a740": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_wallet_ETH_value')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_wallet_ETH_value"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "not_null_silver__tags_wallet_ETH_value_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver__tags_wallet_ETH_value_ADDRESS.878867a740", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__tags_wallet_ETH_value_ADDRESS.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_wallet_ETH_value.yml", "name": "not_null_silver__tags_wallet_ETH_value_ADDRESS", "alias": "tags_wallet_ETH_value_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_wallet_ETH_value"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_wallet_ETH_value.yml\\not_null_silver__tags_wallet_ETH_value_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666882899.862683, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver.tags_wallet_ETH_value\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_wallet_ETH_value"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_wallet_ETH_value_ADDRESS__STRING__VARCHAR.366ad4fe70": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_85f4186eda07b5a01601b16d0dc6a4d5\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_wallet_ETH_value')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_wallet_ETH_value"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_85f4186eda07b5a01601b16d0dc6a4d5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_wallet_ETH_value_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_wallet_ETH_value_ADDRESS__STRING__VARCHAR.366ad4fe70", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_85f4186eda07b5a01601b16d0dc6a4d5.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_wallet_ETH_value.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_wallet_ETH_value_ADDRESS__STRING__VARCHAR", "alias": "tags_wallet_ETH_value_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_wallet_ETH_value"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_wallet_ETH_value.yml\\dbt_expectations_expect_column_85f4186eda07b5a01601b16d0dc6a4d5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_85f4186eda07b5a01601b16d0dc6a4d5"}, "created_at": 1666882899.8636837, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('START_DATE' as \n    varchar\n) as relation_column,\n            cast('DATE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('END_DATE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_wallet_ETH_value"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_wallet_ETH_value_ADDRESS__0_xX_0_9a_fA_F_.c05dfde371": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b3785efe9b97c5e3b2ceee154f709f65\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_wallet_ETH_value')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_wallet_ETH_value"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b3785efe9b97c5e3b2ceee154f709f65", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_expectations_expect_column_values_to_match_regex_silver__tags_wallet_ETH_value_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_wallet_ETH_value_ADDRESS__0_xX_0_9a_fA_F_.c05dfde371", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_b3785efe9b97c5e3b2ceee154f709f65.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_wallet_ETH_value.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__tags_wallet_ETH_value_ADDRESS__0_xX_0_9a_fA_F_", "alias": "tags_wallet_ETH_value_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_wallet_ETH_value"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_wallet_ETH_value.yml\\dbt_expectations_expect_column_b3785efe9b97c5e3b2ceee154f709f65.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b3785efe9b97c5e3b2ceee154f709f65"}, "created_at": 1666882899.867683, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.silver.tags_wallet_ETH_value\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_wallet_ETH_value"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_wallet_ETH_value_ADDRESS__TAG_NAME__START_DATE.31074c69eb": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_fd3d019701e87d1cb6922cb74486f00f\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS", "TAG_NAME", "START_DATE"], "model": "{{ get_where_subquery(ref('silver__tags_wallet_ETH_value')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_wallet_ETH_value"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_fd3d019701e87d1cb6922cb74486f00f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_utils_unique_combination_of_columns_silver__tags_wallet_ETH_value_ADDRESS__TAG_NAME__START_DATE"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_wallet_ETH_value_ADDRESS__TAG_NAME__START_DATE.31074c69eb", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_fd3d019701e87d1cb6922cb74486f00f.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_wallet_ETH_value.yml", "name": "dbt_utils_unique_combination_of_columns_silver__tags_wallet_ETH_value_ADDRESS__TAG_NAME__START_DATE", "alias": "tags_wallet_ETH_value_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_wallet_ETH_value"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_wallet_ETH_value.yml\\dbt_utils_unique_combination_o_fd3d019701e87d1cb6922cb74486f00f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_fd3d019701e87d1cb6922cb74486f00f"}, "created_at": 1666882899.870683, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS, TAG_NAME, START_DATE\n    from CROSSCHAIN_DEV.silver.tags_wallet_ETH_value\n    group by ADDRESS, TAG_NAME, START_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__tags_wallet_ETH_value"}, "test.crosschain_models.not_null_silver__tags_wallet_TOKEN_value_ADDRESS.9a6b1a962c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_wallet_TOKEN_value')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_wallet_TOKEN_value"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "not_null_silver__tags_wallet_TOKEN_value_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver__tags_wallet_TOKEN_value_ADDRESS.9a6b1a962c", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__tags_wallet_TOKEN_value_ADDRESS.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_wallet_TOKEN_value.yml", "name": "not_null_silver__tags_wallet_TOKEN_value_ADDRESS", "alias": "tags_wallet_TOKEN_value_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_wallet_TOKEN_value"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_wallet_TOKEN_value.yml\\not_null_silver__tags_wallet_TOKEN_value_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666882899.874683, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver.tags_wallet_TOKEN_value\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_wallet_TOKEN_value"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_wallet_TOKEN_value_ADDRESS__STRING__VARCHAR.f53e4a9be9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1029b0130a1c05b6e6851b46b2659c68\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_wallet_TOKEN_value')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_wallet_TOKEN_value"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1029b0130a1c05b6e6851b46b2659c68", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_wallet_TOKEN_value_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_wallet_TOKEN_value_ADDRESS__STRING__VARCHAR.f53e4a9be9", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_1029b0130a1c05b6e6851b46b2659c68.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_wallet_TOKEN_value.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_wallet_TOKEN_value_ADDRESS__STRING__VARCHAR", "alias": "tags_wallet_TOKEN_value_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_wallet_TOKEN_value"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_wallet_TOKEN_value.yml\\dbt_expectations_expect_column_1029b0130a1c05b6e6851b46b2659c68.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_1029b0130a1c05b6e6851b46b2659c68"}, "created_at": 1666882899.8766835, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('START_DATE' as \n    varchar\n) as relation_column,\n            cast('DATE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('END_DATE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_wallet_TOKEN_value"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_wallet_TOKEN_value_ADDRESS__0_xX_0_9a_fA_F_.14b473d0b6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cc9ed0604a28be91e714d480c072db2f\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_wallet_TOKEN_value')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_wallet_TOKEN_value"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cc9ed0604a28be91e714d480c072db2f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_expectations_expect_column_values_to_match_regex_silver__tags_wallet_TOKEN_value_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_wallet_TOKEN_value_ADDRESS__0_xX_0_9a_fA_F_.14b473d0b6", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_cc9ed0604a28be91e714d480c072db2f.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_wallet_TOKEN_value.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__tags_wallet_TOKEN_value_ADDRESS__0_xX_0_9a_fA_F_", "alias": "tags_wallet_TOKEN_value_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_wallet_TOKEN_value"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_wallet_TOKEN_value.yml\\dbt_expectations_expect_column_cc9ed0604a28be91e714d480c072db2f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_cc9ed0604a28be91e714d480c072db2f"}, "created_at": 1666882899.8796833, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.silver.tags_wallet_TOKEN_value\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_wallet_TOKEN_value"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_wallet_TOKEN_value_ADDRESS__TAG_NAME__START_DATE.95b7867401": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0739005849f496b0569a592be4a27159\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS", "TAG_NAME", "START_DATE"], "model": "{{ get_where_subquery(ref('silver__tags_wallet_TOKEN_value')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_wallet_TOKEN_value"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0739005849f496b0569a592be4a27159", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_utils_unique_combination_of_columns_silver__tags_wallet_TOKEN_value_ADDRESS__TAG_NAME__START_DATE"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_wallet_TOKEN_value_ADDRESS__TAG_NAME__START_DATE.95b7867401", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_0739005849f496b0569a592be4a27159.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_wallet_TOKEN_value.yml", "name": "dbt_utils_unique_combination_of_columns_silver__tags_wallet_TOKEN_value_ADDRESS__TAG_NAME__START_DATE", "alias": "tags_wallet_TOKEN_value_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_wallet_TOKEN_value"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_wallet_TOKEN_value.yml\\dbt_utils_unique_combination_o_0739005849f496b0569a592be4a27159.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_0739005849f496b0569a592be4a27159"}, "created_at": 1666882899.8836825, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS, TAG_NAME, START_DATE\n    from CROSSCHAIN_DEV.silver.tags_wallet_TOKEN_value\n    group by ADDRESS, TAG_NAME, START_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__tags_wallet_TOKEN_value"}, "test.crosschain_models.not_null_silver__tags_wallet_value_ADDRESS.93be4dc6da": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_wallet_value')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_wallet_value"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "not_null_silver__tags_wallet_value_ADDRESS"], "unique_id": "test.crosschain_models.not_null_silver__tags_wallet_value_ADDRESS.93be4dc6da", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_silver__tags_wallet_value_ADDRESS.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_wallet_value.yml", "name": "not_null_silver__tags_wallet_value_ADDRESS", "alias": "tags_wallet_value_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_wallet_value"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_wallet_value.yml\\not_null_silver__tags_wallet_value_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666882899.887683, "compiled_sql": "\n    \n    \n\n\n\nselect ADDRESS\nfrom CROSSCHAIN_DEV.silver.tags_wallet_value\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_wallet_value"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_wallet_value_ADDRESS__STRING__VARCHAR.e4be45a666": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3db0fc0181837b337a44fcb7b7b725a5\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_wallet_value')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_wallet_value"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3db0fc0181837b337a44fcb7b7b725a5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_wallet_value_ADDRESS__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_wallet_value_ADDRESS__STRING__VARCHAR.e4be45a666", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_3db0fc0181837b337a44fcb7b7b725a5.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_wallet_value.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_wallet_value_ADDRESS__STRING__VARCHAR", "alias": "tags_wallet_value_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_wallet_value"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_wallet_value.yml\\dbt_expectations_expect_column_3db0fc0181837b337a44fcb7b7b725a5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_3db0fc0181837b337a44fcb7b7b725a5"}, "created_at": 1666882899.888683, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('START_DATE' as \n    varchar\n) as relation_column,\n            cast('DATE' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('END_DATE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TAG_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_LTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_wallet_value"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_wallet_value_ADDRESS__0_xX_0_9a_fA_F_.76ebe8da51": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e3c722d8e4e0a5965ed8fab5634a2313\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__tags_wallet_value')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_wallet_value"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e3c722d8e4e0a5965ed8fab5634a2313", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_expectations_expect_column_values_to_match_regex_silver__tags_wallet_value_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_wallet_value_ADDRESS__0_xX_0_9a_fA_F_.76ebe8da51", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_e3c722d8e4e0a5965ed8fab5634a2313.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_wallet_value.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__tags_wallet_value_ADDRESS__0_xX_0_9a_fA_F_", "alias": "tags_wallet_value_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_wallet_value"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_wallet_value.yml\\dbt_expectations_expect_column_e3c722d8e4e0a5965ed8fab5634a2313.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e3c722d8e4e0a5965ed8fab5634a2313"}, "created_at": 1666882899.8926835, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.silver.tags_wallet_value\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.silver__tags_wallet_value"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_wallet_value_ADDRESS__TAG_NAME__START_DATE.327d555024": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_afaeb1e55c0fc61e1f6f1dac43f04d5b\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS", "TAG_NAME", "START_DATE"], "model": "{{ get_where_subquery(ref('silver__tags_wallet_value')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.silver__tags_wallet_value"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_afaeb1e55c0fc61e1f6f1dac43f04d5b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["crosschain_models", "silver", "tags", "Ethereum", "dbt_utils_unique_combination_of_columns_silver__tags_wallet_value_ADDRESS__TAG_NAME__START_DATE"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_wallet_value_ADDRESS__TAG_NAME__START_DATE.327d555024", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_afaeb1e55c0fc61e1f6f1dac43f04d5b.sql", "original_file_path": "models\\silver\\tags\\Ethereum\\silver__tags_wallet_value.yml", "name": "dbt_utils_unique_combination_of_columns_silver__tags_wallet_value_ADDRESS__TAG_NAME__START_DATE", "alias": "tags_wallet_value_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__tags_wallet_value"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\silver\\tags\\Ethereum\\silver__tags_wallet_value.yml\\dbt_utils_unique_combination_o_afaeb1e55c0fc61e1f6f1dac43f04d5b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_afaeb1e55c0fc61e1f6f1dac43f04d5b"}, "created_at": 1666882899.895683, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS, TAG_NAME, START_DATE\n    from CROSSCHAIN_DEV.silver.tags_wallet_value\n    group by ADDRESS, TAG_NAME, START_DATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__tags_wallet_value"}, "model.crosschain_models.defi__ez_swaps": {"raw_sql": "{{ config(\n    materialized = 'view',\n    tags = ['snowflake', 'crosschain','swaps'],\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\n-- Harmony/sushi\nSELECT\n    'Harmony' as Blockchain,\n    Block_timestamp,\n    Block_number,\n    Tx_hash,\n    evm_origin_from_address as origin_from_address,\n    evm_origin_to_address as origin_to_address,\n    Pool_address,\n    Platform,\n    Event_index,\n    Amount_in,\n    Amount_out,\n    Sender,\n    Log_id,\n    Token_in,\n    Token_out,\n    Symbol_in,\n    Symbol_out,\n    Tx_to,\n    Amount_in_USD,\n    Amount_out_USD,\n    (Symbol_in || '-' || Symbol_out || ' SLP') as Pool_name\n\nFROM\n    {{ source(\n        'Harmony_db',\n        'EZ_SUSHI_SWAPS'\n    ) }} \n\nUnion all\n\n\n--  Ethereum/All dex\nSELECT\n    'Ethereum' as Blockchain,\n    Block_timestamp,\n    Block_number,\n    Tx_hash,\n    origin_from_address,\n    origin_to_address,\n    contract_address as Pool_address,\n    Platform,\n    Event_index,\n    Amount_in,\n    Amount_out,\n    Sender,\n    _Log_id as Log_id,\n    Token_in,\n    Token_out,\n    Symbol_in,\n    Symbol_out,\n    Tx_to,\n    Amount_in_USD,\n    Amount_out_USD,\n    Pool_name\nFROM\n    {{ source(\n        'ethereum_core',\n        'ez_dex_swaps'\n    ) }}\n\nUnion all\n\n\n--  polygon/sushi\nSELECT\n    'Polygon' as Blockchain,\n    Block_timestamp,\n    Block_number,\n    Tx_hash,\n    origin_from_address,\n    origin_to_address,\n    contract_address as Pool_address,\n    Platform,\n    Event_index,\n    Amount_in,\n    Amount_out,\n    Sender,\n    _Log_id as Log_id,\n    Token_in,\n    Token_out,\n    Symbol_in,\n    Symbol_out,\n    Tx_to,\n    Amount_in_USD,\n    Amount_out_USD,\n    Pool_name\nFROM\n    {{ source(\n        'polygon',\n        'EZ_SWAPS'\n    ) }}\n\nUnion all\n\n--  Arbitrum/sushi\nSELECT\n    'Arbitrum' as Blockchain,\n    Block_timestamp,\n    Block_number,\n    Tx_hash,\n    origin_from_address,\n    origin_to_address,\n    contract_address as Pool_address,\n    Platform,\n    Event_index,\n    Amount_in,\n    Amount_out,\n    Sender,\n    _Log_id as Log_id,\n    Token_in,\n    Token_out,\n    Symbol_in,\n    Symbol_out,\n    Tx_to,\n    Amount_in_USD,\n    Amount_out_USD,\n    Pool_name\nFROM\n    {{ source(\n        'Arbitrum',\n        'EZ_SWAPS'\n    ) }}\n\n\n    Union all\n\n--  Avalanche/sushi\nSELECT\n    'Avalanche' as Blockchain,\n    Block_timestamp,\n    Block_number,\n    Tx_hash,\n    origin_from_address,\n    origin_to_address,\n    contract_address as Pool_address,\n    Platform,\n    Event_index,\n    Amount_in,\n    Amount_out,\n    Sender,\n    _Log_id as Log_id,\n    Token_in,\n    Token_out,\n    Symbol_in,\n    Symbol_out,\n    Tx_to,\n    Amount_in_USD,\n    Amount_out_USD,\n    Pool_name\nFROM\n    {{ source(\n        'Avalanche',\n        'EZ_SWAPS'\n    ) }}\n\n    Union all\n\n--  Optimism/sushi\nSELECT\n    'Optimism' as Blockchain,\n    Block_timestamp,\n    Block_number,\n    Tx_hash,\n    origin_from_address,\n    origin_to_address,\n    contract_address as Pool_address,\n    Platform,\n    Event_index,\n    Amount_in,\n    Amount_out,\n    'Nan' as Sender,\n    _Log_id as Log_id,\n    Token_in,\n    Token_out,\n    Symbol_in,\n    Symbol_out,\n    Tx_to,\n    Amount_in_USD,\n    Amount_out_USD,\n    Pool_name\nFROM\n    {{ source(\n        'Optimism',\n        'EZ_SWAPS'\n    ) }}\n\n    Union all\n\n--  BSC/sushi \nSELECT\n    'BSC' as Blockchain,\n    Block_timestamp,\n    Block_number,\n    Tx_hash,\n    origin_from_address,\n    origin_to_address,\n    contract_address as Pool_address,\n    Platform,\n    Event_index,\n    Amount_in,\n    Amount_out,\n    Sender,\n    _Log_id as Log_id,\n    Token_in,\n    Token_out,\n    Symbol_in,\n    Symbol_out,\n    Tx_to,\n    Amount_in_USD,\n    Amount_out_USD,\n    Pool_name\nFROM\n    {{ source(\n        'BSC',\n        'EZ_SWAPS'\n    ) }}\n\n    Union all\n\n--  Gnosis/sushi \nSELECT\n    'Gnosis' as Blockchain,\n    Block_timestamp,\n    Block_number,\n    Tx_hash,\n    origin_from_address,\n    origin_to_address,\n    contract_address as Pool_address,\n    Platform,\n    Event_index,\n    Amount_in,\n    Amount_out,\n    Sender,\n    _Log_id as Log_id,\n    Token_in,\n    Token_out,\n    Symbol_in,\n    Symbol_out,\n    Tx_to,\n    Amount_in_USD,\n    Amount_out_USD,\n    Pool_name\nFROM\n    {{ source(\n        'Gnosis',\n        'EZ_SWAPS'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.crosschain_models.Harmony_db.EZ_SUSHI_SWAPS", "source.crosschain_models.ethereum_core.ez_dex_swaps", "source.crosschain_models.polygon.EZ_SWAPS", "source.crosschain_models.Arbitrum.EZ_SWAPS", "source.crosschain_models.Avalanche.EZ_SWAPS", "source.crosschain_models.Optimism.EZ_SWAPS", "source.crosschain_models.BSC.EZ_SWAPS", "source.crosschain_models.Gnosis.EZ_SWAPS"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["snowflake", "crosschain", "swaps"], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "defi", "fqn": ["crosschain_models", "defi", "defi__ez_swaps"], "unique_id": "model.crosschain_models.defi__ez_swaps", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "defi\\defi__ez_swaps.sql", "original_file_path": "models\\defi\\defi__ez_swaps.sql", "name": "defi__ez_swaps", "alias": "ez_swaps", "checksum": {"name": "sha256", "checksum": "e2051423b64fe0a7c8d11fc1e4a252943c2c954988b6af585f4a1b21fd572a7d"}, "tags": ["snowflake", "crosschain", "swaps"], "refs": [], "sources": [["Harmony_db", "EZ_SUSHI_SWAPS"], ["ethereum_core", "ez_dex_swaps"], ["polygon", "EZ_SWAPS"], ["Arbitrum", "EZ_SWAPS"], ["Avalanche", "EZ_SWAPS"], ["Optimism", "EZ_SWAPS"], ["BSC", "EZ_SWAPS"], ["Gnosis", "EZ_SWAPS"]], "metrics": [], "description": "This table aggregates all swap transactions that happen within a chain from various decentralized exchange protocols such as Uniswap, sushiswap, etc.", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "The block number at which the transaction is finalized.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The block timestamp of this transaction in UTC", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_ADDRESS": {"name": "POOL_ADDRESS", "description": "The contract address for the liquidity pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_IN": {"name": "AMOUNT_IN", "description": "The amount of tokens put into the swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_OUT": {"name": "AMOUNT_OUT", "description": "The amount of tokens taken out of or received from the swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_IN_USD": {"name": "AMOUNT_IN_USD", "description": "The amount of tokens put into the swap converted to USD using the price of the token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_OUT_USD": {"name": "AMOUNT_OUT_USD", "description": "The amount of tokens taken out of or received from the swap converted to USD using the price of the token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_IN": {"name": "TOKEN_IN", "description": "The address of the token sent for swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_OUT": {"name": "TOKEN_OUT", "description": "The address of the token being swapped to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL_IN": {"name": "SYMBOL_IN", "description": "The symbol of the token sent for swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL_OUT": {"name": "SYMBOL_OUT", "description": "The symbol of the token being swapped to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SENDER": {"name": "SENDER", "description": "The address of the wallet or contract that creates the swap. The Router is usually the Sender in the swap function.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_TO": {"name": "TX_TO", "description": "The tx_to is the address who receives the swapped token. This corresponds to the \"to\" field in the swap function.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM": {"name": "PLATFORM", "description": "This field denotes which application the liquidity pool belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "Event number within a transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOG_ID": {"name": "LOG_ID", "description": "This is the primary key for this table. This is a concatenation of the transaction hash and the event index at which the event occurred. This field can be used within other event based tables such as ```fact_transfers``` & ```ez_token_transfers```.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "The address of the user who initiates the swap. If a swap action generates multiple swaps, all of them will have the same address as origin_from_address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "The person who initiates the swap has to interact with this address. This address belongs to the decentralized exchange and/or is a router.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\defi\\defi__ez_swaps.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_swaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view", "tags": ["snowflake", "crosschain", "swaps"]}, "created_at": 1666883664.1216824, "compiled_sql": "\n\n-- Harmony/sushi\nSELECT\n    'Harmony' as Blockchain,\n    Block_timestamp,\n    Block_number,\n    Tx_hash,\n    evm_origin_from_address as origin_from_address,\n    evm_origin_to_address as origin_to_address,\n    Pool_address,\n    Platform,\n    Event_index,\n    Amount_in,\n    Amount_out,\n    Sender,\n    Log_id,\n    Token_in,\n    Token_out,\n    Symbol_in,\n    Symbol_out,\n    Tx_to,\n    Amount_in_USD,\n    Amount_out_USD,\n    (Symbol_in || '-' || Symbol_out || ' SLP') as Pool_name\n\nFROM\n    HARMONY.PROD.EZ_SUSHI_SWAPS \n\nUnion all\n\n\n--  Ethereum/All dex\nSELECT\n    'Ethereum' as Blockchain,\n    Block_timestamp,\n    Block_number,\n    Tx_hash,\n    origin_from_address,\n    origin_to_address,\n    contract_address as Pool_address,\n    Platform,\n    Event_index,\n    Amount_in,\n    Amount_out,\n    Sender,\n    _Log_id as Log_id,\n    Token_in,\n    Token_out,\n    Symbol_in,\n    Symbol_out,\n    Tx_to,\n    Amount_in_USD,\n    Amount_out_USD,\n    Pool_name\nFROM\n    ethereum.core.ez_dex_swaps\n\nUnion all\n\n\n--  polygon/sushi\nSELECT\n    'Polygon' as Blockchain,\n    Block_timestamp,\n    Block_number,\n    Tx_hash,\n    origin_from_address,\n    origin_to_address,\n    contract_address as Pool_address,\n    Platform,\n    Event_index,\n    Amount_in,\n    Amount_out,\n    Sender,\n    _Log_id as Log_id,\n    Token_in,\n    Token_out,\n    Symbol_in,\n    Symbol_out,\n    Tx_to,\n    Amount_in_USD,\n    Amount_out_USD,\n    Pool_name\nFROM\n    POLYGON.SUSHI.EZ_SWAPS\n\nUnion all\n\n--  Arbitrum/sushi\nSELECT\n    'Arbitrum' as Blockchain,\n    Block_timestamp,\n    Block_number,\n    Tx_hash,\n    origin_from_address,\n    origin_to_address,\n    contract_address as Pool_address,\n    Platform,\n    Event_index,\n    Amount_in,\n    Amount_out,\n    Sender,\n    _Log_id as Log_id,\n    Token_in,\n    Token_out,\n    Symbol_in,\n    Symbol_out,\n    Tx_to,\n    Amount_in_USD,\n    Amount_out_USD,\n    Pool_name\nFROM\n    ARBITRUM.SUSHI.EZ_SWAPS\n\n\n    Union all\n\n--  Avalanche/sushi\nSELECT\n    'Avalanche' as Blockchain,\n    Block_timestamp,\n    Block_number,\n    Tx_hash,\n    origin_from_address,\n    origin_to_address,\n    contract_address as Pool_address,\n    Platform,\n    Event_index,\n    Amount_in,\n    Amount_out,\n    Sender,\n    _Log_id as Log_id,\n    Token_in,\n    Token_out,\n    Symbol_in,\n    Symbol_out,\n    Tx_to,\n    Amount_in_USD,\n    Amount_out_USD,\n    Pool_name\nFROM\n    AVALANCHE.SUSHI.EZ_SWAPS\n\n    Union all\n\n--  Optimism/sushi\nSELECT\n    'Optimism' as Blockchain,\n    Block_timestamp,\n    Block_number,\n    Tx_hash,\n    origin_from_address,\n    origin_to_address,\n    contract_address as Pool_address,\n    Platform,\n    Event_index,\n    Amount_in,\n    Amount_out,\n    'Nan' as Sender,\n    _Log_id as Log_id,\n    Token_in,\n    Token_out,\n    Symbol_in,\n    Symbol_out,\n    Tx_to,\n    Amount_in_USD,\n    Amount_out_USD,\n    Pool_name\nFROM\n    OPTIMISM.SUSHI.EZ_SWAPS\n\n    Union all\n\n--  BSC/sushi \nSELECT\n    'BSC' as Blockchain,\n    Block_timestamp,\n    Block_number,\n    Tx_hash,\n    origin_from_address,\n    origin_to_address,\n    contract_address as Pool_address,\n    Platform,\n    Event_index,\n    Amount_in,\n    Amount_out,\n    Sender,\n    _Log_id as Log_id,\n    Token_in,\n    Token_out,\n    Symbol_in,\n    Symbol_out,\n    Tx_to,\n    Amount_in_USD,\n    Amount_out_USD,\n    Pool_name\nFROM\n    BSC.SUSHI.EZ_SWAPS\n\n    Union all\n\n--  Gnosis/sushi \nSELECT\n    'Gnosis' as Blockchain,\n    Block_timestamp,\n    Block_number,\n    Tx_hash,\n    origin_from_address,\n    origin_to_address,\n    contract_address as Pool_address,\n    Platform,\n    Event_index,\n    Amount_in,\n    Amount_out,\n    Sender,\n    _Log_id as Log_id,\n    Token_in,\n    Token_out,\n    Symbol_in,\n    Symbol_out,\n    Tx_to,\n    Amount_in_USD,\n    Amount_out_USD,\n    Pool_name\nFROM\n    GNOSIS.SUSHI.EZ_SWAPS", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.defi.ez_swaps"}, "model.crosschain_models.defi__ez_borrowing": {"raw_sql": "{{ config(\n    materialized = 'view',\n    tags = ['snowflake', 'crosschain','borrowing'],\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\n-- Ethereum/sushi\nselect\n    block_timestamp,\n    block_number,\n    tx_hash,\n    action,\n    'ethereum' as blockchain,\n    'sushi' as platform,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    asset,\n    borrower,\n    borrower_is_a_contract,\n    lending_pool_address,\n    amount,\n    amount_usd,\n    lending_pool,\n    symbol,\n    _log_id\n\nfrom\n    {{ source(\n        'ethereum_db_sushi',\n        'ez_borrowing'\n    ) }} \n\nunion all\n\n-- polygon/sushi\nselect\n    block_timestamp,\n    block_number,\n    tx_hash,\n    action,\n    'polygon' as blockchain,\n    'sushi' as platform,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    asset,\n    borrower,\n    borrower_is_a_contract,\n    lending_pool_address,\n    amount,\n    amount_usd, \n    lending_pool,\n    symbol,\n    _log_id\nfrom\n    {{ source(\n        'polygon',\n        'EZ_BORROWING'\n    ) }} \n\nunion all\n\n-- arbitrum/sushi\nselect\n    block_timestamp,\n    block_number,\n    tx_hash,\n    action,\n    'arbitrum' as blockchain,\n    'sushi' as platform,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    asset,\n    borrower,\n    borrower_is_a_contract,\n    lending_pool_address,\n    amount,\n    amount_usd,\n    lending_pool,\n    symbol,\n    _log_id\nfrom\n    {{ source(\n        'Arbitrum',\n        'EZ_BORROWING'\n    ) }} \n\n\nunion all\n\n-- avalanche/sushi\nselect\n    block_timestamp,\n    block_number,\n    tx_hash,\n    action,\n    'avalanche' as blockchain,\n    'sushi' as platform,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    asset,\n    borrower,\n    borrower_is_a_contract,\n    lending_pool_address,\n    amount,\n    amount_usd,\n    lending_pool,\n    symbol,\n    _log_id\nfrom\n    {{ source(\n        'Avalanche',\n        'EZ_BORROWING'\n    ) }} \n\nunion all\n\n-- Gnosis/sushi\nselect\n    block_timestamp,\n    block_number,\n    tx_hash,\n    action,\n    'gnosis' as blockchain,\n    'sushi' as platform,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    asset,\n    borrower,\n    borrower_is_a_contract,\n    lending_pool_address,\n    amount,\n    amount_usd,\n    lending_pool,\n    symbol,\n    _log_id\nfrom\n    {{ source(\n        'Gnosis',\n        'EZ_BORROWING'\n    ) }} \n\nunion all\n\n-- bsc/sushi\nselect\n    block_timestamp,\n    block_number,\n    tx_hash,\n    action,\n    'BSC' as blockchain,\n    'sushi' as platform,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    asset,\n    borrower,\n    borrower_is_a_contract,\n    lending_pool_address,\n    amount,\n    amount_usd,\n    lending_pool,\n    symbol,\n    _log_id\nfrom\n    {{ source(\n        'BSC',\n        'EZ_BORROWING'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.crosschain_models.ethereum_db_sushi.ez_borrowing", "source.crosschain_models.polygon.EZ_BORROWING", "source.crosschain_models.Arbitrum.EZ_BORROWING", "source.crosschain_models.Avalanche.EZ_BORROWING", "source.crosschain_models.Gnosis.EZ_BORROWING", "source.crosschain_models.BSC.EZ_BORROWING"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["snowflake", "crosschain", "borrowing"], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "defi", "fqn": ["crosschain_models", "defi", "defi__ez_borrowing"], "unique_id": "model.crosschain_models.defi__ez_borrowing", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "defi\\defi__ez_borrowing.sql", "original_file_path": "models\\defi\\defi__ez_borrowing.sql", "name": "defi__ez_borrowing", "alias": "ez_borrowing", "checksum": {"name": "sha256", "checksum": "5226d7f731c64e46467db75fb4e1f23116292103d877dccf7b11785e0fc67ce6"}, "tags": ["snowflake", "crosschain", "borrowing"], "refs": [], "sources": [["ethereum_db_sushi", "ez_borrowing"], ["polygon", "EZ_BORROWING"], ["Arbitrum", "EZ_BORROWING"], ["Avalanche", "EZ_BORROWING"], ["Gnosis", "EZ_BORROWING"], ["BSC", "EZ_BORROWING"]], "metrics": [], "description": "This is a table that shows all the events across various blockchains and various platforms that are related to Borrowing or repaying the loan", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "The block number at which the transaction is finalized.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The block timestamp of this transaction in UTC", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LENDING_POOL_ADDRESS": {"name": "LENDING_POOL_ADDRESS", "description": "The contract address for the lending pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LENDING_POOL": {"name": "LENDING_POOL", "description": "The name of the lending pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BORROWER_IS_A_CONTRACT": {"name": "BORROWER_IS_A_CONTRACT", "description": "If the depositor of collateral is a contract then its a Yes, if the depositor of collateral is a normal address it is a No.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "The meaning depends on the action:\nBorrow: The amount of the asset that the user is borrowing or\nRepay: The amount of the asset that the user is repaying\nAdd collateral: The amount of collateral that the user is depositing\nRemove collateral: The amount of collateral that the user is withdrawing", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_USD": {"name": "AMOUNT_USD", "description": "The meaning depends on the action:\nBorrow: The amount of the asset in USD that the user is borrowing or\nRepay: The amount of the asset in USD that the user is repaying\nAdd collateral: The amount of collateral in USD that the user is depositing\nRemove collateral: The amount of collateral in USD that the user is withdrawing", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL": {"name": "SYMBOL", "description": "The symbol of the asset/collateral that is payed or received, depending on the action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACTION": {"name": "ACTION", "description": "The action that the user is taking.\n Borrow: user is borrowing an asset\n Repay: user is repaying the asset that they have borrowed in a previous loan\n Add collateral: user is depositing collateral for their loan. This happens some times in the same transaction as the borrowing transaction and some times in a separate transaction. \n Remove collateral: user is withdrawing collateral. This happens some times in the same transaction as the borrowing transaction and some times in a separate transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BORROWER": {"name": "BORROWER", "description": "Its the address of the user who is Borrowing or repaying the loan, depending on the action.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM": {"name": "PLATFORM", "description": "This field denotes which application the liquidity pool belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_LOG_ID": {"name": "_LOG_ID", "description": "This is the primary key for this table. This is a concatenation of the transaction hash and the event index at which the event occurred. This field can be used within other event based tables such as ```fact_transfers``` & ```ez_token_transfers```.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "The address of the user who initiates the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "The person who initiates the depositing transaction has to interact with this address. This address belongs to the lending platform or directs the transactio there.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\defi\\defi__ez_borrowing.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_borrowing.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view", "tags": ["snowflake", "crosschain", "borrowing"]}, "created_at": 1666883664.2594936, "compiled_sql": "\n\n-- Ethereum/sushi\nselect\n    block_timestamp,\n    block_number,\n    tx_hash,\n    action,\n    'ethereum' as blockchain,\n    'sushi' as platform,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    asset,\n    borrower,\n    borrower_is_a_contract,\n    lending_pool_address,\n    amount,\n    amount_usd,\n    lending_pool,\n    symbol,\n    _log_id\n\nfrom\n    ethereum.sushi.ez_borrowing \n\nunion all\n\n-- polygon/sushi\nselect\n    block_timestamp,\n    block_number,\n    tx_hash,\n    action,\n    'polygon' as blockchain,\n    'sushi' as platform,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    asset,\n    borrower,\n    borrower_is_a_contract,\n    lending_pool_address,\n    amount,\n    amount_usd, \n    lending_pool,\n    symbol,\n    _log_id\nfrom\n    POLYGON.SUSHI.EZ_BORROWING \n\nunion all\n\n-- arbitrum/sushi\nselect\n    block_timestamp,\n    block_number,\n    tx_hash,\n    action,\n    'arbitrum' as blockchain,\n    'sushi' as platform,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    asset,\n    borrower,\n    borrower_is_a_contract,\n    lending_pool_address,\n    amount,\n    amount_usd,\n    lending_pool,\n    symbol,\n    _log_id\nfrom\n    ARBITRUM.SUSHI.EZ_BORROWING \n\n\nunion all\n\n-- avalanche/sushi\nselect\n    block_timestamp,\n    block_number,\n    tx_hash,\n    action,\n    'avalanche' as blockchain,\n    'sushi' as platform,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    asset,\n    borrower,\n    borrower_is_a_contract,\n    lending_pool_address,\n    amount,\n    amount_usd,\n    lending_pool,\n    symbol,\n    _log_id\nfrom\n    AVALANCHE.SUSHI.EZ_BORROWING \n\nunion all\n\n-- Gnosis/sushi\nselect\n    block_timestamp,\n    block_number,\n    tx_hash,\n    action,\n    'gnosis' as blockchain,\n    'sushi' as platform,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    asset,\n    borrower,\n    borrower_is_a_contract,\n    lending_pool_address,\n    amount,\n    amount_usd,\n    lending_pool,\n    symbol,\n    _log_id\nfrom\n    GNOSIS.SUSHI.EZ_BORROWING \n\nunion all\n\n-- bsc/sushi\nselect\n    block_timestamp,\n    block_number,\n    tx_hash,\n    action,\n    'BSC' as blockchain,\n    'sushi' as platform,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    asset,\n    borrower,\n    borrower_is_a_contract,\n    lending_pool_address,\n    amount,\n    amount_usd,\n    lending_pool,\n    symbol,\n    _log_id\nfrom\n    BSC.SUSHI.EZ_BORROWING", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.defi.ez_borrowing"}, "model.crosschain_models.defi__ez_lending": {"raw_sql": "{{ config(\n    materialized = 'view',\n    tags = ['snowflake', 'crosschain','lending'],\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\n-- Ethereum/sushi\nselect\n    block_timestamp,\n    block_number,\n    tx_hash,\n    action,\n    'ethereum' as blockchain,\n    'sushi' as platform,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    asset,\n    depositor,\n    lender_is_a_contract,\n    lending_pool_address,\n    amount as asset_amount,\n    amount_usd as asset_amount_usd,\n    lending_pool,\n    symbol,\n    _log_id\n\nfrom\n    {{ source(\n        'ethereum_db_sushi',\n        'ez_lending'\n    ) }} \n\nunion all\n\n-- polygon/sushi\nselect\n    block_timestamp,\n    block_number,\n    tx_hash,\n    action,\n    'polygon' as blockchain,\n    'sushi' as platform,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    asset,\n    depositor,\n    lender_is_a_contract,\n    lending_pool_address,\n    amount as asset_amount,\n    amount_usd as asset_amount_usd,\n    lending_pool,\n    symbol,\n    _log_id\n\nfrom\n    {{ source(\n        'polygon',\n        'EZ_LENDING'\n    ) }} \n\nunion all\n\n-- Arbitrum/sushi\nselect\n    block_timestamp,\n    block_number,\n    tx_hash,\n    action,\n    'arbitrum' as blockchain,\n    'sushi' as platform,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    asset,\n    depositor,\n    lender_is_a_contract,\n    lending_pool_address,\n    asset_amount,\n    asset_amount_usd,\n    lending_pool,\n    symbol,\n    _log_id\n\nfrom\n    {{ source(\n        'Arbitrum',\n        'EZ_LENDING'\n    ) }} \n\nunion all\n\n-- Avalanche/sushi\nselect\n    block_timestamp,\n    block_number,\n    tx_hash,\n    action,\n    'avalanche' as blockchain,\n    'sushi' as platform,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    asset,\n    depositor,\n    lender_is_a_contract,\n    lending_pool_address,\n    asset_amount,\n    asset_amount_usd,\n    lending_pool,\n    symbol,\n    _log_id\n\nfrom\n    {{ source(\n        'Avalanche',\n        'EZ_LENDING'\n    ) }} \n\nunion all\n\n-- BSC/sushi\nselect\n    block_timestamp,\n    block_number,\n    tx_hash,\n    action,\n    'BSC' as blockchain,\n    'sushi' as platform,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    asset,\n    depositor,\n    lender_is_a_contract,\n    lending_pool_address,\n    asset_amount,\n    asset_amount_usd,\n    lending_pool,\n    symbol,\n    _log_id\n\nfrom\n    {{ source(\n        'BSC',\n        'EZ_LENDING'\n    ) }} \n\nunion all\n\n-- Gnosis/sushi\nselect\n    block_timestamp,\n    block_number,\n    tx_hash,\n    action,\n    'gnosis' as blockchain,\n    'sushi' as platform,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    asset,\n    depositor,\n    lender_is_a_contract,\n    lending_pool_address,\n    asset_amount,\n    asset_amount_usd,\n    lending_pool,\n    symbol,\n    _log_id\n\nfrom\n    {{ source(\n        'Gnosis',\n        'EZ_LENDING'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.crosschain_models.ethereum_db_sushi.ez_lending", "source.crosschain_models.polygon.EZ_LENDING", "source.crosschain_models.Arbitrum.EZ_LENDING", "source.crosschain_models.Avalanche.EZ_LENDING", "source.crosschain_models.BSC.EZ_LENDING", "source.crosschain_models.Gnosis.EZ_LENDING"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["snowflake", "crosschain", "lending"], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "CROSSCHAIN_DEV", "schema": "defi", "fqn": ["crosschain_models", "defi", "defi__ez_lending"], "unique_id": "model.crosschain_models.defi__ez_lending", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "defi\\defi__ez_lending.sql", "original_file_path": "models\\defi\\defi__ez_lending.sql", "name": "defi__ez_lending", "alias": "ez_lending", "checksum": {"name": "sha256", "checksum": "94364601708591845cc074993ea47114373b2f64df9cc4037f938456c1acfd83"}, "tags": ["snowflake", "crosschain", "lending"], "refs": [], "sources": [["ethereum_db_sushi", "ez_lending"], ["polygon", "EZ_LENDING"], ["Arbitrum", "EZ_LENDING"], ["Avalanche", "EZ_LENDING"], ["BSC", "EZ_LENDING"], ["Gnosis", "EZ_LENDING"]], "metrics": [], "description": "This is a table that shows all the events across various blockchains and various platforms that are related to providing capital for lending and withdrawing capital", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "The block number at which the transaction is finalized.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The block timestamp of this transaction in UTC", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LENDING_POOL_ADDRESS": {"name": "LENDING_POOL_ADDRESS", "description": "The contract address for the lending pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LENDING_POOL": {"name": "LENDING_POOL", "description": "The name of the lending pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LENDER_IS_A_CONTRACT": {"name": "LENDER_IS_A_CONTRACT", "description": "If the depositor is a contract then its a Yes, if the depositor is a normal address it is a No.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "The amount of the asset that is being deposited for lending", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_USD": {"name": "AMOUNT_USD", "description": "The amount of the asset that is being deposited for lending in USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL": {"name": "SYMBOL", "description": "The symbol of the asset that is being deposited for lending.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACTION": {"name": "ACTION", "description": "The action that the user is taking.\n Deposit: user is depositing funds to be used for lending\n Withdraw: user has changed their mind and are no longer willing to lend, so they withdraw their asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DEPOSITOR": {"name": "DEPOSITOR", "description": "The address of the user or contract that is depositing funds for lending", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM": {"name": "PLATFORM", "description": "This field denotes which application the liquidity pool belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "Event number within a transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_LOG_ID": {"name": "_LOG_ID", "description": "This is the primary key for this table. This is a concatenation of the transaction hash and the event index at which the event occurred. This field can be used within other event based tables such as ```fact_transfers``` & ```ez_token_transfers```.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "The address of the user who initiates the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "The person who initiates the depositing transaction has to interact with this address. This address belongs to the lending platform or directs the transactio there.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "crosschain_models://models\\defi\\defi__ez_lending.yml", "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_lending.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view", "tags": ["snowflake", "crosschain", "lending"]}, "created_at": 1666883664.3301013, "compiled_sql": "\n\n-- Ethereum/sushi\nselect\n    block_timestamp,\n    block_number,\n    tx_hash,\n    action,\n    'ethereum' as blockchain,\n    'sushi' as platform,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    asset,\n    depositor,\n    lender_is_a_contract,\n    lending_pool_address,\n    amount as asset_amount,\n    amount_usd as asset_amount_usd,\n    lending_pool,\n    symbol,\n    _log_id\n\nfrom\n    ethereum.sushi.ez_lending \n\nunion all\n\n-- polygon/sushi\nselect\n    block_timestamp,\n    block_number,\n    tx_hash,\n    action,\n    'polygon' as blockchain,\n    'sushi' as platform,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    asset,\n    depositor,\n    lender_is_a_contract,\n    lending_pool_address,\n    amount as asset_amount,\n    amount_usd as asset_amount_usd,\n    lending_pool,\n    symbol,\n    _log_id\n\nfrom\n    POLYGON.SUSHI.EZ_LENDING \n\nunion all\n\n-- Arbitrum/sushi\nselect\n    block_timestamp,\n    block_number,\n    tx_hash,\n    action,\n    'arbitrum' as blockchain,\n    'sushi' as platform,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    asset,\n    depositor,\n    lender_is_a_contract,\n    lending_pool_address,\n    asset_amount,\n    asset_amount_usd,\n    lending_pool,\n    symbol,\n    _log_id\n\nfrom\n    ARBITRUM.SUSHI.EZ_LENDING \n\nunion all\n\n-- Avalanche/sushi\nselect\n    block_timestamp,\n    block_number,\n    tx_hash,\n    action,\n    'avalanche' as blockchain,\n    'sushi' as platform,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    asset,\n    depositor,\n    lender_is_a_contract,\n    lending_pool_address,\n    asset_amount,\n    asset_amount_usd,\n    lending_pool,\n    symbol,\n    _log_id\n\nfrom\n    AVALANCHE.SUSHI.EZ_LENDING \n\nunion all\n\n-- BSC/sushi\nselect\n    block_timestamp,\n    block_number,\n    tx_hash,\n    action,\n    'BSC' as blockchain,\n    'sushi' as platform,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    asset,\n    depositor,\n    lender_is_a_contract,\n    lending_pool_address,\n    asset_amount,\n    asset_amount_usd,\n    lending_pool,\n    symbol,\n    _log_id\n\nfrom\n    BSC.SUSHI.EZ_LENDING \n\nunion all\n\n-- Gnosis/sushi\nselect\n    block_timestamp,\n    block_number,\n    tx_hash,\n    action,\n    'gnosis' as blockchain,\n    'sushi' as platform,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    asset,\n    depositor,\n    lender_is_a_contract,\n    lending_pool_address,\n    asset_amount,\n    asset_amount_usd,\n    lending_pool,\n    symbol,\n    _log_id\n\nfrom\n    GNOSIS.SUSHI.EZ_LENDING", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "CROSSCHAIN_DEV.defi.ez_lending"}, "test.crosschain_models.not_null_defi__ez_swaps_BLOCK_NUMBER.e78d5c7975": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('defi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_defi", "fqn": ["crosschain_models", "defi", "not_null_defi__ez_swaps_BLOCK_NUMBER"], "unique_id": "test.crosschain_models.not_null_defi__ez_swaps_BLOCK_NUMBER.e78d5c7975", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_defi__ez_swaps_BLOCK_NUMBER.sql", "original_file_path": "models\\defi\\defi__ez_swaps.yml", "name": "not_null_defi__ez_swaps_BLOCK_NUMBER", "alias": "ez_swaps_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_swaps.yml\\not_null_defi__ez_swaps_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666883664.1292524, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_NUMBER\nfrom CROSSCHAIN_DEV.defi.ez_swaps\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.defi__ez_swaps"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_BLOCK_NUMBER__NUMBER__FLOAT.a2a06497bf": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8adcbec86306b66654e626111eb9be0d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('defi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8adcbec86306b66654e626111eb9be0d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_BLOCK_NUMBER__NUMBER__FLOAT.a2a06497bf", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_8adcbec86306b66654e626111eb9be0d.sql", "original_file_path": "models\\defi\\defi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "ez_swaps_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_swaps.yml\\dbt_expectations_expect_column_8adcbec86306b66654e626111eb9be0d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_8adcbec86306b66654e626111eb9be0d"}, "created_at": 1666883664.1315713, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.defi__ez_swaps"}, "test.crosschain_models.not_null_defi__ez_swaps_BLOCK_TIMESTAMP.8684e16602": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_defi", "fqn": ["crosschain_models", "defi", "not_null_defi__ez_swaps_BLOCK_TIMESTAMP"], "unique_id": "test.crosschain_models.not_null_defi__ez_swaps_BLOCK_TIMESTAMP.8684e16602", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_defi__ez_swaps_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\defi\\defi__ez_swaps.yml", "name": "not_null_defi__ez_swaps_BLOCK_TIMESTAMP", "alias": "ez_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_swaps.yml\\not_null_defi__ez_swaps_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666883664.142803, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom CROSSCHAIN_DEV.defi.ez_swaps\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__ez_swaps"}, "test.crosschain_models.dbt_expectations_expect_row_values_to_have_recent_data_defi__ez_swaps_BLOCK_TIMESTAMP__day__1.be7f4aafb9": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_bc8bd0d3c255b2b3dfb3fb5fde3c7d27\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_bc8bd0d3c255b2b3dfb3fb5fde3c7d27", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_row_values_to_have_recent_data_defi__ez_swaps_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.crosschain_models.dbt_expectations_expect_row_values_to_have_recent_data_defi__ez_swaps_BLOCK_TIMESTAMP__day__1.be7f4aafb9", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_row_va_bc8bd0d3c255b2b3dfb3fb5fde3c7d27.sql", "original_file_path": "models\\defi\\defi__ez_swaps.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_defi__ez_swaps_BLOCK_TIMESTAMP__day__1", "alias": "ez_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_swaps.yml\\dbt_expectations_expect_row_va_bc8bd0d3c255b2b3dfb3fb5fde3c7d27.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_bc8bd0d3c255b2b3dfb3fb5fde3c7d27"}, "created_at": 1666883664.144802, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        CROSSCHAIN_DEV.defi.ez_swaps\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__ez_swaps"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.7c82aa82d4": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c74a281aa2d4fbb8ed24647959af63e2\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c74a281aa2d4fbb8ed24647959af63e2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.7c82aa82d4", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_c74a281aa2d4fbb8ed24647959af63e2.sql", "original_file_path": "models\\defi\\defi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "ez_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_swaps.yml\\dbt_expectations_expect_column_c74a281aa2d4fbb8ed24647959af63e2.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c74a281aa2d4fbb8ed24647959af63e2"}, "created_at": 1666883664.165276, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__ez_swaps"}, "test.crosschain_models.not_null_defi__ez_swaps_TX_HASH.bb13eedc0e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('defi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_defi", "fqn": ["crosschain_models", "defi", "not_null_defi__ez_swaps_TX_HASH"], "unique_id": "test.crosschain_models.not_null_defi__ez_swaps_TX_HASH.bb13eedc0e", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_defi__ez_swaps_TX_HASH.sql", "original_file_path": "models\\defi\\defi__ez_swaps.yml", "name": "not_null_defi__ez_swaps_TX_HASH", "alias": "ez_swaps_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_swaps.yml\\not_null_defi__ez_swaps_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666883664.1696982, "compiled_sql": "\n    \n    \n\n\n\nselect TX_HASH\nfrom CROSSCHAIN_DEV.defi.ez_swaps\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.defi__ez_swaps"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_TX_HASH__0_xX_0_9a_fA_F_.b85da919f9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_caec8e25c96cb74ecabaa2ec4906a396\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('defi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_caec8e25c96cb74ecabaa2ec4906a396", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_TX_HASH__0_xX_0_9a_fA_F_.b85da919f9", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_caec8e25c96cb74ecabaa2ec4906a396.sql", "original_file_path": "models\\defi\\defi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_TX_HASH__0_xX_0_9a_fA_F_", "alias": "ez_swaps_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_swaps.yml\\dbt_expectations_expect_column_caec8e25c96cb74ecabaa2ec4906a396.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_caec8e25c96cb74ecabaa2ec4906a396"}, "created_at": 1666883664.170707, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.defi.ez_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.defi__ez_swaps"}, "test.crosschain_models.not_null_defi__ez_swaps_POOL_ADDRESS.bf72ba1383": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_ADDRESS", "model": "{{ get_where_subquery(ref('defi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_defi", "fqn": ["crosschain_models", "defi", "not_null_defi__ez_swaps_POOL_ADDRESS"], "unique_id": "test.crosschain_models.not_null_defi__ez_swaps_POOL_ADDRESS.bf72ba1383", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_defi__ez_swaps_POOL_ADDRESS.sql", "original_file_path": "models\\defi\\defi__ez_swaps.yml", "name": "not_null_defi__ez_swaps_POOL_ADDRESS", "alias": "ez_swaps_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_swaps.yml\\not_null_defi__ez_swaps_POOL_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666883664.184982, "compiled_sql": "\n    \n    \n\n\n\nselect POOL_ADDRESS\nfrom CROSSCHAIN_DEV.defi.ez_swaps\nwhere POOL_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "POOL_ADDRESS", "file_key_name": "models.defi__ez_swaps"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_POOL_ADDRESS__0_xX_0_9a_fA_F_.9fb643cac5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1ad0ed073387894d1f20b15c3c7b75cc\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "POOL_ADDRESS", "model": "{{ get_where_subquery(ref('defi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1ad0ed073387894d1f20b15c3c7b75cc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_POOL_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_POOL_ADDRESS__0_xX_0_9a_fA_F_.9fb643cac5", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_1ad0ed073387894d1f20b15c3c7b75cc.sql", "original_file_path": "models\\defi\\defi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_POOL_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_swaps_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_swaps.yml\\dbt_expectations_expect_column_1ad0ed073387894d1f20b15c3c7b75cc.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_1ad0ed073387894d1f20b15c3c7b75cc"}, "created_at": 1666883664.1872287, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(POOL_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.defi.ez_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "POOL_ADDRESS", "file_key_name": "models.defi__ez_swaps"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_AMOUNT_IN__NUMBER__FLOAT.49a10a4e9a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b848d250f2cd76ee6b9cee7a0938daf3\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_IN", "model": "{{ get_where_subquery(ref('defi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b848d250f2cd76ee6b9cee7a0938daf3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_AMOUNT_IN__NUMBER__FLOAT"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_AMOUNT_IN__NUMBER__FLOAT.49a10a4e9a", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_b848d250f2cd76ee6b9cee7a0938daf3.sql", "original_file_path": "models\\defi\\defi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_AMOUNT_IN__NUMBER__FLOAT", "alias": "ez_swaps_AMOUNT_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_swaps.yml\\dbt_expectations_expect_column_b848d250f2cd76ee6b9cee7a0938daf3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b848d250f2cd76ee6b9cee7a0938daf3"}, "created_at": 1666883664.191307, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_IN'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT_IN", "file_key_name": "models.defi__ez_swaps"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_AMOUNT_OUT__NUMBER__FLOAT.a03a48103a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_800744b4be4d8c11f216544d5d65b94e\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_OUT", "model": "{{ get_where_subquery(ref('defi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_800744b4be4d8c11f216544d5d65b94e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_AMOUNT_OUT__NUMBER__FLOAT"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_AMOUNT_OUT__NUMBER__FLOAT.a03a48103a", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_800744b4be4d8c11f216544d5d65b94e.sql", "original_file_path": "models\\defi\\defi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_AMOUNT_OUT__NUMBER__FLOAT", "alias": "ez_swaps_AMOUNT_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_swaps.yml\\dbt_expectations_expect_column_800744b4be4d8c11f216544d5d65b94e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_800744b4be4d8c11f216544d5d65b94e"}, "created_at": 1666883664.1943035, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_OUT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT_OUT", "file_key_name": "models.defi__ez_swaps"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.6e47d30c86": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_807c7d1582197b6991991f88a9139fe7\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_IN_USD", "model": "{{ get_where_subquery(ref('defi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_807c7d1582197b6991991f88a9139fe7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_AMOUNT_IN_USD__NUMBER__FLOAT"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.6e47d30c86", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_807c7d1582197b6991991f88a9139fe7.sql", "original_file_path": "models\\defi\\defi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_AMOUNT_IN_USD__NUMBER__FLOAT", "alias": "ez_swaps_AMOUNT_IN_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_swaps.yml\\dbt_expectations_expect_column_807c7d1582197b6991991f88a9139fe7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_807c7d1582197b6991991f88a9139fe7"}, "created_at": 1666883664.1987288, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_IN_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT_IN_USD", "file_key_name": "models.defi__ez_swaps"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.2e328e288c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_487d9ac9134b1b5c33c86d5f246e55b7\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_OUT_USD", "model": "{{ get_where_subquery(ref('defi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_487d9ac9134b1b5c33c86d5f246e55b7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.2e328e288c", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_487d9ac9134b1b5c33c86d5f246e55b7.sql", "original_file_path": "models\\defi\\defi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT", "alias": "ez_swaps_AMOUNT_OUT_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_swaps.yml\\dbt_expectations_expect_column_487d9ac9134b1b5c33c86d5f246e55b7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_487d9ac9134b1b5c33c86d5f246e55b7"}, "created_at": 1666883664.201731, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_OUT_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT_OUT_USD", "file_key_name": "models.defi__ez_swaps"}, "test.crosschain_models.not_null_defi__ez_swaps_TOKEN_IN.8fe2dcfd1b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_IN", "model": "{{ get_where_subquery(ref('defi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_defi", "fqn": ["crosschain_models", "defi", "not_null_defi__ez_swaps_TOKEN_IN"], "unique_id": "test.crosschain_models.not_null_defi__ez_swaps_TOKEN_IN.8fe2dcfd1b", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_defi__ez_swaps_TOKEN_IN.sql", "original_file_path": "models\\defi\\defi__ez_swaps.yml", "name": "not_null_defi__ez_swaps_TOKEN_IN", "alias": "ez_swaps_TOKEN_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_swaps.yml\\not_null_defi__ez_swaps_TOKEN_IN.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666883664.2057335, "compiled_sql": "\n    \n    \n\n\n\nselect TOKEN_IN\nfrom CROSSCHAIN_DEV.defi.ez_swaps\nwhere TOKEN_IN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_IN", "file_key_name": "models.defi__ez_swaps"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.33c79a6996": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c1b493be7b7c3ec2d13c996979c0e1b4\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TOKEN_IN", "model": "{{ get_where_subquery(ref('defi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c1b493be7b7c3ec2d13c996979c0e1b4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_TOKEN_IN__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.33c79a6996", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_c1b493be7b7c3ec2d13c996979c0e1b4.sql", "original_file_path": "models\\defi\\defi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_TOKEN_IN__0_xX_0_9a_fA_F_", "alias": "ez_swaps_TOKEN_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_swaps.yml\\dbt_expectations_expect_column_c1b493be7b7c3ec2d13c996979c0e1b4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c1b493be7b7c3ec2d13c996979c0e1b4"}, "created_at": 1666883664.2069368, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TOKEN_IN, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.defi.ez_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_IN", "file_key_name": "models.defi__ez_swaps"}, "test.crosschain_models.not_null_defi__ez_swaps_TOKEN_OUT.d547a4ace9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_OUT", "model": "{{ get_where_subquery(ref('defi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_defi", "fqn": ["crosschain_models", "defi", "not_null_defi__ez_swaps_TOKEN_OUT"], "unique_id": "test.crosschain_models.not_null_defi__ez_swaps_TOKEN_OUT.d547a4ace9", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_defi__ez_swaps_TOKEN_OUT.sql", "original_file_path": "models\\defi\\defi__ez_swaps.yml", "name": "not_null_defi__ez_swaps_TOKEN_OUT", "alias": "ez_swaps_TOKEN_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_swaps.yml\\not_null_defi__ez_swaps_TOKEN_OUT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666883664.211045, "compiled_sql": "\n    \n    \n\n\n\nselect TOKEN_OUT\nfrom CROSSCHAIN_DEV.defi.ez_swaps\nwhere TOKEN_OUT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_OUT", "file_key_name": "models.defi__ez_swaps"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.aa233236df": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_27c92c9be5c7ccd5d0c4e0b725eab02c\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TOKEN_OUT", "model": "{{ get_where_subquery(ref('defi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_27c92c9be5c7ccd5d0c4e0b725eab02c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.aa233236df", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_27c92c9be5c7ccd5d0c4e0b725eab02c.sql", "original_file_path": "models\\defi\\defi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_", "alias": "ez_swaps_TOKEN_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_swaps.yml\\dbt_expectations_expect_column_27c92c9be5c7ccd5d0c4e0b725eab02c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_27c92c9be5c7ccd5d0c4e0b725eab02c"}, "created_at": 1666883664.212039, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TOKEN_OUT, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.defi.ez_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_OUT", "file_key_name": "models.defi__ez_swaps"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_SYMBOL_IN__STRING__VARCHAR.6433a6c646": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_18996ee42864b7911b4f9f381c124a43\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SYMBOL_IN", "model": "{{ get_where_subquery(ref('defi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_18996ee42864b7911b4f9f381c124a43", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_SYMBOL_IN__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_SYMBOL_IN__STRING__VARCHAR.6433a6c646", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_18996ee42864b7911b4f9f381c124a43.sql", "original_file_path": "models\\defi\\defi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_SYMBOL_IN__STRING__VARCHAR", "alias": "ez_swaps_SYMBOL_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_swaps.yml\\dbt_expectations_expect_column_18996ee42864b7911b4f9f381c124a43.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_18996ee42864b7911b4f9f381c124a43"}, "created_at": 1666883664.216038, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SYMBOL_IN'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SYMBOL_IN", "file_key_name": "models.defi__ez_swaps"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_SYMBOL_OUT__STRING__VARCHAR.68e93881f0": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6f9ac0bd5b2005a9b7ed051b4fd24147\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SYMBOL_OUT", "model": "{{ get_where_subquery(ref('defi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6f9ac0bd5b2005a9b7ed051b4fd24147", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_SYMBOL_OUT__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_SYMBOL_OUT__STRING__VARCHAR.68e93881f0", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_6f9ac0bd5b2005a9b7ed051b4fd24147.sql", "original_file_path": "models\\defi\\defi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_SYMBOL_OUT__STRING__VARCHAR", "alias": "ez_swaps_SYMBOL_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_swaps.yml\\dbt_expectations_expect_column_6f9ac0bd5b2005a9b7ed051b4fd24147.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6f9ac0bd5b2005a9b7ed051b4fd24147"}, "created_at": 1666883664.2203596, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SYMBOL_OUT'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SYMBOL_OUT", "file_key_name": "models.defi__ez_swaps"}, "test.crosschain_models.not_null_defi__ez_swaps_SENDER.071babae7e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP > '2021-08-01'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SENDER", "model": "{{ get_where_subquery(ref('defi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCK_TIMESTAMP > '2021-08-01'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_defi", "fqn": ["crosschain_models", "defi", "not_null_defi__ez_swaps_SENDER"], "unique_id": "test.crosschain_models.not_null_defi__ez_swaps_SENDER.071babae7e", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_defi__ez_swaps_SENDER.sql", "original_file_path": "models\\defi\\defi__ez_swaps.yml", "name": "not_null_defi__ez_swaps_SENDER", "alias": "ez_swaps_SENDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_swaps.yml\\not_null_defi__ez_swaps_SENDER.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "BLOCK_TIMESTAMP > '2021-08-01'"}, "created_at": 1666883664.2243605, "compiled_sql": "\n    \n    \n\n\n\nselect SENDER\nfrom (select * from CROSSCHAIN_DEV.defi.ez_swaps where BLOCK_TIMESTAMP > '2021-08-01') dbt_subquery\nwhere SENDER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SENDER", "file_key_name": "models.defi__ez_swaps"}, "test.crosschain_models.not_null_defi__ez_swaps_TX_TO.5ccb222a4b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_TO", "model": "{{ get_where_subquery(ref('defi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_defi", "fqn": ["crosschain_models", "defi", "not_null_defi__ez_swaps_TX_TO"], "unique_id": "test.crosschain_models.not_null_defi__ez_swaps_TX_TO.5ccb222a4b", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_defi__ez_swaps_TX_TO.sql", "original_file_path": "models\\defi\\defi__ez_swaps.yml", "name": "not_null_defi__ez_swaps_TX_TO", "alias": "ez_swaps_TX_TO", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_swaps.yml\\not_null_defi__ez_swaps_TX_TO.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666883664.2253673, "compiled_sql": "\n    \n    \n\n\n\nselect TX_TO\nfrom CROSSCHAIN_DEV.defi.ez_swaps\nwhere TX_TO is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_TO", "file_key_name": "models.defi__ez_swaps"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_TX_TO__0_xX_0_9a_fA_F_.d202570785": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b2d4d7fec922d579b18664b9080375fe\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_TO", "model": "{{ get_where_subquery(ref('defi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b2d4d7fec922d579b18664b9080375fe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_TX_TO__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_TX_TO__0_xX_0_9a_fA_F_.d202570785", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_b2d4d7fec922d579b18664b9080375fe.sql", "original_file_path": "models\\defi\\defi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_TX_TO__0_xX_0_9a_fA_F_", "alias": "ez_swaps_TX_TO", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_swaps.yml\\dbt_expectations_expect_column_b2d4d7fec922d579b18664b9080375fe.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b2d4d7fec922d579b18664b9080375fe"}, "created_at": 1666883664.22658, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_TO, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.defi.ez_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_TO", "file_key_name": "models.defi__ez_swaps"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_PLATFORM__STRING__VARCHAR.74301886f3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d71dbf5692cc11f19cc497ca21c9369b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "PLATFORM", "model": "{{ get_where_subquery(ref('defi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d71dbf5692cc11f19cc497ca21c9369b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_PLATFORM__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_PLATFORM__STRING__VARCHAR.74301886f3", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_d71dbf5692cc11f19cc497ca21c9369b.sql", "original_file_path": "models\\defi\\defi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_PLATFORM__STRING__VARCHAR", "alias": "ez_swaps_PLATFORM", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_swaps.yml\\dbt_expectations_expect_column_d71dbf5692cc11f19cc497ca21c9369b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d71dbf5692cc11f19cc497ca21c9369b"}, "created_at": 1666883664.2306964, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PLATFORM'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM", "file_key_name": "models.defi__ez_swaps"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_EVENT_INDEX__NUMBER__FLOAT.6acfd74855": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1f81836e380d2804a13b375b177c7903\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('defi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1f81836e380d2804a13b375b177c7903", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_EVENT_INDEX__NUMBER__FLOAT"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_EVENT_INDEX__NUMBER__FLOAT.6acfd74855", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_1f81836e380d2804a13b375b177c7903.sql", "original_file_path": "models\\defi\\defi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_EVENT_INDEX__NUMBER__FLOAT", "alias": "ez_swaps_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_swaps.yml\\dbt_expectations_expect_column_1f81836e380d2804a13b375b177c7903.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_1f81836e380d2804a13b375b177c7903"}, "created_at": 1666883664.2336888, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_INDEX'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVENT_INDEX", "file_key_name": "models.defi__ez_swaps"}, "test.crosschain_models.not_null_defi__ez_swaps_LOG_ID.3e6c1029b7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LOG_ID", "model": "{{ get_where_subquery(ref('defi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_defi", "fqn": ["crosschain_models", "defi", "not_null_defi__ez_swaps_LOG_ID"], "unique_id": "test.crosschain_models.not_null_defi__ez_swaps_LOG_ID.3e6c1029b7", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_defi__ez_swaps_LOG_ID.sql", "original_file_path": "models\\defi\\defi__ez_swaps.yml", "name": "not_null_defi__ez_swaps_LOG_ID", "alias": "ez_swaps_LOG_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_swaps.yml\\not_null_defi__ez_swaps_LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666883664.2379541, "compiled_sql": "\n    \n    \n\n\n\nselect LOG_ID\nfrom CROSSCHAIN_DEV.defi.ez_swaps\nwhere LOG_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LOG_ID", "file_key_name": "models.defi__ez_swaps"}, "test.crosschain_models.not_null_defi__ez_swaps_ORIGIN_FROM_ADDRESS.2a2cfb984e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('defi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_defi", "fqn": ["crosschain_models", "defi", "not_null_defi__ez_swaps_ORIGIN_FROM_ADDRESS"], "unique_id": "test.crosschain_models.not_null_defi__ez_swaps_ORIGIN_FROM_ADDRESS.2a2cfb984e", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_defi__ez_swaps_ORIGIN_FROM_ADDRESS.sql", "original_file_path": "models\\defi\\defi__ez_swaps.yml", "name": "not_null_defi__ez_swaps_ORIGIN_FROM_ADDRESS", "alias": "ez_swaps_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_swaps.yml\\not_null_defi__ez_swaps_ORIGIN_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666883664.238959, "compiled_sql": "\n    \n    \n\n\n\nselect ORIGIN_FROM_ADDRESS\nfrom CROSSCHAIN_DEV.defi.ez_swaps\nwhere ORIGIN_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.defi__ez_swaps"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.749316832e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b2ad2bc9a2a5c6caeb0b2d73189d7bce\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('defi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b2ad2bc9a2a5c6caeb0b2d73189d7bce", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.749316832e", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_b2ad2bc9a2a5c6caeb0b2d73189d7bce.sql", "original_file_path": "models\\defi\\defi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_swaps_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_swaps.yml\\dbt_expectations_expect_column_b2ad2bc9a2a5c6caeb0b2d73189d7bce.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b2ad2bc9a2a5c6caeb0b2d73189d7bce"}, "created_at": 1666883664.2399592, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.defi.ez_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.defi__ez_swaps"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.dea027f760": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_60228c6c9b7526acb055e78e955667ec\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('defi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_60228c6c9b7526acb055e78e955667ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.dea027f760", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_60228c6c9b7526acb055e78e955667ec.sql", "original_file_path": "models\\defi\\defi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_swaps_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_swaps.yml\\dbt_expectations_expect_column_60228c6c9b7526acb055e78e955667ec.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_60228c6c9b7526acb055e78e955667ec"}, "created_at": 1666883664.2439744, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.defi.ez_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.defi__ez_swaps"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_defi__ez_swaps_LOG_ID.a87c5fc7f0": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["LOG_ID"], "model": "{{ get_where_subquery(ref('defi__ez_swaps')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_defi", "fqn": ["crosschain_models", "defi", "dbt_utils_unique_combination_of_columns_defi__ez_swaps_LOG_ID"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_defi__ez_swaps_LOG_ID.a87c5fc7f0", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_of_columns_defi__ez_swaps_LOG_ID.sql", "original_file_path": "models\\defi\\defi__ez_swaps.yml", "name": "dbt_utils_unique_combination_of_columns_defi__ez_swaps_LOG_ID", "alias": "ez_swaps_LOG_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_swaps.yml\\dbt_utils_unique_combination_of_columns_defi__ez_swaps_LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666883664.2482235, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        LOG_ID\n    from CROSSCHAIN_DEV.defi.ez_swaps\n    group by LOG_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.defi__ez_swaps"}, "test.crosschain_models.not_null_defi__ez_borrowing_BLOCK_NUMBER.d0cc099a95": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('defi__ez_borrowing')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_borrowing"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_defi", "fqn": ["crosschain_models", "defi", "not_null_defi__ez_borrowing_BLOCK_NUMBER"], "unique_id": "test.crosschain_models.not_null_defi__ez_borrowing_BLOCK_NUMBER.d0cc099a95", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_defi__ez_borrowing_BLOCK_NUMBER.sql", "original_file_path": "models\\defi\\defi__ez_borrowing.yml", "name": "not_null_defi__ez_borrowing_BLOCK_NUMBER", "alias": "ez_borrowing_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_borrowing.yml\\not_null_defi__ez_borrowing_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666883664.2594936, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_NUMBER\nfrom CROSSCHAIN_DEV.defi.ez_borrowing\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.defi__ez_borrowing"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_BLOCK_NUMBER__NUMBER__FLOAT.8945b58384": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f9a4152750d78caea29c36d3683fa036\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('defi__ez_borrowing')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_borrowing"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f9a4152750d78caea29c36d3683fa036", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_BLOCK_NUMBER__NUMBER__FLOAT.8945b58384", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_f9a4152750d78caea29c36d3683fa036.sql", "original_file_path": "models\\defi\\defi__ez_borrowing.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "ez_borrowing_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_borrowing.yml\\dbt_expectations_expect_column_f9a4152750d78caea29c36d3683fa036.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f9a4152750d78caea29c36d3683fa036"}, "created_at": 1666883664.261495, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BORROWER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BORROWER_IS_A_CONTRACT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.defi__ez_borrowing"}, "test.crosschain_models.not_null_defi__ez_borrowing_BLOCK_TIMESTAMP.9db1850359": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__ez_borrowing')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_borrowing"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_defi", "fqn": ["crosschain_models", "defi", "not_null_defi__ez_borrowing_BLOCK_TIMESTAMP"], "unique_id": "test.crosschain_models.not_null_defi__ez_borrowing_BLOCK_TIMESTAMP.9db1850359", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_defi__ez_borrowing_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\defi\\defi__ez_borrowing.yml", "name": "not_null_defi__ez_borrowing_BLOCK_TIMESTAMP", "alias": "ez_borrowing_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_borrowing.yml\\not_null_defi__ez_borrowing_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666883664.2654965, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom CROSSCHAIN_DEV.defi.ez_borrowing\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__ez_borrowing"}, "test.crosschain_models.dbt_expectations_expect_row_values_to_have_recent_data_defi__ez_borrowing_BLOCK_TIMESTAMP__day__3.b780d2fc12": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_7a4c40d4feaacd3d460dafb398afff43\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 3, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__ez_borrowing')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_borrowing"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_7a4c40d4feaacd3d460dafb398afff43", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_row_values_to_have_recent_data_defi__ez_borrowing_BLOCK_TIMESTAMP__day__3"], "unique_id": "test.crosschain_models.dbt_expectations_expect_row_values_to_have_recent_data_defi__ez_borrowing_BLOCK_TIMESTAMP__day__3.b780d2fc12", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_row_va_7a4c40d4feaacd3d460dafb398afff43.sql", "original_file_path": "models\\defi\\defi__ez_borrowing.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_defi__ez_borrowing_BLOCK_TIMESTAMP__day__3", "alias": "ez_borrowing_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_borrowing.yml\\dbt_expectations_expect_row_va_7a4c40d4feaacd3d460dafb398afff43.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_7a4c40d4feaacd3d460dafb398afff43"}, "created_at": 1666883664.2666934, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        CROSSCHAIN_DEV.defi.ez_borrowing\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -3,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__ez_borrowing"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.94b3afa559": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_64a4ed100fb5e30f3d2fb34bbfd01d5c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__ez_borrowing')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_borrowing"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_64a4ed100fb5e30f3d2fb34bbfd01d5c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.94b3afa559", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_64a4ed100fb5e30f3d2fb34bbfd01d5c.sql", "original_file_path": "models\\defi\\defi__ez_borrowing.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "ez_borrowing_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_borrowing.yml\\dbt_expectations_expect_column_64a4ed100fb5e30f3d2fb34bbfd01d5c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_64a4ed100fb5e30f3d2fb34bbfd01d5c"}, "created_at": 1666883664.2707944, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BORROWER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BORROWER_IS_A_CONTRACT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__ez_borrowing"}, "test.crosschain_models.not_null_defi__ez_borrowing_TX_HASH.c163812f21": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('defi__ez_borrowing')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_borrowing"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_defi", "fqn": ["crosschain_models", "defi", "not_null_defi__ez_borrowing_TX_HASH"], "unique_id": "test.crosschain_models.not_null_defi__ez_borrowing_TX_HASH.c163812f21", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_defi__ez_borrowing_TX_HASH.sql", "original_file_path": "models\\defi\\defi__ez_borrowing.yml", "name": "not_null_defi__ez_borrowing_TX_HASH", "alias": "ez_borrowing_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_borrowing.yml\\not_null_defi__ez_borrowing_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666883664.2747989, "compiled_sql": "\n    \n    \n\n\n\nselect TX_HASH\nfrom CROSSCHAIN_DEV.defi.ez_borrowing\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.defi__ez_borrowing"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_TX_HASH__0_xX_0_9a_fA_F_.dbd5c3a63d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c2697e6eeabe493cf2d55f9dfab9946f\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('defi__ez_borrowing')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_borrowing"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c2697e6eeabe493cf2d55f9dfab9946f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_TX_HASH__0_xX_0_9a_fA_F_.dbd5c3a63d", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_c2697e6eeabe493cf2d55f9dfab9946f.sql", "original_file_path": "models\\defi\\defi__ez_borrowing.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_TX_HASH__0_xX_0_9a_fA_F_", "alias": "ez_borrowing_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_borrowing.yml\\dbt_expectations_expect_column_c2697e6eeabe493cf2d55f9dfab9946f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c2697e6eeabe493cf2d55f9dfab9946f"}, "created_at": 1666883664.2757928, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.defi.ez_borrowing\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.defi__ez_borrowing"}, "test.crosschain_models.not_null_defi__ez_borrowing_LENDING_POOL_ADDRESS.83618c6958": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LENDING_POOL_ADDRESS", "model": "{{ get_where_subquery(ref('defi__ez_borrowing')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_borrowing"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_defi", "fqn": ["crosschain_models", "defi", "not_null_defi__ez_borrowing_LENDING_POOL_ADDRESS"], "unique_id": "test.crosschain_models.not_null_defi__ez_borrowing_LENDING_POOL_ADDRESS.83618c6958", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_defi__ez_borrowing_LENDING_POOL_ADDRESS.sql", "original_file_path": "models\\defi\\defi__ez_borrowing.yml", "name": "not_null_defi__ez_borrowing_LENDING_POOL_ADDRESS", "alias": "ez_borrowing_LENDING_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_borrowing.yml\\not_null_defi__ez_borrowing_LENDING_POOL_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666883664.280061, "compiled_sql": "\n    \n    \n\n\n\nselect LENDING_POOL_ADDRESS\nfrom CROSSCHAIN_DEV.defi.ez_borrowing\nwhere LENDING_POOL_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LENDING_POOL_ADDRESS", "file_key_name": "models.defi__ez_borrowing"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_LENDING_POOL_ADDRESS__0_xX_0_9a_fA_F_.1242c8904a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2eb79d73a72167f560b954b4a332a67a\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "LENDING_POOL_ADDRESS", "model": "{{ get_where_subquery(ref('defi__ez_borrowing')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_borrowing"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2eb79d73a72167f560b954b4a332a67a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_LENDING_POOL_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_LENDING_POOL_ADDRESS__0_xX_0_9a_fA_F_.1242c8904a", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_2eb79d73a72167f560b954b4a332a67a.sql", "original_file_path": "models\\defi\\defi__ez_borrowing.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_LENDING_POOL_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_borrowing_LENDING_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_borrowing.yml\\dbt_expectations_expect_column_2eb79d73a72167f560b954b4a332a67a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_2eb79d73a72167f560b954b4a332a67a"}, "created_at": 1666883664.281062, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(LENDING_POOL_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.defi.ez_borrowing\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LENDING_POOL_ADDRESS", "file_key_name": "models.defi__ez_borrowing"}, "test.crosschain_models.not_null_defi__ez_borrowing_LENDING_POOL.753052fb61": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LENDING_POOL", "model": "{{ get_where_subquery(ref('defi__ez_borrowing')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_borrowing"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_defi", "fqn": ["crosschain_models", "defi", "not_null_defi__ez_borrowing_LENDING_POOL"], "unique_id": "test.crosschain_models.not_null_defi__ez_borrowing_LENDING_POOL.753052fb61", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_defi__ez_borrowing_LENDING_POOL.sql", "original_file_path": "models\\defi\\defi__ez_borrowing.yml", "name": "not_null_defi__ez_borrowing_LENDING_POOL", "alias": "ez_borrowing_LENDING_POOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_borrowing.yml\\not_null_defi__ez_borrowing_LENDING_POOL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666883664.285068, "compiled_sql": "\n    \n    \n\n\n\nselect LENDING_POOL\nfrom CROSSCHAIN_DEV.defi.ez_borrowing\nwhere LENDING_POOL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LENDING_POOL", "file_key_name": "models.defi__ez_borrowing"}, "test.crosschain_models.not_null_defi__ez_borrowing_BORROWER_IS_A_CONTRACT.216c379f62": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BORROWER_IS_A_CONTRACT", "model": "{{ get_where_subquery(ref('defi__ez_borrowing')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_borrowing"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_defi", "fqn": ["crosschain_models", "defi", "not_null_defi__ez_borrowing_BORROWER_IS_A_CONTRACT"], "unique_id": "test.crosschain_models.not_null_defi__ez_borrowing_BORROWER_IS_A_CONTRACT.216c379f62", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_defi__ez_borrowing_BORROWER_IS_A_CONTRACT.sql", "original_file_path": "models\\defi\\defi__ez_borrowing.yml", "name": "not_null_defi__ez_borrowing_BORROWER_IS_A_CONTRACT", "alias": "ez_borrowing_BORROWER_IS_A_CONTRACT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_borrowing.yml\\not_null_defi__ez_borrowing_BORROWER_IS_A_CONTRACT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666883664.2860508, "compiled_sql": "\n    \n    \n\n\n\nselect BORROWER_IS_A_CONTRACT\nfrom CROSSCHAIN_DEV.defi.ez_borrowing\nwhere BORROWER_IS_A_CONTRACT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BORROWER_IS_A_CONTRACT", "file_key_name": "models.defi__ez_borrowing"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_AMOUNT__NUMBER__FLOAT.bc8ae5595e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_41127886b7913de68c429c973d5275c9\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('defi__ez_borrowing')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_borrowing"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_41127886b7913de68c429c973d5275c9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_AMOUNT__NUMBER__FLOAT"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_AMOUNT__NUMBER__FLOAT.bc8ae5595e", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_41127886b7913de68c429c973d5275c9.sql", "original_file_path": "models\\defi\\defi__ez_borrowing.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_AMOUNT__NUMBER__FLOAT", "alias": "ez_borrowing_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_borrowing.yml\\dbt_expectations_expect_column_41127886b7913de68c429c973d5275c9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_41127886b7913de68c429c973d5275c9"}, "created_at": 1666883664.287426, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BORROWER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BORROWER_IS_A_CONTRACT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT", "file_key_name": "models.defi__ez_borrowing"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_AMOUNT_USD__NUMBER__FLOAT.62c1ae46e1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e31ccb4b83eab9d3a0f1b69ab19a274f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_USD", "model": "{{ get_where_subquery(ref('defi__ez_borrowing')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_borrowing"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e31ccb4b83eab9d3a0f1b69ab19a274f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_AMOUNT_USD__NUMBER__FLOAT"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_AMOUNT_USD__NUMBER__FLOAT.62c1ae46e1", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_e31ccb4b83eab9d3a0f1b69ab19a274f.sql", "original_file_path": "models\\defi\\defi__ez_borrowing.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_AMOUNT_USD__NUMBER__FLOAT", "alias": "ez_borrowing_AMOUNT_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_borrowing.yml\\dbt_expectations_expect_column_e31ccb4b83eab9d3a0f1b69ab19a274f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e31ccb4b83eab9d3a0f1b69ab19a274f"}, "created_at": 1666883664.2927349, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BORROWER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BORROWER_IS_A_CONTRACT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT_USD", "file_key_name": "models.defi__ez_borrowing"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_SYMBOL__STRING__VARCHAR.45487a3f3f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fba573b81f5e7a938e0037f09ca96c15\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SYMBOL", "model": "{{ get_where_subquery(ref('defi__ez_borrowing')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_borrowing"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fba573b81f5e7a938e0037f09ca96c15", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_SYMBOL__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_SYMBOL__STRING__VARCHAR.45487a3f3f", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_fba573b81f5e7a938e0037f09ca96c15.sql", "original_file_path": "models\\defi\\defi__ez_borrowing.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_SYMBOL__STRING__VARCHAR", "alias": "ez_borrowing_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_borrowing.yml\\dbt_expectations_expect_column_fba573b81f5e7a938e0037f09ca96c15.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_fba573b81f5e7a938e0037f09ca96c15"}, "created_at": 1666883664.2986526, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BORROWER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BORROWER_IS_A_CONTRACT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SYMBOL'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SYMBOL", "file_key_name": "models.defi__ez_borrowing"}, "test.crosschain_models.not_null_defi__ez_borrowing_BORROWER.2d6d6dd64b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP > '2021-08-01'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BORROWER", "model": "{{ get_where_subquery(ref('defi__ez_borrowing')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_borrowing"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCK_TIMESTAMP > '2021-08-01'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_defi", "fqn": ["crosschain_models", "defi", "not_null_defi__ez_borrowing_BORROWER"], "unique_id": "test.crosschain_models.not_null_defi__ez_borrowing_BORROWER.2d6d6dd64b", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_defi__ez_borrowing_BORROWER.sql", "original_file_path": "models\\defi\\defi__ez_borrowing.yml", "name": "not_null_defi__ez_borrowing_BORROWER", "alias": "ez_borrowing_BORROWER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_borrowing.yml\\not_null_defi__ez_borrowing_BORROWER.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "BLOCK_TIMESTAMP > '2021-08-01'"}, "created_at": 1666883664.3028805, "compiled_sql": "\n    \n    \n\n\n\nselect BORROWER\nfrom (select * from CROSSCHAIN_DEV.defi.ez_borrowing where BLOCK_TIMESTAMP > '2021-08-01') dbt_subquery\nwhere BORROWER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BORROWER", "file_key_name": "models.defi__ez_borrowing"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_BORROWER__0_xX_0_9a_fA_F_.93f550f7d7": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2e3560413bee22e62391e853b46831d2\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "BORROWER", "model": "{{ get_where_subquery(ref('defi__ez_borrowing')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_borrowing"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2e3560413bee22e62391e853b46831d2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_BORROWER__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_BORROWER__0_xX_0_9a_fA_F_.93f550f7d7", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_2e3560413bee22e62391e853b46831d2.sql", "original_file_path": "models\\defi\\defi__ez_borrowing.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_BORROWER__0_xX_0_9a_fA_F_", "alias": "ez_borrowing_BORROWER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_borrowing.yml\\dbt_expectations_expect_column_2e3560413bee22e62391e853b46831d2.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_2e3560413bee22e62391e853b46831d2"}, "created_at": 1666883664.3038952, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(BORROWER, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.defi.ez_borrowing\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BORROWER", "file_key_name": "models.defi__ez_borrowing"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_PLATFORM__STRING__VARCHAR.331d276328": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6bae82cf0e6c362a981d41ba64801837\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "PLATFORM", "model": "{{ get_where_subquery(ref('defi__ez_borrowing')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_borrowing"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6bae82cf0e6c362a981d41ba64801837", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_PLATFORM__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_PLATFORM__STRING__VARCHAR.331d276328", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_6bae82cf0e6c362a981d41ba64801837.sql", "original_file_path": "models\\defi\\defi__ez_borrowing.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_PLATFORM__STRING__VARCHAR", "alias": "ez_borrowing_PLATFORM", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_borrowing.yml\\dbt_expectations_expect_column_6bae82cf0e6c362a981d41ba64801837.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6bae82cf0e6c362a981d41ba64801837"}, "created_at": 1666883664.308222, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BORROWER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BORROWER_IS_A_CONTRACT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PLATFORM'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM", "file_key_name": "models.defi__ez_borrowing"}, "test.crosschain_models.not_null_defi__ez_borrowing__LOG_ID.a50d878932": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_LOG_ID", "model": "{{ get_where_subquery(ref('defi__ez_borrowing')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_borrowing"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_defi", "fqn": ["crosschain_models", "defi", "not_null_defi__ez_borrowing__LOG_ID"], "unique_id": "test.crosschain_models.not_null_defi__ez_borrowing__LOG_ID.a50d878932", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_defi__ez_borrowing__LOG_ID.sql", "original_file_path": "models\\defi\\defi__ez_borrowing.yml", "name": "not_null_defi__ez_borrowing__LOG_ID", "alias": "ez_borrowing", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_borrowing.yml\\not_null_defi__ez_borrowing__LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666883664.311307, "compiled_sql": "\n    \n    \n\n\n\nselect _LOG_ID\nfrom CROSSCHAIN_DEV.defi.ez_borrowing\nwhere _LOG_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_LOG_ID", "file_key_name": "models.defi__ez_borrowing"}, "test.crosschain_models.not_null_defi__ez_borrowing_ORIGIN_FROM_ADDRESS.9c63165853": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('defi__ez_borrowing')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_borrowing"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_defi", "fqn": ["crosschain_models", "defi", "not_null_defi__ez_borrowing_ORIGIN_FROM_ADDRESS"], "unique_id": "test.crosschain_models.not_null_defi__ez_borrowing_ORIGIN_FROM_ADDRESS.9c63165853", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_defi__ez_borrowing_ORIGIN_FROM_ADDRESS.sql", "original_file_path": "models\\defi\\defi__ez_borrowing.yml", "name": "not_null_defi__ez_borrowing_ORIGIN_FROM_ADDRESS", "alias": "ez_borrowing_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_borrowing.yml\\not_null_defi__ez_borrowing_ORIGIN_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666883664.3133032, "compiled_sql": "\n    \n    \n\n\n\nselect ORIGIN_FROM_ADDRESS\nfrom CROSSCHAIN_DEV.defi.ez_borrowing\nwhere ORIGIN_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.defi__ez_borrowing"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.51ed05e390": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f193522d04047c5838efb17ffeca0532\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('defi__ez_borrowing')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_borrowing"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f193522d04047c5838efb17ffeca0532", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.51ed05e390", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_f193522d04047c5838efb17ffeca0532.sql", "original_file_path": "models\\defi\\defi__ez_borrowing.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_borrowing_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_borrowing.yml\\dbt_expectations_expect_column_f193522d04047c5838efb17ffeca0532.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f193522d04047c5838efb17ffeca0532"}, "created_at": 1666883664.3143115, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.defi.ez_borrowing\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.defi__ez_borrowing"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.5292240d33": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9e5c997a716f8b868a51cc1b14b8083e\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('defi__ez_borrowing')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_borrowing"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9e5c997a716f8b868a51cc1b14b8083e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.5292240d33", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_9e5c997a716f8b868a51cc1b14b8083e.sql", "original_file_path": "models\\defi\\defi__ez_borrowing.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_borrowing_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_borrowing.yml\\dbt_expectations_expect_column_9e5c997a716f8b868a51cc1b14b8083e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_9e5c997a716f8b868a51cc1b14b8083e"}, "created_at": 1666883664.3177447, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.defi.ez_borrowing\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.defi__ez_borrowing"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_defi__ez_borrowing__LOG_ID.87e94f4521": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a60d71aed2947253749960d980a61810\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_LOG_ID"], "model": "{{ get_where_subquery(ref('defi__ez_borrowing')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_borrowing"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a60d71aed2947253749960d980a61810", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_defi", "fqn": ["crosschain_models", "defi", "dbt_utils_unique_combination_of_columns_defi__ez_borrowing__LOG_ID"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_defi__ez_borrowing__LOG_ID.87e94f4521", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_a60d71aed2947253749960d980a61810.sql", "original_file_path": "models\\defi\\defi__ez_borrowing.yml", "name": "dbt_utils_unique_combination_of_columns_defi__ez_borrowing__LOG_ID", "alias": "ez_borrowing", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_borrowing.yml\\dbt_utils_unique_combination_o_a60d71aed2947253749960d980a61810.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a60d71aed2947253749960d980a61810"}, "created_at": 1666883664.3216743, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _LOG_ID\n    from CROSSCHAIN_DEV.defi.ez_borrowing\n    group by _LOG_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.defi__ez_borrowing"}, "test.crosschain_models.not_null_defi__ez_lending_BLOCK_NUMBER.6db5a332e6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('defi__ez_lending')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_lending"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_defi", "fqn": ["crosschain_models", "defi", "not_null_defi__ez_lending_BLOCK_NUMBER"], "unique_id": "test.crosschain_models.not_null_defi__ez_lending_BLOCK_NUMBER.6db5a332e6", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_defi__ez_lending_BLOCK_NUMBER.sql", "original_file_path": "models\\defi\\defi__ez_lending.yml", "name": "not_null_defi__ez_lending_BLOCK_NUMBER", "alias": "ez_lending_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_lending.yml\\not_null_defi__ez_lending_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666883664.3311126, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_NUMBER\nfrom CROSSCHAIN_DEV.defi.ez_lending\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.defi__ez_lending"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_BLOCK_NUMBER__NUMBER__FLOAT.0c56142bb4": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_26ce37ad607d6f97edf53623115c18af\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('defi__ez_lending')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_lending"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_26ce37ad607d6f97edf53623115c18af", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_BLOCK_NUMBER__NUMBER__FLOAT.0c56142bb4", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_26ce37ad607d6f97edf53623115c18af.sql", "original_file_path": "models\\defi\\defi__ez_lending.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "ez_lending_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_lending.yml\\dbt_expectations_expect_column_26ce37ad607d6f97edf53623115c18af.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_26ce37ad607d6f97edf53623115c18af"}, "created_at": 1666883664.3320942, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSITOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDER_IS_A_CONTRACT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.defi__ez_lending"}, "test.crosschain_models.not_null_defi__ez_lending_BLOCK_TIMESTAMP.0d4352ae36": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__ez_lending')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_lending"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_defi", "fqn": ["crosschain_models", "defi", "not_null_defi__ez_lending_BLOCK_TIMESTAMP"], "unique_id": "test.crosschain_models.not_null_defi__ez_lending_BLOCK_TIMESTAMP.0d4352ae36", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_defi__ez_lending_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\defi\\defi__ez_lending.yml", "name": "not_null_defi__ez_lending_BLOCK_TIMESTAMP", "alias": "ez_lending_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_lending.yml\\not_null_defi__ez_lending_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666883664.3809743, "compiled_sql": "\n    \n    \n\n\n\nselect BLOCK_TIMESTAMP\nfrom CROSSCHAIN_DEV.defi.ez_lending\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__ez_lending"}, "test.crosschain_models.dbt_expectations_expect_row_values_to_have_recent_data_defi__ez_lending_BLOCK_TIMESTAMP__day__3.957ec20e15": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_2c01d537d6eccaf5aa2daaef306ae528\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 3, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__ez_lending')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_lending"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_2c01d537d6eccaf5aa2daaef306ae528", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_row_values_to_have_recent_data_defi__ez_lending_BLOCK_TIMESTAMP__day__3"], "unique_id": "test.crosschain_models.dbt_expectations_expect_row_values_to_have_recent_data_defi__ez_lending_BLOCK_TIMESTAMP__day__3.957ec20e15", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_row_va_2c01d537d6eccaf5aa2daaef306ae528.sql", "original_file_path": "models\\defi\\defi__ez_lending.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_defi__ez_lending_BLOCK_TIMESTAMP__day__3", "alias": "ez_lending_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_lending.yml\\dbt_expectations_expect_row_va_2c01d537d6eccaf5aa2daaef306ae528.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_2c01d537d6eccaf5aa2daaef306ae528"}, "created_at": 1666883664.3829706, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        CROSSCHAIN_DEV.defi.ez_lending\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -3,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__ez_lending"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.e446fd2311": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_78dcec59ebb42bc85a7e77fe0684a35c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__ez_lending')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_lending"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_78dcec59ebb42bc85a7e77fe0684a35c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.e446fd2311", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_78dcec59ebb42bc85a7e77fe0684a35c.sql", "original_file_path": "models\\defi\\defi__ez_lending.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "ez_lending_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_lending.yml\\dbt_expectations_expect_column_78dcec59ebb42bc85a7e77fe0684a35c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_78dcec59ebb42bc85a7e77fe0684a35c"}, "created_at": 1666883664.3882508, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSITOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDER_IS_A_CONTRACT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__ez_lending"}, "test.crosschain_models.not_null_defi__ez_lending_TX_HASH.a9c7b16e2d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('defi__ez_lending')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_lending"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_defi", "fqn": ["crosschain_models", "defi", "not_null_defi__ez_lending_TX_HASH"], "unique_id": "test.crosschain_models.not_null_defi__ez_lending_TX_HASH.a9c7b16e2d", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_defi__ez_lending_TX_HASH.sql", "original_file_path": "models\\defi\\defi__ez_lending.yml", "name": "not_null_defi__ez_lending_TX_HASH", "alias": "ez_lending_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_lending.yml\\not_null_defi__ez_lending_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666883664.391252, "compiled_sql": "\n    \n    \n\n\n\nselect TX_HASH\nfrom CROSSCHAIN_DEV.defi.ez_lending\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.defi__ez_lending"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_TX_HASH__0_xX_0_9a_fA_F_.6b655b8c27": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4f666f696b45b13f57666a660193f2a7\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('defi__ez_lending')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_lending"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4f666f696b45b13f57666a660193f2a7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_TX_HASH__0_xX_0_9a_fA_F_.6b655b8c27", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_4f666f696b45b13f57666a660193f2a7.sql", "original_file_path": "models\\defi\\defi__ez_lending.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_TX_HASH__0_xX_0_9a_fA_F_", "alias": "ez_lending_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_lending.yml\\dbt_expectations_expect_column_4f666f696b45b13f57666a660193f2a7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_4f666f696b45b13f57666a660193f2a7"}, "created_at": 1666883664.3932528, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.defi.ez_lending\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.defi__ez_lending"}, "test.crosschain_models.not_null_defi__ez_lending_LENDING_POOL_ADDRESS.868e838a22": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LENDING_POOL_ADDRESS", "model": "{{ get_where_subquery(ref('defi__ez_lending')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_lending"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_defi", "fqn": ["crosschain_models", "defi", "not_null_defi__ez_lending_LENDING_POOL_ADDRESS"], "unique_id": "test.crosschain_models.not_null_defi__ez_lending_LENDING_POOL_ADDRESS.868e838a22", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_defi__ez_lending_LENDING_POOL_ADDRESS.sql", "original_file_path": "models\\defi\\defi__ez_lending.yml", "name": "not_null_defi__ez_lending_LENDING_POOL_ADDRESS", "alias": "ez_lending_LENDING_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_lending.yml\\not_null_defi__ez_lending_LENDING_POOL_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666883664.3964276, "compiled_sql": "\n    \n    \n\n\n\nselect LENDING_POOL_ADDRESS\nfrom CROSSCHAIN_DEV.defi.ez_lending\nwhere LENDING_POOL_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LENDING_POOL_ADDRESS", "file_key_name": "models.defi__ez_lending"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_LENDING_POOL_ADDRESS__0_xX_0_9a_fA_F_.79e8b7dbd2": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f87b3c7d4483541fa50caeb7a70f73f7\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "LENDING_POOL_ADDRESS", "model": "{{ get_where_subquery(ref('defi__ez_lending')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_lending"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f87b3c7d4483541fa50caeb7a70f73f7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_LENDING_POOL_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_LENDING_POOL_ADDRESS__0_xX_0_9a_fA_F_.79e8b7dbd2", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_f87b3c7d4483541fa50caeb7a70f73f7.sql", "original_file_path": "models\\defi\\defi__ez_lending.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_LENDING_POOL_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_lending_LENDING_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_lending.yml\\dbt_expectations_expect_column_f87b3c7d4483541fa50caeb7a70f73f7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f87b3c7d4483541fa50caeb7a70f73f7"}, "created_at": 1666883664.398537, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(LENDING_POOL_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.defi.ez_lending\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LENDING_POOL_ADDRESS", "file_key_name": "models.defi__ez_lending"}, "test.crosschain_models.not_null_defi__ez_lending_LENDING_POOL.91ae06743f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LENDING_POOL", "model": "{{ get_where_subquery(ref('defi__ez_lending')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_lending"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_defi", "fqn": ["crosschain_models", "defi", "not_null_defi__ez_lending_LENDING_POOL"], "unique_id": "test.crosschain_models.not_null_defi__ez_lending_LENDING_POOL.91ae06743f", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_defi__ez_lending_LENDING_POOL.sql", "original_file_path": "models\\defi\\defi__ez_lending.yml", "name": "not_null_defi__ez_lending_LENDING_POOL", "alias": "ez_lending_LENDING_POOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_lending.yml\\not_null_defi__ez_lending_LENDING_POOL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666883664.4025276, "compiled_sql": "\n    \n    \n\n\n\nselect LENDING_POOL\nfrom CROSSCHAIN_DEV.defi.ez_lending\nwhere LENDING_POOL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LENDING_POOL", "file_key_name": "models.defi__ez_lending"}, "test.crosschain_models.not_null_defi__ez_lending_LENDER_IS_A_CONTRACT.c582af624f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LENDER_IS_A_CONTRACT", "model": "{{ get_where_subquery(ref('defi__ez_lending')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_lending"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_defi", "fqn": ["crosschain_models", "defi", "not_null_defi__ez_lending_LENDER_IS_A_CONTRACT"], "unique_id": "test.crosschain_models.not_null_defi__ez_lending_LENDER_IS_A_CONTRACT.c582af624f", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_defi__ez_lending_LENDER_IS_A_CONTRACT.sql", "original_file_path": "models\\defi\\defi__ez_lending.yml", "name": "not_null_defi__ez_lending_LENDER_IS_A_CONTRACT", "alias": "ez_lending_LENDER_IS_A_CONTRACT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_lending.yml\\not_null_defi__ez_lending_LENDER_IS_A_CONTRACT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666883664.4035306, "compiled_sql": "\n    \n    \n\n\n\nselect LENDER_IS_A_CONTRACT\nfrom CROSSCHAIN_DEV.defi.ez_lending\nwhere LENDER_IS_A_CONTRACT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LENDER_IS_A_CONTRACT", "file_key_name": "models.defi__ez_lending"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_AMOUNT__NUMBER__FLOAT.d6d80b1c4a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7f45188951002946fe2e047aece165ed\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('defi__ez_lending')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_lending"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7f45188951002946fe2e047aece165ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_AMOUNT__NUMBER__FLOAT"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_AMOUNT__NUMBER__FLOAT.d6d80b1c4a", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_7f45188951002946fe2e047aece165ed.sql", "original_file_path": "models\\defi\\defi__ez_lending.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_AMOUNT__NUMBER__FLOAT", "alias": "ez_lending_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_lending.yml\\dbt_expectations_expect_column_7f45188951002946fe2e047aece165ed.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_7f45188951002946fe2e047aece165ed"}, "created_at": 1666883664.4045262, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSITOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDER_IS_A_CONTRACT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT", "file_key_name": "models.defi__ez_lending"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_AMOUNT_USD__NUMBER__FLOAT.f0da31569c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_89db8b02865e5536d057690bec3c6a68\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_USD", "model": "{{ get_where_subquery(ref('defi__ez_lending')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_lending"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_89db8b02865e5536d057690bec3c6a68", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_AMOUNT_USD__NUMBER__FLOAT"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_AMOUNT_USD__NUMBER__FLOAT.f0da31569c", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_89db8b02865e5536d057690bec3c6a68.sql", "original_file_path": "models\\defi\\defi__ez_lending.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_AMOUNT_USD__NUMBER__FLOAT", "alias": "ez_lending_AMOUNT_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_lending.yml\\dbt_expectations_expect_column_89db8b02865e5536d057690bec3c6a68.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_89db8b02865e5536d057690bec3c6a68"}, "created_at": 1666883664.4085252, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSITOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDER_IS_A_CONTRACT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT_USD", "file_key_name": "models.defi__ez_lending"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_SYMBOL__STRING__VARCHAR.fca186d25c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b45c9ed3c2e8a6c70116a9e1392de5f6\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SYMBOL", "model": "{{ get_where_subquery(ref('defi__ez_lending')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_lending"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b45c9ed3c2e8a6c70116a9e1392de5f6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_SYMBOL__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_SYMBOL__STRING__VARCHAR.fca186d25c", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_b45c9ed3c2e8a6c70116a9e1392de5f6.sql", "original_file_path": "models\\defi\\defi__ez_lending.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_SYMBOL__STRING__VARCHAR", "alias": "ez_lending_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_lending.yml\\dbt_expectations_expect_column_b45c9ed3c2e8a6c70116a9e1392de5f6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b45c9ed3c2e8a6c70116a9e1392de5f6"}, "created_at": 1666883664.4125433, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSITOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDER_IS_A_CONTRACT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SYMBOL'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SYMBOL", "file_key_name": "models.defi__ez_lending"}, "test.crosschain_models.not_null_defi__ez_lending_DEPOSITOR.ef9664972b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP > '2021-08-01'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DEPOSITOR", "model": "{{ get_where_subquery(ref('defi__ez_lending')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_lending"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCK_TIMESTAMP > '2021-08-01'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_defi", "fqn": ["crosschain_models", "defi", "not_null_defi__ez_lending_DEPOSITOR"], "unique_id": "test.crosschain_models.not_null_defi__ez_lending_DEPOSITOR.ef9664972b", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_defi__ez_lending_DEPOSITOR.sql", "original_file_path": "models\\defi\\defi__ez_lending.yml", "name": "not_null_defi__ez_lending_DEPOSITOR", "alias": "ez_lending_DEPOSITOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_lending.yml\\not_null_defi__ez_lending_DEPOSITOR.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "BLOCK_TIMESTAMP > '2021-08-01'"}, "created_at": 1666883664.4165282, "compiled_sql": "\n    \n    \n\n\n\nselect DEPOSITOR\nfrom (select * from CROSSCHAIN_DEV.defi.ez_lending where BLOCK_TIMESTAMP > '2021-08-01') dbt_subquery\nwhere DEPOSITOR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DEPOSITOR", "file_key_name": "models.defi__ez_lending"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_DEPOSITOR__0_xX_0_9a_fA_F_.d0d7dec87c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e8c9f61c062a2605c43347c11cf03591\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "DEPOSITOR", "model": "{{ get_where_subquery(ref('defi__ez_lending')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_lending"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e8c9f61c062a2605c43347c11cf03591", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_DEPOSITOR__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_DEPOSITOR__0_xX_0_9a_fA_F_.d0d7dec87c", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_e8c9f61c062a2605c43347c11cf03591.sql", "original_file_path": "models\\defi\\defi__ez_lending.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_DEPOSITOR__0_xX_0_9a_fA_F_", "alias": "ez_lending_DEPOSITOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_lending.yml\\dbt_expectations_expect_column_e8c9f61c062a2605c43347c11cf03591.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e8c9f61c062a2605c43347c11cf03591"}, "created_at": 1666883664.417879, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(DEPOSITOR, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.defi.ez_lending\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DEPOSITOR", "file_key_name": "models.defi__ez_lending"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_PLATFORM__STRING__VARCHAR.56dd714926": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d76eee6ee2b20255ce7b3cc41c212702\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "PLATFORM", "model": "{{ get_where_subquery(ref('defi__ez_lending')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_lending"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d76eee6ee2b20255ce7b3cc41c212702", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_PLATFORM__STRING__VARCHAR"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_PLATFORM__STRING__VARCHAR.56dd714926", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_d76eee6ee2b20255ce7b3cc41c212702.sql", "original_file_path": "models\\defi\\defi__ez_lending.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_PLATFORM__STRING__VARCHAR", "alias": "ez_lending_PLATFORM", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_lending.yml\\dbt_expectations_expect_column_d76eee6ee2b20255ce7b3cc41c212702.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d76eee6ee2b20255ce7b3cc41c212702"}, "created_at": 1666883664.420955, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSITOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDER_IS_A_CONTRACT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PLATFORM'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM", "file_key_name": "models.defi__ez_lending"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_EVENT_INDEX__NUMBER__FLOAT.5e19309b95": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_42e2e1c44965ccaf87f828f5db641ef1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('defi__ez_lending')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_lending"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_42e2e1c44965ccaf87f828f5db641ef1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_EVENT_INDEX__NUMBER__FLOAT"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_EVENT_INDEX__NUMBER__FLOAT.5e19309b95", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_42e2e1c44965ccaf87f828f5db641ef1.sql", "original_file_path": "models\\defi\\defi__ez_lending.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_EVENT_INDEX__NUMBER__FLOAT", "alias": "ez_lending_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_lending.yml\\dbt_expectations_expect_column_42e2e1c44965ccaf87f828f5db641ef1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_42e2e1c44965ccaf87f828f5db641ef1"}, "created_at": 1666883664.4249713, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSITOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDER_IS_A_CONTRACT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET_AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_INDEX'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVENT_INDEX", "file_key_name": "models.defi__ez_lending"}, "test.crosschain_models.not_null_defi__ez_lending__LOG_ID.163af3543a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_LOG_ID", "model": "{{ get_where_subquery(ref('defi__ez_lending')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_lending"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_defi", "fqn": ["crosschain_models", "defi", "not_null_defi__ez_lending__LOG_ID"], "unique_id": "test.crosschain_models.not_null_defi__ez_lending__LOG_ID.163af3543a", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_defi__ez_lending__LOG_ID.sql", "original_file_path": "models\\defi\\defi__ez_lending.yml", "name": "not_null_defi__ez_lending__LOG_ID", "alias": "ez_lending", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_lending.yml\\not_null_defi__ez_lending__LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666883664.4283845, "compiled_sql": "\n    \n    \n\n\n\nselect _LOG_ID\nfrom CROSSCHAIN_DEV.defi.ez_lending\nwhere _LOG_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_LOG_ID", "file_key_name": "models.defi__ez_lending"}, "test.crosschain_models.not_null_defi__ez_lending_ORIGIN_FROM_ADDRESS.55ee0e45b6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('defi__ez_lending')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_lending"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "not_null_defi", "fqn": ["crosschain_models", "defi", "not_null_defi__ez_lending_ORIGIN_FROM_ADDRESS"], "unique_id": "test.crosschain_models.not_null_defi__ez_lending_ORIGIN_FROM_ADDRESS.55ee0e45b6", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "not_null_defi__ez_lending_ORIGIN_FROM_ADDRESS.sql", "original_file_path": "models\\defi\\defi__ez_lending.yml", "name": "not_null_defi__ez_lending_ORIGIN_FROM_ADDRESS", "alias": "ez_lending_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_lending.yml\\not_null_defi__ez_lending_ORIGIN_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666883664.4303901, "compiled_sql": "\n    \n    \n\n\n\nselect ORIGIN_FROM_ADDRESS\nfrom CROSSCHAIN_DEV.defi.ez_lending\nwhere ORIGIN_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.defi__ez_lending"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.9324d4632c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_aeb069d125c16a30d755aa165a737334\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('defi__ez_lending')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_lending"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_aeb069d125c16a30d755aa165a737334", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.9324d4632c", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_aeb069d125c16a30d755aa165a737334.sql", "original_file_path": "models\\defi\\defi__ez_lending.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_lending_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_lending.yml\\dbt_expectations_expect_column_aeb069d125c16a30d755aa165a737334.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_aeb069d125c16a30d755aa165a737334"}, "created_at": 1666883664.4313874, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.defi.ez_lending\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.defi__ez_lending"}, "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.1ab6b92673": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e86f856fbe419e031605f302aee5aad7\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('defi__ez_lending')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_lending"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e86f856fbe419e031605f302aee5aad7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_defi", "fqn": ["crosschain_models", "defi", "dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.1ab6b92673", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_e86f856fbe419e031605f302aee5aad7.sql", "original_file_path": "models\\defi\\defi__ez_lending.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_lending_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_lending.yml\\dbt_expectations_expect_column_e86f856fbe419e031605f302aee5aad7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e86f856fbe419e031605f302aee5aad7"}, "created_at": 1666883664.4353926, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from CROSSCHAIN_DEV.defi.ez_lending\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.defi__ez_lending"}, "test.crosschain_models.dbt_utils_unique_combination_of_columns_defi__ez_lending__LOG_ID.f59a21ba8d": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4878eb1e51efdb7970ba82f907d9ac08\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_LOG_ID"], "model": "{{ get_where_subquery(ref('defi__ez_lending')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.crosschain_models.defi__ez_lending"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_4878eb1e51efdb7970ba82f907d9ac08", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_defi", "fqn": ["crosschain_models", "defi", "dbt_utils_unique_combination_of_columns_defi__ez_lending__LOG_ID"], "unique_id": "test.crosschain_models.dbt_utils_unique_combination_of_columns_defi__ez_lending__LOG_ID.f59a21ba8d", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_utils_unique_combination_o_4878eb1e51efdb7970ba82f907d9ac08.sql", "original_file_path": "models\\defi\\defi__ez_lending.yml", "name": "dbt_utils_unique_combination_of_columns_defi__ez_lending__LOG_ID", "alias": "ez_lending", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["defi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\crosschain_models\\models\\defi\\defi__ez_lending.yml\\dbt_utils_unique_combination_o_4878eb1e51efdb7970ba82f907d9ac08.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_4878eb1e51efdb7970ba82f907d9ac08"}, "created_at": 1666883664.4396858, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _LOG_ID\n    from CROSSCHAIN_DEV.defi.ez_lending\n    group by _LOG_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.defi__ez_lending"}}, "sources": {"source.crosschain_models.legacy_db.prices_v2": {"fqn": ["crosschain_models", "legacy_db", "prices_v2"], "database": "flipside_prod_db", "schema": "silver", "unique_id": "source.crosschain_models.legacy_db.prices_v2", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "prices_v2", "source_name": "legacy_db", "source_description": "", "loader": "", "identifier": "prices_v2", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver.prices_v2", "created_at": 1666804370.1895456}, "source.crosschain_models.legacy_db.market_asset_metadata": {"fqn": ["crosschain_models", "legacy_db", "market_asset_metadata"], "database": "flipside_prod_db", "schema": "silver", "unique_id": "source.crosschain_models.legacy_db.market_asset_metadata", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "market_asset_metadata", "source_name": "legacy_db", "source_description": "", "loader": "", "identifier": "market_asset_metadata", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver.market_asset_metadata", "created_at": 1666804370.1895456}, "source.crosschain_models.legacy_db.hours": {"fqn": ["crosschain_models", "legacy_db", "hours"], "database": "flipside_prod_db", "schema": "silver", "unique_id": "source.crosschain_models.legacy_db.hours", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "hours", "source_name": "legacy_db", "source_description": "", "loader": "", "identifier": "hours", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver.hours", "created_at": 1666804370.1895456}, "source.crosschain_models.legacy_silver_crosschain.ntr": {"fqn": ["crosschain_models", "legacy_silver_crosschain", "ntr"], "database": "flipside_prod_db", "schema": "silver_crosschain", "unique_id": "source.crosschain_models.legacy_silver_crosschain.ntr", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "ntr", "source_name": "legacy_silver_crosschain", "source_description": "", "loader": "", "identifier": "ntr", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver_crosschain.ntr", "created_at": 1666804370.1895456}, "source.crosschain_models.legacy_silver_crosschain.address_labels": {"fqn": ["crosschain_models", "legacy_silver_crosschain", "address_labels"], "database": "flipside_prod_db", "schema": "silver_crosschain", "unique_id": "source.crosschain_models.legacy_silver_crosschain.address_labels", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "address_labels", "source_name": "legacy_silver_crosschain", "source_description": "", "loader": "", "identifier": "address_labels", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver_crosschain.address_labels", "created_at": 1666804370.1895456}, "source.crosschain_models.legacy_dev_db.prices_v2": {"fqn": ["crosschain_models", "legacy_dev_db", "prices_v2"], "database": "flipside_dev_db", "schema": "silver", "unique_id": "source.crosschain_models.legacy_dev_db.prices_v2", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "prices_v2", "source_name": "legacy_dev_db", "source_description": "", "loader": "", "identifier": "prices_v2", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_dev_db.silver.prices_v2", "created_at": 1666804370.1895456}, "source.crosschain_models.legacy_dev_db.market_asset_metadata": {"fqn": ["crosschain_models", "legacy_dev_db", "market_asset_metadata"], "database": "flipside_dev_db", "schema": "silver", "unique_id": "source.crosschain_models.legacy_dev_db.market_asset_metadata", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "market_asset_metadata", "source_name": "legacy_dev_db", "source_description": "", "loader": "", "identifier": "market_asset_metadata", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_dev_db.silver.market_asset_metadata", "created_at": 1666804370.1895456}, "source.crosschain_models.legacy_dev_db.hours": {"fqn": ["crosschain_models", "legacy_dev_db", "hours"], "database": "flipside_dev_db", "schema": "silver", "unique_id": "source.crosschain_models.legacy_dev_db.hours", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "hours", "source_name": "legacy_dev_db", "source_description": "", "loader": "", "identifier": "hours", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_dev_db.silver.hours", "created_at": 1666804370.1895456}, "source.crosschain_models.crosschain_dev_silver.dates_table": {"fqn": ["crosschain_models", "crosschain_dev_silver", "dates_table"], "database": "crosschain_dev", "schema": "silver", "unique_id": "source.crosschain_models.crosschain_dev_silver.dates_table", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "dates_table", "source_name": "crosschain_dev_silver", "source_description": "", "loader": "", "identifier": "dates_table", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain_dev.silver.dates_table", "created_at": 1666804370.1895456}, "source.crosschain_models.ethereum_silver.logs": {"fqn": ["crosschain_models", "ethereum_silver", "logs"], "database": "ethereum", "schema": "silver", "unique_id": "source.crosschain_models.ethereum_silver.logs", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "logs", "source_name": "ethereum_silver", "source_description": "", "loader": "", "identifier": "logs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.silver.logs", "created_at": 1666804370.1895456}, "source.crosschain_models.ethereum_silver.traces": {"fqn": ["crosschain_models", "ethereum_silver", "traces"], "database": "ethereum", "schema": "silver", "unique_id": "source.crosschain_models.ethereum_silver.traces", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "traces", "source_name": "ethereum_silver", "source_description": "", "loader": "", "identifier": "traces", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.silver.traces", "created_at": 1666804370.1895456}, "source.crosschain_models.ethereum_silver.transactions": {"fqn": ["crosschain_models", "ethereum_silver", "transactions"], "database": "ethereum", "schema": "silver", "unique_id": "source.crosschain_models.ethereum_silver.transactions", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "transactions", "source_name": "ethereum_silver", "source_description": "", "loader": "", "identifier": "transactions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.silver.transactions", "created_at": 1666804370.1895456}, "source.crosschain_models.ethereum_silver.labels": {"fqn": ["crosschain_models", "ethereum_silver", "labels"], "database": "ethereum", "schema": "silver", "unique_id": "source.crosschain_models.ethereum_silver.labels", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "labels", "source_name": "ethereum_silver", "source_description": "", "loader": "", "identifier": "labels", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.silver.labels", "created_at": 1666804370.1895456}, "source.crosschain_models.crosschain_silver.godmode_nft_minters": {"fqn": ["crosschain_models", "crosschain_silver", "godmode_nft_minters"], "database": "crosschain", "schema": "silver", "unique_id": "source.crosschain_models.crosschain_silver.godmode_nft_minters", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "godmode_nft_minters", "source_name": "crosschain_silver", "source_description": "", "loader": "", "identifier": "godmode_nft_minters", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.silver.godmode_nft_minters", "created_at": 1666804370.1895456}, "source.crosschain_models.crosschain_silver.optimism_delegates": {"fqn": ["crosschain_models", "crosschain_silver", "optimism_delegates"], "database": "crosschain", "schema": "silver", "unique_id": "source.crosschain_models.crosschain_silver.optimism_delegates", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "optimism_delegates", "source_name": "crosschain_silver", "source_description": "", "loader": "", "identifier": "optimism_delegates", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.silver.optimism_delegates", "created_at": 1666804370.1895456}, "source.crosschain_models.ethereum_silver_nft.cryptopunk_sales": {"fqn": ["crosschain_models", "ethereum_silver_nft", "cryptopunk_sales"], "database": "ethereum", "schema": "silver_nft", "unique_id": "source.crosschain_models.ethereum_silver_nft.cryptopunk_sales", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "cryptopunk_sales", "source_name": "ethereum_silver_nft", "source_description": "", "loader": "", "identifier": "cryptopunk_sales", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.silver_nft.cryptopunk_sales", "created_at": 1666804370.1895456}, "source.crosschain_models.ethereum_silver_nft.looksrare_sales": {"fqn": ["crosschain_models", "ethereum_silver_nft", "looksrare_sales"], "database": "ethereum", "schema": "silver_nft", "unique_id": "source.crosschain_models.ethereum_silver_nft.looksrare_sales", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "looksrare_sales", "source_name": "ethereum_silver_nft", "source_description": "", "loader": "", "identifier": "looksrare_sales", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.silver_nft.looksrare_sales", "created_at": 1666804370.1895456}, "source.crosschain_models.ethereum_silver_nft.nftx_sales": {"fqn": ["crosschain_models", "ethereum_silver_nft", "nftx_sales"], "database": "ethereum", "schema": "silver_nft", "unique_id": "source.crosschain_models.ethereum_silver_nft.nftx_sales", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "nftx_sales", "source_name": "ethereum_silver_nft", "source_description": "", "loader": "", "identifier": "nftx_sales", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.silver_nft.nftx_sales", "created_at": 1666804370.1895456}, "source.crosschain_models.ethereum_silver_nft.opensea_sales": {"fqn": ["crosschain_models", "ethereum_silver_nft", "opensea_sales"], "database": "ethereum", "schema": "silver_nft", "unique_id": "source.crosschain_models.ethereum_silver_nft.opensea_sales", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "opensea_sales", "source_name": "ethereum_silver_nft", "source_description": "", "loader": "", "identifier": "opensea_sales", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.silver_nft.opensea_sales", "created_at": 1666804370.1895456}, "source.crosschain_models.ethereum_silver_nft.rarible_sales": {"fqn": ["crosschain_models", "ethereum_silver_nft", "rarible_sales"], "database": "ethereum", "schema": "silver_nft", "unique_id": "source.crosschain_models.ethereum_silver_nft.rarible_sales", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "rarible_sales", "source_name": "ethereum_silver_nft", "source_description": "", "loader": "", "identifier": "rarible_sales", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.silver_nft.rarible_sales", "created_at": 1666804370.1895456}, "source.crosschain_models.ethereum_silver_nft.seaport_sales": {"fqn": ["crosschain_models", "ethereum_silver_nft", "seaport_sales"], "database": "ethereum", "schema": "silver_nft", "unique_id": "source.crosschain_models.ethereum_silver_nft.seaport_sales", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "seaport_sales", "source_name": "ethereum_silver_nft", "source_description": "", "loader": "", "identifier": "seaport_sales", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.silver_nft.seaport_sales", "created_at": 1666804370.1895456}, "source.crosschain_models.ethereum_silver_nft.x2y2_sales": {"fqn": ["crosschain_models", "ethereum_silver_nft", "x2y2_sales"], "database": "ethereum", "schema": "silver_nft", "unique_id": "source.crosschain_models.ethereum_silver_nft.x2y2_sales", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "x2y2_sales", "source_name": "ethereum_silver_nft", "source_description": "", "loader": "", "identifier": "x2y2_sales", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.silver_nft.x2y2_sales", "created_at": 1666804370.1895456}, "source.crosschain_models.arbitrum_silver.logs": {"fqn": ["crosschain_models", "arbitrum_silver", "logs"], "database": "arbitrum", "schema": "silver", "unique_id": "source.crosschain_models.arbitrum_silver.logs", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "logs", "source_name": "arbitrum_silver", "source_description": "", "loader": "", "identifier": "logs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "arbitrum.silver.logs", "created_at": 1666804370.1895456}, "source.crosschain_models.arbitrum_silver.traces": {"fqn": ["crosschain_models", "arbitrum_silver", "traces"], "database": "arbitrum", "schema": "silver", "unique_id": "source.crosschain_models.arbitrum_silver.traces", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "traces", "source_name": "arbitrum_silver", "source_description": "", "loader": "", "identifier": "traces", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "arbitrum.silver.traces", "created_at": 1666804370.1895456}, "source.crosschain_models.arbitrum_silver.transactions": {"fqn": ["crosschain_models", "arbitrum_silver", "transactions"], "database": "arbitrum", "schema": "silver", "unique_id": "source.crosschain_models.arbitrum_silver.transactions", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "transactions", "source_name": "arbitrum_silver", "source_description": "", "loader": "", "identifier": "transactions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "arbitrum.silver.transactions", "created_at": 1666804370.1895456}, "source.crosschain_models.avalanche_silver.logs": {"fqn": ["crosschain_models", "avalanche_silver", "logs"], "database": "avalanche", "schema": "silver", "unique_id": "source.crosschain_models.avalanche_silver.logs", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "logs", "source_name": "avalanche_silver", "source_description": "", "loader": "", "identifier": "logs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "avalanche.silver.logs", "created_at": 1666804370.1895456}, "source.crosschain_models.avalanche_silver.traces": {"fqn": ["crosschain_models", "avalanche_silver", "traces"], "database": "avalanche", "schema": "silver", "unique_id": "source.crosschain_models.avalanche_silver.traces", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "traces", "source_name": "avalanche_silver", "source_description": "", "loader": "", "identifier": "traces", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "avalanche.silver.traces", "created_at": 1666804370.1895456}, "source.crosschain_models.avalanche_silver.transactions": {"fqn": ["crosschain_models", "avalanche_silver", "transactions"], "database": "avalanche", "schema": "silver", "unique_id": "source.crosschain_models.avalanche_silver.transactions", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "transactions", "source_name": "avalanche_silver", "source_description": "", "loader": "", "identifier": "transactions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "avalanche.silver.transactions", "created_at": 1666804370.1895456}, "source.crosschain_models.polygon_silver.logs": {"fqn": ["crosschain_models", "polygon_silver", "logs"], "database": "polygon", "schema": "silver", "unique_id": "source.crosschain_models.polygon_silver.logs", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "logs", "source_name": "polygon_silver", "source_description": "", "loader": "", "identifier": "logs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "polygon.silver.logs", "created_at": 1666804370.1895456}, "source.crosschain_models.polygon_silver.traces": {"fqn": ["crosschain_models", "polygon_silver", "traces"], "database": "polygon", "schema": "silver", "unique_id": "source.crosschain_models.polygon_silver.traces", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "traces", "source_name": "polygon_silver", "source_description": "", "loader": "", "identifier": "traces", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "polygon.silver.traces", "created_at": 1666804370.1895456}, "source.crosschain_models.polygon_silver.transactions": {"fqn": ["crosschain_models", "polygon_silver", "transactions"], "database": "polygon", "schema": "silver", "unique_id": "source.crosschain_models.polygon_silver.transactions", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "transactions", "source_name": "polygon_silver", "source_description": "", "loader": "", "identifier": "transactions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "polygon.silver.transactions", "created_at": 1666804370.1895456}, "source.crosschain_models.optimism_silver.logs": {"fqn": ["crosschain_models", "optimism_silver", "logs"], "database": "optimism", "schema": "silver", "unique_id": "source.crosschain_models.optimism_silver.logs", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "logs", "source_name": "optimism_silver", "source_description": "", "loader": "", "identifier": "logs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "optimism.silver.logs", "created_at": 1666804370.1895456}, "source.crosschain_models.optimism_silver.traces": {"fqn": ["crosschain_models", "optimism_silver", "traces"], "database": "optimism", "schema": "silver", "unique_id": "source.crosschain_models.optimism_silver.traces", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "traces", "source_name": "optimism_silver", "source_description": "", "loader": "", "identifier": "traces", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "optimism.silver.traces", "created_at": 1666804370.1895456}, "source.crosschain_models.optimism_silver.transactions": {"fqn": ["crosschain_models", "optimism_silver", "transactions"], "database": "optimism", "schema": "silver", "unique_id": "source.crosschain_models.optimism_silver.transactions", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "transactions", "source_name": "optimism_silver", "source_description": "", "loader": "", "identifier": "transactions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "optimism.silver.transactions", "created_at": 1666804370.1895456}, "source.crosschain_models.bsc_silver.logs": {"fqn": ["crosschain_models", "bsc_silver", "logs"], "database": "bsc", "schema": "silver", "unique_id": "source.crosschain_models.bsc_silver.logs", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "logs", "source_name": "bsc_silver", "source_description": "", "loader": "", "identifier": "logs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "bsc.silver.logs", "created_at": 1666804370.1895456}, "source.crosschain_models.bsc_silver.traces": {"fqn": ["crosschain_models", "bsc_silver", "traces"], "database": "bsc", "schema": "silver", "unique_id": "source.crosschain_models.bsc_silver.traces", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "traces", "source_name": "bsc_silver", "source_description": "", "loader": "", "identifier": "traces", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "bsc.silver.traces", "created_at": 1666804370.1895456}, "source.crosschain_models.bsc_silver.transactions": {"fqn": ["crosschain_models", "bsc_silver", "transactions"], "database": "bsc", "schema": "silver", "unique_id": "source.crosschain_models.bsc_silver.transactions", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "transactions", "source_name": "bsc_silver", "source_description": "", "loader": "", "identifier": "transactions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "bsc.silver.transactions", "created_at": 1666804370.1895456}, "source.crosschain_models.bronze_streamline.asset_metadata_coin_market_cap_api": {"fqn": ["crosschain_models", "bronze_streamline", "asset_metadata_coin_market_cap_api"], "database": "streamline", "schema": "crosschain", "unique_id": "source.crosschain_models.bronze_streamline.asset_metadata_coin_market_cap_api", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "asset_metadata_coin_market_cap_api", "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "asset_metadata_coin_market_cap_api", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.crosschain.asset_metadata_coin_market_cap_api", "created_at": 1666804370.1895456}, "source.crosschain_models.bronze_streamline.asset_metadata_coin_gecko_api": {"fqn": ["crosschain_models", "bronze_streamline", "asset_metadata_coin_gecko_api"], "database": "streamline", "schema": "crosschain", "unique_id": "source.crosschain_models.bronze_streamline.asset_metadata_coin_gecko_api", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "asset_metadata_coin_gecko_api", "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "asset_metadata_coin_gecko_api", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.crosschain.asset_metadata_coin_gecko_api", "created_at": 1666804370.1895456}, "source.crosschain_models.bronze_streamline.asset_ohlc_coin_market_cap_api": {"fqn": ["crosschain_models", "bronze_streamline", "asset_ohlc_coin_market_cap_api"], "database": "streamline", "schema": "crosschain", "unique_id": "source.crosschain_models.bronze_streamline.asset_ohlc_coin_market_cap_api", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "asset_ohlc_coin_market_cap_api", "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "asset_ohlc_coin_market_cap_api", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.crosschain.asset_ohlc_coin_market_cap_api", "created_at": 1666804370.1895456}, "source.crosschain_models.bronze_streamline.asset_historical_hourly_market_data_coin_gecko_api": {"fqn": ["crosschain_models", "bronze_streamline", "asset_historical_hourly_market_data_coin_gecko_api"], "database": "streamline", "schema": "crosschain", "unique_id": "source.crosschain_models.bronze_streamline.asset_historical_hourly_market_data_coin_gecko_api", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "asset_historical_hourly_market_data_coin_gecko_api", "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "asset_historical_hourly_market_data_coin_gecko_api", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.crosschain.asset_historical_hourly_market_data_coin_gecko_api", "created_at": 1666804370.1895456}, "source.crosschain_models.bronze_streamline.asset_ohlc_coin_gecko_api": {"fqn": ["crosschain_models", "bronze_streamline", "asset_ohlc_coin_gecko_api"], "database": "streamline", "schema": "crosschain", "unique_id": "source.crosschain_models.bronze_streamline.asset_ohlc_coin_gecko_api", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "asset_ohlc_coin_gecko_api", "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "asset_ohlc_coin_gecko_api", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.crosschain.asset_ohlc_coin_gecko_api", "created_at": 1666804370.1895456}, "source.crosschain_models.bronze.prod_address_label_sink_291098491": {"fqn": ["crosschain_models", "bronze", "prod_address_label_sink_291098491"], "database": "flipside_prod_db", "schema": "bronze", "unique_id": "source.crosschain_models.bronze.prod_address_label_sink_291098491", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "prod_address_label_sink_291098491", "source_name": "bronze", "source_description": "", "loader": "", "identifier": "prod_address_label_sink_291098491", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.bronze.prod_address_label_sink_291098491", "created_at": 1666804370.1895456}, "source.crosschain_models.thorchain.swaps": {"fqn": ["crosschain_models", "thorchain", "swaps"], "database": "flipside_prod_db", "schema": "thorchain", "unique_id": "source.crosschain_models.thorchain.swaps", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "swaps", "source_name": "thorchain", "source_description": "", "loader": "", "identifier": "swaps", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.thorchain.swaps", "created_at": 1666821808.427808}, "source.crosschain_models.thorchain.liquidity_actions": {"fqn": ["crosschain_models", "thorchain", "liquidity_actions"], "database": "flipside_prod_db", "schema": "thorchain", "unique_id": "source.crosschain_models.thorchain.liquidity_actions", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "liquidity_actions", "source_name": "thorchain", "source_description": "", "loader": "", "identifier": "liquidity_actions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.thorchain.liquidity_actions", "created_at": 1666821808.427808}, "source.crosschain_models.thorchain.transfers": {"fqn": ["crosschain_models", "thorchain", "transfers"], "database": "flipside_prod_db", "schema": "thorchain", "unique_id": "source.crosschain_models.thorchain.transfers", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "transfers", "source_name": "thorchain", "source_description": "", "loader": "", "identifier": "transfers", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.thorchain.transfers", "created_at": 1666821808.4288194}, "source.crosschain_models.algorand_core.ez_transfer": {"fqn": ["crosschain_models", "algorand_core", "ez_transfer"], "database": "algorand", "schema": "core", "unique_id": "source.crosschain_models.algorand_core.ez_transfer", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "ez_transfer", "source_name": "algorand_core", "source_description": "", "loader": "", "identifier": "ez_transfer", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "algorand.core.ez_transfer", "created_at": 1666821808.4288194}, "source.crosschain_models.bsc_core.fact_token_transfers": {"fqn": ["crosschain_models", "bsc_core", "fact_token_transfers"], "database": "bsc", "schema": "core", "unique_id": "source.crosschain_models.bsc_core.fact_token_transfers", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "fact_token_transfers", "source_name": "bsc_core", "source_description": "", "loader": "", "identifier": "fact_token_transfers", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "bsc.core.fact_token_transfers", "created_at": 1666821808.4288194}, "source.crosschain_models.bsc_core.fact_traces": {"fqn": ["crosschain_models", "bsc_core", "fact_traces"], "database": "bsc", "schema": "core", "unique_id": "source.crosschain_models.bsc_core.fact_traces", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "fact_traces", "source_name": "bsc_core", "source_description": "", "loader": "", "identifier": "fact_traces", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "bsc.core.fact_traces", "created_at": 1666821808.4288194}, "source.crosschain_models.thorchain_core.fact_transfers": {"fqn": ["crosschain_models", "thorchain_core", "fact_transfers"], "database": "thorchain", "schema": "core", "unique_id": "source.crosschain_models.thorchain_core.fact_transfers", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "fact_transfers", "source_name": "thorchain_core", "source_description": "", "loader": "", "identifier": "fact_transfers", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "thorchain.core.fact_transfers", "created_at": 1666821808.4288194}, "source.crosschain_models.polygon_core.fact_token_transfers": {"fqn": ["crosschain_models", "polygon_core", "fact_token_transfers"], "database": "polygon", "schema": "core", "unique_id": "source.crosschain_models.polygon_core.fact_token_transfers", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "fact_token_transfers", "source_name": "polygon_core", "source_description": "", "loader": "", "identifier": "fact_token_transfers", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "polygon.core.fact_token_transfers", "created_at": 1666821808.4288194}, "source.crosschain_models.polygon_core.fact_traces": {"fqn": ["crosschain_models", "polygon_core", "fact_traces"], "database": "polygon", "schema": "core", "unique_id": "source.crosschain_models.polygon_core.fact_traces", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "fact_traces", "source_name": "polygon_core", "source_description": "", "loader": "", "identifier": "fact_traces", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "polygon.core.fact_traces", "created_at": 1666821808.4299517}, "source.crosschain_models.osmosis_core.fact_transfers": {"fqn": ["crosschain_models", "osmosis_core", "fact_transfers"], "database": "osmosis", "schema": "core", "unique_id": "source.crosschain_models.osmosis_core.fact_transfers", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "fact_transfers", "source_name": "osmosis_core", "source_description": "", "loader": "", "identifier": "fact_transfers", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "osmosis.core.fact_transfers", "created_at": 1666821808.4299517}, "source.crosschain_models.optimism_core.fact_token_transfers": {"fqn": ["crosschain_models", "optimism_core", "fact_token_transfers"], "database": "optimism", "schema": "core", "unique_id": "source.crosschain_models.optimism_core.fact_token_transfers", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "fact_token_transfers", "source_name": "optimism_core", "source_description": "", "loader": "", "identifier": "fact_token_transfers", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "optimism.core.fact_token_transfers", "created_at": 1666821808.4299517}, "source.crosschain_models.optimism_core.fact_traces": {"fqn": ["crosschain_models", "optimism_core", "fact_traces"], "database": "optimism", "schema": "core", "unique_id": "source.crosschain_models.optimism_core.fact_traces", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "fact_traces", "source_name": "optimism_core", "source_description": "", "loader": "", "identifier": "fact_traces", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "optimism.core.fact_traces", "created_at": 1666821808.4299517}, "source.crosschain_models.crosschain_core.address_labels": {"fqn": ["crosschain_models", "crosschain_core", "address_labels"], "database": "crosschain", "schema": "core", "unique_id": "source.crosschain_models.crosschain_core.address_labels", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "address_labels", "source_name": "crosschain_core", "source_description": "", "loader": "", "identifier": "address_labels", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.core.address_labels", "created_at": 1666821808.4310224}, "source.crosschain_models.solana_core.fact_transfers": {"fqn": ["crosschain_models", "solana_core", "fact_transfers"], "database": "solana", "schema": "core", "unique_id": "source.crosschain_models.solana_core.fact_transfers", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "fact_transfers", "source_name": "solana_core", "source_description": "", "loader": "", "identifier": "fact_transfers", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "solana.core.fact_transfers", "created_at": 1666821808.4310224}, "source.crosschain_models.avalanche_core.fact_token_transfers": {"fqn": ["crosschain_models", "avalanche_core", "fact_token_transfers"], "database": "avalanche", "schema": "core", "unique_id": "source.crosschain_models.avalanche_core.fact_token_transfers", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "fact_token_transfers", "source_name": "avalanche_core", "source_description": "", "loader": "", "identifier": "fact_token_transfers", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "avalanche.core.fact_token_transfers", "created_at": 1666821808.4310224}, "source.crosschain_models.avalanche_core.fact_traces": {"fqn": ["crosschain_models", "avalanche_core", "fact_traces"], "database": "avalanche", "schema": "core", "unique_id": "source.crosschain_models.avalanche_core.fact_traces", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "fact_traces", "source_name": "avalanche_core", "source_description": "", "loader": "", "identifier": "fact_traces", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "avalanche.core.fact_traces", "created_at": 1666821808.4310224}, "source.crosschain_models.flow_core.ez_token_transfers": {"fqn": ["crosschain_models", "flow_core", "ez_token_transfers"], "database": "flow", "schema": "core", "unique_id": "source.crosschain_models.flow_core.ez_token_transfers", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "ez_token_transfers", "source_name": "flow_core", "source_description": "", "loader": "", "identifier": "ez_token_transfers", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flow.core.ez_token_transfers", "created_at": 1666821808.4310224}, "source.crosschain_models.crosschain_dev_silver_crosschain.address_labels": {"fqn": ["crosschain_models", "crosschain_dev_silver_crosschain", "address_labels"], "database": "crosschain_dev", "schema": "silver_crosschain", "unique_id": "source.crosschain_models.crosschain_dev_silver_crosschain.address_labels", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "address_labels", "source_name": "crosschain_dev_silver_crosschain", "source_description": "", "loader": "", "identifier": "address_labels", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain_dev.silver_crosschain.address_labels", "created_at": 1666821808.4310224}, "source.crosschain_models.near_core.fact_transfers": {"fqn": ["crosschain_models", "near_core", "fact_transfers"], "database": "near", "schema": "core", "unique_id": "source.crosschain_models.near_core.fact_transfers", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "fact_transfers", "source_name": "near_core", "source_description": "", "loader": "", "identifier": "fact_transfers", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "near.core.fact_transfers", "created_at": 1666821808.4321206}, "source.crosschain_models.arbitrum_core.fact_token_transfers": {"fqn": ["crosschain_models", "arbitrum_core", "fact_token_transfers"], "database": "arbitrum", "schema": "core", "unique_id": "source.crosschain_models.arbitrum_core.fact_token_transfers", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "fact_token_transfers", "source_name": "arbitrum_core", "source_description": "", "loader": "", "identifier": "fact_token_transfers", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "arbitrum.core.fact_token_transfers", "created_at": 1666821808.4321206}, "source.crosschain_models.arbitrum_core.fact_traces": {"fqn": ["crosschain_models", "arbitrum_core", "fact_traces"], "database": "arbitrum", "schema": "core", "unique_id": "source.crosschain_models.arbitrum_core.fact_traces", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "fact_traces", "source_name": "arbitrum_core", "source_description": "", "loader": "", "identifier": "fact_traces", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "arbitrum.core.fact_traces", "created_at": 1666821808.4321206}, "source.crosschain_models.ethereum_core.fact_transactions": {"fqn": ["crosschain_models", "ethereum_core", "fact_transactions"], "database": "ethereum", "schema": "core", "unique_id": "source.crosschain_models.ethereum_core.fact_transactions", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "fact_transactions", "source_name": "ethereum_core", "source_description": "", "loader": "", "identifier": "fact_transactions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.core.fact_transactions", "created_at": 1666882899.9136827}, "source.crosschain_models.ethereum_core.fact_token_transfers": {"fqn": ["crosschain_models", "ethereum_core", "fact_token_transfers"], "database": "ethereum", "schema": "core", "unique_id": "source.crosschain_models.ethereum_core.fact_token_transfers", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "fact_token_transfers", "source_name": "ethereum_core", "source_description": "", "loader": "", "identifier": "fact_token_transfers", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.core.fact_token_transfers", "created_at": 1666882899.9136827}, "source.crosschain_models.ethereum_core.fact_traces": {"fqn": ["crosschain_models", "ethereum_core", "fact_traces"], "database": "ethereum", "schema": "core", "unique_id": "source.crosschain_models.ethereum_core.fact_traces", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "fact_traces", "source_name": "ethereum_core", "source_description": "", "loader": "", "identifier": "fact_traces", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.core.fact_traces", "created_at": 1666882899.9146829}, "source.crosschain_models.ethereum_core.ez_nft_sales": {"fqn": ["crosschain_models", "ethereum_core", "ez_nft_sales"], "database": "ethereum", "schema": "core", "unique_id": "source.crosschain_models.ethereum_core.ez_nft_sales", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "ez_nft_sales", "source_name": "ethereum_core", "source_description": "", "loader": "", "identifier": "ez_nft_sales", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.core.ez_nft_sales", "created_at": 1666882899.9146829}, "source.crosschain_models.ethereum_core.ez_current_balances": {"fqn": ["crosschain_models", "ethereum_core", "ez_current_balances"], "database": "ethereum", "schema": "core", "unique_id": "source.crosschain_models.ethereum_core.ez_current_balances", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "ez_current_balances", "source_name": "ethereum_core", "source_description": "", "loader": "", "identifier": "ez_current_balances", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.core.ez_current_balances", "created_at": 1666882899.9146829}, "source.crosschain_models.ethereum_core.ez_dex_swaps": {"fqn": ["crosschain_models", "ethereum_core", "ez_dex_swaps"], "database": "ethereum", "schema": "core", "unique_id": "source.crosschain_models.ethereum_core.ez_dex_swaps", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "ez_dex_swaps", "source_name": "ethereum_core", "source_description": "", "loader": "", "identifier": "ez_dex_swaps", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.core.ez_dex_swaps", "created_at": 1666882899.9146829}, "source.crosschain_models.BSC.EZ_SWAPS": {"fqn": ["crosschain_models", "BSC", "EZ_SWAPS"], "database": "BSC", "schema": "SUSHI", "unique_id": "source.crosschain_models.BSC.EZ_SWAPS", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "EZ_SWAPS", "source_name": "BSC", "source_description": "", "loader": "", "identifier": "EZ_SWAPS", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "BSC.SUSHI.EZ_SWAPS", "created_at": 1666882899.9146829}, "source.crosschain_models.BSC.EZ_LENDING": {"fqn": ["crosschain_models", "BSC", "EZ_LENDING"], "database": "BSC", "schema": "SUSHI", "unique_id": "source.crosschain_models.BSC.EZ_LENDING", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "EZ_LENDING", "source_name": "BSC", "source_description": "", "loader": "", "identifier": "EZ_LENDING", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "BSC.SUSHI.EZ_LENDING", "created_at": 1666882899.9146829}, "source.crosschain_models.BSC.EZ_BORROWING": {"fqn": ["crosschain_models", "BSC", "EZ_BORROWING"], "database": "BSC", "schema": "SUSHI", "unique_id": "source.crosschain_models.BSC.EZ_BORROWING", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "EZ_BORROWING", "source_name": "BSC", "source_description": "", "loader": "", "identifier": "EZ_BORROWING", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "BSC.SUSHI.EZ_BORROWING", "created_at": 1666882899.9146829}, "source.crosschain_models.ethereum_db_sushi.dim_distributor_reward_schedule": {"fqn": ["crosschain_models", "ethereum_db_sushi", "dim_distributor_reward_schedule"], "database": "ethereum", "schema": "sushi", "unique_id": "source.crosschain_models.ethereum_db_sushi.dim_distributor_reward_schedule", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "dim_distributor_reward_schedule", "source_name": "ethereum_db_sushi", "source_description": "", "loader": "", "identifier": "dim_distributor_reward_schedule", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.sushi.dim_distributor_reward_schedule", "created_at": 1666882899.9146829}, "source.crosschain_models.ethereum_db_sushi.ez_lending": {"fqn": ["crosschain_models", "ethereum_db_sushi", "ez_lending"], "database": "ethereum", "schema": "sushi", "unique_id": "source.crosschain_models.ethereum_db_sushi.ez_lending", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "ez_lending", "source_name": "ethereum_db_sushi", "source_description": "", "loader": "", "identifier": "ez_lending", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.sushi.ez_lending", "created_at": 1666882899.9146829}, "source.crosschain_models.ethereum_db_sushi.ez_borrowing": {"fqn": ["crosschain_models", "ethereum_db_sushi", "ez_borrowing"], "database": "ethereum", "schema": "sushi", "unique_id": "source.crosschain_models.ethereum_db_sushi.ez_borrowing", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "ez_borrowing", "source_name": "ethereum_db_sushi", "source_description": "", "loader": "", "identifier": "ez_borrowing", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.sushi.ez_borrowing", "created_at": 1666882899.9146829}, "source.crosschain_models.Gnosis.EZ_SWAPS": {"fqn": ["crosschain_models", "Gnosis", "EZ_SWAPS"], "database": "GNOSIS", "schema": "SUSHI", "unique_id": "source.crosschain_models.Gnosis.EZ_SWAPS", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "EZ_SWAPS", "source_name": "Gnosis", "source_description": "", "loader": "", "identifier": "EZ_SWAPS", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "GNOSIS.SUSHI.EZ_SWAPS", "created_at": 1666882899.9146829}, "source.crosschain_models.Gnosis.EZ_LENDING": {"fqn": ["crosschain_models", "Gnosis", "EZ_LENDING"], "database": "GNOSIS", "schema": "SUSHI", "unique_id": "source.crosschain_models.Gnosis.EZ_LENDING", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "EZ_LENDING", "source_name": "Gnosis", "source_description": "", "loader": "", "identifier": "EZ_LENDING", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "GNOSIS.SUSHI.EZ_LENDING", "created_at": 1666882899.9146829}, "source.crosschain_models.Gnosis.EZ_BORROWING": {"fqn": ["crosschain_models", "Gnosis", "EZ_BORROWING"], "database": "GNOSIS", "schema": "SUSHI", "unique_id": "source.crosschain_models.Gnosis.EZ_BORROWING", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "EZ_BORROWING", "source_name": "Gnosis", "source_description": "", "loader": "", "identifier": "EZ_BORROWING", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "GNOSIS.SUSHI.EZ_BORROWING", "created_at": 1666882899.9146829}, "source.crosschain_models.Optimism.EZ_SWAPS": {"fqn": ["crosschain_models", "Optimism", "EZ_SWAPS"], "database": "OPTIMISM", "schema": "SUSHI", "unique_id": "source.crosschain_models.Optimism.EZ_SWAPS", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "EZ_SWAPS", "source_name": "Optimism", "source_description": "", "loader": "", "identifier": "EZ_SWAPS", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "OPTIMISM.SUSHI.EZ_SWAPS", "created_at": 1666882899.9146829}, "source.crosschain_models.Avalanche.EZ_SWAPS": {"fqn": ["crosschain_models", "Avalanche", "EZ_SWAPS"], "database": "AVALANCHE", "schema": "SUSHI", "unique_id": "source.crosschain_models.Avalanche.EZ_SWAPS", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "EZ_SWAPS", "source_name": "Avalanche", "source_description": "", "loader": "", "identifier": "EZ_SWAPS", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "AVALANCHE.SUSHI.EZ_SWAPS", "created_at": 1666882899.9156823}, "source.crosschain_models.Avalanche.EZ_LENDING": {"fqn": ["crosschain_models", "Avalanche", "EZ_LENDING"], "database": "AVALANCHE", "schema": "SUSHI", "unique_id": "source.crosschain_models.Avalanche.EZ_LENDING", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "EZ_LENDING", "source_name": "Avalanche", "source_description": "", "loader": "", "identifier": "EZ_LENDING", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "AVALANCHE.SUSHI.EZ_LENDING", "created_at": 1666882899.9156823}, "source.crosschain_models.Avalanche.EZ_BORROWING": {"fqn": ["crosschain_models", "Avalanche", "EZ_BORROWING"], "database": "AVALANCHE", "schema": "SUSHI", "unique_id": "source.crosschain_models.Avalanche.EZ_BORROWING", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "EZ_BORROWING", "source_name": "Avalanche", "source_description": "", "loader": "", "identifier": "EZ_BORROWING", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "AVALANCHE.SUSHI.EZ_BORROWING", "created_at": 1666882899.9156823}, "source.crosschain_models.Harmony_db.EZ_SUSHI_SWAPS": {"fqn": ["crosschain_models", "Harmony_db", "EZ_SUSHI_SWAPS"], "database": "HARMONY", "schema": "PROD", "unique_id": "source.crosschain_models.Harmony_db.EZ_SUSHI_SWAPS", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "EZ_SUSHI_SWAPS", "source_name": "Harmony_db", "source_description": "", "loader": "", "identifier": "EZ_SUSHI_SWAPS", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HARMONY.PROD.EZ_SUSHI_SWAPS", "created_at": 1666882899.9156823}, "source.crosschain_models.polygon.EZ_SWAPS": {"fqn": ["crosschain_models", "polygon", "EZ_SWAPS"], "database": "POLYGON", "schema": "SUSHI", "unique_id": "source.crosschain_models.polygon.EZ_SWAPS", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "EZ_SWAPS", "source_name": "polygon", "source_description": "", "loader": "", "identifier": "EZ_SWAPS", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "POLYGON.SUSHI.EZ_SWAPS", "created_at": 1666882899.9156823}, "source.crosschain_models.polygon.EZ_LENDING": {"fqn": ["crosschain_models", "polygon", "EZ_LENDING"], "database": "POLYGON", "schema": "SUSHI", "unique_id": "source.crosschain_models.polygon.EZ_LENDING", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "EZ_LENDING", "source_name": "polygon", "source_description": "", "loader": "", "identifier": "EZ_LENDING", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "POLYGON.SUSHI.EZ_LENDING", "created_at": 1666882899.9156823}, "source.crosschain_models.polygon.EZ_BORROWING": {"fqn": ["crosschain_models", "polygon", "EZ_BORROWING"], "database": "POLYGON", "schema": "SUSHI", "unique_id": "source.crosschain_models.polygon.EZ_BORROWING", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "EZ_BORROWING", "source_name": "polygon", "source_description": "", "loader": "", "identifier": "EZ_BORROWING", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "POLYGON.SUSHI.EZ_BORROWING", "created_at": 1666882899.9156823}, "source.crosschain_models.Arbitrum.EZ_SWAPS": {"fqn": ["crosschain_models", "Arbitrum", "EZ_SWAPS"], "database": "ARBITRUM", "schema": "SUSHI", "unique_id": "source.crosschain_models.Arbitrum.EZ_SWAPS", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "EZ_SWAPS", "source_name": "Arbitrum", "source_description": "", "loader": "", "identifier": "EZ_SWAPS", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ARBITRUM.SUSHI.EZ_SWAPS", "created_at": 1666882899.9156823}, "source.crosschain_models.Arbitrum.EZ_LENDING": {"fqn": ["crosschain_models", "Arbitrum", "EZ_LENDING"], "database": "ARBITRUM", "schema": "SUSHI", "unique_id": "source.crosschain_models.Arbitrum.EZ_LENDING", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "EZ_LENDING", "source_name": "Arbitrum", "source_description": "", "loader": "", "identifier": "EZ_LENDING", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ARBITRUM.SUSHI.EZ_LENDING", "created_at": 1666882899.9156823}, "source.crosschain_models.Arbitrum.EZ_BORROWING": {"fqn": ["crosschain_models", "Arbitrum", "EZ_BORROWING"], "database": "ARBITRUM", "schema": "SUSHI", "unique_id": "source.crosschain_models.Arbitrum.EZ_BORROWING", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "EZ_BORROWING", "source_name": "Arbitrum", "source_description": "", "loader": "", "identifier": "EZ_BORROWING", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ARBITRUM.SUSHI.EZ_BORROWING", "created_at": 1666882899.9156823}}, "macros": {"macro.crosschain_models.create_sps": {"unique_id": "macro.crosschain_models.create_sps", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\create_sps.sql", "original_file_path": "macros\\create_sps.sql", "name": "create_sps", "macro_sql": "{% macro create_sps() %}\r\n    {% if target.database == 'CROSSCHAIN' %}\r\n        CREATE schema IF NOT EXISTS _internal;\r\n{{ sp_create_prod_clone('_internal') }};\r\n    {% endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.crosschain_models.sp_create_prod_clone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4349077}, "macro.crosschain_models.create_tasks": {"unique_id": "macro.crosschain_models.create_tasks", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\create_tasks.sql", "original_file_path": "macros\\create_tasks.sql", "name": "create_tasks", "macro_sql": "{% macro create_tasks() %}\r\n    {% if target.database == 'CROSSCHAIN' %}\r\n        {{ task_run_sp_bulk_get_coin_market_cap_prices('resume') }};\r\n        {{ task_run_sp_bulk_get_coin_gecko_prices('resume') }};\r\n    {% else %}\r\n        {{ task_run_sp_bulk_get_coin_market_cap_prices('suspend') }};\r\n        {{ task_run_sp_bulk_get_coin_gecko_prices('suspend') }};\r\n    {% endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.crosschain_models.task_run_sp_bulk_get_coin_market_cap_prices", "macro.crosschain_models.task_run_sp_bulk_get_coin_gecko_prices"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4359133}, "macro.crosschain_models.create_udfs": {"unique_id": "macro.crosschain_models.create_udfs", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\create_udfs.sql", "original_file_path": "macros\\create_udfs.sql", "name": "create_udfs", "macro_sql": "{% macro create_udfs() %}\r\n    {% set sql %}\r\n        CREATE schema if NOT EXISTS streamline;\r\n        {{ udf_bulk_fill_cmc_historical_price_gaps() }};\r\n        {{ udf_bulk_get_coin_gecko_asset_metadata() }};\r\n        {{ udf_bulk_get_coin_market_cap_asset_metadata() }};\r\n        {{ udf_bulk_get_coin_market_cap_prices() }};\r\n        {{ udf_bulk_get_coin_gecko_prices() }};\r\n        {{ udf_bulk_get_coin_market_cap_hourly_ohlc() }};\r\n        {{ udf_bulk_get_coin_gecko_ohlc() }};\r\n        {{ udf_bulk_get_coin_gecko_asset_market_data_historical() }};\r\n    {% endset %}\r\n    {% do run_query(sql) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.crosschain_models.udf_bulk_fill_cmc_historical_price_gaps", "macro.crosschain_models.udf_bulk_get_coin_gecko_asset_metadata", "macro.crosschain_models.udf_bulk_get_coin_market_cap_asset_metadata", "macro.crosschain_models.udf_bulk_get_coin_market_cap_prices", "macro.crosschain_models.udf_bulk_get_coin_gecko_prices", "macro.crosschain_models.udf_bulk_get_coin_market_cap_hourly_ohlc", "macro.crosschain_models.udf_bulk_get_coin_gecko_ohlc", "macro.crosschain_models.udf_bulk_get_coin_gecko_asset_market_data_historical", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4379122}, "macro.crosschain_models.generate_schema_name": {"unique_id": "macro.crosschain_models.generate_schema_name", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\custom_naming_macros.sql", "original_file_path": "macros\\custom_naming_macros.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\r\n    {% set node_name = node.name %}\r\n    {% set split_name = node_name.split('__') %}\r\n    {{ split_name[0] | trim }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4379122}, "macro.crosschain_models.generate_alias_name": {"unique_id": "macro.crosschain_models.generate_alias_name", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\custom_naming_macros.sql", "original_file_path": "macros\\custom_naming_macros.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\r\n    {% set node_name = node.name %}\r\n    {% set split_name = node_name.split('__') %}\r\n    {{ split_name[1] | trim }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4389122}, "macro.crosschain_models.run_sp_copy_coin_gecko_price_data_to_legacy": {"unique_id": "macro.crosschain_models.run_sp_copy_coin_gecko_price_data_to_legacy", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\run_sp_copy_coin_gecko_price_data_to_legacy.sql", "original_file_path": "macros\\run_sp_copy_coin_gecko_price_data_to_legacy.sql", "name": "run_sp_copy_coin_gecko_price_data_to_legacy", "macro_sql": "{% macro run_sp_copy_coin_gecko_price_data_to_legacy() %}\r\n{% if target.database == 'CROSSCHAIN' %}\r\n    {% set sql %}\r\n    call silver.copy_coin_gecko_price_data_to_legacy('flipside_prod_db');\r\n    {% endset %}\r\n{% else %}\r\n    {% set sql %}\r\n    call silver.copy_coin_gecko_price_data_to_legacy('flipside_dev_db');\r\n    {% endset %}\r\n{% endif %}\r\n\r\n{% do run_query(sql) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4389122}, "macro.crosschain_models.run_sp_create_prod_clone": {"unique_id": "macro.crosschain_models.run_sp_create_prod_clone", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\run_sp_create_prod_clone.sql", "original_file_path": "macros\\run_sp_create_prod_clone.sql", "name": "run_sp_create_prod_clone", "macro_sql": "{% macro run_sp_create_prod_clone() %}\r\n    {% set clone_query %}\r\n    call crosschain._internal.create_prod_clone(\r\n        'crosschain',\r\n        'crosschain_dev',\r\n        'internal_dev'\r\n    );\r\n{% endset %}\r\n    {% do run_query(clone_query) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4399128}, "macro.crosschain_models.sp_create_copy_coin_gecko_price_data_to_legacy": {"unique_id": "macro.crosschain_models.sp_create_copy_coin_gecko_price_data_to_legacy", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\sp_create_copy_coin_gecko_price_data_to_legacy.sql", "original_file_path": "macros\\sp_create_copy_coin_gecko_price_data_to_legacy.sql", "name": "sp_create_copy_coin_gecko_price_data_to_legacy", "macro_sql": "{% macro sp_create_copy_coin_gecko_price_data_to_legacy(target_schema) %}\r\n{% set sql %}\r\ncreate or replace procedure silver.copy_coin_gecko_price_data_to_legacy(legacy_db_name string)\r\nreturns boolean \r\nlanguage javascript\r\nexecute as caller\r\nas\r\n$$\r\n    snowflake.execute({sqlText: `BEGIN TRANSACTION;`});\r\n    try {\r\n        stmt = `merge into ${LEGACY_DB_NAME}.silver.prices_v2 a using (\r\n                    with base_metadata as (\r\n                        select *\r\n                        from flipside_prod_db.silver.market_asset_metadata A\r\n                        where (\r\n                          A.platform_id = '1027'\r\n                          OR A.asset_id = '1027'\r\n                          OR A.platform_id = 'ethereum'\r\n                        )\r\n                        AND (\r\n                          token_address IS NOT NULL\r\n                          OR symbol = 'ETH'\r\n                        )\r\n                    )\r\n                    select \r\n                        distinct a.id as asset_id, \r\n                        'coingecko' as provider,\r\n                        to_timestamp_ntz(d.value[0]::number,3) as recorded_at, \r\n                        d.value[4]::float as price,\r\n                        md.name, \r\n                        md.symbol\r\n                    from streamline.{{ target.database }}.asset_ohlc_coin_gecko_api a\r\n                    left outer join base_metadata md on md.asset_id = a.id\r\n                    left join table(flatten(data)) d\r\n                    where recorded_at >= current_date - 1\r\n                    qualify(row_number() over (partition by asset_id, provider, recorded_at, name, symbol order by price)) = 1\r\n                ) b \r\n                on a.asset_id = b.asset_id \r\n                    and a.provider = b.provider \r\n                    and a.recorded_at = b.recorded_at \r\n                    and a.name = b.name \r\n                    and a.symbol = b.symbol\r\n                when matched then \r\n                    update \r\n                    set a.price = b.price\r\n                when not matched then \r\n                    insert (asset_id, provider, recorded_at, name, symbol, price)\r\n                    values (b.asset_id, b.provider, b.recorded_at, b.name, b.symbol, b.price);`\r\n         snowflake.execute({sqlText: stmt}); \r\n         snowflake.execute({sqlText: `COMMIT;`});\r\n     } catch (err) {\r\n        snowflake.execute({sqlText: `ROLLBACK;`});\r\n        throw(err);\r\n    }\r\n    \r\n    return true\r\n$$;\r\n{% endset %}\r\n{% do run_query(sql) %}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4409127}, "macro.crosschain_models.sp_create_prod_clone": {"unique_id": "macro.crosschain_models.sp_create_prod_clone", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\sp_create_prod_clone.sql", "original_file_path": "macros\\sp_create_prod_clone.sql", "name": "sp_create_prod_clone", "macro_sql": "{% macro sp_create_prod_clone(target_schema) -%}\r\n\r\ncreate or replace procedure {{ target_schema }}.create_prod_clone(source_db_name string, destination_db_name string, role_name string)\r\nreturns boolean \r\nlanguage javascript\r\nexecute as caller\r\nas\r\n$$\r\n    snowflake.execute({sqlText: `BEGIN TRANSACTION;`});\r\n    try {\r\n        snowflake.execute({sqlText: `DROP DATABASE IF EXISTS ${DESTINATION_DB_NAME}`});\r\n        snowflake.execute({sqlText: `CREATE DATABASE ${DESTINATION_DB_NAME} CLONE ${SOURCE_DB_NAME}`});\r\n        snowflake.execute({sqlText: `DROP SCHEMA ${DESTINATION_DB_NAME}._INTERNAL`}); /* this only needs to be in prod t*/\r\n\r\n        var existing_schemas = snowflake.execute({sqlText: `SELECT table_schema\r\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.TABLE_PRIVILEGES\r\n            WHERE grantor IS NOT NULL\r\n            GROUP BY 1\r\n            UNION\r\n            SELECT 'PUBLIC';`});\r\n\r\n        while (existing_schemas.next()) {\r\n            var schema = existing_schemas.getColumnValue(1);\r\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON SCHEMA ${DESTINATION_DB_NAME}.${schema} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\r\n            snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE FUNCTIONS IN SCHEMA ${DESTINATION_DB_NAME}.${schema} FROM ROLE DBT_CLOUD_CROSSCHAIN`});\r\n            snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE PROCEDURES IN SCHEMA ${DESTINATION_DB_NAME}.${schema} FROM ROLE DBT_CLOUD_CROSSCHAIN`});\r\n            snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE TABLES IN SCHEMA ${DESTINATION_DB_NAME}.${schema} FROM ROLE DBT_CLOUD_CROSSCHAIN`});\r\n            snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE VIEWS IN SCHEMA ${DESTINATION_DB_NAME}.${schema} FROM ROLE DBT_CLOUD_CROSSCHAIN`});\r\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE FUNCTIONS IN SCHEMA ${DESTINATION_DB_NAME}.${schema} TO ROLE ${ROLE_NAME};`});\r\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE PROCEDURES IN SCHEMA ${DESTINATION_DB_NAME}.${schema} TO ROLE ${ROLE_NAME};`});\r\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE TABLES IN SCHEMA ${DESTINATION_DB_NAME}.${schema} TO ROLE ${ROLE_NAME};`});\r\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE VIEWS IN SCHEMA ${DESTINATION_DB_NAME}.${schema} TO ROLE ${ROLE_NAME};`});\r\n        }\r\n\r\n        var existing_tables = snowflake.execute({sqlText: `SELECT table_schema, table_name\r\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.TABLE_PRIVILEGES\r\n            WHERE grantor IS NOT NULL\r\n            GROUP BY 1,2;`});\r\n\r\n        while (existing_tables.next()) {\r\n            var schema = existing_tables.getColumnValue(1);\r\n            var table_name = existing_tables.getColumnValue(2);\r\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TABLE ${DESTINATION_DB_NAME}.${schema}.${table_name} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\r\n        }\r\n\r\n        var existing_functions = snowflake.execute({sqlText: `SELECT function_schema, function_name, concat('(',array_to_string(regexp_substr_all(argument_signature, 'VARCHAR|NUMBER|FLOAT|ARRAY|VARIANT|OBJECT|DOUBLE'),','),')') as argument_signature\r\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.FUNCTIONS;`});\r\n\r\n        while (existing_functions.next()) {\r\n            var schema = existing_functions.getColumnValue(1);\r\n            var function_name = existing_functions.getColumnValue(2);\r\n            var argument_signature = existing_functions.getColumnValue(3);\r\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUNCTION ${DESTINATION_DB_NAME}.${schema}.${function_name}${argument_signature} to role ${ROLE_NAME} REVOKE CURRENT GRANTS;`});\r\n        }\r\n\r\n        var existing_procedures = snowflake.execute({sqlText: `SELECT procedure_schema, procedure_name, concat('(',array_to_string(regexp_substr_all(argument_signature, 'VARCHAR|NUMBER|FLOAT|ARRAY|VARIANT|OBJECT|DOUBLE'),','),')') as argument_signature\r\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.PROCEDURES;`});\r\n\r\n        while (existing_procedures.next()) {\r\n            var schema = existing_procedures.getColumnValue(1);\r\n            var procedure_name = existing_procedures.getColumnValue(2);\r\n            var argument_signature = existing_procedures.getColumnValue(3);\r\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON PROCEDURE ${DESTINATION_DB_NAME}.${schema}.${procedure_name}${argument_signature} to role ${ROLE_NAME} REVOKE CURRENT GRANTS;`});\r\n        }\r\n\r\n        var existing_tasks = snowflake.execute({sqlText: `SHOW TASKS IN DATABASE ${DESTINATION_DB_NAME};`});\r\n\r\n        while (existing_tasks.next()) {\r\n            var schema = existing_tasks.getColumnValue(5)\r\n            var task_name = existing_tasks.getColumnValue(2)\r\n            snowflake.execute({sqlText: `ALTER TASK ${DESTINATION_DB_NAME}.${schema}.${task_name} SUSPEND;`})\r\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TASK ${DESTINATION_DB_NAME}.${schema}.${task_name} to role ${ROLE_NAME} REVOKE CURRENT GRANTS;`});\r\n        }\r\n\r\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON TASK ${DESTINATION_DB_NAME}.silver.run_sp_bulk_get_coin_gecko_prices TO ROLE ${ROLE_NAME};`})\r\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON TASK ${DESTINATION_DB_NAME}.silver.run_sp_bulk_get_coin_market_cap_prices TO ROLE ${ROLE_NAME};`})\r\n\r\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`})\r\n        snowflake.execute({sqlText: `COMMIT;`});\r\n    } catch (err) {\r\n        snowflake.execute({sqlText: `ROLLBACK;`});\r\n        throw(err);\r\n    }\r\n    \r\n    return true\r\n$$\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4429133}, "macro.crosschain_models.sp_refresh_external_table_by_recent_date": {"unique_id": "macro.crosschain_models.sp_refresh_external_table_by_recent_date", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\streamline\\sp_refresh_external_table_by_recent_date.sql", "original_file_path": "macros\\streamline\\sp_refresh_external_table_by_recent_date.sql", "name": "sp_refresh_external_table_by_recent_date", "macro_sql": "{% macro sp_refresh_external_table_by_recent_date() %}\r\n{% set sql %}\r\ncreate or replace procedure streamline.refresh_external_table_by_recent_date(external_table_name string)\r\nreturns string\r\nlanguage sql\r\nas\r\n$$\r\n    declare \r\n        path string;\r\n        select_stmt string;\r\n        refresh_stmt string;\r\n        select_stmt2 string;\r\n        refresh_stmt2 string;\r\n        res resultset;\r\n    begin \r\n        select_stmt := 'select concat(\\'_inserted_date=\\',current_date::string,\\'/\\') as path;';\r\n        select_stmt2 := 'select concat(\\'_inserted_date=\\',(current_date-1)::string,\\'/\\') as path;';\r\n        res := (execute immediate :select_stmt);\r\n        let c1 cursor for res;\r\n        for row_variable in c1 do\r\n            path := row_variable.path;\r\n        end for;\r\n        refresh_stmt := 'alter external table streamline.{{ target.database }}.' || :external_table_name || ' refresh \\'' || :PATH || '\\'';\r\n        res := (execute immediate :refresh_stmt);\r\n\r\n        res := (execute immediate :select_stmt2);\r\n        let c2 cursor for res;\r\n        for row_variable in c2 do\r\n            path := row_variable.path;\r\n        end for;\r\n        refresh_stmt2 := 'alter external table streamline.{{ target.database }}.' || :external_table_name || ' refresh \\'' || :PATH || '\\'';\r\n        res := (execute immediate :refresh_stmt2);\r\n        return 'table refreshed with ' || :refresh_stmt || ' and ' || :refresh_stmt2;\r\n    end;\r\n$${% endset %}\r\n{% do run_query(sql) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4439127}, "macro.crosschain_models.run_sp_bulk_fill_cmc_historical_price_gaps": {"unique_id": "macro.crosschain_models.run_sp_bulk_fill_cmc_historical_price_gaps", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\streamline\\fill_cmc_historical_price_gaps\\run_sp_bulk_fill_cmc_historical_price_gaps.sql", "original_file_path": "macros\\streamline\\fill_cmc_historical_price_gaps\\run_sp_bulk_fill_cmc_historical_price_gaps.sql", "name": "run_sp_bulk_fill_cmc_historical_price_gaps", "macro_sql": "{% macro run_sp_bulk_fill_cmc_historical_price_gaps() %}\r\n    {% set sql %}\r\n        call silver.sp_bulk_fill_cmc_historical_price_gaps();\r\n    {% endset %}\r\n\r\n    {% do run_query(sql) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4439127}, "macro.crosschain_models.sp_create_bulk_fill_cmc_historical_price_gaps": {"unique_id": "macro.crosschain_models.sp_create_bulk_fill_cmc_historical_price_gaps", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\streamline\\fill_cmc_historical_price_gaps\\sp_create_bulk_fill_cmc_historical_price_gaps.sql", "original_file_path": "macros\\streamline\\fill_cmc_historical_price_gaps\\sp_create_bulk_fill_cmc_historical_price_gaps.sql", "name": "sp_create_bulk_fill_cmc_historical_price_gaps", "macro_sql": "{% macro sp_create_bulk_fill_cmc_historical_price_gaps() %}\r\n{% set sql %}\r\nCREATE OR REPLACE PROCEDURE silver.sp_bulk_fill_cmc_historical_price_gaps() \r\nRETURNS variant \r\nLANGUAGE SQL \r\nAS \r\n$$\r\n  DECLARE\r\n    RESULT VARCHAR;\r\n    row_cnt INTEGER;\r\n  BEGIN\r\n    row_cnt:= (\r\n      SELECT\r\n        COUNT(1)\r\n      FROM\r\n        streamline.legacy_prices_gaps\r\n    );\r\n    if (\r\n        row_cnt > 0\r\n      ) THEN RESULT:= (\r\n        SELECT\r\n          silver.udf_bulk_fill_cmc_historical_price_gaps()\r\n      );\r\n      ELSE RESULT:= NULL;\r\n    END if;\r\n    RETURN RESULT;\r\n  END;\r\n$${% endset %}\r\n{% do run_query(sql) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4449124}, "macro.crosschain_models.udf_bulk_fill_cmc_historical_price_gaps": {"unique_id": "macro.crosschain_models.udf_bulk_fill_cmc_historical_price_gaps", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\streamline\\fill_cmc_historical_price_gaps\\udf_bulk_fill_cmc_historical_price_gaps.sql", "original_file_path": "macros\\streamline\\fill_cmc_historical_price_gaps\\udf_bulk_fill_cmc_historical_price_gaps.sql", "name": "udf_bulk_fill_cmc_historical_price_gaps", "macro_sql": "{% macro udf_bulk_fill_cmc_historical_price_gaps() %}\r\n    CREATE\r\n    OR REPLACE EXTERNAL FUNCTION silver.udf_bulk_fill_cmc_historical_price_gaps() returns text api_integration = aws_crosschain_api_dev AS {% if target.database == \"CROSSCHAIN\" -%}\r\n        'https://q2il6n5mmg.execute-api.us-east-1.amazonaws.com/prod/bulk_fill_coin_market_cap_historical_price_gaps'\r\n    {% else %}\r\n        'https://ubuxgfotp2.execute-api.us-east-1.amazonaws.com/dev/bulk_fill_coin_market_cap_historical_price_gaps'\r\n    {%- endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4449124}, "macro.crosschain_models.task_bulk_get_coin_gecko_asset_market_data_historical": {"unique_id": "macro.crosschain_models.task_bulk_get_coin_gecko_asset_market_data_historical", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\streamline\\get_coin_gecko_asset_market_data_historical\\task_get_coin_gecko_asset_market_data_historical.sql", "original_file_path": "macros\\streamline\\get_coin_gecko_asset_market_data_historical\\task_get_coin_gecko_asset_market_data_historical.sql", "name": "task_bulk_get_coin_gecko_asset_market_data_historical", "macro_sql": "{% macro task_bulk_get_coin_gecko_asset_market_data_historical() %}\r\n{% set sql %}\r\nexecute immediate 'create or replace task streamline.bulk_get_coin_gecko_asset_market_data_historical\r\n    warehouse = dbt_cloud_crosschain\r\n    allow_overlapping_execution = false\r\n    schedule = \\'USING CRON */15 * * * * UTC\\'\r\nas\r\nBEGIN\r\n    call streamline.refresh_external_table_by_recent_date(\\'asset_historical_hourly_market_data_coin_gecko_api\\');\r\n\r\n    select streamline.udf_bulk_get_coin_gecko_asset_market_data_historical()\r\n    where exists (\r\n        select 1\r\n        from streamline.coin_gecko_historical_asset_market_data_hourly\r\n        limit 1\r\n    );\r\nEND;'\r\n{% endset %}\r\n{% do run_query(sql) %}\r\n\r\n{% if target.database == 'CROSSCHAIN' %}\r\n    {% set sql %}\r\n        alter task streamline.bulk_get_coin_gecko_asset_market_data_historical resume;\r\n    {% endset %}\r\n    {% do run_query(sql) %}\r\n{% endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4459124}, "macro.crosschain_models.udf_bulk_get_coin_gecko_asset_market_data_historical": {"unique_id": "macro.crosschain_models.udf_bulk_get_coin_gecko_asset_market_data_historical", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\streamline\\get_coin_gecko_asset_market_data_historical\\udf_bulk_get_coin_gecko_asset_market_data_historical.sql", "original_file_path": "macros\\streamline\\get_coin_gecko_asset_market_data_historical\\udf_bulk_get_coin_gecko_asset_market_data_historical.sql", "name": "udf_bulk_get_coin_gecko_asset_market_data_historical", "macro_sql": "{% macro udf_bulk_get_coin_gecko_asset_market_data_historical() %}\r\n    CREATE\r\n    OR REPLACE EXTERNAL FUNCTION streamline.udf_bulk_get_coin_gecko_asset_market_data_historical() returns text api_integration = aws_crosschain_api_dev AS {% if target.database == \"CROSSCHAIN\" -%}\r\n        'https://q2il6n5mmg.execute-api.us-east-1.amazonaws.com/prod/bulk_get_coin_gecko_asset_market_data_historical'\r\n    {% else %}\r\n        'https://ubuxgfotp2.execute-api.us-east-1.amazonaws.com/dev/bulk_get_coin_gecko_asset_market_data_historical'\r\n    {%- endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4469125}, "macro.crosschain_models.run_sp_bulk_get_coin_gecko_asset_metadata": {"unique_id": "macro.crosschain_models.run_sp_bulk_get_coin_gecko_asset_metadata", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\streamline\\get_coin_gecko_asset_metadata\\run_sp_bulk_get_coin_gecko_asset_metadata.sql", "original_file_path": "macros\\streamline\\get_coin_gecko_asset_metadata\\run_sp_bulk_get_coin_gecko_asset_metadata.sql", "name": "run_sp_bulk_get_coin_gecko_asset_metadata", "macro_sql": "{% macro run_sp_bulk_get_coin_gecko_asset_metadata() %}\r\n    {% set sql %}\r\n        call silver.sp_bulk_get_coin_gecko_asset_metadata();\r\n    {% endset %}\r\n\r\n    {% do run_query(sql) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4469125}, "macro.crosschain_models.sp_create_bulk_get_coin_gecko_asset_metadata": {"unique_id": "macro.crosschain_models.sp_create_bulk_get_coin_gecko_asset_metadata", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\streamline\\get_coin_gecko_asset_metadata\\sp_create_bulk_get_coin_gecko_asset_metadata.sql", "original_file_path": "macros\\streamline\\get_coin_gecko_asset_metadata\\sp_create_bulk_get_coin_gecko_asset_metadata.sql", "name": "sp_create_bulk_get_coin_gecko_asset_metadata", "macro_sql": "{% macro sp_create_bulk_get_coin_gecko_asset_metadata() %}\r\n{% set sql %}\r\nCREATE OR REPLACE PROCEDURE silver.sp_bulk_get_coin_gecko_asset_metadata() \r\nRETURNS variant \r\nLANGUAGE SQL \r\nAS \r\n$$\r\n  DECLARE\r\n    RESULT VARCHAR;\r\n  BEGIN\r\n    RESULT:= (\r\n        SELECT\r\n          silver.udf_bulk_get_coin_gecko_asset_metadata()\r\n      );\r\n    RETURN RESULT;\r\n  END;\r\n$${% endset %}\r\n{% do run_query(sql) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4479127}, "macro.crosschain_models.udf_bulk_get_coin_gecko_asset_metadata": {"unique_id": "macro.crosschain_models.udf_bulk_get_coin_gecko_asset_metadata", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\streamline\\get_coin_gecko_asset_metadata\\udf_bulk_get_coin_gecko_asset_metadata.sql", "original_file_path": "macros\\streamline\\get_coin_gecko_asset_metadata\\udf_bulk_get_coin_gecko_asset_metadata.sql", "name": "udf_bulk_get_coin_gecko_asset_metadata", "macro_sql": "{% macro udf_bulk_get_coin_gecko_asset_metadata() %}\r\n    CREATE\r\n    OR REPLACE EXTERNAL FUNCTION silver.udf_bulk_get_coin_gecko_asset_metadata() returns text api_integration = aws_crosschain_api_dev AS {% if target.database == \"CROSSCHAIN\" -%}\r\n        'https://q2il6n5mmg.execute-api.us-east-1.amazonaws.com/prod/bulk_get_coin_gecko_asset_metadata'\r\n    {% else %}\r\n        'https://ubuxgfotp2.execute-api.us-east-1.amazonaws.com/dev/bulk_get_coin_gecko_asset_metadata'\r\n    {%- endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4479127}, "macro.crosschain_models.task_bulk_get_coin_gecko_ohlc": {"unique_id": "macro.crosschain_models.task_bulk_get_coin_gecko_ohlc", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\streamline\\get_coin_gecko_ohlc\\task_get_coin_gecko_ohlc.sql", "original_file_path": "macros\\streamline\\get_coin_gecko_ohlc\\task_get_coin_gecko_ohlc.sql", "name": "task_bulk_get_coin_gecko_ohlc", "macro_sql": "{% macro task_bulk_get_coin_gecko_ohlc() %}\r\n{% set sql %}\r\nexecute immediate 'create or replace task streamline.bulk_get_coin_gecko_ohlc\r\n    warehouse = dbt_cloud_crosschain\r\n    allow_overlapping_execution = false\r\n    schedule = \\'USING CRON 15 0 * * * UTC\\'\r\nas\r\nBEGIN\r\n    call streamline.refresh_external_table_by_recent_date(\\'asset_metadata_coin_gecko_api\\');\r\n    call streamline.refresh_external_table_by_recent_date(\\'asset_ohlc_coin_gecko_api\\');\r\n\r\n    select streamline.udf_bulk_get_coin_gecko_ohlc()\r\n    where exists (\r\n        select 1\r\n        from streamline.all_unknown_coin_gecko_asset_ohlc\r\n        limit 1\r\n    );\r\nEND;'\r\n{% endset %}\r\n{% do run_query(sql) %}\r\n\r\n{% if target.database == 'CROSSCHAIN' %}\r\n    {% set sql %}\r\n        alter task streamline.bulk_get_coin_gecko_ohlc resume;\r\n    {% endset %}\r\n    {% do run_query(sql) %}\r\n{% endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4489129}, "macro.crosschain_models.udf_bulk_get_coin_gecko_ohlc": {"unique_id": "macro.crosschain_models.udf_bulk_get_coin_gecko_ohlc", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\streamline\\get_coin_gecko_ohlc\\udf_bulk_get_coin_gecko_ohlc.sql", "original_file_path": "macros\\streamline\\get_coin_gecko_ohlc\\udf_bulk_get_coin_gecko_ohlc.sql", "name": "udf_bulk_get_coin_gecko_ohlc", "macro_sql": "{% macro udf_bulk_get_coin_gecko_ohlc() %}\r\n    CREATE\r\n    OR REPLACE EXTERNAL FUNCTION streamline.udf_bulk_get_coin_gecko_ohlc() returns text api_integration = aws_crosschain_api_dev AS {% if target.database == \"CROSSCHAIN\" -%}\r\n        'https://q2il6n5mmg.execute-api.us-east-1.amazonaws.com/prod/bulk_get_coin_gecko_ohlc'\r\n    {% else %}\r\n        'https://ubuxgfotp2.execute-api.us-east-1.amazonaws.com/dev/bulk_get_coin_gecko_ohlc'\r\n    {%- endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.449912}, "macro.crosschain_models.sp_create_bulk_get_coin_gecko_prices": {"unique_id": "macro.crosschain_models.sp_create_bulk_get_coin_gecko_prices", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\streamline\\get_coin_gecko_prices\\sp_create_bulk_get_coin_gecko_prices.sql", "original_file_path": "macros\\streamline\\get_coin_gecko_prices\\sp_create_bulk_get_coin_gecko_prices.sql", "name": "sp_create_bulk_get_coin_gecko_prices", "macro_sql": "{% macro sp_create_bulk_get_coin_gecko_prices() %}\r\n{% set sql %}\r\nCREATE OR REPLACE PROCEDURE silver.sp_bulk_get_coin_gecko_prices() \r\nRETURNS variant \r\nLANGUAGE SQL \r\nAS \r\n$$\r\n  DECLARE\r\n    RESULT VARCHAR;\r\n  BEGIN\r\n    RESULT:= (\r\n        SELECT\r\n          silver.udf_bulk_get_coin_gecko_prices()\r\n      );\r\n    RETURN RESULT;\r\n  END;\r\n$${% endset %}\r\n{% do run_query(sql) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.449912}, "macro.crosschain_models.task_run_sp_bulk_get_coin_gecko_prices": {"unique_id": "macro.crosschain_models.task_run_sp_bulk_get_coin_gecko_prices", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\streamline\\get_coin_gecko_prices\\task_run_sp_bulk_get_coin_gecko_prices.sql", "original_file_path": "macros\\streamline\\get_coin_gecko_prices\\task_run_sp_bulk_get_coin_gecko_prices.sql", "name": "task_run_sp_bulk_get_coin_gecko_prices", "macro_sql": "{% macro task_run_sp_bulk_get_coin_gecko_prices(resume_or_suspend) -%}\r\n    create or replace task silver.run_sp_bulk_get_coin_gecko_prices\r\n        warehouse = dbt_cloud\r\n        schedule = 'USING CRON 15,45 * * * * UTC'\r\n    as\r\n        call silver.sp_bulk_get_coin_gecko_prices();\r\n\r\n    alter task silver.run_sp_bulk_get_coin_gecko_prices {{ resume_or_suspend }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.449912}, "macro.crosschain_models.udf_bulk_get_coin_gecko_prices": {"unique_id": "macro.crosschain_models.udf_bulk_get_coin_gecko_prices", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\streamline\\get_coin_gecko_prices\\udf_bulk_get_coin_gecko_prices.sql", "original_file_path": "macros\\streamline\\get_coin_gecko_prices\\udf_bulk_get_coin_gecko_prices.sql", "name": "udf_bulk_get_coin_gecko_prices", "macro_sql": "{% macro udf_bulk_get_coin_gecko_prices() %}\r\n    CREATE\r\n    OR REPLACE EXTERNAL FUNCTION silver.udf_bulk_get_coin_gecko_prices() returns text api_integration = aws_crosschain_api_dev AS {% if target.database == \"CROSSCHAIN\" -%}\r\n        'https://q2il6n5mmg.execute-api.us-east-1.amazonaws.com/prod/bulk_get_coin_gecko_prices'\r\n    {% else %}\r\n        'https://ubuxgfotp2.execute-api.us-east-1.amazonaws.com/dev/bulk_get_coin_gecko_prices'\r\n    {%- endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4509125}, "macro.crosschain_models.run_sp_bulk_get_coin_market_cap_asset_metadata": {"unique_id": "macro.crosschain_models.run_sp_bulk_get_coin_market_cap_asset_metadata", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\streamline\\get_coin_market_cap_asset_metadata\\run_sp_bulk_get_coin_market_cap_asset_metadata.sql", "original_file_path": "macros\\streamline\\get_coin_market_cap_asset_metadata\\run_sp_bulk_get_coin_market_cap_asset_metadata.sql", "name": "run_sp_bulk_get_coin_market_cap_asset_metadata", "macro_sql": "{% macro run_sp_bulk_get_coin_market_cap_asset_metadata() %}\r\n    {% set sql %}\r\n        call silver.sp_bulk_get_coin_market_cap_asset_metadata();\r\n    {% endset %}\r\n\r\n    {% do run_query(sql) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4509125}, "macro.crosschain_models.sp_create_bulk_get_coin_market_cap_asset_metadata": {"unique_id": "macro.crosschain_models.sp_create_bulk_get_coin_market_cap_asset_metadata", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\streamline\\get_coin_market_cap_asset_metadata\\sp_create_bulk_get_coin_market_cap_asset_metadata.sql", "original_file_path": "macros\\streamline\\get_coin_market_cap_asset_metadata\\sp_create_bulk_get_coin_market_cap_asset_metadata.sql", "name": "sp_create_bulk_get_coin_market_cap_asset_metadata", "macro_sql": "{% macro sp_create_bulk_get_coin_market_cap_asset_metadata() %}\r\n{% set sql %}\r\nCREATE OR REPLACE PROCEDURE silver.sp_bulk_get_coin_market_cap_asset_metadata() \r\nRETURNS variant \r\nLANGUAGE SQL \r\nAS \r\n$$\r\n  DECLARE\r\n    RESULT VARCHAR;\r\n  BEGIN\r\n    RESULT:= (\r\n        SELECT\r\n          silver.udf_bulk_get_coin_market_cap_asset_metadata()\r\n      );\r\n    RETURN RESULT;\r\n  END;\r\n$${% endset %}\r\n{% do run_query(sql) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4519129}, "macro.crosschain_models.udf_bulk_get_coin_market_cap_asset_metadata": {"unique_id": "macro.crosschain_models.udf_bulk_get_coin_market_cap_asset_metadata", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\streamline\\get_coin_market_cap_asset_metadata\\udf_bulk_get_coin_market_cap_asset_metadata.sql", "original_file_path": "macros\\streamline\\get_coin_market_cap_asset_metadata\\udf_bulk_get_coin_market_cap_asset_metadata.sql", "name": "udf_bulk_get_coin_market_cap_asset_metadata", "macro_sql": "{% macro udf_bulk_get_coin_market_cap_asset_metadata() %}\r\n    CREATE\r\n    OR REPLACE EXTERNAL FUNCTION silver.udf_bulk_get_coin_market_cap_asset_metadata() returns text api_integration = aws_crosschain_api_dev AS {% if target.database == \"CROSSCHAIN\" -%}\r\n        'https://q2il6n5mmg.execute-api.us-east-1.amazonaws.com/prod/bulk_get_coin_market_cap_asset_metadata'\r\n    {% else %}\r\n        'https://ubuxgfotp2.execute-api.us-east-1.amazonaws.com/dev/bulk_get_coin_market_cap_asset_metadata'\r\n    {%- endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4519129}, "macro.crosschain_models.run_sp_bulk_get_coin_market_cap_hourly_ohlc": {"unique_id": "macro.crosschain_models.run_sp_bulk_get_coin_market_cap_hourly_ohlc", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\streamline\\get_coin_market_cap_hourly_ohlc\\run_sp_bulk_get_coin_market_cap_hourly_ohlc.sql", "original_file_path": "macros\\streamline\\get_coin_market_cap_hourly_ohlc\\run_sp_bulk_get_coin_market_cap_hourly_ohlc.sql", "name": "run_sp_bulk_get_coin_market_cap_hourly_ohlc", "macro_sql": "{% macro run_sp_bulk_get_coin_market_cap_hourly_ohlc() %}\r\n    {% set sql %}\r\n        call streamline.sp_bulk_get_coin_market_cap_hourly_ohlc();\r\n    {% endset %}\r\n\r\n    {% do run_query(sql) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4529126}, "macro.crosschain_models.sp_create_bulk_get_coin_market_cap_hourly_ohlc": {"unique_id": "macro.crosschain_models.sp_create_bulk_get_coin_market_cap_hourly_ohlc", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\streamline\\get_coin_market_cap_hourly_ohlc\\sp_create_get_coin_market_cap_hourly_ohlc.sql", "original_file_path": "macros\\streamline\\get_coin_market_cap_hourly_ohlc\\sp_create_get_coin_market_cap_hourly_ohlc.sql", "name": "sp_create_bulk_get_coin_market_cap_hourly_ohlc", "macro_sql": "{% macro sp_create_bulk_get_coin_market_cap_hourly_ohlc() %}\r\n{% set sql %}\r\nCREATE OR REPLACE PROCEDURE streamline.sp_bulk_get_coin_market_cap_hourly_ohlc() \r\nRETURNS variant \r\nLANGUAGE SQL \r\nAS \r\n$$\r\n  DECLARE\r\n    RESULT VARCHAR;\r\n    row_cnt INTEGER;\r\n  BEGIN\r\n    row_cnt:= (\r\n      SELECT\r\n        COUNT(1)\r\n      FROM\r\n        streamline.all_unknown_coin_market_cap_asset_ohlc_hourly\r\n    );\r\n    if (\r\n        row_cnt > 0\r\n      ) THEN RESULT:= (\r\n        SELECT\r\n          streamline.udf_bulk_get_coin_market_cap_hourly_ohlc()\r\n      );\r\n      ELSE RESULT:= NULL;\r\n    END if;\r\n    RETURN RESULT;\r\n  END;\r\n$${% endset %}\r\n{% do run_query(sql) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4529126}, "macro.crosschain_models.task_bulk_get_coin_market_cap_hourly_ohlc": {"unique_id": "macro.crosschain_models.task_bulk_get_coin_market_cap_hourly_ohlc", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\streamline\\get_coin_market_cap_hourly_ohlc\\task_get_coin_market_cap_hourly_ohlc.sql", "original_file_path": "macros\\streamline\\get_coin_market_cap_hourly_ohlc\\task_get_coin_market_cap_hourly_ohlc.sql", "name": "task_bulk_get_coin_market_cap_hourly_ohlc", "macro_sql": "{% macro task_bulk_get_coin_market_cap_hourly_ohlc() %}\r\n{% set sql %}\r\nexecute immediate 'create or replace task streamline.bulk_get_coin_market_cap_hourly_ohlc\r\n    warehouse = dbt_cloud_crosschain\r\n    allow_overlapping_execution = false\r\n    schedule = \\'USING CRON 15,30,45 * * * * UTC\\'\r\nas\r\nBEGIN\r\n    call streamline.refresh_external_table_by_recent_date(\\'asset_metadata_coin_market_cap_api\\');\r\n    call streamline.refresh_external_table_by_recent_date(\\'asset_ohlc_coin_market_cap_api\\');\r\n\r\n    select streamline.udf_bulk_get_coin_market_cap_hourly_ohlc()\r\n    where exists (\r\n        select 1\r\n        from streamline.all_unknown_coin_market_cap_asset_ohlc_hourly\r\n        limit 1\r\n    );\r\nEND;'\r\n{% endset %}\r\n{% do run_query(sql) %}\r\n\r\n{% if target.database == 'CROSSCHAIN' %}\r\n    {% set sql %}\r\n        alter task streamline.bulk_get_coin_market_cap_hourly_ohlc resume;\r\n    {% endset %}\r\n    {% do run_query(sql) %}\r\n{% endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4539123}, "macro.crosschain_models.udf_bulk_get_coin_market_cap_hourly_ohlc": {"unique_id": "macro.crosschain_models.udf_bulk_get_coin_market_cap_hourly_ohlc", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\streamline\\get_coin_market_cap_hourly_ohlc\\udf_get_coin_market_cap_hourly_ohlc.sql", "original_file_path": "macros\\streamline\\get_coin_market_cap_hourly_ohlc\\udf_get_coin_market_cap_hourly_ohlc.sql", "name": "udf_bulk_get_coin_market_cap_hourly_ohlc", "macro_sql": "{% macro udf_bulk_get_coin_market_cap_hourly_ohlc() %}\r\n    CREATE\r\n    OR REPLACE EXTERNAL FUNCTION streamline.udf_bulk_get_coin_market_cap_hourly_ohlc() returns text api_integration = aws_crosschain_api_dev AS {% if target.database == \"CROSSCHAIN\" -%}\r\n        'https://q2il6n5mmg.execute-api.us-east-1.amazonaws.com/prod/bulk_get_coin_market_cap_hourly_ohlc'\r\n    {% else %}\r\n        'https://ubuxgfotp2.execute-api.us-east-1.amazonaws.com/dev/bulk_get_coin_market_cap_hourly_ohlc'\r\n    {%- endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4549124}, "macro.crosschain_models.sp_create_bulk_get_coin_market_cap_prices": {"unique_id": "macro.crosschain_models.sp_create_bulk_get_coin_market_cap_prices", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\streamline\\get_coin_market_cap_prices\\sp_create_bulk_get_coin_market_cap_prices.sql", "original_file_path": "macros\\streamline\\get_coin_market_cap_prices\\sp_create_bulk_get_coin_market_cap_prices.sql", "name": "sp_create_bulk_get_coin_market_cap_prices", "macro_sql": "{% macro sp_create_bulk_get_coin_market_cap_prices() %}\r\n{% set sql %}\r\nCREATE OR REPLACE PROCEDURE silver.sp_bulk_get_coin_market_cap_prices() \r\nRETURNS variant \r\nLANGUAGE SQL \r\nAS \r\n$$\r\n  DECLARE\r\n    RESULT VARCHAR;\r\n  BEGIN\r\n    RESULT:= (\r\n        SELECT\r\n          silver.udf_bulk_get_coin_market_cap_prices()\r\n      );\r\n    RETURN RESULT;\r\n  END;\r\n$${% endset %}\r\n{% do run_query(sql) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4549124}, "macro.crosschain_models.task_run_sp_bulk_get_coin_market_cap_prices": {"unique_id": "macro.crosschain_models.task_run_sp_bulk_get_coin_market_cap_prices", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\streamline\\get_coin_market_cap_prices\\task_run_sp_bulk_get_coin_market_cap_prices.sql", "original_file_path": "macros\\streamline\\get_coin_market_cap_prices\\task_run_sp_bulk_get_coin_market_cap_prices.sql", "name": "task_run_sp_bulk_get_coin_market_cap_prices", "macro_sql": "{% macro task_run_sp_bulk_get_coin_market_cap_prices(resume_or_suspend) -%}\r\n    create or replace task silver.run_sp_bulk_get_coin_market_cap_prices\r\n        warehouse = dbt_cloud\r\n        schedule = 'USING CRON * * * * * UTC'\r\n    as\r\n        call silver.sp_bulk_get_coin_market_cap_prices();\r\n\r\n    alter task silver.run_sp_bulk_get_coin_market_cap_prices {{ resume_or_suspend }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4549124}, "macro.crosschain_models.udf_bulk_get_coin_market_cap_prices": {"unique_id": "macro.crosschain_models.udf_bulk_get_coin_market_cap_prices", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\streamline\\get_coin_market_cap_prices\\udf_bulk_get_coin_market_cap_prices.sql", "original_file_path": "macros\\streamline\\get_coin_market_cap_prices\\udf_bulk_get_coin_market_cap_prices.sql", "name": "udf_bulk_get_coin_market_cap_prices", "macro_sql": "{% macro udf_bulk_get_coin_market_cap_prices() %}\r\n    CREATE\r\n    OR REPLACE EXTERNAL FUNCTION silver.udf_bulk_get_coin_market_cap_prices() returns text api_integration = aws_crosschain_api_dev AS {% if target.database == \"CROSSCHAIN\" -%}\r\n        'https://q2il6n5mmg.execute-api.us-east-1.amazonaws.com/prod/bulk_get_coin_market_cap_prices'\r\n    {% else %}\r\n        'https://ubuxgfotp2.execute-api.us-east-1.amazonaws.com/dev/bulk_get_coin_market_cap_prices'\r\n    {%- endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4559126}, "macro.crosschain_models.test_sequence_gaps": {"unique_id": "macro.crosschain_models.test_sequence_gaps", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\tests\\sequence_gaps.sql", "original_file_path": "macros\\tests\\sequence_gaps.sql", "name": "test_sequence_gaps", "macro_sql": "{% test sequence_gaps(\r\n    model,\r\n    partition_by,\r\n    column_name\r\n) %}\r\n{%- set partition_sql = partition_by | join(\", \") -%}\r\n{%- set previous_column = \"prev_\" ~ column_name -%}\r\nWITH source AS (\r\n    SELECT\r\n        {{ partition_sql + \",\" if partition_sql }}\r\n        {{ column_name }},\r\n        LAG(\r\n            {{ column_name }},\r\n            1\r\n        ) over (\r\n            {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\r\n            ORDER BY\r\n                {{ column_name }} ASC\r\n        ) AS {{ previous_column }}\r\n    FROM\r\n        {{ model }}\r\n)\r\nSELECT\r\n    {{ partition_sql + \",\" if partition_sql }}\r\n    {{ previous_column }},\r\n    {{ column_name }},\r\n    {{ column_name }} - {{ previous_column }}\r\n    - 1 AS gap\r\nFROM\r\n    source\r\nWHERE\r\n    {{ column_name }} - {{ previous_column }} <> 1\r\nORDER BY\r\n    gap DESC {% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4569123}, "macro.crosschain_models.tx_gaps": {"unique_id": "macro.crosschain_models.tx_gaps", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "macros\\tests\\tx_gaps.sql", "original_file_path": "macros\\tests\\tx_gaps.sql", "name": "tx_gaps", "macro_sql": "{% macro tx_gaps(\r\n        model\r\n    ) %}\r\n    WITH block_base AS (\r\n        SELECT\r\n            block_number,\r\n            tx_count\r\n        FROM\r\n            {{ ref('silver__blocks') }}\r\n    ),\r\n    model_name AS (\r\n        SELECT\r\n            block_number,\r\n            COUNT(\r\n                DISTINCT tx_hash\r\n            ) AS model_tx_count\r\n        FROM\r\n            {{ model }}\r\n        GROUP BY\r\n            block_number\r\n    )\r\nSELECT\r\n    block_base.block_number,\r\n    tx_count,\r\n    model_name.block_number,\r\n    model_tx_count\r\nFROM\r\n    block_base\r\n    LEFT JOIN model_name\r\n    ON block_base.block_number = model_name.block_number\r\nWHERE\r\n    tx_count <> model_tx_count\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4579127}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4739125}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4765959}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4765959}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4786122}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4796116}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4806123}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4816117}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4816117}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4816117}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4816117}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.482613}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.482613}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.482613}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4836123}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4836123}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4846127}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4846127}, "macro.dbt_snowflake.snowflake__set_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4856126}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4856126}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.486612}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4876115}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4876115}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4886112}, "macro.dbt_snowflake.snowflake__copy_grants": {"unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4886112}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4886112}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.490614}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.493692}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4946876}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {% set  grant_config = config.get('grants') %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.4987047}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.500707}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.500707}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5016901}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5046904}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5046904}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5056922}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5093114}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5103106}, "macro.dbt_snowflake.snowflake__bool_or": {"unique_id": "macro.dbt_snowflake.snowflake__bool_or", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.511389}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.511389}, "macro.dbt_snowflake.snowflake__right": {"unique_id": "macro.dbt_snowflake.snowflake__right", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5123904}, "macro.dbt_snowflake.snowflake__safe_cast": {"unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "package_name": "dbt_snowflake", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5123904}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5144095}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5144095}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5153887}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5153887}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5153887}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5163882}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5163882}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5163882}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.517392}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.517392}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.517392}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.518395}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5193908}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5193908}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5193908}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5203917}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.522321}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5243127}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.525311}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.525311}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.525311}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5263505}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5263505}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5273082}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.528384}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5293083}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5303936}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5303936}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.531394}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.531394}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5323942}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5323942}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5333893}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5333893}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.535389}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.536405}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.536405}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.536405}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5373948}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5373948}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5373948}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5383077}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5383077}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5383077}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5403643}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5403643}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5413086}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5413086}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5423458}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5433571}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.547346}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5483482}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5483482}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5483482}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5493495}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5493495}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5503485}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5503485}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5503485}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5503485}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.551348}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.551348}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5523481}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.553348}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.553348}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.553348}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5543447}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5553446}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5553446}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5553446}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5553446}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.558344}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5603437}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5613441}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5623448}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.564358}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.565344}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.565344}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5663443}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5673444}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5683444}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5683444}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5693445}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5693445}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5703444}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5703444}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5713444}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.572344}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.572344}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5733445}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5733445}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5743446}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.576344}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.576344}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.576344}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.576344}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5773442}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.578344}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.579344}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5803437}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, temp_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.587344}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.588344}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5933435}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5963438}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5963438}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n        {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.597344}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.5983438}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.599344}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.604344}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6063435}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6074684}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6074684}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6074684}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6074684}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6074684}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6074684}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6074684}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6074684}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6074684}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6074684}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6074684}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6074684}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6074684}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6074684}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6231825}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6231825}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6231825}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6231825}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6231825}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6231825}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6231825}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6231825}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6231825}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6231825}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6231825}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6231825}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6231825}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6231825}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6388004}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6388004}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6388004}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6388004}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6388004}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6388004}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6388004}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6388004}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6388004}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6388004}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6388004}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6388004}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.65443}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.65443}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.65443}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.65443}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.65443}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.65443}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.65443}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.65443}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.65443}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.65443}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.65443}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_sql'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.65443}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.670491}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6716874}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt_date.get_base_dates": {"unique_id": "macro.dbt_date.get_base_dates", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "name": "get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt_date.default__get_base_dates": {"unique_id": "macro.dbt_date.default__get_base_dates", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "name": "default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.6873896}, "macro.dbt_date.bigquery__get_base_dates": {"unique_id": "macro.dbt_date.bigquery__get_base_dates", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "name": "bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7030203}, "macro.dbt_date.get_date_dimension": {"unique_id": "macro.dbt_date.get_date_dimension", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\get_date_dimension.sql", "original_file_path": "macros\\get_date_dimension.sql", "name": "get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7030203}, "macro.dbt_date.default__get_date_dimension": {"unique_id": "macro.dbt_date.default__get_date_dimension", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\get_date_dimension.sql", "original_file_path": "macros\\get_date_dimension.sql", "name": "default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7030203}, "macro.dbt_date.postgres__get_date_dimension": {"unique_id": "macro.dbt_date.postgres__get_date_dimension", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\get_date_dimension.sql", "original_file_path": "macros\\get_date_dimension.sql", "name": "postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# dbt_utils.last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt_utils.dateadd('day', '-1', dbt_utils.dateadd('month', '3', dbt_utils.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7186537}, "macro.dbt_date.convert_timezone": {"unique_id": "macro.dbt_date.convert_timezone", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "name": "convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7186537}, "macro.dbt_date.default__convert_timezone": {"unique_id": "macro.dbt_date.default__convert_timezone", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "name": "default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\n{%- if not source_tz -%}\ncast(convert_timezone('{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast(convert_timezone('{{ source_tz }}', '{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7186537}, "macro.dbt_date.bigquery__convert_timezone": {"unique_id": "macro.dbt_date.bigquery__convert_timezone", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "name": "bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7186537}, "macro.dbt_date.spark__convert_timezone": {"unique_id": "macro.dbt_date.spark__convert_timezone", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "name": "spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7186537}, "macro.dbt_date.postgres__convert_timezone": {"unique_id": "macro.dbt_date.postgres__convert_timezone", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "name": "postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\n{%- if source_tz -%}\ncast({{ column }} at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast({{ column }} at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7186537}, "macro.dbt_date.redshift__convert_timezone": {"unique_id": "macro.dbt_date.redshift__convert_timezone", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "name": "redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7186537}, "macro.dbt_date.date_part": {"unique_id": "macro.dbt_date.date_part", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "name": "date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7186537}, "macro.dbt_date.default__date_part": {"unique_id": "macro.dbt_date.default__date_part", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "name": "default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7186537}, "macro.dbt_date.bigquery__date_part": {"unique_id": "macro.dbt_date.bigquery__date_part", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "name": "bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7186537}, "macro.dbt_date.day_name": {"unique_id": "macro.dbt_date.day_name", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "name": "day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__day_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7186537}, "macro.dbt_date.default__day_name": {"unique_id": "macro.dbt_date.default__day_name", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "name": "default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7186537}, "macro.dbt_date.snowflake__day_name": {"unique_id": "macro.dbt_date.snowflake__day_name", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "name": "snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7186537}, "macro.dbt_date.bigquery__day_name": {"unique_id": "macro.dbt_date.bigquery__day_name", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "name": "bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7186537}, "macro.dbt_date.postgres__day_name": {"unique_id": "macro.dbt_date.postgres__day_name", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "name": "postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7186537}, "macro.dbt_date.day_of_month": {"unique_id": "macro.dbt_date.day_of_month", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_month.sql", "original_file_path": "macros\\calendar_date\\day_of_month.sql", "name": "day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7186537}, "macro.dbt_date.redshift__day_of_month": {"unique_id": "macro.dbt_date.redshift__day_of_month", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_month.sql", "original_file_path": "macros\\calendar_date\\day_of_month.sql", "name": "redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7186537}, "macro.dbt_date.day_of_week": {"unique_id": "macro.dbt_date.day_of_week", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "name": "day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7186537}, "macro.dbt_date.default__day_of_week": {"unique_id": "macro.dbt_date.default__day_of_week", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "name": "default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7186537}, "macro.dbt_date.snowflake__day_of_week": {"unique_id": "macro.dbt_date.snowflake__day_of_week", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "name": "snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7186537}, "macro.dbt_date.bigquery__day_of_week": {"unique_id": "macro.dbt_date.bigquery__day_of_week", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "name": "bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7186537}, "macro.dbt_date.postgres__day_of_week": {"unique_id": "macro.dbt_date.postgres__day_of_week", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "name": "postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt_utils.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt_utils.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7186537}, "macro.dbt_date.redshift__day_of_week": {"unique_id": "macro.dbt_date.redshift__day_of_week", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "name": "redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt_utils.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt_utils.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7186537}, "macro.dbt_date.day_of_year": {"unique_id": "macro.dbt_date.day_of_year", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "name": "day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7186537}, "macro.dbt_date.default__day_of_year": {"unique_id": "macro.dbt_date.default__day_of_year", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "name": "default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7186537}, "macro.dbt_date.postgres__day_of_year": {"unique_id": "macro.dbt_date.postgres__day_of_year", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "name": "postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7186537}, "macro.dbt_date.redshift__day_of_year": {"unique_id": "macro.dbt_date.redshift__day_of_year", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "name": "redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7186537}, "macro.dbt_date.from_unixtimestamp": {"unique_id": "macro.dbt_date.from_unixtimestamp", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "name": "from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7352839}, "macro.dbt_date.default__from_unixtimestamp": {"unique_id": "macro.dbt_date.default__from_unixtimestamp", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "name": "default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7363033}, "macro.dbt_date.postgres__from_unixtimestamp": {"unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "name": "postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7363033}, "macro.dbt_date.snowflake__from_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "name": "snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7374012}, "macro.dbt_date.bigquery__from_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "name": "bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.738389}, "macro.dbt_date.iso_week_end": {"unique_id": "macro.dbt_date.iso_week_end", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "name": "iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7393749}, "macro.dbt_date._iso_week_end": {"unique_id": "macro.dbt_date._iso_week_end", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "name": "_iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7393749}, "macro.dbt_date.default__iso_week_end": {"unique_id": "macro.dbt_date.default__iso_week_end", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "name": "default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7393749}, "macro.dbt_date.snowflake__iso_week_end": {"unique_id": "macro.dbt_date.snowflake__iso_week_end", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "name": "snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7393749}, "macro.dbt_date.iso_week_of_year": {"unique_id": "macro.dbt_date.iso_week_of_year", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "name": "iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7403877}, "macro.dbt_date._iso_week_of_year": {"unique_id": "macro.dbt_date._iso_week_of_year", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "name": "_iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.741576}, "macro.dbt_date.default__iso_week_of_year": {"unique_id": "macro.dbt_date.default__iso_week_of_year", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "name": "default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.741668}, "macro.dbt_date.snowflake__iso_week_of_year": {"unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "name": "snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.741668}, "macro.dbt_date.postgres__iso_week_of_year": {"unique_id": "macro.dbt_date.postgres__iso_week_of_year", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "name": "postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.741668}, "macro.dbt_date.iso_week_start": {"unique_id": "macro.dbt_date.iso_week_start", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "name": "iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7427423}, "macro.dbt_date._iso_week_start": {"unique_id": "macro.dbt_date._iso_week_start", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "name": "_iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt_utils.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7427423}, "macro.dbt_date.default__iso_week_start": {"unique_id": "macro.dbt_date.default__iso_week_start", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "name": "default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7437642}, "macro.dbt_date.snowflake__iso_week_start": {"unique_id": "macro.dbt_date.snowflake__iso_week_start", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "name": "snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7437642}, "macro.dbt_date.postgres__iso_week_start": {"unique_id": "macro.dbt_date.postgres__iso_week_start", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "name": "postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7437642}, "macro.dbt_date.last_month": {"unique_id": "macro.dbt_date.last_month", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\last_month.sql", "original_file_path": "macros\\calendar_date\\last_month.sql", "name": "last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7447624}, "macro.dbt_date.last_month_name": {"unique_id": "macro.dbt_date.last_month_name", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\last_month_name.sql", "original_file_path": "macros\\calendar_date\\last_month_name.sql", "name": "last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7456703}, "macro.dbt_date.last_month_number": {"unique_id": "macro.dbt_date.last_month_number", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\last_month_number.sql", "original_file_path": "macros\\calendar_date\\last_month_number.sql", "name": "last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7456703}, "macro.dbt_date.last_week": {"unique_id": "macro.dbt_date.last_week", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\last_week.sql", "original_file_path": "macros\\calendar_date\\last_week.sql", "name": "last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7466686}, "macro.dbt_date.month_name": {"unique_id": "macro.dbt_date.month_name", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "name": "month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__month_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7476685}, "macro.dbt_date.default__month_name": {"unique_id": "macro.dbt_date.default__month_name", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "name": "default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7486682}, "macro.dbt_date.bigquery__month_name": {"unique_id": "macro.dbt_date.bigquery__month_name", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "name": "bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7486682}, "macro.dbt_date.snowflake__month_name": {"unique_id": "macro.dbt_date.snowflake__month_name", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "name": "snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7486682}, "macro.dbt_date.postgres__month_name": {"unique_id": "macro.dbt_date.postgres__month_name", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "name": "postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7496684}, "macro.dbt_date.next_month": {"unique_id": "macro.dbt_date.next_month", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\next_month.sql", "original_file_path": "macros\\calendar_date\\next_month.sql", "name": "next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7506678}, "macro.dbt_date.next_month_name": {"unique_id": "macro.dbt_date.next_month_name", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\next_month_name.sql", "original_file_path": "macros\\calendar_date\\next_month_name.sql", "name": "next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7506678}, "macro.dbt_date.next_month_number": {"unique_id": "macro.dbt_date.next_month_number", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\next_month_number.sql", "original_file_path": "macros\\calendar_date\\next_month_number.sql", "name": "next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7517421}, "macro.dbt_date.next_week": {"unique_id": "macro.dbt_date.next_week", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\next_week.sql", "original_file_path": "macros\\calendar_date\\next_week.sql", "name": "next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7527423}, "macro.dbt_date.now": {"unique_id": "macro.dbt_date.now", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\now.sql", "original_file_path": "macros\\calendar_date\\now.sql", "name": "now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt_utils.current_timestamp(), tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7527423}, "macro.dbt_date.n_days_ago": {"unique_id": "macro.dbt_date.n_days_ago", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\n_days_ago.sql", "original_file_path": "macros\\calendar_date\\n_days_ago.sql", "name": "n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt_utils.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7537417}, "macro.dbt_date.n_days_away": {"unique_id": "macro.dbt_date.n_days_away", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\n_days_away.sql", "original_file_path": "macros\\calendar_date\\n_days_away.sql", "name": "n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7547624}, "macro.dbt_date.n_months_ago": {"unique_id": "macro.dbt_date.n_months_ago", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\n_months_ago.sql", "original_file_path": "macros\\calendar_date\\n_months_ago.sql", "name": "n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7557497}, "macro.dbt_date.n_months_away": {"unique_id": "macro.dbt_date.n_months_away", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\n_months_away.sql", "original_file_path": "macros\\calendar_date\\n_months_away.sql", "name": "n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7557497}, "macro.dbt_date.n_weeks_ago": {"unique_id": "macro.dbt_date.n_weeks_ago", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\n_weeks_ago.sql", "original_file_path": "macros\\calendar_date\\n_weeks_ago.sql", "name": "n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7567608}, "macro.dbt_date.n_weeks_away": {"unique_id": "macro.dbt_date.n_weeks_away", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\n_weeks_away.sql", "original_file_path": "macros\\calendar_date\\n_weeks_away.sql", "name": "n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7576709}, "macro.dbt_date.periods_since": {"unique_id": "macro.dbt_date.periods_since", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\periods_since.sql", "original_file_path": "macros\\calendar_date\\periods_since.sql", "name": "periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt_utils.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7587492}, "macro.dbt_date.today": {"unique_id": "macro.dbt_date.today", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\today.sql", "original_file_path": "macros\\calendar_date\\today.sql", "name": "today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7587492}, "macro.dbt_date.tomorrow": {"unique_id": "macro.dbt_date.tomorrow", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\tomorrow.sql", "original_file_path": "macros\\calendar_date\\tomorrow.sql", "name": "tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7596817}, "macro.dbt_date.to_unixtimestamp": {"unique_id": "macro.dbt_date.to_unixtimestamp", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "name": "to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7596817}, "macro.dbt_date.default__to_unixtimestamp": {"unique_id": "macro.dbt_date.default__to_unixtimestamp", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "name": "default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.760757}, "macro.dbt_date.snowflake__to_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "name": "snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.760757}, "macro.dbt_date.bigquery__to_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "name": "bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.760757}, "macro.dbt_date.week_end": {"unique_id": "macro.dbt_date.week_end", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "name": "week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7617447}, "macro.dbt_date.default__week_end": {"unique_id": "macro.dbt_date.default__week_end", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "name": "default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ dbt_utils.last_day(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7617447}, "macro.dbt_date.snowflake__week_end": {"unique_id": "macro.dbt_date.snowflake__week_end", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "name": "snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7617447}, "macro.dbt_date.postgres__week_end": {"unique_id": "macro.dbt_date.postgres__week_end", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "name": "postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.762762}, "macro.dbt_date.week_of_year": {"unique_id": "macro.dbt_date.week_of_year", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "name": "week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7637553}, "macro.dbt_date.default__week_of_year": {"unique_id": "macro.dbt_date.default__week_of_year", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "name": "default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7637553}, "macro.dbt_date.postgres__week_of_year": {"unique_id": "macro.dbt_date.postgres__week_of_year", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "name": "postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7637553}, "macro.dbt_date.week_start": {"unique_id": "macro.dbt_date.week_start", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "name": "week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7647529}, "macro.dbt_date.default__week_start": {"unique_id": "macro.dbt_date.default__week_start", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "name": "default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt_utils.date_trunc('week', date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7657502}, "macro.dbt_date.snowflake__week_start": {"unique_id": "macro.dbt_date.snowflake__week_start", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "name": "snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt_utils.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7667463}, "macro.dbt_date.postgres__week_start": {"unique_id": "macro.dbt_date.postgres__week_start", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "name": "postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt_utils.dateadd('day', -1, dbt_utils.date_trunc('week', dbt_utils.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7677498}, "macro.dbt_date.yesterday": {"unique_id": "macro.dbt_date.yesterday", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\yesterday.sql", "original_file_path": "macros\\calendar_date\\yesterday.sql", "name": "yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7677498}, "macro.dbt_date.get_fiscal_periods": {"unique_id": "macro.dbt_date.get_fiscal_periods", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\fiscal_date\\get_fiscal_periods.sql", "original_file_path": "macros\\fiscal_date\\get_fiscal_periods.sql", "name": "get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{# \nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt_utils.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt_utils.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case \n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt_utils.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year, \n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom \n    fscl_periods_quarters \norder by 1,2\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7707684}, "macro.dbt_date.get_fiscal_year_dates": {"unique_id": "macro.dbt_date.get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "original_file_path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "name": "get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7748306}, "macro.dbt_date.default__get_fiscal_year_dates": {"unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_date", "path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "original_file_path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "name": "default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt_utils.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt_utils.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt_utils.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7748306}, "macro.dbt_expectations.log_natural": {"unique_id": "macro.dbt_expectations.log_natural", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "name": "log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7748306}, "macro.dbt_expectations.default__log_natural": {"unique_id": "macro.dbt_expectations.default__log_natural", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "name": "default__log_natural", "macro_sql": "{% macro default__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7748306}, "macro.dbt_expectations.bigquery__log_natural": {"unique_id": "macro.dbt_expectations.bigquery__log_natural", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "name": "bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7748306}, "macro.dbt_expectations.snowflake__log_natural": {"unique_id": "macro.dbt_expectations.snowflake__log_natural", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "name": "snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7748306}, "macro.dbt_expectations.median": {"unique_id": "macro.dbt_expectations.median", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\median.sql", "original_file_path": "macros\\math\\median.sql", "name": "median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7748306}, "macro.dbt_expectations.percentile_cont": {"unique_id": "macro.dbt_expectations.percentile_cont", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "name": "percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7748306}, "macro.dbt_expectations.default__quantile": {"unique_id": "macro.dbt_expectations.default__quantile", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "name": "default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7748306}, "macro.dbt_expectations.bigquery__quantile": {"unique_id": "macro.dbt_expectations.bigquery__quantile", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "name": "bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) %}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7748306}, "macro.dbt_expectations.rand": {"unique_id": "macro.dbt_expectations.rand", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "name": "rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__rand"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7748306}, "macro.dbt_expectations.default__rand": {"unique_id": "macro.dbt_expectations.default__rand", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "name": "default__rand", "macro_sql": "{% macro default__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7748306}, "macro.dbt_expectations.bigquery__rand": {"unique_id": "macro.dbt_expectations.bigquery__rand", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "name": "bigquery__rand", "macro_sql": "{% macro bigquery__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7748306}, "macro.dbt_expectations.snowflake__rand": {"unique_id": "macro.dbt_expectations.snowflake__rand", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "name": "snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) %}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7748306}, "macro.dbt_expectations.postgres__rand": {"unique_id": "macro.dbt_expectations.postgres__rand", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "name": "postgres__rand", "macro_sql": "{% macro postgres__rand() %}\n\n    random()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7748306}, "macro.dbt_expectations.redshift__rand": {"unique_id": "macro.dbt_expectations.redshift__rand", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "name": "redshift__rand", "macro_sql": "{% macro redshift__rand() %}\n\n    random()\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7748306}, "macro.dbt_expectations.regexp_instr": {"unique_id": "macro.dbt_expectations.regexp_instr", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "name": "regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1) %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence\n    ) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7748306}, "macro.dbt_expectations.default__regexp_instr": {"unique_id": "macro.dbt_expectations.default__regexp_instr", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "name": "default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7748306}, "macro.dbt_expectations.redshift__regexp_instr": {"unique_id": "macro.dbt_expectations.redshift__regexp_instr", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "name": "redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7748306}, "macro.dbt_expectations.postgres__regexp_instr": {"unique_id": "macro.dbt_expectations.postgres__regexp_instr", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "name": "postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence) %}\narray_length((select regexp_matches({{ source_value }}, '{{ regexp }}')), 1)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7748306}, "macro.dbt_expectations.spark__regexp_instr": {"unique_id": "macro.dbt_expectations.spark__regexp_instr", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "name": "spark__regexp_instr", "macro_sql": "{% macro spark__regexp_instr(source_value, regexp, position, occurrence) %}\ncase when {{ source_value }} rlike '{{ regexp }}' then 1 else 0 end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7748306}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_greater_than.sql", "name": "test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                                column_name,\n                                                                value,\n                                                                quote_values=False,\n                                                                group_by=None,\n                                                                row_condition=None\n                                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7748306}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal.sql", "name": "test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                    column_name,\n                                                    value,\n                                                    quote_values=False,\n                                                    group_by=None,\n                                                    row_condition=None\n                                                    ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7748306}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal_other_table.sql", "name": "test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7748306}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_be_in_set.sql", "name": "test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model, column_name,\n                                                    value_set,\n                                                    quote_values=False,\n                                                    row_condition=None\n                                                    ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7905612}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_contain_set.sql", "name": "test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7905612}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_equal_set.sql", "name": "test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7905612}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_max_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_max_to_be_between.sql", "name": "test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7905612}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_mean_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_mean_to_be_between.sql", "name": "test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7905612}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_median_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_median_to_be_between.sql", "name": "test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7905612}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_min_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_min_to_be_between.sql", "name": "test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7905612}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "name": "test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values=False,\n                                                            data_type=\"decimal\",\n                                                            row_condition=None\n                                                            ) -%}\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (model, column_name, value_set, top_n, quote_values, data_type, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7905612}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "name": "default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values,\n                                                            data_type,\n                                                            row_condition\n                                                            ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7905612}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_proportion_of_unique_values_to_be_between.sql", "name": "test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7905612}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_quantile_values_to_be_between.sql", "name": "test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7905612}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "name": "test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7905612}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "name": "default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7905612}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_sum_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_sum_to_be_between.sql", "name": "test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.7905612}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_unique_value_count_to_be_between.sql", "name": "test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8062441}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_between.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_between.sql", "name": "test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8062441}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_decreasing.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_decreasing.sql", "name": "test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8062441}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_increasing.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_increasing.sql", "name": "test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8062441}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_set.sql", "name": "test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8062441}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_type_list.sql", "name": "test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ column.name | upper }}' as {{ dbt_utils.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt_utils.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8062441}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_null.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_null.sql", "name": "test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8062441}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_of_type.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_of_type.sql", "name": "test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8062441}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_unique.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_unique.sql", "name": "test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8062441}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_have_consistent_casing.sql", "name": "test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8062441}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_in_set.sql", "name": "test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8062441}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_null.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_null.sql", "name": "test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8062441}, "macro.dbt_expectations._get_metric_expression": {"unique_id": "macro.dbt_expectations._get_metric_expression", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "_get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8220444}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8220444}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt_utils.date_trunc(period, date_column_name) }} as metric_period,\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        group by\n            1\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt_utils.dateadd(period, -test_periods, dbt_utils.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_utils.type_timestamp() }})\n    and\n    metric_period < {{ dbt_utils.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_expectations._get_metric_expression", "macro.dbt_utils.dateadd", "macro.dbt_date.now", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8220444}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (model, column_name, group_by, sigma_threshold) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8220444}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\nwith metric_values as (\n\n    {% if group_by -%}\n    select\n        {{ group_by }} as metric_date,\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    group by\n        1\n    {%- else -%}\n    select\n        {{ column_name }} as {{ column_name }}\n    from\n        {{ model }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/{{ column_name }}_stddev as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8220444}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_row_values_to_have_data_for_every_n_datepart.sql", "name": "test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {# \n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals, \n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt_utils.type_int() }}),\n            cast({{interval}} as {{ dbt_utils.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt_utils.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {# \n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine \n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{dbt_utils.dateadd(\n            date_part, \n            \"mod(\n                cast(\" ~ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt_utils.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt_utils.type_int() ~ \" )\n            ) * (-1)\", \n            \"cast( \" ~ dbt_utils.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n            \n    {% endif %}\n    \n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt_utils.datediff", "macro.dbt_utils.type_int", "macro.dbt_utils.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8220444}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_A_to_be_greater_than_B.sql", "name": "test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8220444}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_equal.sql", "name": "test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8220444}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_in_set.sql", "name": "test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8220444}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_compound_columns_to_be_unique.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_compound_columns_to_be_unique.sql", "name": "test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n{%- if row_condition  %}\n    {{ row_condition }} and\n{% endif -%}\n\n{%- if ignore_row_if == \"all_values_are_missing\" %}\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {% endfor %}\n        )\n{%- elif ignore_row_if == \"any_value_is_missing\" %}\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {% endfor %}\n        )\n{%- endif -%}\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8376844}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_multicolumn_sum_to_equal.sql", "name": "test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8376844}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "name": "test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8376844}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "name": "default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where 1=1\n    {% if row_condition %}\n        and {{ row_condition }}\n    {% endif %}\n    {% if ignore_row_if == \"all_values_are_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {%- endfor %}\n        )\n    {% elif ignore_row_if == \"any_value_is_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {%- endfor %}\n        )\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8376844}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern.sql", "name": "test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8376844}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern_list.sql", "name": "test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8376844}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex.sql", "name": "test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8376844}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex_list.sql", "name": "test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8376844}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern.sql", "name": "test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8376844}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern_list.sql", "name": "test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8376844}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex.sql", "name": "test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8376844}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex_list.sql", "name": "test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8533015}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_be_between.sql", "name": "test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt_utils.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8533015}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_equal.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_equal.sql", "name": "test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_utils.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8533015}, "macro.dbt_expectations._get_like_pattern_expression": {"unique_id": "macro.dbt_expectations._get_like_pattern_expression", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\_get_like_pattern_expression.sql", "original_file_path": "macros\\schema_tests\\string_matching\\_get_like_pattern_expression.sql", "name": "_get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8533015}, "macro.dbt_expectations.test_expect_column_to_exist": {"unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_column_to_exist.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_column_to_exist.sql", "name": "test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt_utils.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8533015}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "name": "test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8533015}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "name": "default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {%- for g in group_by %}\n        {{ g }},\n        {%- endfor %}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_utils.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_utils.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {{ dbt_utils.group_by(group_by | length )}}\n\n),\ntotal_row_counts as (\n\n    select\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_utils.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_date.now", "macro.dbt_utils.group_by", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8533015}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "name": "test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8533015}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "name": "default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_utils.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_utils.type_timestamp() }}))\n        <\n        cast({{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_utils.type_timestamp() }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_date.now", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8533015}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_contain_set.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_contain_set.sql", "name": "test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8533015}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_ordered_list.sql", "name": "test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8533015}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_set.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_set.sql", "name": "test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8688412}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_not_contain_set.sql", "name": "test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8688412}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_be_between.sql", "name": "test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                        min_value=None,\n                                                        max_value=None\n                                                        ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8688412}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal.sql", "name": "test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8688412}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal_other_table.sql", "name": "test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8688412}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "name": "test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8688412}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "name": "test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                                        value,\n                                                                        group_by,\n                                                                        row_condition\n                                                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8688412}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "name": "default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8688412}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "name": "test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model, compare_model, factor=1, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8688412}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "name": "test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model, compare_model, factor, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model, compare_model,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8688412}, "macro.dbt_expectations._get_column_list": {"unique_id": "macro.dbt_expectations._get_column_list", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\_get_column_list.sql", "original_file_path": "macros\\schema_tests\\table_shape\\_get_column_list.sql", "name": "_get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8688412}, "macro.dbt_expectations._list_intersect": {"unique_id": "macro.dbt_expectations._list_intersect", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\_list_intersect.sql", "original_file_path": "macros\\schema_tests\\table_shape\\_list_intersect.sql", "name": "_list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8688412}, "macro.dbt_expectations.get_select": {"unique_id": "macro.dbt_expectations.get_select", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "name": "get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8844693}, "macro.dbt_expectations.default__get_select": {"unique_id": "macro.dbt_expectations.default__get_select", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "name": "default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8844693}, "macro.dbt_expectations.test_equal_expression": {"unique_id": "macro.dbt_expectations.test_equal_expression", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "name": "test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8844693}, "macro.dbt_expectations.default__test_equal_expression": {"unique_id": "macro.dbt_expectations.default__test_equal_expression", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "name": "default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8844693}, "macro.dbt_expectations.test_expression_between": {"unique_id": "macro.dbt_expectations.test_expression_between", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_between.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_between.sql", "name": "test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8844693}, "macro.dbt_expectations.expression_between": {"unique_id": "macro.dbt_expectations.expression_between", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_between.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_between.sql", "name": "expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8844693}, "macro.dbt_expectations.test_expression_is_true": {"unique_id": "macro.dbt_expectations.test_expression_is_true", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8844693}, "macro.dbt_expectations.expression_is_true": {"unique_id": "macro.dbt_expectations.expression_is_true", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "name": "expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8844693}, "macro.dbt_expectations.default__expression_is_true": {"unique_id": "macro.dbt_expectations.default__expression_is_true", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "name": "default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8844693}, "macro.dbt_expectations.truth_expression": {"unique_id": "macro.dbt_expectations.truth_expression", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "name": "truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8844693}, "macro.dbt_expectations.default__truth_expression": {"unique_id": "macro.dbt_expectations.default__truth_expression", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "name": "default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8844693}, "macro.dbt_expectations.type_timestamp": {"unique_id": "macro.dbt_expectations.type_timestamp", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "name": "type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8844693}, "macro.dbt_expectations.default__type_timestamp": {"unique_id": "macro.dbt_expectations.default__type_timestamp", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8844693}, "macro.dbt_expectations.snowflake__type_timestamp": {"unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8844693}, "macro.dbt_expectations.postgres__type_timestamp": {"unique_id": "macro.dbt_expectations.postgres__type_timestamp", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8844693}, "macro.dbt_expectations.type_datetime": {"unique_id": "macro.dbt_expectations.type_datetime", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "name": "type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8844693}, "macro.dbt_expectations.default__type_datetime": {"unique_id": "macro.dbt_expectations.default__type_datetime", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "name": "default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8844693}, "macro.dbt_expectations.snowflake__type_datetime": {"unique_id": "macro.dbt_expectations.snowflake__type_datetime", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "name": "snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8844693}, "macro.dbt_expectations.postgres__type_datetime": {"unique_id": "macro.dbt_expectations.postgres__type_datetime", "package_name": "dbt_expectations", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "name": "postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8844693}, "macro.dbt_external_tables.create_external_table": {"unique_id": "macro.dbt_external_tables.create_external_table", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\create_external_table.sql", "original_file_path": "macros\\common\\create_external_table.sql", "name": "create_external_table", "macro_sql": "{% macro create_external_table(source_node) %}\n    {{ adapter.dispatch('create_external_table', 'dbt_external_tables')(source_node) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__create_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8844693}, "macro.dbt_external_tables.default__create_external_table": {"unique_id": "macro.dbt_external_tables.default__create_external_table", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\create_external_table.sql", "original_file_path": "macros\\common\\create_external_table.sql", "name": "default__create_external_table", "macro_sql": "{% macro default__create_external_table(source_node) %}\n    {{ exceptions.raise_compiler_error(\"External table creation is not implemented for the default adapter\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8844693}, "macro.dbt_external_tables.get_external_build_plan": {"unique_id": "macro.dbt_external_tables.get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\get_external_build_plan.sql", "original_file_path": "macros\\common\\get_external_build_plan.sql", "name": "get_external_build_plan", "macro_sql": "{% macro get_external_build_plan(source_node) %}\n    {{ return(adapter.dispatch('get_external_build_plan', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__get_external_build_plan"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8844693}, "macro.dbt_external_tables.default__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.default__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\get_external_build_plan.sql", "original_file_path": "macros\\common\\get_external_build_plan.sql", "name": "default__get_external_build_plan", "macro_sql": "{% macro default__get_external_build_plan(source_node) %}\n    {{ exceptions.raise_compiler_error(\"Staging external sources is not implemented for the default adapter\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8844693}, "macro.dbt_external_tables.refresh_external_table": {"unique_id": "macro.dbt_external_tables.refresh_external_table", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\refresh_external_table.sql", "original_file_path": "macros\\common\\refresh_external_table.sql", "name": "refresh_external_table", "macro_sql": "{% macro refresh_external_table(source_node) %}\n    {{ return(adapter.dispatch('refresh_external_table', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8844693}, "macro.dbt_external_tables.default__refresh_external_table": {"unique_id": "macro.dbt_external_tables.default__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\refresh_external_table.sql", "original_file_path": "macros\\common\\refresh_external_table.sql", "name": "default__refresh_external_table", "macro_sql": "{% macro default__refresh_external_table(source_node) %}\n    {% do return([]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.8844693}, "macro.dbt_external_tables.stage_external_sources": {"unique_id": "macro.dbt_external_tables.stage_external_sources", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\stage_external_sources.sql", "original_file_path": "macros\\common\\stage_external_sources.sql", "name": "stage_external_sources", "macro_sql": "{% macro stage_external_sources(select=none) %}\n\n    {% set sources_to_stage = [] %}\n    \n    {% set source_nodes = graph.sources.values() if graph.sources else [] %}\n    \n    {% for node in source_nodes %}\n        {% if node.external %}\n            \n            {% if select %}\n            \n                {% for src in select.split(' ') %}\n                \n                    {% if '.' in src %}\n                        {% set src_s = src.split('.') %}\n                        {% if src_s[0] == node.source_name and src_s[1] == node.name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% else %}\n                        {% if src == node.source_name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% endif %}\n                    \n                {% endfor %}\n                        \n            {% else %}\n            \n                {% do sources_to_stage.append(node) %}\n                \n            {% endif %}\n        {% endif %}\n        \n    {% endfor %}\n    \n    {% if sources_to_stage|length == 0 %}\n        {% do log('No external sources selected', info = true) %}\n    {% endif %}\n            \n    {% for node in sources_to_stage %}\n\n        {% set loop_label = loop.index ~ ' of ' ~ loop.length %}\n\n        {% do log(loop_label ~ ' START external source ' ~ node.schema ~ '.' ~ node.identifier, info = true) -%}\n        \n        {% set run_queue = dbt_external_tables.get_external_build_plan(node) %}\n        \n        {% do log(loop_label ~ ' SKIP', info = true) if run_queue == [] %}\n        {% set width = flags.PRINTER_WIDTH %}\n        \n        {% for q in run_queue %}\n        \n            {% set q_msg = q|replace('\\n','')|replace('begin;','')|trim %}\n            {% set q_log = q_msg[:width] ~ '...  ' if q_msg|length > width else q_msg %}\n        \n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ q_log, info = true) %}\n            {% set exit_txn = dbt_external_tables.exit_transaction() %}\n        \n            {% call statement('runner', fetch_result = True, auto_begin = False) %}\n                {{ exit_txn }} {{ q }}\n            {% endcall %}\n            \n            {% set runner = load_result('runner') %}\n            {% set log_msg = runner['response'] if 'response' in runner.keys() else runner['status'] %}\n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ log_msg, info = true) %}\n            \n        {% endfor %}\n        \n    {% endfor %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.get_external_build_plan", "macro.dbt_external_tables.exit_transaction", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.900092}, "macro.dbt_external_tables.dropif": {"unique_id": "macro.dbt_external_tables.dropif", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\helpers\\dropif.sql", "original_file_path": "macros\\common\\helpers\\dropif.sql", "name": "dropif", "macro_sql": "{% macro dropif(node) %}\n    {{ adapter.dispatch('dropif', 'dbt_external_tables')(node) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.default__dropif"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.900092}, "macro.dbt_external_tables.default__dropif": {"unique_id": "macro.dbt_external_tables.default__dropif", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\helpers\\dropif.sql", "original_file_path": "macros\\common\\helpers\\dropif.sql", "name": "default__dropif", "macro_sql": "{% macro default__dropif() %}\n    {{ exceptions.raise_compiler_error(\n        \"Dropping external tables is not implemented for the default adapter\"\n    ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.900092}, "macro.dbt_external_tables.exit_transaction": {"unique_id": "macro.dbt_external_tables.exit_transaction", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\helpers\\transaction.sql", "original_file_path": "macros\\common\\helpers\\transaction.sql", "name": "exit_transaction", "macro_sql": "{% macro exit_transaction() %}\n    {{ return(adapter.dispatch('exit_transaction', 'dbt_external_tables')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.default__exit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.900092}, "macro.dbt_external_tables.default__exit_transaction": {"unique_id": "macro.dbt_external_tables.default__exit_transaction", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\helpers\\transaction.sql", "original_file_path": "macros\\common\\helpers\\transaction.sql", "name": "default__exit_transaction", "macro_sql": "{% macro default__exit_transaction() %}\n    {{ return('') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.900092}, "macro.dbt_external_tables.bigquery__create_external_table": {"unique_id": "macro.dbt_external_tables.bigquery__create_external_table", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\bigquery\\create_external_table.sql", "original_file_path": "macros\\plugins\\bigquery\\create_external_table.sql", "name": "bigquery__create_external_table", "macro_sql": "{% macro bigquery__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n    \n    {%- set uris = [] -%}\n    {%- if options is mapping and options.get('uris', none) -%}\n        {%- set uris = external.options.get('uris') -%}\n    {%- else -%}\n        {%- set uris = [external.location] -%}\n    {%- endif -%}\n\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n        {%- if columns -%}(\n            {% for column in columns %}\n                {{column.name}} {{column.data_type}} {{- ',' if not loop.last -}}\n            {%- endfor -%}\n        )\n        {% endif %}\n        {% if options and options.get('hive_partition_uri_prefix', none) %}\n        with partition columns {%- if partitions %} (\n            {%- for partition in partitions %}\n                {{partition.name}} {{partition.data_type}}{{',' if not loop.last}}\n            {%- endfor -%}\n        ) {% endif -%}\n        {% endif %}\n        options (\n            uris = [{%- for uri in uris -%} '{{uri}}' {{- \",\" if not loop.last}} {%- endfor -%}]\n            {%- if options is mapping -%}\n            {%- for key, value in options.items() if key != 'uris' %}\n                {%- if value is string -%}\n                , {{key}} = '{{value}}'\n                {%- else -%}\n                , {{key}} = {{value}}\n                {%- endif -%}\n            {%- endfor -%}\n            {%- endif -%}\n        )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.900092}, "macro.dbt_external_tables.bigquery__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.bigquery__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\bigquery\\get_external_build_plan.sql", "original_file_path": "macros\\plugins\\bigquery\\get_external_build_plan.sql", "name": "bigquery__get_external_build_plan", "macro_sql": "{% macro bigquery__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.900092}, "macro.dbt_external_tables.redshift__create_external_table": {"unique_id": "macro.dbt_external_tables.redshift__create_external_table", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\create_external_table.sql", "original_file_path": "macros\\plugins\\redshift\\create_external_table.sql", "name": "redshift__create_external_table", "macro_sql": "{% macro redshift__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n{# https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_TABLE.html #}\n{# This assumes you have already created an external schema #}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {{adapter.quote(column.name)}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{adapter.quote(partition.name)}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} table properties {{external.table_properties}} {%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.900092}, "macro.dbt_external_tables.redshift__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.redshift__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\get_external_build_plan.sql", "original_file_path": "macros\\plugins\\redshift\\get_external_build_plan.sql", "name": "redshift__get_external_build_plan", "macro_sql": "{% macro redshift__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set create_or_replace = (var('ext_full_refresh', false) or not redshift_is_ext_tbl(source_node)) %}\n    \n    {% if create_or_replace %}\n\n        {% set build_plan = [\n                dbt_external_tables.dropif(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] + dbt_external_tables.refresh_external_table(source_node) \n        %}\n        \n    {% else %}\n    \n        {% set build_plan = dbt_external_tables.refresh_external_table(source_node) %}\n        \n    {% endif %}\n    \n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.redshift_is_ext_tbl", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9157174}, "macro.dbt_external_tables.redshift__refresh_external_table": {"unique_id": "macro.dbt_external_tables.redshift__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\refresh_external_table.sql", "original_file_path": "macros\\plugins\\redshift\\refresh_external_table.sql", "name": "redshift__refresh_external_table", "macro_sql": "{% macro redshift__refresh_external_table(source_node) %}\n\n    {%- set partitions = source_node.external.get('partitions',[]) -%}\n\n    {%- if partitions -%}\n    \n        {%- set part_len = partitions|length -%}\n    \n        {%- set get_partitions_sql -%}\n        \n        select * from\n        \n        {%- for partition in partitions %} (\n        \n            {%- set part_num = loop.index -%}\n            \n            {%- if partition.vals.macro -%}\n                {%- set vals = dbt_external_tables.render_from_context(partition.vals.macro, **partition.vals.args) -%}\n            {%- elif partition.vals is string -%}\n                {%- set vals = [partition.vals] -%}\n            {%- else -%}\n                {%- set vals = partition.vals -%}\n            {%- endif -%}\n        \n            {%- for val in vals %}\n            \n                select\n                    '\"{{ partition.name }}\"' as name_{{ part_num }},\n                    '\"{{ val }}\"' as val_{{ part_num }},\n                    '\"{{ dbt_external_tables.render_from_context(partition.path_macro, partition.name, val) }}\"' as path_{{ part_num }}\n                \n                {{ 'union all' if not loop.last else ') ' }}\n            \n            {%- endfor -%}\n            \n            {{ 'cross join' if not loop.last }}\n            \n        {%- endfor -%}\n        \n        {%- endset -%}\n        \n        {%- set finals = [] -%}\n        \n        {%- if execute -%}\n            {%- set results = run_query(get_partitions_sql) -%}\n            {%- for row in results -%}\n                \n                {%- set partition_parts = [] -%}\n                {%- set path_parts = [] -%}\n                \n                {%- for i in range(0, part_len) -%}\n                    {%- do partition_parts.append({\n                        'name': row[i * 3][1:-1],\n                        'value': row[i * 3 + 1][1:-1]\n                    }) -%}\n                    {%- do path_parts.append(row[i * 3 + 2][1:-1]) -%}\n                {%- endfor -%}\n                \n                {%- set construct = {\n                    'partition_by': partition_parts,\n                    'path': path_parts | join('/')\n                }  -%}\n                \n                {% do finals.append(construct) %}\n            {%- endfor -%}\n        {%- endif -%}\n    \n        {%- set ddl = dbt_external_tables.redshift_alter_table_add_partitions(source_node, finals) -%}\n        {{ return(ddl) }}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.render_from_context", "macro.dbt.run_query", "macro.dbt_external_tables.redshift_alter_table_add_partitions"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9157174}, "macro.dbt_external_tables.redshift_alter_table_add_partitions": {"unique_id": "macro.dbt_external_tables.redshift_alter_table_add_partitions", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\add_partitions.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\add_partitions.sql", "name": "redshift_alter_table_add_partitions", "macro_sql": "{% macro redshift_alter_table_add_partitions(source_node, partitions) %}\n\n  {{ log(\"Generating ADD PARTITION statement for partition set between \" \n         ~ partitions[0]['path'] ~ \" and \" ~ (partitions|last)['path']) }}\n\n  {% set ddl = [] %}\n  \n  {% if partitions|length > 0 %}\n  \n    {% set alter_table_add %}\n        alter table {{source(source_node.source_name, source_node.name)}} add if not exists \n    {% endset %}\n  \n    {%- set alters -%}\n\n      {{ alter_table_add }}\n\n    {%- for partition in partitions -%}\n\n      {%- if loop.index0 != 0 and loop.index0 % 100 == 0 -%}\n\n        ; {{ alter_table_add }}\n\n      {%- endif -%}\n\n        partition ({%- for part in partition.partition_by -%}{{ part.name }}='{{ part.value }}'{{', ' if not loop.last}}{%- endfor -%})\n        location '{{ source_node.external.location }}/{{ partition.path }}/'\n\n    {% endfor -%}\n    \n    {%- endset -%}\n    \n    {% set ddl = ddl + alters.split(';') %}\n\n  {% else %}\n\n    {{ log(\"No partitions to be added\") }}\n\n  {% endif %}\n  \n  {% do return(ddl) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9157174}, "macro.dbt_external_tables.redshift__dropif": {"unique_id": "macro.dbt_external_tables.redshift__dropif", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\dropif.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\dropif.sql", "name": "redshift__dropif", "macro_sql": "{% macro redshift__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}} cascade\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9157174}, "macro.dbt_external_tables.redshift_is_ext_tbl": {"unique_id": "macro.dbt_external_tables.redshift_is_ext_tbl", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\is_ext_tbl.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\is_ext_tbl.sql", "name": "redshift_is_ext_tbl", "macro_sql": "{% macro redshift_is_ext_tbl(node) %}\n\n    {% set existing_relation = load_relation(node) %}\n    \n    {#  external tables don't appear in information_schema.tables,\n        so dbt doesn't cache them #}\n    {% if existing_relation is none %}\n\n        {% set find_ext_tbl %}\n        \n            select count(*) from svv_external_tables\n            where schemaname = '{{node.schema}}'\n            and tablename = '{{node.identifier}}'\n        \n        {% endset %}\n        \n        {% if execute %}\n            {% set result = run_query(find_ext_tbl)[0][0] %}\n        {% else %}\n            {% set result = 0 %}\n        {% endif %}\n\n        {% set is_ext_tbl = (result > 0) %}\n        {% do return(is_ext_tbl) %}\n        \n    {% else %}\n    \n        {% do return(false) %}\n        \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9157174}, "macro.dbt_external_tables.year_month_day": {"unique_id": "macro.dbt_external_tables.year_month_day", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\paths.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\paths.sql", "name": "year_month_day", "macro_sql": "{% macro year_month_day(name, value) %}\n    {% set path = value.replace('-','/') %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9157174}, "macro.dbt_external_tables.key_value": {"unique_id": "macro.dbt_external_tables.key_value", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\paths.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\paths.sql", "name": "key_value", "macro_sql": "{% macro key_value(name, value) %}\n    {% set path = name ~ '=' ~ value %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9157174}, "macro.dbt_external_tables.value_only": {"unique_id": "macro.dbt_external_tables.value_only", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\paths.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\paths.sql", "name": "value_only", "macro_sql": "{% macro value_only(name, value) %}\n    {% set path = value %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9157174}, "macro.dbt_external_tables.render_from_context": {"unique_id": "macro.dbt_external_tables.render_from_context", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\render_macro.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\render_macro.sql", "name": "render_from_context", "macro_sql": "{% macro render_from_context(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called by macro '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  \n    {{ return(package_context[name](*varargs, **kwargs)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9157174}, "macro.dbt_external_tables.redshift__exit_transaction": {"unique_id": "macro.dbt_external_tables.redshift__exit_transaction", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\transaction.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\transaction.sql", "name": "redshift__exit_transaction", "macro_sql": "{% macro redshift__exit_transaction() %}\n    {{ return('begin; commit;') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9157174}, "macro.dbt_external_tables.snowflake__create_external_table": {"unique_id": "macro.dbt_external_tables.snowflake__create_external_table", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\create_external_table.sql", "original_file_path": "macros\\plugins\\snowflake\\create_external_table.sql", "name": "snowflake__create_external_table", "macro_sql": "{% macro snowflake__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) -%}\n\n{# https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html #}\n{# This assumes you have already created an external stage #}\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n    {%- if columns or partitions -%}\n    (\n        {%- if partitions -%}{%- for partition in partitions %}\n            {{partition.name}} {{partition.data_type}} as {{partition.expression}}{{- ',' if not loop.last or columns|length > 0 -}}\n        {%- endfor -%}{%- endif -%}\n        {%- for column in columns %}\n            {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n            {%- set col_expression -%}\n                {%- set col_id = 'value:c' ~ loop.index if is_csv else 'value:' ~ column.name -%}\n                (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n            {%- endset %}\n            {{column_quoted}} {{column.data_type}} as ({{col_expression}}::{{column.data_type}})\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {%- endif -%}\n    {% if partitions %} partition by ({{partitions|map(attribute='name')|join(', ')}}) {% endif %}\n    location = {{external.location}} {# stage #}\n    {% if external.auto_refresh in (true, false) -%}\n      auto_refresh = {{external.auto_refresh}}\n    {%- endif %}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if external.integration -%} integration = '{{external.integration}}' {%- endif %}\n    file_format = {{external.file_format}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9349968}, "macro.dbt_external_tables.snowflake__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.snowflake__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\get_external_build_plan.sql", "original_file_path": "macros\\plugins\\snowflake\\get_external_build_plan.sql", "name": "snowflake__get_external_build_plan", "macro_sql": "{% macro snowflake__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if source_node.external.get('snowpipe', none) is not none %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.snowflake_create_empty_table(source_node),\n                dbt_external_tables.snowflake_get_copy_sql(source_node, explicit_transaction=true),\n                dbt_external_tables.snowflake_create_snowpipe(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.snowflake_refresh_snowpipe(source_node) %}\n        {% endif %}\n            \n    {% else %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n        {% endif %}\n        \n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_create_empty_table", "macro.dbt_external_tables.snowflake_get_copy_sql", "macro.dbt_external_tables.snowflake_create_snowpipe", "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.936599}, "macro.dbt_external_tables.snowflake__refresh_external_table": {"unique_id": "macro.dbt_external_tables.snowflake__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\refresh_external_table.sql", "original_file_path": "macros\\plugins\\snowflake\\refresh_external_table.sql", "name": "snowflake__refresh_external_table", "macro_sql": "{% macro snowflake__refresh_external_table(source_node) %}\n\n    {% set external = source_node.external %}\n    {% set snowpipe = source_node.external.get('snowpipe', none) %}\n    \n    {% set auto_refresh = external.get('auto_refresh', false) %}\n    {% set partitions = external.get('partitions', none) %}\n    \n    {% set manual_refresh = (partitions and not auto_refresh) %}\n    \n    {% if manual_refresh %}\n\n        {% set ddl %}\n        begin;\n        alter external table {{source(source_node.source_name, source_node.name)}} refresh;\n        commit;\n        {% endset %}\n        \n        {% do return([ddl]) %}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.936599}, "macro.dbt_external_tables.is_csv": {"unique_id": "macro.dbt_external_tables.is_csv", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\helpers\\is_csv.sql", "original_file_path": "macros\\plugins\\snowflake\\helpers\\is_csv.sql", "name": "is_csv", "macro_sql": "{% macro is_csv(file_format) %}\n\n{# From https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html:\n\nImportant: The external table does not inherit the file format, if any, in the \nstage definition. You must explicitly specify any file format options for the \nexternal table using the FILE_FORMAT parameter.\n\nNote: FORMAT_NAME and TYPE are mutually exclusive; to avoid unintended behavior, \nyou should only specify one or the other when creating an external table.\n\n#}\n\n    {% set ff_ltrimmed = file_format|lower|replace(' ','') %}\n\n    {% if 'type=' in ff_ltrimmed %}\n    \n        {% if 'type=csv' in ff_ltrimmed %}\n\n            {{return(true)}}\n\n        {% else %}\n\n            {{return(false)}}\n            \n        {% endif %}\n        \n    {% else %}\n    \n        {% set ff_standardized = ff_ltrimmed\n            | replace('(','') | replace(')','')\n            | replace('format_name=','') %}\n        {% set fqn = ff_standardized.split('.') %}\n        \n        {% if fqn | length == 3 %}\n            {% set ff_database, ff_schema, ff_identifier = fqn[0], fqn[1], fqn[2] %}\n        {% elif fqn | length == 2 %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, fqn[0], fqn[1] %}\n        {% else %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, target.schema, fqn[0] %}\n        {% endif %}\n    \n        {% call statement('get_file_format', fetch_result = True) %}\n            show file formats in {{ff_database}}.{{ff_schema}}\n        {% endcall %}\n        \n        {% set ffs = load_result('get_file_format').table %}\n        \n        {% for ff in ffs %}\n            \n            {% if ff['name']|lower == ff_identifier and ff['type']|lower == 'csv' %}\n            \n                {{return(true)}}\n            \n            {% endif %}\n        \n        {% endfor %}\n        \n        {{return(false)}}        \n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.936599}, "macro.dbt_external_tables.snowflake_create_empty_table": {"unique_id": "macro.dbt_external_tables.snowflake_create_empty_table", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\snowpipe\\create_empty_table.sql", "original_file_path": "macros\\plugins\\snowflake\\snowpipe\\create_empty_table.sql", "name": "snowflake_create_empty_table", "macro_sql": "{% macro snowflake_create_empty_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() %}\n\n    create or replace table {{source(source_node.source_name, source_node.name)}} (\n        {% if columns|length == 0 %}\n            value variant,\n        {% else -%}\n        {%- for column in columns -%}\n            {{column.name}} {{column.data_type}},\n        {% endfor -%}\n        {% endif %}\n            metadata_filename varchar,\n            metadata_file_row_number bigint,\n            _dbt_copied_at timestamp\n    );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.936599}, "macro.dbt_external_tables.snowflake_create_snowpipe": {"unique_id": "macro.dbt_external_tables.snowflake_create_snowpipe", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\snowpipe\\create_snowpipe.sql", "original_file_path": "macros\\plugins\\snowflake\\snowpipe\\create_snowpipe.sql", "name": "snowflake_create_snowpipe", "macro_sql": "{% macro snowflake_create_snowpipe(source_node) %}\n\n    {%- set external = source_node.external -%}\n    {%- set snowpipe = external.snowpipe -%}\n\n{# https://docs.snowflake.com/en/sql-reference/sql/create-pipe.html #}\n    create or replace pipe {{source(source_node.source_name, source_node.name)}}\n        {% if snowpipe.auto_ingest -%} auto_ingest = {{snowpipe.auto_ingest}} {%- endif %}\n        {% if snowpipe.aws_sns_topic -%} aws_sns_topic = '{{snowpipe.aws_sns_topic}}' {%- endif %}\n        {% if snowpipe.integration -%} integration = '{{snowpipe.integration}}' {%- endif %}\n        as {{ dbt_external_tables.snowflake_get_copy_sql(source_node) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_get_copy_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.936599}, "macro.dbt_external_tables.snowflake_get_copy_sql": {"unique_id": "macro.dbt_external_tables.snowflake_get_copy_sql", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\snowpipe\\get_copy_sql.sql", "original_file_path": "macros\\plugins\\snowflake\\snowpipe\\get_copy_sql.sql", "name": "snowflake_get_copy_sql", "macro_sql": "{% macro snowflake_get_copy_sql(source_node, explicit_transaction=false) %}\n{# This assumes you have already created an external stage #}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) %}\n    {%- set copy_options = external.snowpipe.get('copy_options', none) -%}\n   \n    {%- if explicit_transaction -%} begin; {%- endif %}\n    \n    copy into {{source(source_node.source_name, source_node.name)}}\n    from ( \n        select\n        {% if columns|length == 0 %}\n            $1::variant as value,\n        {% else -%}\n        {%- for column in columns -%}\n            {%- set col_expression -%}\n                {%- if is_csv -%}nullif(${{loop.index}},''){# special case: get columns by ordinal position #}\n                {%- else -%}nullif($1:{{column.name}},''){# standard behavior: get columns by name #}\n                {%- endif -%}\n            {%- endset -%}\n            {{col_expression}}::{{column.data_type}} as {{column.name}},\n        {% endfor -%}\n        {% endif %}\n            metadata$filename::varchar as metadata_filename,\n            metadata$file_row_number::bigint as metadata_file_row_number,\n            current_timestamp::timestamp as _dbt_copied_at\n        from {{external.location}} {# stage #}\n    )\n    file_format = {{external.file_format}}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if copy_options %} {{copy_options}} {% endif %};\n    \n    {% if explicit_transaction -%} commit; {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.936599}, "macro.dbt_external_tables.snowflake_refresh_snowpipe": {"unique_id": "macro.dbt_external_tables.snowflake_refresh_snowpipe", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\snowpipe\\refresh_snowpipe.sql", "original_file_path": "macros\\plugins\\snowflake\\snowpipe\\refresh_snowpipe.sql", "name": "snowflake_refresh_snowpipe", "macro_sql": "{% macro snowflake_refresh_snowpipe(source_node) %}\n\n    {% set snowpipe = source_node.external.snowpipe %}\n    {% set auto_ingest = snowpipe.get('auto_ingest', false) if snowpipe is mapping %}\n    \n    {% if auto_ingest is true %}\n    \n        {% do return([]) %}\n    \n    {% else %}\n    \n        {% set ddl %}\n        alter pipe {{source(source_node.source_name, source_node.name)}} refresh\n        {% endset %}\n        \n        {{ return([ddl]) }}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.936599}, "macro.dbt_external_tables.spark__create_external_table": {"unique_id": "macro.dbt_external_tables.spark__create_external_table", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\spark\\create_external_table.sql", "original_file_path": "macros\\plugins\\spark\\create_external_table.sql", "name": "spark__create_external_table", "macro_sql": "{% macro spark__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n\n{# https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html #}\n    create table {{source(source_node.source_name, source_node.name)}} \n    {%- if columns|length > 0 %} (\n        {% for column in columns %}\n            {{column.name}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    ) {% endif -%}\n    {% if external.using %} using {{external.using}} {%- endif %}\n    {% if options -%} options (\n        {%- for key, value in options.items() -%}\n            '{{ key }}' = '{{value}}' {{- ', \\n' if not loop.last -}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{partition.name}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} tblproperties {{ external.table_properties }} {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9523404}, "macro.dbt_external_tables.spark__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.spark__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\spark\\get_external_build_plan.sql", "original_file_path": "macros\\plugins\\spark\\get_external_build_plan.sql", "name": "spark__get_external_build_plan", "macro_sql": "{% macro spark__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = none,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [\n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% set recover_partitions = spark__recover_partitions(source_node) %}\n    {% if recover_partitions|length > 0 %}\n    {% set build_plan = build_plan + [\n        recover_partitions\n    ] %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table", "macro.dbt_external_tables.spark__recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9523404}, "macro.dbt_external_tables.spark__refresh_external_table": {"unique_id": "macro.dbt_external_tables.spark__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\spark\\refresh_external_table.sql", "original_file_path": "macros\\plugins\\spark\\refresh_external_table.sql", "name": "spark__refresh_external_table", "macro_sql": "{% macro spark__refresh_external_table(source_node) %}\n    \n    {% set refresh %}\n        refresh table {{source(source_node.source_name, source_node.name)}}\n    {% endset %}\n    \n    {% do return([refresh]) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9523404}, "macro.dbt_external_tables.spark__dropif": {"unique_id": "macro.dbt_external_tables.spark__dropif", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\spark\\helpers\\dropif.sql", "original_file_path": "macros\\plugins\\spark\\helpers\\dropif.sql", "name": "spark__dropif", "macro_sql": "{% macro spark__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}}\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9523404}, "macro.dbt_external_tables.spark__recover_partitions": {"unique_id": "macro.dbt_external_tables.spark__recover_partitions", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\spark\\helpers\\recover_partitions.sql", "original_file_path": "macros\\plugins\\spark\\helpers\\recover_partitions.sql", "name": "spark__recover_partitions", "macro_sql": "{% macro spark__recover_partitions(source_node) %}\n    {# https://docs.databricks.com/sql/language-manual/sql-ref-syntax-ddl-alter-table.html #}\n\n    {% set ddl %}\n    {%- if source_node.external.partitions and source_node.external.using and source_node.external.using|lower != 'delta' -%}\n        ALTER TABLE {{ source(source_node.source_name, source_node.name) }} RECOVER PARTITIONS\n    {%- endif -%}\n    {% endset %}\n\n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9523404}, "macro.dbt_external_tables.sqlserver__create_external_table": {"unique_id": "macro.dbt_external_tables.sqlserver__create_external_table", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\sqlserver\\create_external_table.sql", "original_file_path": "macros\\plugins\\sqlserver\\create_external_table.sql", "name": "sqlserver__create_external_table", "macro_sql": "{% macro sqlserver__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n\n    {% if external.ansi_nulls is true -%} SET ANSI_NULLS ON; {%- endif %}\n    {% if external.quoted_identifier is true -%} SET QUOTED_IDENTIFIER ON; {%- endif %}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {# TODO set nullity based on schema tests?? #}\n            {%- set nullity = 'NOT NULL' if 'not_null' in columns.tests else 'NULL'-%}\n            {{adapter.quote(column.name)}} {{column.data_type}} {{nullity}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    WITH (\n        {# remove keys that are None (i.e. not defined for a given source) #}\n        {%- for key, value in external.items() if value is not none and key not in ['ansi_nulls', 'quoted_identifier'] -%}\n            {{key}} = \n                {%- if key in [\"location\", \"schema_name\", \"object_name\"] -%}\n                    '{{value}}'\n                {% elif key in [\"data_source\",\"file_format\"] -%}\n                    [{{value}}]\n                {% else -%}\n                    {{value}}\n                {%- endif -%}\n            {{- ',' if not loop.last -}}\n            {%- endfor -%}\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9523404}, "macro.dbt_external_tables.sqlserver__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.sqlserver__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\sqlserver\\get_external_build_plan.sql", "original_file_path": "macros\\plugins\\sqlserver\\get_external_build_plan.sql", "name": "sqlserver__get_external_build_plan", "macro_sql": "{% macro sqlserver__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [ \n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9523404}, "macro.dbt_external_tables.sqlserver__dropif": {"unique_id": "macro.dbt_external_tables.sqlserver__dropif", "package_name": "dbt_external_tables", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\sqlserver\\helpers\\dropif.sql", "original_file_path": "macros\\plugins\\sqlserver\\helpers\\dropif.sql", "name": "sqlserver__dropif", "macro_sql": "{% macro sqlserver__dropif(node) %}\n    \n    {% set ddl %}\n      if object_id ('{{source(node.source_name, node.name)}}') is not null\n        begin\n        drop external table {{source(node.source_name, node.name)}}\n        end\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9523404}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\any_value.sql", "original_file_path": "macros\\cross_db_utils\\any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9523404}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\any_value.sql", "original_file_path": "macros\\cross_db_utils\\any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9523404}, "macro.dbt_utils.postgres__any_value": {"unique_id": "macro.dbt_utils.postgres__any_value", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\any_value.sql", "original_file_path": "macros\\cross_db_utils\\any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9523404}, "macro.dbt_utils.array_append": {"unique_id": "macro.dbt_utils.array_append", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9523404}, "macro.dbt_utils.default__array_append": {"unique_id": "macro.dbt_utils.default__array_append", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9523404}, "macro.dbt_utils.bigquery__array_append": {"unique_id": "macro.dbt_utils.bigquery__array_append", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9523404}, "macro.dbt_utils.redshift__array_append": {"unique_id": "macro.dbt_utils.redshift__array_append", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "name": "redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9523404}, "macro.dbt_utils.array_concat": {"unique_id": "macro.dbt_utils.array_concat", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9523404}, "macro.dbt_utils.default__array_concat": {"unique_id": "macro.dbt_utils.default__array_concat", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9523404}, "macro.dbt_utils.bigquery__array_concat": {"unique_id": "macro.dbt_utils.bigquery__array_concat", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9523404}, "macro.dbt_utils.redshift__array_concat": {"unique_id": "macro.dbt_utils.redshift__array_concat", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "name": "redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9523404}, "macro.dbt_utils.array_construct": {"unique_id": "macro.dbt_utils.array_construct", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9523404}, "macro.dbt_utils.default__array_construct": {"unique_id": "macro.dbt_utils.default__array_construct", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9523404}, "macro.dbt_utils.snowflake__array_construct": {"unique_id": "macro.dbt_utils.snowflake__array_construct", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9523404}, "macro.dbt_utils.redshift__array_construct": {"unique_id": "macro.dbt_utils.redshift__array_construct", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9523404}, "macro.dbt_utils.bigquery__array_construct": {"unique_id": "macro.dbt_utils.bigquery__array_construct", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9523404}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\bool_or.sql", "original_file_path": "macros\\cross_db_utils\\bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9523404}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\bool_or.sql", "original_file_path": "macros\\cross_db_utils\\bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9523404}, "macro.dbt_utils.snowflake__bool_or": {"unique_id": "macro.dbt_utils.snowflake__bool_or", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\bool_or.sql", "original_file_path": "macros\\cross_db_utils\\bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9523404}, "macro.dbt_utils.bigquery__bool_or": {"unique_id": "macro.dbt_utils.bigquery__bool_or", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\bool_or.sql", "original_file_path": "macros\\cross_db_utils\\bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9523404}, "macro.dbt_utils.cast_array_to_string": {"unique_id": "macro.dbt_utils.cast_array_to_string", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.default__cast_array_to_string": {"unique_id": "macro.dbt_utils.default__cast_array_to_string", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.postgres__cast_array_to_string": {"unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ dbt_utils.type_string() }}){%- endset -%}\n    {{ dbt_utils.replace(dbt_utils.replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.redshift__cast_array_to_string": {"unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.bigquery__cast_array_to_string": {"unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\concat.sql", "original_file_path": "macros\\cross_db_utils\\concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\concat.sql", "original_file_path": "macros\\cross_db_utils\\concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.postgres__type_timestamp": {"unique_id": "macro.dbt_utils.postgres__type_timestamp", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9679656}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\date_trunc.sql", "original_file_path": "macros\\cross_db_utils\\date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\date_trunc.sql", "original_file_path": "macros\\cross_db_utils\\date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\date_trunc.sql", "original_file_path": "macros\\cross_db_utils\\date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\escape_single_quotes.sql", "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\escape_single_quotes.sql", "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\escape_single_quotes.sql", "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\escape_single_quotes.sql", "original_file_path": "macros\\cross_db_utils\\escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\except.sql", "original_file_path": "macros\\cross_db_utils\\except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\except.sql", "original_file_path": "macros\\cross_db_utils\\except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\except.sql", "original_file_path": "macros\\cross_db_utils\\except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\hash.sql", "original_file_path": "macros\\cross_db_utils\\hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\hash.sql", "original_file_path": "macros\\cross_db_utils\\hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\hash.sql", "original_file_path": "macros\\cross_db_utils\\hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\intersect.sql", "original_file_path": "macros\\cross_db_utils\\intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\intersect.sql", "original_file_path": "macros\\cross_db_utils\\intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\intersect.sql", "original_file_path": "macros\\cross_db_utils\\intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\length.sql", "original_file_path": "macros\\cross_db_utils\\length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\length.sql", "original_file_path": "macros\\cross_db_utils\\length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\length.sql", "original_file_path": "macros\\cross_db_utils\\length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.bigquery__listagg": {"unique_id": "macro.dbt_utils.bigquery__listagg", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9835923}, "macro.dbt_utils.postgres__listagg": {"unique_id": "macro.dbt_utils.postgres__listagg", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    \n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9992163}, "macro.dbt_utils.redshift__listagg": {"unique_id": "macro.dbt_utils.redshift__listagg", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\listagg.sql", "name": "redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9992163}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\literal.sql", "original_file_path": "macros\\cross_db_utils\\literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9992163}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\literal.sql", "original_file_path": "macros\\cross_db_utils\\literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9992163}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\position.sql", "original_file_path": "macros\\cross_db_utils\\position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9992163}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\position.sql", "original_file_path": "macros\\cross_db_utils\\position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9992163}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\position.sql", "original_file_path": "macros\\cross_db_utils\\position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9992163}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\replace.sql", "original_file_path": "macros\\cross_db_utils\\replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9992163}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\replace.sql", "original_file_path": "macros\\cross_db_utils\\replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9992163}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9992163}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9992163}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9992163}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\right.sql", "original_file_path": "macros\\cross_db_utils\\right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9992163}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9992163}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9992163}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9992163}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9992163}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9992163}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9992163}, "macro.dbt_utils._split_part_negative": {"unique_id": "macro.dbt_utils._split_part_negative", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9992163}, "macro.dbt_utils.postgres__split_part": {"unique_id": "macro.dbt_utils.postgres__split_part", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9992163}, "macro.dbt_utils.redshift__split_part": {"unique_id": "macro.dbt_utils.redshift__split_part", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9992163}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9992163}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9992163}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9992163}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9992163}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\cross_db_utils\\width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804367.9992163}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\_is_ephemeral.sql", "original_file_path": "macros\\cross_db_utils\\_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0148406}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\_is_relation.sql", "original_file_path": "macros\\cross_db_utils\\_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0148406}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0148406}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0148406}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0148406}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0148406}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0148406}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0148406}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0148406}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0148406}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0148406}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0148406}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0148406}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0148406}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0148406}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0148406}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0148406}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0304656}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0304656}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0304656}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0304656}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0304656}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0304656}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0304656}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0304656}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0304656}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0304656}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0304656}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0304656}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0304656}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\test_not_null_where.sql", "original_file_path": "macros\\generic_tests\\test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0304656}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\test_not_null_where.sql", "original_file_path": "macros\\generic_tests\\test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0304656}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\test_unique_where.sql", "original_file_path": "macros\\generic_tests\\test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0304656}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\test_unique_where.sql", "original_file_path": "macros\\generic_tests\\test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0304656}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0304656}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0304656}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0304656}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0304656}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0304656}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0304656}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.046091}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.046091}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\slugify.sql", "original_file_path": "macros\\jinja_helpers\\slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.046091}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.046091}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.046091}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.046091}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.046091}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0617163}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0617163}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0617163}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0617163}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0617163}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0617163}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0617163}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0617163}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0617163}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0617163}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0617163}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0617163}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0617163}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0617163}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0617163}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0617163}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0773416}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0773416}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0773416}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0773416}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0773416}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0773416}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0773416}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0773416}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0773416}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0773416}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0773416}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0773416}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0773416}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0773416}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0773416}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0773416}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0773416}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0929668}, "macro.dbt_utils.bigquery__get_table_types_sql": {"unique_id": "macro.dbt_utils.bigquery__get_table_types_sql", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "name": "bigquery__get_table_types_sql", "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as `table_type`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0929668}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0929668}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0929668}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0929668}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0929668}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0929668}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0929668}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0929668}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0929668}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0929668}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0929668}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0929668}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0929668}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0929668}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0929668}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0929668}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0929668}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.0929668}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.1085916}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.1085916}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.1085916}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.1085916}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.1085916}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.1085916}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.1085916}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.1085916}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.1242154}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.1242154}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666804368.1242154}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "C:\\Users\\vahid_qwu1zqx\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "overview.md", "original_file_path": "docs\\overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "crosschain_models.crosschain_lending_borrower_is_a_contract": {"unique_id": "crosschain_models.crosschain_lending_borrower_is_a_contract", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\defi\\Borrowing\\borrower_is_a_contract.md", "original_file_path": "models\\docs\\defi\\Borrowing\\borrower_is_a_contract.md", "name": "crosschain_lending_borrower_is_a_contract", "block_contents": "If the depositor of collateral is a contract then its a Yes, if the depositor of collateral is a normal address it is a No."}, "crosschain_models.crosschain_borrower": {"unique_id": "crosschain_models.crosschain_borrower", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\defi\\Borrowing\\Borrower.md", "original_file_path": "models\\docs\\defi\\Borrowing\\Borrower.md", "name": "crosschain_borrower", "block_contents": "Its the address of the user who is Borrowing or repaying the loan, depending on the action."}, "crosschain_models.cross_chain_block_timestamp": {"unique_id": "crosschain_models.cross_chain_block_timestamp", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\Block_timestamp_UTC.md", "original_file_path": "models\\docs\\Block_timestamp_UTC.md", "name": "cross_chain_block_timestamp", "block_contents": "The block timestamp of this transaction in UTC"}, "crosschain_models.crosschain_action": {"unique_id": "crosschain_models.crosschain_action", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\defi\\lending\\action.md", "original_file_path": "models\\docs\\defi\\lending\\action.md", "name": "crosschain_action", "block_contents": "The action that the user is taking.\n Deposit: user is depositing funds to be used for lending\n Withdraw: user has changed their mind and are no longer willing to lend, so they withdraw their asset"}, "crosschain_models.cross_chain_swap_symbol_in": {"unique_id": "crosschain_models.cross_chain_swap_symbol_in", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\defi\\Swap_symbol_in.md", "original_file_path": "models\\docs\\defi\\Swap_symbol_in.md", "name": "cross_chain_swap_symbol_in", "block_contents": "The symbol of the token sent for swap."}, "crosschain_models.cross_chain_swap_platform": {"unique_id": "crosschain_models.cross_chain_swap_platform", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\defi\\Swap_platform.md", "original_file_path": "models\\docs\\defi\\Swap_platform.md", "name": "cross_chain_swap_platform", "block_contents": "This field denotes which application the liquidity pool belongs to."}, "crosschain_models.cross_chain_swap_sender": {"unique_id": "crosschain_models.cross_chain_swap_sender", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\defi\\Swap_sender.md", "original_file_path": "models\\docs\\defi\\Swap_sender.md", "name": "cross_chain_swap_sender", "block_contents": "The address of the wallet or contract that creates the swap. The Router is usually the Sender in the swap function."}, "crosschain_models.cross_chain_swap_amount_out": {"unique_id": "crosschain_models.cross_chain_swap_amount_out", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\defi\\Swap_Amount_out.md", "original_file_path": "models\\docs\\defi\\Swap_Amount_out.md", "name": "cross_chain_swap_amount_out", "block_contents": "The amount of tokens taken out of or received from the swap."}, "crosschain_models.crosschain_borrow_symbol": {"unique_id": "crosschain_models.crosschain_borrow_symbol", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\defi\\Borrowing\\Borrow_symbol.md", "original_file_path": "models\\docs\\defi\\Borrowing\\Borrow_symbol.md", "name": "crosschain_borrow_symbol", "block_contents": "The symbol of the asset/collateral that is payed or received, depending on the action"}, "crosschain_models.cross_chain_lending_lender_is_a_contract": {"unique_id": "crosschain_models.cross_chain_lending_lender_is_a_contract", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\defi\\lending\\lender_is_a_contract.md", "original_file_path": "models\\docs\\defi\\lending\\lender_is_a_contract.md", "name": "cross_chain_lending_lender_is_a_contract", "block_contents": "If the depositor is a contract then its a Yes, if the depositor is a normal address it is a No."}, "crosschain_models.cross_chain_swap_amount_in_usd": {"unique_id": "crosschain_models.cross_chain_swap_amount_in_usd", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\defi\\Swap_amount_in_USD.md", "original_file_path": "models\\docs\\defi\\Swap_amount_in_USD.md", "name": "cross_chain_swap_amount_in_usd", "block_contents": "The amount of tokens put into the swap converted to USD using the price of the token."}, "crosschain_models.cross_chain_swap_amount_out_usd": {"unique_id": "crosschain_models.cross_chain_swap_amount_out_usd", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\defi\\Swap_amount_out_USD.md", "original_file_path": "models\\docs\\defi\\Swap_amount_out_USD.md", "name": "cross_chain_swap_amount_out_usd", "block_contents": "The amount of tokens taken out of or received from the swap converted to USD using the price of the token."}, "crosschain_models.cross_chain_swap_pool_address": {"unique_id": "crosschain_models.cross_chain_swap_pool_address", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\defi\\Pool_address.md", "original_file_path": "models\\docs\\defi\\Pool_address.md", "name": "cross_chain_swap_pool_address", "block_contents": "The contract address for the liquidity pool."}, "crosschain_models.cross_chain_lending_depositor": {"unique_id": "crosschain_models.cross_chain_lending_depositor", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\defi\\lending\\depositor.md", "original_file_path": "models\\docs\\defi\\lending\\depositor.md", "name": "cross_chain_lending_depositor", "block_contents": "The address of the user or contract that is depositing funds for lending"}, "crosschain_models.cross_chain_swap_token_out": {"unique_id": "crosschain_models.cross_chain_swap_token_out", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\defi\\Swap_token_out.md", "original_file_path": "models\\docs\\defi\\Swap_token_out.md", "name": "cross_chain_swap_token_out", "block_contents": "The address of the token being swapped to."}, "crosschain_models.crosschain_lending_origin_from_address": {"unique_id": "crosschain_models.crosschain_lending_origin_from_address", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\defi\\lending\\origin_from_address.md", "original_file_path": "models\\docs\\defi\\lending\\origin_from_address.md", "name": "crosschain_lending_origin_from_address", "block_contents": "The address of the user who initiates the transaction."}, "crosschain_models.cross_chain_lending_lending_pool": {"unique_id": "crosschain_models.cross_chain_lending_lending_pool", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\defi\\lending\\lending_pool.md", "original_file_path": "models\\docs\\defi\\lending\\lending_pool.md", "name": "cross_chain_lending_lending_pool", "block_contents": "The name of the lending pool."}, "crosschain_models.cross_chain_lending_symbol": {"unique_id": "crosschain_models.cross_chain_lending_symbol", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\defi\\lending\\symbol.md", "original_file_path": "models\\docs\\defi\\lending\\symbol.md", "name": "cross_chain_lending_symbol", "block_contents": "The symbol of the asset that is being deposited for lending."}, "crosschain_models.cross_chain_swap_token_in": {"unique_id": "crosschain_models.cross_chain_swap_token_in", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\defi\\Swap_token_in.md", "original_file_path": "models\\docs\\defi\\Swap_token_in.md", "name": "cross_chain_swap_token_in", "block_contents": "The address of the token sent for swap."}, "crosschain_models.cross_chain_lending_amount_usd": {"unique_id": "crosschain_models.cross_chain_lending_amount_usd", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\defi\\lending\\amount_usd.md", "original_file_path": "models\\docs\\defi\\lending\\amount_usd.md", "name": "cross_chain_lending_amount_usd", "block_contents": "The amount of the asset that is being deposited for lending in USD."}, "crosschain_models.cross_chain_swap_symbol_out": {"unique_id": "crosschain_models.cross_chain_swap_symbol_out", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\defi\\Swap_symbol_out.md", "original_file_path": "models\\docs\\defi\\Swap_symbol_out.md", "name": "cross_chain_swap_symbol_out", "block_contents": "The symbol of the token being swapped to."}, "crosschain_models.origin_from_address": {"unique_id": "crosschain_models.origin_from_address", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\origin_from_address.md", "original_file_path": "models\\docs\\origin_from_address.md", "name": "origin_from_address", "block_contents": "The address of the user who initiates the swap. If a swap action generates multiple swaps, all of them will have the same address as origin_from_address."}, "crosschain_models.cross_chain_swap_tx_to": {"unique_id": "crosschain_models.cross_chain_swap_tx_to", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\defi\\Swap_tx_to.md", "original_file_path": "models\\docs\\defi\\Swap_tx_to.md", "name": "cross_chain_swap_tx_to", "block_contents": "The tx_to is the address who receives the swapped token. This corresponds to the \"to\" field in the swap function."}, "crosschain_models.crosschain_borrow_action": {"unique_id": "crosschain_models.crosschain_borrow_action", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\defi\\Borrowing\\action.md", "original_file_path": "models\\docs\\defi\\Borrowing\\action.md", "name": "crosschain_borrow_action", "block_contents": "The action that the user is taking.\n Borrow: user is borrowing an asset\n Repay: user is repaying the asset that they have borrowed in a previous loan\n Add collateral: user is depositing collateral for their loan. This happens some times in the same transaction as the borrowing transaction and some times in a separate transaction. \n Remove collateral: user is withdrawing collateral. This happens some times in the same transaction as the borrowing transaction and some times in a separate transaction."}, "crosschain_models.cross_chain_block_number": {"unique_id": "crosschain_models.cross_chain_block_number", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\Block_number.md", "original_file_path": "models\\docs\\Block_number.md", "name": "cross_chain_block_number", "block_contents": "The block number at which the transaction is finalized."}, "crosschain_models.crosschain_lending_origin_to_address": {"unique_id": "crosschain_models.crosschain_lending_origin_to_address", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\defi\\lending\\origin_to_address.md", "original_file_path": "models\\docs\\defi\\lending\\origin_to_address.md", "name": "crosschain_lending_origin_to_address", "block_contents": "The person who initiates the depositing transaction has to interact with this address. This address belongs to the lending platform or directs the transactio there."}, "crosschain_models.crosschain_borrow_amount_usd": {"unique_id": "crosschain_models.crosschain_borrow_amount_usd", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\defi\\Borrowing\\amount_usd.md", "original_file_path": "models\\docs\\defi\\Borrowing\\amount_usd.md", "name": "crosschain_borrow_amount_usd", "block_contents": "The meaning depends on the action:\nBorrow: The amount of the asset in USD that the user is borrowing or\nRepay: The amount of the asset in USD that the user is repaying\nAdd collateral: The amount of collateral in USD that the user is depositing\nRemove collateral: The amount of collateral in USD that the user is withdrawing"}, "crosschain_models.cross_chain_event_index": {"unique_id": "crosschain_models.cross_chain_event_index", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\Event_index.md", "original_file_path": "models\\docs\\Event_index.md", "name": "cross_chain_event_index", "block_contents": "Event number within a transaction."}, "crosschain_models.cross_chain_tx_hash": {"unique_id": "crosschain_models.cross_chain_tx_hash", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\TX_Hash.md", "original_file_path": "models\\docs\\TX_Hash.md", "name": "cross_chain_tx_hash", "block_contents": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed."}, "crosschain_models.cross_chain_lending_pool_address": {"unique_id": "crosschain_models.cross_chain_lending_pool_address", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\defi\\lending\\pool_address.md", "original_file_path": "models\\docs\\defi\\lending\\pool_address.md", "name": "cross_chain_lending_pool_address", "block_contents": "The contract address for the lending pool."}, "crosschain_models.crosschain_borrow_asset": {"unique_id": "crosschain_models.crosschain_borrow_asset", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\defi\\Borrowing\\asset.md", "original_file_path": "models\\docs\\defi\\Borrowing\\asset.md", "name": "crosschain_borrow_asset", "block_contents": "The address of the asset/collateral token that is being borrowed/repayed/deposited etc. depending on the action"}, "crosschain_models.crosschain_borrow_amount": {"unique_id": "crosschain_models.crosschain_borrow_amount", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\defi\\Borrowing\\amount.md", "original_file_path": "models\\docs\\defi\\Borrowing\\amount.md", "name": "crosschain_borrow_amount", "block_contents": "The meaning depends on the action:\nBorrow: The amount of the asset that the user is borrowing or\nRepay: The amount of the asset that the user is repaying\nAdd collateral: The amount of collateral that the user is depositing\nRemove collateral: The amount of collateral that the user is withdrawing"}, "crosschain_models.cross_chain_event_log_id": {"unique_id": "crosschain_models.cross_chain_event_log_id", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\Event_Log_id.md", "original_file_path": "models\\docs\\Event_Log_id.md", "name": "cross_chain_event_log_id", "block_contents": "This is the primary key for this table. This is a concatenation of the transaction hash and the event index at which the event occurred. This field can be used within other event based tables such as ```fact_transfers``` & ```ez_token_transfers```."}, "crosschain_models.cross_chain_swap_amount_in": {"unique_id": "crosschain_models.cross_chain_swap_amount_in", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\defi\\Swap_Amount_in.md", "original_file_path": "models\\docs\\defi\\Swap_Amount_in.md", "name": "cross_chain_swap_amount_in", "block_contents": "The amount of tokens put into the swap."}, "crosschain_models.origin_to_address": {"unique_id": "crosschain_models.origin_to_address", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\origin_to_address.md", "original_file_path": "models\\docs\\origin_to_address.md", "name": "origin_to_address", "block_contents": "The person who initiates the swap has to interact with this address. This address belongs to the decentralized exchange and/or is a router."}, "crosschain_models.cross_chain_lending_amount": {"unique_id": "crosschain_models.cross_chain_lending_amount", "package_name": "crosschain_models", "root_path": "C:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "docs\\defi\\lending\\amount.md", "original_file_path": "models\\docs\\defi\\lending\\amount.md", "name": "cross_chain_lending_amount", "block_contents": "The amount of the asset that is being deposited for lending"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {"test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_crosschain__address_labels_ADDRESS__0_xX_0_9a_fA_F_.8c80bd0d38": [{"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(enabled=False,where=\"BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')\",alias=\"dbt_expectations_expect_column_db665dcefc65e6cba99830a726abbcaa\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('crosschain__address_labels')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_db665dcefc65e6cba99830a726abbcaa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_crosschain", "fqn": ["crosschain_models", "core", "dbt_expectations_expect_column_values_to_match_regex_crosschain__address_labels_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_crosschain__address_labels_ADDRESS__0_xX_0_9a_fA_F_.8c80bd0d38", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_db665dcefc65e6cba99830a726abbcaa.sql", "original_file_path": "models\\core\\core__address_labels.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_crosschain__address_labels_ADDRESS__0_xX_0_9a_fA_F_", "alias": "address_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["crosschain__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false, "where": "BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')", "alias": "dbt_expectations_expect_column_db665dcefc65e6cba99830a726abbcaa"}, "created_at": 1666804369.252157, "config_call_dict": {"enabled": false, "where": "BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')", "alias": "dbt_expectations_expect_column_db665dcefc65e6cba99830a726abbcaa"}, "column_name": "ADDRESS", "file_key_name": "models.crosschain__address_labels"}], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_crosschain__address_labels_ADDRESS__terra_0_9a_z_39_39_.6135fc0507": [{"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(enabled=False,where=\"BLOCKCHAIN = 'terra'\",alias=\"dbt_expectations_expect_column_729353193f75cdcc3255e4145db6057d\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "terra[0-9a-z]{39,39}", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('crosschain__address_labels')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_729353193f75cdcc3255e4145db6057d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCKCHAIN = 'terra'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_crosschain", "fqn": ["crosschain_models", "core", "dbt_expectations_expect_column_values_to_match_regex_crosschain__address_labels_ADDRESS__terra_0_9a_z_39_39_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_crosschain__address_labels_ADDRESS__terra_0_9a_z_39_39_.6135fc0507", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_729353193f75cdcc3255e4145db6057d.sql", "original_file_path": "models\\core\\core__address_labels.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_crosschain__address_labels_ADDRESS__terra_0_9a_z_39_39_", "alias": "address_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["crosschain__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false, "where": "BLOCKCHAIN = 'terra'", "alias": "dbt_expectations_expect_column_729353193f75cdcc3255e4145db6057d"}, "created_at": 1666804369.2834134, "config_call_dict": {"enabled": false, "where": "BLOCKCHAIN = 'terra'", "alias": "dbt_expectations_expect_column_729353193f75cdcc3255e4145db6057d"}, "column_name": "ADDRESS", "file_key_name": "models.crosschain__address_labels"}], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__address_labels_ADDRESS__0_xX_0_9a_fA_F_.e78932f920": [{"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(enabled=False,where=\"BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')\",alias=\"dbt_expectations_expect_column_ad597629c55e0f517ed078e573f0583f\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__address_labels')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_ad597629c55e0f517ed078e573f0583f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__address_labels_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__address_labels_ADDRESS__0_xX_0_9a_fA_F_.e78932f920", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_ad597629c55e0f517ed078e573f0583f.sql", "original_file_path": "models\\silver\\labels\\silver_crosschain__address_labels.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__address_labels_ADDRESS__0_xX_0_9a_fA_F_", "alias": "address_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false, "where": "BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')", "alias": "dbt_expectations_expect_column_ad597629c55e0f517ed078e573f0583f"}, "created_at": 1666804369.5474539, "config_call_dict": {"enabled": false, "where": "BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')", "alias": "dbt_expectations_expect_column_ad597629c55e0f517ed078e573f0583f"}, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__address_labels"}, {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(enabled=False,where=\"BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')\",alias=\"dbt_expectations_expect_column_ad597629c55e0f517ed078e573f0583f\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__address_labels')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_ad597629c55e0f517ed078e573f0583f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain", "fqn": ["crosschain_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__address_labels_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__address_labels_ADDRESS__0_xX_0_9a_fA_F_.e78932f920", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_ad597629c55e0f517ed078e573f0583f.sql", "original_file_path": "models\\silver\\silver_crosschain__address_labels.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__address_labels_ADDRESS__0_xX_0_9a_fA_F_", "alias": "address_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false, "where": "BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')", "alias": "dbt_expectations_expect_column_ad597629c55e0f517ed078e573f0583f"}, "created_at": 1666821690.8908901, "config_call_dict": {"enabled": false, "where": "BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')", "alias": "dbt_expectations_expect_column_ad597629c55e0f517ed078e573f0583f"}, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__address_labels"}, {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(enabled=False,where=\"BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')\",alias=\"dbt_expectations_expect_column_ad597629c55e0f517ed078e573f0583f\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__address_labels')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_ad597629c55e0f517ed078e573f0583f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__address_labels_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__address_labels_ADDRESS__0_xX_0_9a_fA_F_.e78932f920", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_ad597629c55e0f517ed078e573f0583f.sql", "original_file_path": "models\\silver\\labels\\silver_crosschain__address_labels.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__address_labels_ADDRESS__0_xX_0_9a_fA_F_", "alias": "address_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false, "where": "BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')", "alias": "dbt_expectations_expect_column_ad597629c55e0f517ed078e573f0583f"}, "created_at": 1666821807.373762, "config_call_dict": {"enabled": false, "where": "BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')", "alias": "dbt_expectations_expect_column_ad597629c55e0f517ed078e573f0583f"}, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__address_labels"}], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__address_labels_ADDRESS__terra_0_9a_z_39_39_.55c336e6db": [{"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(enabled=False,where=\"BLOCKCHAIN = 'terra'\",alias=\"dbt_expectations_expect_column_b52321d999238c9e0bc640be128af016\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "terra[0-9a-z]{39,39}", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__address_labels')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_b52321d999238c9e0bc640be128af016", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCKCHAIN = 'terra'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__address_labels_ADDRESS__terra_0_9a_z_39_39_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__address_labels_ADDRESS__terra_0_9a_z_39_39_.55c336e6db", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_b52321d999238c9e0bc640be128af016.sql", "original_file_path": "models\\silver\\labels\\silver_crosschain__address_labels.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__address_labels_ADDRESS__terra_0_9a_z_39_39_", "alias": "address_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false, "where": "BLOCKCHAIN = 'terra'", "alias": "dbt_expectations_expect_column_b52321d999238c9e0bc640be128af016"}, "created_at": 1666804369.5474539, "config_call_dict": {"enabled": false, "where": "BLOCKCHAIN = 'terra'", "alias": "dbt_expectations_expect_column_b52321d999238c9e0bc640be128af016"}, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__address_labels"}, {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(enabled=False,where=\"BLOCKCHAIN = 'terra'\",alias=\"dbt_expectations_expect_column_b52321d999238c9e0bc640be128af016\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "terra[0-9a-z]{39,39}", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__address_labels')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_b52321d999238c9e0bc640be128af016", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCKCHAIN = 'terra'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain", "fqn": ["crosschain_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__address_labels_ADDRESS__terra_0_9a_z_39_39_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__address_labels_ADDRESS__terra_0_9a_z_39_39_.55c336e6db", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_b52321d999238c9e0bc640be128af016.sql", "original_file_path": "models\\silver\\silver_crosschain__address_labels.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__address_labels_ADDRESS__terra_0_9a_z_39_39_", "alias": "address_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false, "where": "BLOCKCHAIN = 'terra'", "alias": "dbt_expectations_expect_column_b52321d999238c9e0bc640be128af016"}, "created_at": 1666821690.8908901, "config_call_dict": {"enabled": false, "where": "BLOCKCHAIN = 'terra'", "alias": "dbt_expectations_expect_column_b52321d999238c9e0bc640be128af016"}, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__address_labels"}, {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(enabled=False,where=\"BLOCKCHAIN = 'terra'\",alias=\"dbt_expectations_expect_column_b52321d999238c9e0bc640be128af016\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "terra[0-9a-z]{39,39}", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver_crosschain__address_labels')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_b52321d999238c9e0bc640be128af016", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCKCHAIN = 'terra'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain", "fqn": ["crosschain_models", "silver", "labels", "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__address_labels_ADDRESS__terra_0_9a_z_39_39_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__address_labels_ADDRESS__terra_0_9a_z_39_39_.55c336e6db", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_b52321d999238c9e0bc640be128af016.sql", "original_file_path": "models\\silver\\labels\\silver_crosschain__address_labels.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__address_labels_ADDRESS__terra_0_9a_z_39_39_", "alias": "address_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_crosschain__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false, "where": "BLOCKCHAIN = 'terra'", "alias": "dbt_expectations_expect_column_b52321d999238c9e0bc640be128af016"}, "created_at": 1666821807.3761282, "config_call_dict": {"enabled": false, "where": "BLOCKCHAIN = 'terra'", "alias": "dbt_expectations_expect_column_b52321d999238c9e0bc640be128af016"}, "column_name": "ADDRESS", "file_key_name": "models.silver_crosschain__address_labels"}], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_core__address_labels_ADDRESS__0_xX_0_9a_fA_F_.c76e9aaf45": [{"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(enabled=False,where=\"BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')\",alias=\"dbt_expectations_expect_column_a85fe6bb8306a285ae0fda9b11cd343c\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__address_labels')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_a85fe6bb8306a285ae0fda9b11cd343c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_core", "fqn": ["crosschain_models", "core", "dbt_expectations_expect_column_values_to_match_regex_core__address_labels_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_core__address_labels_ADDRESS__0_xX_0_9a_fA_F_.c76e9aaf45", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_a85fe6bb8306a285ae0fda9b11cd343c.sql", "original_file_path": "models\\core\\core__address_labels.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_core__address_labels_ADDRESS__0_xX_0_9a_fA_F_", "alias": "address_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false, "where": "BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')", "alias": "dbt_expectations_expect_column_a85fe6bb8306a285ae0fda9b11cd343c"}, "created_at": 1666821808.2936177, "config_call_dict": {"enabled": false, "where": "BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')", "alias": "dbt_expectations_expect_column_a85fe6bb8306a285ae0fda9b11cd343c"}, "column_name": "ADDRESS", "file_key_name": "models.core__address_labels"}, {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(enabled=False,where=\"BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')\",alias=\"dbt_expectations_expect_column_a85fe6bb8306a285ae0fda9b11cd343c\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__address_labels')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_a85fe6bb8306a285ae0fda9b11cd343c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_core", "fqn": ["crosschain_models", "core", "dbt_expectations_expect_column_values_to_match_regex_core__address_labels_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_core__address_labels_ADDRESS__0_xX_0_9a_fA_F_.c76e9aaf45", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_a85fe6bb8306a285ae0fda9b11cd343c.sql", "original_file_path": "models\\core\\core__address_labels.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_core__address_labels_ADDRESS__0_xX_0_9a_fA_F_", "alias": "address_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false, "where": "BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')", "alias": "dbt_expectations_expect_column_a85fe6bb8306a285ae0fda9b11cd343c"}, "created_at": 1666881239.0175033, "config_call_dict": {"enabled": false, "where": "BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')", "alias": "dbt_expectations_expect_column_a85fe6bb8306a285ae0fda9b11cd343c"}, "column_name": "ADDRESS", "file_key_name": "models.core__address_labels"}, {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(enabled=False,where=\"BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')\",alias=\"dbt_expectations_expect_column_a85fe6bb8306a285ae0fda9b11cd343c\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__address_labels')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_a85fe6bb8306a285ae0fda9b11cd343c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_core", "fqn": ["crosschain_models", "core", "dbt_expectations_expect_column_values_to_match_regex_core__address_labels_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_core__address_labels_ADDRESS__0_xX_0_9a_fA_F_.c76e9aaf45", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_a85fe6bb8306a285ae0fda9b11cd343c.sql", "original_file_path": "models\\core\\core__address_labels.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_core__address_labels_ADDRESS__0_xX_0_9a_fA_F_", "alias": "address_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false, "where": "BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')", "alias": "dbt_expectations_expect_column_a85fe6bb8306a285ae0fda9b11cd343c"}, "created_at": 1666881373.1440797, "config_call_dict": {"enabled": false, "where": "BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')", "alias": "dbt_expectations_expect_column_a85fe6bb8306a285ae0fda9b11cd343c"}, "column_name": "ADDRESS", "file_key_name": "models.core__address_labels"}, {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(enabled=False,where=\"BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')\",alias=\"dbt_expectations_expect_column_a85fe6bb8306a285ae0fda9b11cd343c\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__address_labels')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_a85fe6bb8306a285ae0fda9b11cd343c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_core", "fqn": ["crosschain_models", "core", "dbt_expectations_expect_column_values_to_match_regex_core__address_labels_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_core__address_labels_ADDRESS__0_xX_0_9a_fA_F_.c76e9aaf45", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_a85fe6bb8306a285ae0fda9b11cd343c.sql", "original_file_path": "models\\core\\core__address_labels.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_core__address_labels_ADDRESS__0_xX_0_9a_fA_F_", "alias": "address_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false, "where": "BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')", "alias": "dbt_expectations_expect_column_a85fe6bb8306a285ae0fda9b11cd343c"}, "created_at": 1666882899.8466828, "config_call_dict": {"enabled": false, "where": "BLOCKCHAIN in ('ethereum','polygon', 'moonriver', 'avalanche', 'bittorrent', 'cronos', 'fantom', 'arbitrum', 'aurora')", "alias": "dbt_expectations_expect_column_a85fe6bb8306a285ae0fda9b11cd343c"}, "column_name": "ADDRESS", "file_key_name": "models.core__address_labels"}], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_core__address_labels_ADDRESS__terra_0_9a_z_39_39_.16500ab23d": [{"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(enabled=False,where=\"BLOCKCHAIN = 'terra'\",alias=\"dbt_expectations_expect_column_a2d78026e1cef26d3fc63b55a0a04d5d\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "terra[0-9a-z]{39,39}", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__address_labels')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_a2d78026e1cef26d3fc63b55a0a04d5d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCKCHAIN = 'terra'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_core", "fqn": ["crosschain_models", "core", "dbt_expectations_expect_column_values_to_match_regex_core__address_labels_ADDRESS__terra_0_9a_z_39_39_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_core__address_labels_ADDRESS__terra_0_9a_z_39_39_.16500ab23d", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_a2d78026e1cef26d3fc63b55a0a04d5d.sql", "original_file_path": "models\\core\\core__address_labels.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_core__address_labels_ADDRESS__terra_0_9a_z_39_39_", "alias": "address_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false, "where": "BLOCKCHAIN = 'terra'", "alias": "dbt_expectations_expect_column_a2d78026e1cef26d3fc63b55a0a04d5d"}, "created_at": 1666821808.3092377, "config_call_dict": {"enabled": false, "where": "BLOCKCHAIN = 'terra'", "alias": "dbt_expectations_expect_column_a2d78026e1cef26d3fc63b55a0a04d5d"}, "column_name": "ADDRESS", "file_key_name": "models.core__address_labels"}, {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(enabled=False,where=\"BLOCKCHAIN = 'terra'\",alias=\"dbt_expectations_expect_column_a2d78026e1cef26d3fc63b55a0a04d5d\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "terra[0-9a-z]{39,39}", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__address_labels')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_a2d78026e1cef26d3fc63b55a0a04d5d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCKCHAIN = 'terra'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_core", "fqn": ["crosschain_models", "core", "dbt_expectations_expect_column_values_to_match_regex_core__address_labels_ADDRESS__terra_0_9a_z_39_39_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_core__address_labels_ADDRESS__terra_0_9a_z_39_39_.16500ab23d", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_a2d78026e1cef26d3fc63b55a0a04d5d.sql", "original_file_path": "models\\core\\core__address_labels.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_core__address_labels_ADDRESS__terra_0_9a_z_39_39_", "alias": "address_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false, "where": "BLOCKCHAIN = 'terra'", "alias": "dbt_expectations_expect_column_a2d78026e1cef26d3fc63b55a0a04d5d"}, "created_at": 1666881239.0204878, "config_call_dict": {"enabled": false, "where": "BLOCKCHAIN = 'terra'", "alias": "dbt_expectations_expect_column_a2d78026e1cef26d3fc63b55a0a04d5d"}, "column_name": "ADDRESS", "file_key_name": "models.core__address_labels"}, {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(enabled=False,where=\"BLOCKCHAIN = 'terra'\",alias=\"dbt_expectations_expect_column_a2d78026e1cef26d3fc63b55a0a04d5d\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "terra[0-9a-z]{39,39}", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__address_labels')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_a2d78026e1cef26d3fc63b55a0a04d5d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCKCHAIN = 'terra'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_core", "fqn": ["crosschain_models", "core", "dbt_expectations_expect_column_values_to_match_regex_core__address_labels_ADDRESS__terra_0_9a_z_39_39_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_core__address_labels_ADDRESS__terra_0_9a_z_39_39_.16500ab23d", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_a2d78026e1cef26d3fc63b55a0a04d5d.sql", "original_file_path": "models\\core\\core__address_labels.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_core__address_labels_ADDRESS__terra_0_9a_z_39_39_", "alias": "address_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false, "where": "BLOCKCHAIN = 'terra'", "alias": "dbt_expectations_expect_column_a2d78026e1cef26d3fc63b55a0a04d5d"}, "created_at": 1666881373.14732, "config_call_dict": {"enabled": false, "where": "BLOCKCHAIN = 'terra'", "alias": "dbt_expectations_expect_column_a2d78026e1cef26d3fc63b55a0a04d5d"}, "column_name": "ADDRESS", "file_key_name": "models.core__address_labels"}, {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(enabled=False,where=\"BLOCKCHAIN = 'terra'\",alias=\"dbt_expectations_expect_column_a2d78026e1cef26d3fc63b55a0a04d5d\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "terra[0-9a-z]{39,39}", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__address_labels')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_a2d78026e1cef26d3fc63b55a0a04d5d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCKCHAIN = 'terra'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "CROSSCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_core", "fqn": ["crosschain_models", "core", "dbt_expectations_expect_column_values_to_match_regex_core__address_labels_ADDRESS__terra_0_9a_z_39_39_"], "unique_id": "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_core__address_labels_ADDRESS__terra_0_9a_z_39_39_.16500ab23d", "package_name": "crosschain_models", "root_path": "c:\\Users\\vahid_qwu1zqx\\repos\\crosschain-models", "path": "dbt_expectations_expect_column_a2d78026e1cef26d3fc63b55a0a04d5d.sql", "original_file_path": "models\\core\\core__address_labels.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_core__address_labels_ADDRESS__terra_0_9a_z_39_39_", "alias": "address_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false, "where": "BLOCKCHAIN = 'terra'", "alias": "dbt_expectations_expect_column_a2d78026e1cef26d3fc63b55a0a04d5d"}, "created_at": 1666882899.850683, "config_call_dict": {"enabled": false, "where": "BLOCKCHAIN = 'terra'", "alias": "dbt_expectations_expect_column_a2d78026e1cef26d3fc63b55a0a04d5d"}, "column_name": "ADDRESS", "file_key_name": "models.core__address_labels"}]}, "parent_map": {"model.crosschain_models.bronze__asset_metadata_coin_gecko": ["source.crosschain_models.bronze_streamline.asset_metadata_coin_gecko_api"], "model.crosschain_models.bronze__asset_metadata_coin_market_cap": ["source.crosschain_models.bronze_streamline.asset_metadata_coin_market_cap_api"], "model.crosschain_models.bronze__hourly_prices_coin_gecko": ["source.crosschain_models.bronze_streamline.asset_ohlc_coin_gecko_api"], "model.crosschain_models.bronze__hourly_prices_coin_market_cap": ["source.crosschain_models.bronze_streamline.asset_ohlc_coin_market_cap_api"], "model.crosschain_models.core__dim_dates": [], "model.crosschain_models.streamline__all_unknown_coin_gecko_asset_ohlc": ["source.crosschain_models.bronze_streamline.asset_metadata_coin_gecko_api", "source.crosschain_models.bronze_streamline.asset_ohlc_coin_gecko_api"], "model.crosschain_models.streamline__all_unknown_coin_market_cap_asset_ohlc_hourly": ["source.crosschain_models.bronze_streamline.asset_metadata_coin_market_cap_api", "source.crosschain_models.bronze_streamline.asset_metadata_coin_market_cap_api", "source.crosschain_models.bronze_streamline.asset_ohlc_coin_market_cap_api", "source.crosschain_models.legacy_dev_db.hours"], "model.crosschain_models.streamline__coin_gecko_historical_asset_market_data_hourly": ["source.crosschain_models.bronze_streamline.asset_historical_hourly_market_data_coin_gecko_api", "source.crosschain_models.bronze_streamline.asset_metadata_coin_gecko_api"], "model.crosschain_models.streamline__coin_market_cap_historical_asset_ohlc_hourly": ["source.crosschain_models.bronze_streamline.asset_metadata_coin_market_cap_api", "source.crosschain_models.bronze_streamline.asset_ohlc_coin_market_cap_api"], "model.crosschain_models.streamline__legacy_prices_gaps": ["source.crosschain_models.legacy_dev_db.hours", "source.crosschain_models.legacy_dev_db.prices_v2", "source.crosschain_models.legacy_dev_db.prices_v2"], "seed.crosschain_models.silver__godmode_nft_minters": [], "seed.crosschain_models.silver__optimism_delegates": [], "operation.crosschain_models.crosschain_models-on-run-start-0": [], "operation.crosschain_models.crosschain_models-on-run-start-1": [], "operation.crosschain_models.crosschain_models-on-run-start-2": [], "operation.crosschain_models.crosschain_models-on-run-start-3": [], "operation.crosschain_models.crosschain_models-on-run-start-4": [], "operation.crosschain_models.crosschain_models-on-run-start-5": [], "operation.crosschain_models.crosschain_models-on-run-start-6": [], "operation.crosschain_models.crosschain_models-on-run-start-7": [], "operation.crosschain_models.crosschain_models-on-run-start-8": [], "operation.crosschain_models.crosschain_models-on-run-start-9": [], "model.crosschain_models.silver_crosschain__labels_contracts_avalanche": ["source.crosschain_models.avalanche_silver.logs", "source.crosschain_models.avalanche_silver.traces", "source.crosschain_models.crosschain_core.address_labels", "source.crosschain_models.crosschain_core.address_labels"], "model.crosschain_models.silver_crosschain__snowflake_Near_satellite": ["model.crosschain_models.silver_crosschain__address_labels", "model.crosschain_models.silver_crosschain__address_labels", "source.crosschain_models.near_core.fact_transfers", "source.crosschain_models.near_core.fact_transfers"], "model.crosschain_models.silver__tags_nft_transactor_ETH": [], "model.crosschain_models.core__dim_date_hours": [], "model.crosschain_models.silver__tags_contract_address_optimism": ["source.crosschain_models.optimism_silver.traces"], "model.crosschain_models.silver__tags_nft_looksrare_user": ["source.crosschain_models.ethereum_silver_nft.looksrare_sales", "source.crosschain_models.ethereum_silver_nft.looksrare_sales"], "model.crosschain_models.silver_crosschain__labels_contracts_bsc": ["source.crosschain_models.bsc_silver.logs", "source.crosschain_models.bsc_silver.traces", "source.crosschain_models.crosschain_core.address_labels", "source.crosschain_models.crosschain_core.address_labels"], "model.crosschain_models.silver_crosschain__snowflake_Osmosis_satellite": ["model.crosschain_models.silver_crosschain__address_labels", "model.crosschain_models.silver_crosschain__address_labels", "source.crosschain_models.osmosis_core.fact_transfers", "source.crosschain_models.osmosis_core.fact_transfers"], "model.crosschain_models.silver_crosschain__snowflake_BSC_satellites": ["model.crosschain_models.silver_crosschain__address_labels", "model.crosschain_models.silver_crosschain__address_labels", "source.crosschain_models.bsc_core.fact_token_transfers", "source.crosschain_models.bsc_core.fact_token_transfers", "source.crosschain_models.bsc_core.fact_traces", "source.crosschain_models.bsc_core.fact_traces"], "model.crosschain_models.silver__tags_contract_address_avalanche": ["source.crosschain_models.avalanche_silver.traces"], "model.crosschain_models.silver_crosschain__labels_contracts_optimism": ["source.crosschain_models.crosschain_core.address_labels", "source.crosschain_models.crosschain_core.address_labels", "source.crosschain_models.optimism_silver.logs", "source.crosschain_models.optimism_silver.traces"], "model.crosschain_models.silver__tags_nft_rarible_user": ["source.crosschain_models.ethereum_silver_nft.rarible_sales", "source.crosschain_models.ethereum_silver_nft.rarible_sales"], "model.crosschain_models.silver__tags_thor_dex_user": ["source.crosschain_models.thorchain.swaps", "source.crosschain_models.thorchain.swaps"], "model.crosschain_models.silver__tags_contract_address_eth": ["source.crosschain_models.ethereum_silver.traces"], "model.crosschain_models.silver__asset_metadata_coin_market_cap": ["model.crosschain_models.bronze__asset_metadata_coin_market_cap"], "model.crosschain_models.silver_crosschain__labels_contracts": ["source.crosschain_models.crosschain_core.address_labels", "source.crosschain_models.crosschain_core.address_labels", "source.crosschain_models.ethereum_silver.logs", "source.crosschain_models.ethereum_silver.traces"], "model.crosschain_models.silver__tags_nft_x2y2_user": ["source.crosschain_models.ethereum_silver_nft.x2y2_sales", "source.crosschain_models.ethereum_silver_nft.x2y2_sales"], "model.crosschain_models.silver_crosschain__snowflake_Avalanche_satellites": ["model.crosschain_models.silver_crosschain__address_labels", "model.crosschain_models.silver_crosschain__address_labels", "source.crosschain_models.avalanche_core.fact_token_transfers", "source.crosschain_models.avalanche_core.fact_token_transfers", "source.crosschain_models.avalanche_core.fact_traces", "source.crosschain_models.avalanche_core.fact_traces"], "model.crosschain_models.silver_crosschain__snowflake_Polygon_satellites": ["model.crosschain_models.silver_crosschain__address_labels", "model.crosschain_models.silver_crosschain__address_labels", "source.crosschain_models.polygon_core.fact_token_transfers", "source.crosschain_models.polygon_core.fact_token_transfers", "source.crosschain_models.polygon_core.fact_traces", "source.crosschain_models.polygon_core.fact_traces"], "model.crosschain_models.silver__hourly_prices_coin_gecko": ["model.crosschain_models.bronze__hourly_prices_coin_gecko"], "model.crosschain_models.silver_crosschain__snowflake_Flow_satellites": ["model.crosschain_models.silver_crosschain__address_labels", "model.crosschain_models.silver_crosschain__address_labels", "source.crosschain_models.flow_core.ez_token_transfers", "source.crosschain_models.flow_core.ez_token_transfers"], "model.crosschain_models.silver__tags_nft_nftx_user": ["source.crosschain_models.ethereum_silver_nft.nftx_sales", "source.crosschain_models.ethereum_silver_nft.nftx_sales"], "model.crosschain_models.silver__tags_gnosis_safe_address": ["source.crosschain_models.ethereum_silver.logs"], "model.crosschain_models.silver__tags_nft_larva_labs_user": ["source.crosschain_models.ethereum_silver_nft.cryptopunk_sales", "source.crosschain_models.ethereum_silver_nft.cryptopunk_sales"], "model.crosschain_models.silver_crosschain__snowflake_SOL_satellites": ["model.crosschain_models.silver_crosschain__address_labels", "model.crosschain_models.silver_crosschain__address_labels", "source.crosschain_models.solana_core.fact_transfers", "source.crosschain_models.solana_core.fact_transfers"], "model.crosschain_models.silver__tags_active_bsc_last_7": ["source.crosschain_models.bsc_silver.transactions"], "model.crosschain_models.silver__tags_contract_address_bsc": ["source.crosschain_models.bsc_silver.traces"], "model.crosschain_models.silver_crosschain__snowflake_Optimism_satellites": ["model.crosschain_models.silver_crosschain__address_labels", "model.crosschain_models.silver_crosschain__address_labels", "source.crosschain_models.optimism_core.fact_token_transfers", "source.crosschain_models.optimism_core.fact_token_transfers", "source.crosschain_models.optimism_core.fact_traces", "source.crosschain_models.optimism_core.fact_traces"], "model.crosschain_models.silver__tags_active_polygon_last_7": ["source.crosschain_models.polygon_silver.transactions"], "model.crosschain_models.silver__tags_active_avalanche_last_7": ["source.crosschain_models.avalanche_silver.transactions"], "model.crosschain_models.silver__tags_token_vesting_ETH": ["source.crosschain_models.ethereum_silver.logs"], "model.crosschain_models.silver__tags_active_optimism_last_7": ["source.crosschain_models.optimism_silver.transactions"], "model.crosschain_models.silver__tags_nft_opensea_user": ["source.crosschain_models.ethereum_silver_nft.opensea_sales", "source.crosschain_models.ethereum_silver_nft.opensea_sales", "source.crosschain_models.ethereum_silver_nft.seaport_sales", "source.crosschain_models.ethereum_silver_nft.seaport_sales"], "model.crosschain_models.silver__tags_contract_address_polygon": ["source.crosschain_models.polygon_silver.traces"], "model.crosschain_models.silver_crosschain__address_labels": ["model.crosschain_models.silver_crosschain__labels_contracts", "model.crosschain_models.silver_crosschain__labels_contracts_avalanche", "model.crosschain_models.silver_crosschain__labels_contracts_bsc", "model.crosschain_models.silver_crosschain__labels_contracts_optimism", "model.crosschain_models.silver_crosschain__labels_contracts_polygon", "source.crosschain_models.bronze.prod_address_label_sink_291098491", "source.crosschain_models.bronze.prod_address_label_sink_291098491"], "model.crosschain_models.silver__asset_metadata_coin_gecko": ["model.crosschain_models.bronze__asset_metadata_coin_gecko"], "model.crosschain_models.silver_crosschain__snowflake_Arbitrum_satellites": ["model.crosschain_models.silver_crosschain__address_labels", "model.crosschain_models.silver_crosschain__address_labels", "source.crosschain_models.arbitrum_core.fact_token_transfers", "source.crosschain_models.arbitrum_core.fact_token_transfers", "source.crosschain_models.arbitrum_core.fact_traces", "source.crosschain_models.arbitrum_core.fact_traces"], "model.crosschain_models.silver_crosschain__snowflake_Algorand_satellite": ["model.crosschain_models.silver_crosschain__address_labels", "model.crosschain_models.silver_crosschain__address_labels", "source.crosschain_models.algorand_core.ez_transfer", "source.crosschain_models.algorand_core.ez_transfer"], "model.crosschain_models.silver__hourly_prices_coin_market_cap": ["model.crosschain_models.bronze__hourly_prices_coin_market_cap"], "model.crosschain_models.silver_crosschain__snowflake_Thorchain_satellite": ["model.crosschain_models.silver_crosschain__address_labels", "model.crosschain_models.silver_crosschain__address_labels", "source.crosschain_models.thorchain.transfers", "source.crosschain_models.thorchain.transfers"], "model.crosschain_models.silver__tags_active_arbitrum_last_7": ["source.crosschain_models.arbitrum_silver.transactions"], "model.crosschain_models.silver__tags_cex_user_ETH": ["source.crosschain_models.ethereum_silver.labels", "source.crosschain_models.ethereum_silver.labels", "source.crosschain_models.ethereum_silver.transactions", "source.crosschain_models.ethereum_silver.transactions"], "model.crosschain_models.silver__ntr_summary": ["source.crosschain_models.legacy_db.hours", "source.crosschain_models.legacy_silver_crosschain.ntr"], "model.crosschain_models.silver__tags_thor_liquidity_provider": ["source.crosschain_models.thorchain.liquidity_actions", "source.crosschain_models.thorchain.liquidity_actions"], "model.crosschain_models.silver__tags_airdrop_master_ETH": [], "model.crosschain_models.silver_crosschain__labels_contracts_polygon": ["source.crosschain_models.crosschain_core.address_labels", "source.crosschain_models.crosschain_core.address_labels", "source.crosschain_models.polygon_silver.logs", "source.crosschain_models.polygon_silver.traces"], "model.crosschain_models.core__fact_hourly_prices": ["model.crosschain_models.silver__hourly_prices_coin_gecko", "model.crosschain_models.silver__hourly_prices_coin_market_cap"], "model.crosschain_models.core__dim_asset_metadata": ["model.crosschain_models.silver__asset_metadata_coin_gecko", "model.crosschain_models.silver__asset_metadata_coin_market_cap"], "test.crosschain_models.not_null_silver__tags_thor_dex_user_ADDRESS.61e5f039e2": ["model.crosschain_models.silver__tags_thor_dex_user"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_thor_dex_user_ADDRESS__STRING__VARCHAR.4f34e746f7": ["model.crosschain_models.silver__tags_thor_dex_user"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_thor_dex_user_ADDRESS.5d83f8471c": ["model.crosschain_models.silver__tags_thor_dex_user"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_BLOCKCHAIN.c34d4c1b51": ["model.crosschain_models.silver_crosschain__labels_contracts_bsc"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_bsc_BLOCKCHAIN__bsc.c87bd17788": ["model.crosschain_models.silver_crosschain__labels_contracts_bsc"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_ADDRESS.d4893f74e2": ["model.crosschain_models.silver_crosschain__labels_contracts_bsc"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_bsc_ADDRESS__STRING__VARCHAR.6650460a5d": ["model.crosschain_models.silver_crosschain__labels_contracts_bsc"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_bsc_ADDRESS__0_xX_0_9a_fA_F_.c421db486b": ["model.crosschain_models.silver_crosschain__labels_contracts_bsc"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_CREATOR.110adefd50": ["model.crosschain_models.silver_crosschain__labels_contracts_bsc"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_L1_LABEL.40e1b6bc2a": ["model.crosschain_models.silver_crosschain__labels_contracts_bsc"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_bsc_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.fe0a23eb20": ["model.crosschain_models.silver_crosschain__labels_contracts_bsc"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_L2_LABEL.971dfa3c9e": ["model.crosschain_models.silver_crosschain__labels_contracts_bsc"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_ADDRESS_NAME.3148b29da6": ["model.crosschain_models.silver_crosschain__labels_contracts_bsc"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_PROJECT_NAME.56c75d84d9": ["model.crosschain_models.silver_crosschain__labels_contracts_bsc"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc__INSERTED_TIMESTAMP.215cf7af1f": ["model.crosschain_models.silver_crosschain__labels_contracts_bsc"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_bsc__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.c471b2157a": ["model.crosschain_models.silver_crosschain__labels_contracts_bsc"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_bsc_ADDRESS.c2802608c3": ["model.crosschain_models.silver_crosschain__labels_contracts_bsc"], "test.crosschain_models.not_null_silver__tags_token_vesting_ETH_ADDRESS.cf9f001da8": ["model.crosschain_models.silver__tags_token_vesting_ETH"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_token_vesting_ETH_ADDRESS__STRING__VARCHAR.cfef06ed72": ["model.crosschain_models.silver__tags_token_vesting_ETH"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_token_vesting_ETH_ADDRESS.d7b2a9f7c1": ["model.crosschain_models.silver__tags_token_vesting_ETH"], "test.crosschain_models.not_null_silver__tags_nft_x2y2_user_ADDRESS.bcc2140e27": ["model.crosschain_models.silver__tags_nft_x2y2_user"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_x2y2_user_ADDRESS__STRING__VARCHAR.22bb36b9d2": ["model.crosschain_models.silver__tags_nft_x2y2_user"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_x2y2_user_ADDRESS__0_xX_0_9a_fA_F_.8acab546bd": ["model.crosschain_models.silver__tags_nft_x2y2_user"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_x2y2_user_ADDRESS.a6cbb5390d": ["model.crosschain_models.silver__tags_nft_x2y2_user"], "test.crosschain_models.not_null_silver__tags_active_optimism_last_7_ADDRESS.5b419202c3": ["model.crosschain_models.silver__tags_active_optimism_last_7"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_optimism_last_7_ADDRESS__STRING__VARCHAR.0338b1f161": ["model.crosschain_models.silver__tags_active_optimism_last_7"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_optimism_last_7_ADDRESS__0_xX_0_9a_fA_F_.cdaca7bd38": ["model.crosschain_models.silver__tags_active_optimism_last_7"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_active_optimism_last_7_ADDRESS__START_DATE.d5c8d43a5a": ["model.crosschain_models.silver__tags_active_optimism_last_7"], "test.crosschain_models.not_null_silver__tags_contract_address_avalanche_ADDRESS.be16ad761e": ["model.crosschain_models.silver__tags_contract_address_avalanche"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_avalanche_ADDRESS__STRING__VARCHAR.39bd6ac8e8": ["model.crosschain_models.silver__tags_contract_address_avalanche"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_avalanche_ADDRESS__0_xX_0_9a_fA_F_.dc688e073a": ["model.crosschain_models.silver__tags_contract_address_avalanche"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_contract_address_avalanche_ADDRESS.2af2628c97": ["model.crosschain_models.silver__tags_contract_address_avalanche"], "test.crosschain_models.not_null_silver__tags_nft_looksrare_user_ADDRESS.5bdf86e154": ["model.crosschain_models.silver__tags_nft_looksrare_user"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_looksrare_user_ADDRESS__STRING__VARCHAR.d441de2bd9": ["model.crosschain_models.silver__tags_nft_looksrare_user"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_looksrare_user_ADDRESS__0_xX_0_9a_fA_F_.067ec81ea6": ["model.crosschain_models.silver__tags_nft_looksrare_user"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_looksrare_user_ADDRESS.dd71e51391": ["model.crosschain_models.silver__tags_nft_looksrare_user"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_BLOCKCHAIN.7186119d86": ["model.crosschain_models.silver_crosschain__labels_contracts_optimism"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_optimism_BLOCKCHAIN__optimism.cacd01ec06": ["model.crosschain_models.silver_crosschain__labels_contracts_optimism"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_ADDRESS.2bc29a44ab": ["model.crosschain_models.silver_crosschain__labels_contracts_optimism"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_optimism_ADDRESS__STRING__VARCHAR.ee458f5d28": ["model.crosschain_models.silver_crosschain__labels_contracts_optimism"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_optimism_ADDRESS__0_xX_0_9a_fA_F_.02d6e22b39": ["model.crosschain_models.silver_crosschain__labels_contracts_optimism"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_CREATOR.8c73037029": ["model.crosschain_models.silver_crosschain__labels_contracts_optimism"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_L1_LABEL.7f4677d3e2": ["model.crosschain_models.silver_crosschain__labels_contracts_optimism"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_optimism_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.5895da0a9a": ["model.crosschain_models.silver_crosschain__labels_contracts_optimism"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_L2_LABEL.c3c28050fb": ["model.crosschain_models.silver_crosschain__labels_contracts_optimism"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_ADDRESS_NAME.06e3d93a9e": ["model.crosschain_models.silver_crosschain__labels_contracts_optimism"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_PROJECT_NAME.30f676508f": ["model.crosschain_models.silver_crosschain__labels_contracts_optimism"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism__INSERTED_TIMESTAMP.522d7dfab8": ["model.crosschain_models.silver_crosschain__labels_contracts_optimism"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_optimism__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.cfb523ebd3": ["model.crosschain_models.silver_crosschain__labels_contracts_optimism"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_optimism_ADDRESS.83a550d0a5": ["model.crosschain_models.silver_crosschain__labels_contracts_optimism"], "test.crosschain_models.not_null_silver__tags_active_bsc_last_7_ADDRESS.b2632993c1": ["model.crosschain_models.silver__tags_active_bsc_last_7"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_bsc_last_7_ADDRESS__STRING__VARCHAR.c259e260d6": ["model.crosschain_models.silver__tags_active_bsc_last_7"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_bsc_last_7_ADDRESS__0_xX_0_9a_fA_F_.a05c7204b4": ["model.crosschain_models.silver__tags_active_bsc_last_7"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_active_bsc_last_7_ADDRESS__START_DATE.bcc44fb57b": ["model.crosschain_models.silver__tags_active_bsc_last_7"], "test.crosschain_models.not_null_silver__tags_active_arbitrum_last_7_ADDRESS.35d39be09a": ["model.crosschain_models.silver__tags_active_arbitrum_last_7"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_arbitrum_last_7_ADDRESS__STRING__VARCHAR.f45b0d6ae8": ["model.crosschain_models.silver__tags_active_arbitrum_last_7"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_arbitrum_last_7_ADDRESS__0_xX_0_9a_fA_F_.7718b6380c": ["model.crosschain_models.silver__tags_active_arbitrum_last_7"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_active_arbitrum_last_7_ADDRESS__START_DATE.323f9c19f5": ["model.crosschain_models.silver__tags_active_arbitrum_last_7"], "test.crosschain_models.not_null_silver__tags_gnosis_safe_address_ADDRESS.405287f7ab": ["model.crosschain_models.silver__tags_gnosis_safe_address"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_gnosis_safe_address_ADDRESS__STRING__VARCHAR.c22d203f33": ["model.crosschain_models.silver__tags_gnosis_safe_address"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_gnosis_safe_address_ADDRESS__0_xX_0_9a_fA_F_.c0cf0413a8": ["model.crosschain_models.silver__tags_gnosis_safe_address"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_gnosis_safe_address_ADDRESS.b4c9864bb4": ["model.crosschain_models.silver__tags_gnosis_safe_address"], "test.crosschain_models.not_null_silver__tags_nft_opensea_user_ADDRESS.2d27b0a7a1": ["model.crosschain_models.silver__tags_nft_opensea_user"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_opensea_user_ADDRESS__STRING__VARCHAR.7b0c3452f8": ["model.crosschain_models.silver__tags_nft_opensea_user"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_opensea_user_ADDRESS__0_xX_0_9a_fA_F_.c1401dc412": ["model.crosschain_models.silver__tags_nft_opensea_user"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_opensea_user_ADDRESS.94beb06207": ["model.crosschain_models.silver__tags_nft_opensea_user"], "test.crosschain_models.not_null_silver_crosschain__snowflake_Flow_satellites_ADDRESS.8cd8b369c8": ["model.crosschain_models.silver_crosschain__snowflake_Flow_satellites"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Flow_satellites_ADDRESS__STRING__VARCHAR.8db41888d5": ["model.crosschain_models.silver_crosschain__snowflake_Flow_satellites"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Flow_satellites_BLOCKCHAIN__CREATOR__ADDRESS.6d4baa41a7": ["model.crosschain_models.silver_crosschain__snowflake_Flow_satellites"], "test.crosschain_models.not_null_silver_crosschain__snowflake_Polygon_satellites_ADDRESS.c3b22856d7": ["model.crosschain_models.silver_crosschain__snowflake_Polygon_satellites"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Polygon_satellites_ADDRESS__STRING__VARCHAR.09f9d7ada4": ["model.crosschain_models.silver_crosschain__snowflake_Polygon_satellites"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Polygon_satellites_BLOCKCHAIN__CREATOR__ADDRESS.6bb7c3da70": ["model.crosschain_models.silver_crosschain__snowflake_Polygon_satellites"], "test.crosschain_models.not_null_silver__tags_active_polygon_last_7_ADDRESS.946434d99c": ["model.crosschain_models.silver__tags_active_polygon_last_7"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_polygon_last_7_ADDRESS__STRING__VARCHAR.216825937d": ["model.crosschain_models.silver__tags_active_polygon_last_7"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_polygon_last_7_ADDRESS__0_xX_0_9a_fA_F_.6a5dd4ec16": ["model.crosschain_models.silver__tags_active_polygon_last_7"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_active_polygon_last_7_ADDRESS__START_DATE.2e3073861f": ["model.crosschain_models.silver__tags_active_polygon_last_7"], "test.crosschain_models.not_null_silver_crosschain__snowflake_BSC_satellites_ADDRESS.8e00fbbd29": ["model.crosschain_models.silver_crosschain__snowflake_BSC_satellites"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_BSC_satellites_ADDRESS__STRING__VARCHAR.8b9a883e71": ["model.crosschain_models.silver_crosschain__snowflake_BSC_satellites"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_BSC_satellites_BLOCKCHAIN__CREATOR__ADDRESS.20ad5fc70e": ["model.crosschain_models.silver_crosschain__snowflake_BSC_satellites"], "test.crosschain_models.not_null_silver_crosschain__address_labels_BLOCKCHAIN.a1681eff22": ["model.crosschain_models.silver_crosschain__address_labels"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__address_labels_BLOCKCHAIN__ethereum__flow__polygon__terra__algorand__solana__moonriver__avalanche__bittorrent__cronos__fantom__arbitrum__aurora__bsc__heco__optimism__gnosis__thorchain__near__terra_classic__axelar.ac8c70f6a7": ["model.crosschain_models.silver_crosschain__address_labels"], "test.crosschain_models.not_null_silver_crosschain__address_labels_CREATOR.c013bbc905": ["model.crosschain_models.silver_crosschain__address_labels"], "test.crosschain_models.not_null_silver_crosschain__address_labels_INSERT_DATE.0a816586a4": ["model.crosschain_models.silver_crosschain__address_labels"], "test.crosschain_models.not_null_silver_crosschain__address_labels_L1_LABEL.7de8180636": ["model.crosschain_models.silver_crosschain__address_labels"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__address_labels_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.b2ca065890": ["model.crosschain_models.silver_crosschain__address_labels"], "test.crosschain_models.not_null_silver_crosschain__address_labels_L2_LABEL.ca252aef73": ["model.crosschain_models.silver_crosschain__address_labels"], "test.crosschain_models.not_null_silver_crosschain__address_labels_PROJECT_NAME.adff3ea698": ["model.crosschain_models.silver_crosschain__address_labels"], "test.crosschain_models.not_null_silver_crosschain__address_labels_ADDRESS.efe583da6d": ["model.crosschain_models.silver_crosschain__address_labels"], "test.crosschain_models.dbt_expectations_expect_column_value_lengths_to_equal_silver_crosschain__address_labels_ADDRESS__58.a6680ed22d": ["model.crosschain_models.silver_crosschain__address_labels"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__address_labels_BLOCKCHAIN__CREATOR__ADDRESS.17598177be": ["model.crosschain_models.silver_crosschain__address_labels"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_BLOCKCHAIN.7d249d5154": ["model.crosschain_models.silver_crosschain__labels_contracts_polygon"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_polygon_BLOCKCHAIN__polygon.99ecbd9a78": ["model.crosschain_models.silver_crosschain__labels_contracts_polygon"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_ADDRESS.942c653587": ["model.crosschain_models.silver_crosschain__labels_contracts_polygon"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_polygon_ADDRESS__STRING__VARCHAR.3d682457de": ["model.crosschain_models.silver_crosschain__labels_contracts_polygon"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_polygon_ADDRESS__0_xX_0_9a_fA_F_.7c11cbb828": ["model.crosschain_models.silver_crosschain__labels_contracts_polygon"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_CREATOR.eb27492340": ["model.crosschain_models.silver_crosschain__labels_contracts_polygon"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_L1_LABEL.bafce1b953": ["model.crosschain_models.silver_crosschain__labels_contracts_polygon"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_polygon_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.e290bb8e68": ["model.crosschain_models.silver_crosschain__labels_contracts_polygon"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_L2_LABEL.e61b41b42c": ["model.crosschain_models.silver_crosschain__labels_contracts_polygon"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_ADDRESS_NAME.69aa52a279": ["model.crosschain_models.silver_crosschain__labels_contracts_polygon"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_PROJECT_NAME.edcd10ff29": ["model.crosschain_models.silver_crosschain__labels_contracts_polygon"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon__INSERTED_TIMESTAMP.b118c38214": ["model.crosschain_models.silver_crosschain__labels_contracts_polygon"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_polygon__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.a9656b0bcb": ["model.crosschain_models.silver_crosschain__labels_contracts_polygon"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_polygon_ADDRESS.8f4b18c9af": ["model.crosschain_models.silver_crosschain__labels_contracts_polygon"], "test.crosschain_models.not_null_silver_crosschain__snowflake_Algorand_satellite_ADDRESS.43d72b7430": ["model.crosschain_models.silver_crosschain__snowflake_Algorand_satellite"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Algorand_satellite_ADDRESS__STRING__VARCHAR.2af26c0ca4": ["model.crosschain_models.silver_crosschain__snowflake_Algorand_satellite"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Algorand_satellite_BLOCKCHAIN__CREATOR__ADDRESS.c70c222a56": ["model.crosschain_models.silver_crosschain__snowflake_Algorand_satellite"], "test.crosschain_models.not_null_silver__tags_contract_address_eth_ADDRESS.bc158c86c7": ["model.crosschain_models.silver__tags_contract_address_eth"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_eth_ADDRESS__STRING__VARCHAR.851a1c22db": ["model.crosschain_models.silver__tags_contract_address_eth"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_eth_ADDRESS__0_xX_0_9a_fA_F_.0148e19762": ["model.crosschain_models.silver__tags_contract_address_eth"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_contract_address_eth_ADDRESS.636c50b1d4": ["model.crosschain_models.silver__tags_contract_address_eth"], "test.crosschain_models.not_null_silver_crosschain__snowflake_Osmosis_satellite_ADDRESS.7aae4b3526": ["model.crosschain_models.silver_crosschain__snowflake_Osmosis_satellite"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Osmosis_satellite_ADDRESS__STRING__VARCHAR.e280a0e9f9": ["model.crosschain_models.silver_crosschain__snowflake_Osmosis_satellite"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Osmosis_satellite_BLOCKCHAIN__CREATOR__ADDRESS.d5983929c2": ["model.crosschain_models.silver_crosschain__snowflake_Osmosis_satellite"], "test.crosschain_models.not_null_silver__asset_metadata_coin_gecko_ID.9cc8e7c8fe": ["model.crosschain_models.silver__asset_metadata_coin_gecko"], "test.crosschain_models.not_null_silver__asset_metadata_coin_gecko_NAME.1a9f576756": ["model.crosschain_models.silver__asset_metadata_coin_gecko"], "test.crosschain_models.not_null_silver__asset_metadata_coin_gecko_SYMBOL.6abaf78cb3": ["model.crosschain_models.silver__asset_metadata_coin_gecko"], "test.crosschain_models.not_null_silver__asset_metadata_coin_gecko_PLATFORM.990cfa7d0b": ["model.crosschain_models.silver__asset_metadata_coin_gecko"], "test.crosschain_models.not_null_silver__asset_metadata_coin_gecko__INSERTED_TIMESTAMP.c4f0e940b7": ["model.crosschain_models.silver__asset_metadata_coin_gecko"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__asset_metadata_coin_gecko_ID__TOKEN_ADDRESS.a8199a41f6": ["model.crosschain_models.silver__asset_metadata_coin_gecko"], "test.crosschain_models.not_null_silver__tags_contract_address_polygon_ADDRESS.5e8971ba99": ["model.crosschain_models.silver__tags_contract_address_polygon"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_polygon_ADDRESS__STRING__VARCHAR.473432ebfb": ["model.crosschain_models.silver__tags_contract_address_polygon"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_polygon_ADDRESS__0_xX_0_9a_fA_F_.c8565696cf": ["model.crosschain_models.silver__tags_contract_address_polygon"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_contract_address_polygon_ADDRESS.fbffea5810": ["model.crosschain_models.silver__tags_contract_address_polygon"], "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_ID.81e3fd83b3": ["model.crosschain_models.silver__hourly_prices_coin_market_cap"], "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_RECORDED_HOUR.4bf12c012b": ["model.crosschain_models.silver__hourly_prices_coin_market_cap"], "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_OPEN.0afac19e4c": ["model.crosschain_models.silver__hourly_prices_coin_market_cap"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_OPEN__FLOAT__DOUBLE.b9986d4560": ["model.crosschain_models.silver__hourly_prices_coin_market_cap"], "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_HIGH.3375deccb4": ["model.crosschain_models.silver__hourly_prices_coin_market_cap"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_HIGH__FLOAT__DOUBLE.fadb3ead13": ["model.crosschain_models.silver__hourly_prices_coin_market_cap"], "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_LOW.47b7c01027": ["model.crosschain_models.silver__hourly_prices_coin_market_cap"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_LOW__FLOAT__DOUBLE.306784522f": ["model.crosschain_models.silver__hourly_prices_coin_market_cap"], "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_CLOSE.745c907e01": ["model.crosschain_models.silver__hourly_prices_coin_market_cap"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_CLOSE__FLOAT__DOUBLE.a0524933c6": ["model.crosschain_models.silver__hourly_prices_coin_market_cap"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_VOLUME__NUMBER__INTEGER.0175a85069": ["model.crosschain_models.silver__hourly_prices_coin_market_cap"], "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_MARKET_CAP.151b40e5a9": ["model.crosschain_models.silver__hourly_prices_coin_market_cap"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_MARKET_CAP__NUMBER__INTEGER.6bfce9ea83": ["model.crosschain_models.silver__hourly_prices_coin_market_cap"], "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap__INSERTED_TIMESTAMP.5729e3c243": ["model.crosschain_models.silver__hourly_prices_coin_market_cap"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__hourly_prices_coin_market_cap_ID__RECORDED_HOUR.14f42f9016": ["model.crosschain_models.silver__hourly_prices_coin_market_cap"], "test.crosschain_models.not_null_silver_crosschain__snowflake_Near_satellite_ADDRESS.a7558af6f3": ["model.crosschain_models.silver_crosschain__snowflake_Near_satellite"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Near_satellite_ADDRESS__STRING__VARCHAR.cbff05943f": ["model.crosschain_models.silver_crosschain__snowflake_Near_satellite"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Near_satellite_BLOCKCHAIN__CREATOR__ADDRESS.75d2c769fa": ["model.crosschain_models.silver_crosschain__snowflake_Near_satellite"], "test.crosschain_models.not_null_silver__tags_contract_address_optimism_ADDRESS.bb286d2156": ["model.crosschain_models.silver__tags_contract_address_optimism"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_optimism_ADDRESS__STRING__VARCHAR.d1f34fa4bc": ["model.crosschain_models.silver__tags_contract_address_optimism"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_optimism_ADDRESS__0_xX_0_9a_fA_F_.f01de82cce": ["model.crosschain_models.silver__tags_contract_address_optimism"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_contract_address_optimism_ADDRESS.e7827fdf84": ["model.crosschain_models.silver__tags_contract_address_optimism"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_BLOCKCHAIN.6703493e03": ["model.crosschain_models.silver_crosschain__labels_contracts_avalanche"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_avalanche_BLOCKCHAIN__avalanche.006b5d970f": ["model.crosschain_models.silver_crosschain__labels_contracts_avalanche"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_ADDRESS.63f0b2baae": ["model.crosschain_models.silver_crosschain__labels_contracts_avalanche"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_avalanche_ADDRESS__STRING__VARCHAR.e574633947": ["model.crosschain_models.silver_crosschain__labels_contracts_avalanche"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_avalanche_ADDRESS__0_xX_0_9a_fA_F_.a65cf64677": ["model.crosschain_models.silver_crosschain__labels_contracts_avalanche"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_CREATOR.b2139e1096": ["model.crosschain_models.silver_crosschain__labels_contracts_avalanche"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_L1_LABEL.700360d60c": ["model.crosschain_models.silver_crosschain__labels_contracts_avalanche"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_avalanche_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.942796fe32": ["model.crosschain_models.silver_crosschain__labels_contracts_avalanche"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_L2_LABEL.d1ef269c45": ["model.crosschain_models.silver_crosschain__labels_contracts_avalanche"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_ADDRESS_NAME.9ffb95412b": ["model.crosschain_models.silver_crosschain__labels_contracts_avalanche"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_PROJECT_NAME.95cdf4d8ec": ["model.crosschain_models.silver_crosschain__labels_contracts_avalanche"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche__INSERTED_TIMESTAMP.aa23e2b009": ["model.crosschain_models.silver_crosschain__labels_contracts_avalanche"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_avalanche__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.3b7cd469d7": ["model.crosschain_models.silver_crosschain__labels_contracts_avalanche"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_avalanche_ADDRESS.0cb9b87c66": ["model.crosschain_models.silver_crosschain__labels_contracts_avalanche"], "test.crosschain_models.not_null_silver__asset_metadata_coin_market_cap_ID.757aac2eb7": ["model.crosschain_models.silver__asset_metadata_coin_market_cap"], "test.crosschain_models.not_null_silver__asset_metadata_coin_market_cap_NAME.56bd578cbc": ["model.crosschain_models.silver__asset_metadata_coin_market_cap"], "test.crosschain_models.not_null_silver__asset_metadata_coin_market_cap_SYMBOL.dfed76153a": ["model.crosschain_models.silver__asset_metadata_coin_market_cap"], "test.crosschain_models.not_null_silver__asset_metadata_coin_market_cap_PLATFORM.5f3a0c3e87": ["model.crosschain_models.silver__asset_metadata_coin_market_cap"], "test.crosschain_models.not_null_silver__asset_metadata_coin_market_cap__INSERTED_TIMESTAMP.3a37d1a1ff": ["model.crosschain_models.silver__asset_metadata_coin_market_cap"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__asset_metadata_coin_market_cap_ID__TOKEN_ADDRESS.3bae856e75": ["model.crosschain_models.silver__asset_metadata_coin_market_cap"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_BLOCKCHAIN.44a2f1a898": ["model.crosschain_models.silver_crosschain__labels_contracts"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_BLOCKCHAIN__ethereum.cfbc7085d9": ["model.crosschain_models.silver_crosschain__labels_contracts"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_ADDRESS.1147ea62d2": ["model.crosschain_models.silver_crosschain__labels_contracts"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_ADDRESS__STRING__VARCHAR.fefb7618d7": ["model.crosschain_models.silver_crosschain__labels_contracts"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_ADDRESS__0_xX_0_9a_fA_F_.10b83b7ade": ["model.crosschain_models.silver_crosschain__labels_contracts"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_CREATOR.b3b4375a91": ["model.crosschain_models.silver_crosschain__labels_contracts"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_L1_LABEL.95bc2a4325": ["model.crosschain_models.silver_crosschain__labels_contracts"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.82c6a23d00": ["model.crosschain_models.silver_crosschain__labels_contracts"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_L2_LABEL.5f04962e99": ["model.crosschain_models.silver_crosschain__labels_contracts"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_ADDRESS_NAME.ed60bb7d8d": ["model.crosschain_models.silver_crosschain__labels_contracts"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_PROJECT_NAME.89d7a3c8be": ["model.crosschain_models.silver_crosschain__labels_contracts"], "test.crosschain_models.not_null_silver_crosschain__labels_contracts__INSERTED_TIMESTAMP.0c46996794": ["model.crosschain_models.silver_crosschain__labels_contracts"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.f0c369857d": ["model.crosschain_models.silver_crosschain__labels_contracts"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_ADDRESS.a06df4578d": ["model.crosschain_models.silver_crosschain__labels_contracts"], "test.crosschain_models.not_null_silver__tags_nft_larva_labs_user_ADDRESS.2b9b0c77f5": ["model.crosschain_models.silver__tags_nft_larva_labs_user"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_larva_labs_user_ADDRESS__STRING__VARCHAR.0d888d343e": ["model.crosschain_models.silver__tags_nft_larva_labs_user"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_larva_labs_user_ADDRESS__0_xX_0_9a_fA_F_.5ecc1ff31f": ["model.crosschain_models.silver__tags_nft_larva_labs_user"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_larva_labs_user_ADDRESS.19773c98fc": ["model.crosschain_models.silver__tags_nft_larva_labs_user"], "test.crosschain_models.not_null_silver_crosschain__snowflake_Avalanche_satellites_ADDRESS.aa828063b8": ["model.crosschain_models.silver_crosschain__snowflake_Avalanche_satellites"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Avalanche_satellites_ADDRESS__STRING__VARCHAR.aa40e57912": ["model.crosschain_models.silver_crosschain__snowflake_Avalanche_satellites"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Avalanche_satellites_BLOCKCHAIN__CREATOR__ADDRESS.75ee624c69": ["model.crosschain_models.silver_crosschain__snowflake_Avalanche_satellites"], "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko_ID.5787109793": ["model.crosschain_models.silver__hourly_prices_coin_gecko"], "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko_RECORDED_HOUR.c307ae993c": ["model.crosschain_models.silver__hourly_prices_coin_gecko"], "test.crosschain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__hourly_prices_coin_gecko_RECORDED_HOUR__day__1.d8f930130d": ["model.crosschain_models.silver__hourly_prices_coin_gecko"], "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko_OPEN.3de377b73e": ["model.crosschain_models.silver__hourly_prices_coin_gecko"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_gecko_OPEN__FLOAT__DOUBLE.b944c5092d": ["model.crosschain_models.silver__hourly_prices_coin_gecko"], "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko_HIGH.6d22a61317": ["model.crosschain_models.silver__hourly_prices_coin_gecko"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_gecko_HIGH__FLOAT__DOUBLE.451197e764": ["model.crosschain_models.silver__hourly_prices_coin_gecko"], "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko_LOW.049aed28b0": ["model.crosschain_models.silver__hourly_prices_coin_gecko"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_gecko_LOW__FLOAT__DOUBLE.85d9c10d3e": ["model.crosschain_models.silver__hourly_prices_coin_gecko"], "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko_CLOSE.483d35fc1d": ["model.crosschain_models.silver__hourly_prices_coin_gecko"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_gecko_CLOSE__FLOAT__DOUBLE.3682844202": ["model.crosschain_models.silver__hourly_prices_coin_gecko"], "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko__INSERTED_TIMESTAMP.8a9c4c622d": ["model.crosschain_models.silver__hourly_prices_coin_gecko"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__hourly_prices_coin_gecko_ID__RECORDED_HOUR.89152c02c9": ["model.crosschain_models.silver__hourly_prices_coin_gecko"], "test.crosschain_models.not_null_silver__tags_nft_rarible_user_ADDRESS.65708ea50e": ["model.crosschain_models.silver__tags_nft_rarible_user"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_rarible_user_ADDRESS__STRING__VARCHAR.2e901e783c": ["model.crosschain_models.silver__tags_nft_rarible_user"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_rarible_user_ADDRESS__0_xX_0_9a_fA_F_.a6314feeac": ["model.crosschain_models.silver__tags_nft_rarible_user"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_rarible_user_ADDRESS.3054ef0c41": ["model.crosschain_models.silver__tags_nft_rarible_user"], "test.crosschain_models.not_null_silver_crosschain__snowflake_Arbitrum_satellites_ADDRESS.ee854fd345": ["model.crosschain_models.silver_crosschain__snowflake_Arbitrum_satellites"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Arbitrum_satellites_ADDRESS__STRING__VARCHAR.2b4af34dc4": ["model.crosschain_models.silver_crosschain__snowflake_Arbitrum_satellites"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Arbitrum_satellites_BLOCKCHAIN__CREATOR__ADDRESS.c09a6d7245": ["model.crosschain_models.silver_crosschain__snowflake_Arbitrum_satellites"], "test.crosschain_models.not_null_silver__tags_airdrop_master_ETH_ADDRESS.1d8d807d61": ["model.crosschain_models.silver__tags_airdrop_master_ETH"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_airdrop_master_ETH_ADDRESS__STRING__VARCHAR.991a7dc76b": ["model.crosschain_models.silver__tags_airdrop_master_ETH"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_airdrop_master_ETH_ADDRESS__0_xX_0_9a_fA_F_.a92e5cbe4d": ["model.crosschain_models.silver__tags_airdrop_master_ETH"], "test.crosschain_models.not_null_silver__tags_airdrop_master_ETH_TAG_NAME.79303f25f5": ["model.crosschain_models.silver__tags_airdrop_master_ETH"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_airdrop_master_ETH_ADDRESS__TAG_NAME__START_DATE.af378860dd": ["model.crosschain_models.silver__tags_airdrop_master_ETH"], "test.crosschain_models.not_null_silver_crosschain__snowflake_Optimism_satellites_ADDRESS.3005aafddd": ["model.crosschain_models.silver_crosschain__snowflake_Optimism_satellites"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Optimism_satellites_ADDRESS__STRING__VARCHAR.43a5ee481e": ["model.crosschain_models.silver_crosschain__snowflake_Optimism_satellites"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Optimism_satellites_BLOCKCHAIN__CREATOR__ADDRESS.61688ab7e3": ["model.crosschain_models.silver_crosschain__snowflake_Optimism_satellites"], "test.crosschain_models.not_null_silver__tags_thor_liquidity_provider_ADDRESS.42acd8cc75": ["model.crosschain_models.silver__tags_thor_liquidity_provider"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_thor_liquidity_provider_ADDRESS__STRING__VARCHAR.f7e3d5c6f3": ["model.crosschain_models.silver__tags_thor_liquidity_provider"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_thor_liquidity_provider_ADDRESS.f7e5c290eb": ["model.crosschain_models.silver__tags_thor_liquidity_provider"], "test.crosschain_models.not_null_silver__tags_active_avalanche_last_7_ADDRESS.37f6953e76": ["model.crosschain_models.silver__tags_active_avalanche_last_7"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_avalanche_last_7_ADDRESS__STRING__VARCHAR.21ffeb7af9": ["model.crosschain_models.silver__tags_active_avalanche_last_7"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_avalanche_last_7_ADDRESS__0_xX_0_9a_fA_F_.c4581326b9": ["model.crosschain_models.silver__tags_active_avalanche_last_7"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_active_avalanche_last_7_ADDRESS__START_DATE.90bfb821b6": ["model.crosschain_models.silver__tags_active_avalanche_last_7"], "test.crosschain_models.not_null_silver__tags_cex_user_ETH_ADDRESS.8f5bc8abef": ["model.crosschain_models.silver__tags_cex_user_ETH"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_cex_user_ETH_ADDRESS__STRING__VARCHAR.ca63271ea1": ["model.crosschain_models.silver__tags_cex_user_ETH"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_cex_user_ETH_ADDRESS__0_xX_0_9a_fA_F_.6bd28cb52c": ["model.crosschain_models.silver__tags_cex_user_ETH"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_cex_user_ETH_ADDRESS__TAG_NAME.7a31800d9f": ["model.crosschain_models.silver__tags_cex_user_ETH"], "test.crosschain_models.not_null_silver__tags_nft_transactor_ETH_ADDRESS.0cb0dba3eb": ["model.crosschain_models.silver__tags_nft_transactor_ETH"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_transactor_ETH_ADDRESS__STRING__VARCHAR.8076e07574": ["model.crosschain_models.silver__tags_nft_transactor_ETH"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_transactor_ETH_ADDRESS__0_xX_0_9a_fA_F_.88897ddbfd": ["model.crosschain_models.silver__tags_nft_transactor_ETH"], "test.crosschain_models.not_null_silver__tags_nft_transactor_ETH_TAG_NAME.39732b6234": ["model.crosschain_models.silver__tags_nft_transactor_ETH"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_transactor_ETH_ADDRESS__TAG_NAME__START_DATE.568aebebc1": ["model.crosschain_models.silver__tags_nft_transactor_ETH"], "test.crosschain_models.not_null_silver__tags_contract_address_bsc_ADDRESS.c6d445ef31": ["model.crosschain_models.silver__tags_contract_address_bsc"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_bsc_ADDRESS__STRING__VARCHAR.b3e54467e4": ["model.crosschain_models.silver__tags_contract_address_bsc"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_bsc_ADDRESS__0_xX_0_9a_fA_F_.496673602d": ["model.crosschain_models.silver__tags_contract_address_bsc"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_contract_address_bsc_ADDRESS.68c3a1e502": ["model.crosschain_models.silver__tags_contract_address_bsc"], "test.crosschain_models.not_null_silver_crosschain__snowflake_Thorchain_satellite_ADDRESS.94e8a409e0": ["model.crosschain_models.silver_crosschain__snowflake_Thorchain_satellite"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Thorchain_satellite_ADDRESS__STRING__VARCHAR.8b884fa762": ["model.crosschain_models.silver_crosschain__snowflake_Thorchain_satellite"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Thorchain_satellite_BLOCKCHAIN__CREATOR__ADDRESS.ba657294c5": ["model.crosschain_models.silver_crosschain__snowflake_Thorchain_satellite"], "test.crosschain_models.not_null_silver__tags_nft_nftx_user_ADDRESS.ea3334c966": ["model.crosschain_models.silver__tags_nft_nftx_user"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_nftx_user_ADDRESS__STRING__VARCHAR.58c89e1a26": ["model.crosschain_models.silver__tags_nft_nftx_user"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_nftx_user_ADDRESS__0_xX_0_9a_fA_F_.4a534aeb27": ["model.crosschain_models.silver__tags_nft_nftx_user"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_nftx_user_ADDRESS.2742e2114d": ["model.crosschain_models.silver__tags_nft_nftx_user"], "test.crosschain_models.not_null_silver_crosschain__snowflake_SOL_satellites_ADDRESS.c659cc60f8": ["model.crosschain_models.silver_crosschain__snowflake_SOL_satellites"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_SOL_satellites_ADDRESS__STRING__VARCHAR.62aaa4ddf0": ["model.crosschain_models.silver_crosschain__snowflake_SOL_satellites"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_SOL_satellites_BLOCKCHAIN__CREATOR__ADDRESS.8436e4fa2b": ["model.crosschain_models.silver_crosschain__snowflake_SOL_satellites"], "test.crosschain_models.not_null_core__fact_hourly_prices_PROVIDER.91ee2e8c6b": ["model.crosschain_models.core__fact_hourly_prices"], "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_PROVIDER.235f59cf8a": ["model.crosschain_models.core__fact_hourly_prices"], "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_ID.15d6edcab1": ["model.crosschain_models.core__fact_hourly_prices"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_hourly_prices_ID__STRING__VARCHAR.1c2074ca53": ["model.crosschain_models.core__fact_hourly_prices"], "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_RECORDED_HOUR.e5de74b9af": ["model.crosschain_models.core__fact_hourly_prices"], "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_OPEN.0cd8663dd3": ["model.crosschain_models.core__fact_hourly_prices"], "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_HIGH.59af6120cb": ["model.crosschain_models.core__fact_hourly_prices"], "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_LOW.9231b3f78d": ["model.crosschain_models.core__fact_hourly_prices"], "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_CLOSE.24f933b9a0": ["model.crosschain_models.core__fact_hourly_prices"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_core__fact_hourly_prices_PROVIDER__ID__RECORDED_HOUR.e34d5489bd": ["model.crosschain_models.core__fact_hourly_prices"], "test.crosschain_models.not_null_core__dim_asset_metadata_PROVIDER.1e680f5a1d": ["model.crosschain_models.core__dim_asset_metadata"], "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_PROVIDER.e50103dc5d": ["model.crosschain_models.core__dim_asset_metadata"], "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_ID.593e500776": ["model.crosschain_models.core__dim_asset_metadata"], "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_NAME.7af2219c96": ["model.crosschain_models.core__dim_asset_metadata"], "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_SYMBOL.6dbcec9f41": ["model.crosschain_models.core__dim_asset_metadata"], "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_TOKEN_ADDRESS.3e0ba95440": ["model.crosschain_models.core__dim_asset_metadata"], "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_PLATFORM.08a4b73a08": ["model.crosschain_models.core__dim_asset_metadata"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_core__dim_asset_metadata_PROVIDER__ID__TOKEN_ADDRESS.d333e4d78b": ["model.crosschain_models.core__dim_asset_metadata"], "model.crosschain_models.core__address_tags": ["model.crosschain_models.silver__tags_active_arbitrum_last_7", "model.crosschain_models.silver__tags_active_avalanche_last_7", "model.crosschain_models.silver__tags_active_bsc_last_7", "model.crosschain_models.silver__tags_active_eth_last_7", "model.crosschain_models.silver__tags_active_optimism_last_7", "model.crosschain_models.silver__tags_active_polygon_last_7", "model.crosschain_models.silver__tags_airdrop_master_ETH", "model.crosschain_models.silver__tags_cex_user_ETH", "model.crosschain_models.silver__tags_contract_address_avalanche", "model.crosschain_models.silver__tags_contract_address_bsc", "model.crosschain_models.silver__tags_contract_address_eth", "model.crosschain_models.silver__tags_contract_address_optimism", "model.crosschain_models.silver__tags_contract_address_polygon", "model.crosschain_models.silver__tags_gnosis_safe_address", "model.crosschain_models.silver__tags_nft_larva_labs_user", "model.crosschain_models.silver__tags_nft_looksrare_user", "model.crosschain_models.silver__tags_nft_nftx_user", "model.crosschain_models.silver__tags_nft_opensea_user", "model.crosschain_models.silver__tags_nft_rarible_user", "model.crosschain_models.silver__tags_nft_transactor_ETH", "model.crosschain_models.silver__tags_nft_x2y2_user", "model.crosschain_models.silver__tags_thor_dex_user", "model.crosschain_models.silver__tags_thor_liquidity_provider", "model.crosschain_models.silver__tags_token_vesting_ETH", "model.crosschain_models.silver__tags_wallet_ETH_value", "model.crosschain_models.silver__tags_wallet_TOKEN_value", "model.crosschain_models.silver__tags_wallet_value", "source.crosschain_models.crosschain_silver.godmode_nft_minters", "source.crosschain_models.crosschain_silver.optimism_delegates"], "model.crosschain_models.silver__tags_active_eth_last_7": ["source.crosschain_models.ethereum_core.fact_transactions"], "model.crosschain_models.core__address_labels": ["model.crosschain_models.silver_crosschain__address_labels", "model.crosschain_models.silver_crosschain__snowflake_Algorand_satellite", "model.crosschain_models.silver_crosschain__snowflake_Arbitrum_satellites", "model.crosschain_models.silver_crosschain__snowflake_Avalanche_satellites", "model.crosschain_models.silver_crosschain__snowflake_BSC_satellites", "model.crosschain_models.silver_crosschain__snowflake_ETH_satellites", "model.crosschain_models.silver_crosschain__snowflake_Flow_satellites", "model.crosschain_models.silver_crosschain__snowflake_Near_satellite", "model.crosschain_models.silver_crosschain__snowflake_Optimism_satellites", "model.crosschain_models.silver_crosschain__snowflake_Osmosis_satellite", "model.crosschain_models.silver_crosschain__snowflake_Polygon_satellites", "model.crosschain_models.silver_crosschain__snowflake_SOL_satellites", "model.crosschain_models.silver_crosschain__snowflake_Thorchain_satellite"], "model.crosschain_models.silver_crosschain__snowflake_ETH_satellites": ["model.crosschain_models.silver_crosschain__address_labels", "model.crosschain_models.silver_crosschain__address_labels", "source.crosschain_models.ethereum_core.fact_token_transfers", "source.crosschain_models.ethereum_core.fact_token_transfers", "source.crosschain_models.ethereum_core.fact_traces", "source.crosschain_models.ethereum_core.fact_traces"], "model.crosschain_models.silver__tags_wallet_ETH_value": ["source.crosschain_models.ethereum_core.ez_current_balances"], "model.crosschain_models.silver__tags_wallet_TOKEN_value": ["source.crosschain_models.ethereum_core.ez_current_balances"], "model.crosschain_models.silver__tags_wallet_value": ["source.crosschain_models.ethereum_core.ez_current_balances"], "test.crosschain_models.not_null_silver__tags_active_eth_last_7_ADDRESS.1867ec5e2e": ["model.crosschain_models.silver__tags_active_eth_last_7"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_eth_last_7_ADDRESS__STRING__VARCHAR.54c7d7db19": ["model.crosschain_models.silver__tags_active_eth_last_7"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_eth_last_7_ADDRESS__0_xX_0_9a_fA_F_.64e986e9e7": ["model.crosschain_models.silver__tags_active_eth_last_7"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_active_eth_last_7_ADDRESS__START_DATE.e38f6662b0": ["model.crosschain_models.silver__tags_active_eth_last_7"], "test.crosschain_models.not_null_silver_crosschain__snowflake_ETH_satellites_ADDRESS.53f250ee3b": ["model.crosschain_models.silver_crosschain__snowflake_ETH_satellites"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_ETH_satellites_ADDRESS__STRING__VARCHAR.b8cc2128ec": ["model.crosschain_models.silver_crosschain__snowflake_ETH_satellites"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_ETH_satellites_BLOCKCHAIN__CREATOR__ADDRESS.22cce8e38e": ["model.crosschain_models.silver_crosschain__snowflake_ETH_satellites"], "test.crosschain_models.not_null_core__address_labels_BLOCKCHAIN.cee6eb8213": ["model.crosschain_models.core__address_labels"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_core__address_labels_BLOCKCHAIN__ethereum__flow__polygon__terra__algorand__solana__moonriver__avalanche__bittorrent__cronos__fantom__arbitrum__aurora__bsc__heco__optimism__gnosis__thorchain__near__terra_classic__axelar.2973734426": ["model.crosschain_models.core__address_labels"], "test.crosschain_models.not_null_core__address_labels_CREATOR.679a91da92": ["model.crosschain_models.core__address_labels"], "test.crosschain_models.not_null_core__address_labels_LABEL_TYPE.470bc3151f": ["model.crosschain_models.core__address_labels"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_core__address_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.f24edce2b6": ["model.crosschain_models.core__address_labels"], "test.crosschain_models.not_null_core__address_labels_LABEL_SUBTYPE.a78cdf8328": ["model.crosschain_models.core__address_labels"], "test.crosschain_models.not_null_core__address_labels_ADDRESS_NAME.24eb73bccd": ["model.crosschain_models.core__address_labels"], "test.crosschain_models.not_null_core__address_labels_PROJECT_NAME.e5dcff5a5d": ["model.crosschain_models.core__address_labels"], "test.crosschain_models.not_null_core__address_labels_ADDRESS.658975b23a": ["model.crosschain_models.core__address_labels"], "test.crosschain_models.dbt_expectations_expect_column_value_lengths_to_equal_core__address_labels_ADDRESS__58.d14dc96ad9": ["model.crosschain_models.core__address_labels"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_core__address_labels_BLOCKCHAIN__CREATOR__ADDRESS.ca8dfe5952": ["model.crosschain_models.core__address_labels"], "test.crosschain_models.not_null_silver__tags_wallet_ETH_value_ADDRESS.878867a740": ["model.crosschain_models.silver__tags_wallet_ETH_value"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_wallet_ETH_value_ADDRESS__STRING__VARCHAR.366ad4fe70": ["model.crosschain_models.silver__tags_wallet_ETH_value"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_wallet_ETH_value_ADDRESS__0_xX_0_9a_fA_F_.c05dfde371": ["model.crosschain_models.silver__tags_wallet_ETH_value"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_wallet_ETH_value_ADDRESS__TAG_NAME__START_DATE.31074c69eb": ["model.crosschain_models.silver__tags_wallet_ETH_value"], "test.crosschain_models.not_null_silver__tags_wallet_TOKEN_value_ADDRESS.9a6b1a962c": ["model.crosschain_models.silver__tags_wallet_TOKEN_value"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_wallet_TOKEN_value_ADDRESS__STRING__VARCHAR.f53e4a9be9": ["model.crosschain_models.silver__tags_wallet_TOKEN_value"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_wallet_TOKEN_value_ADDRESS__0_xX_0_9a_fA_F_.14b473d0b6": ["model.crosschain_models.silver__tags_wallet_TOKEN_value"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_wallet_TOKEN_value_ADDRESS__TAG_NAME__START_DATE.95b7867401": ["model.crosschain_models.silver__tags_wallet_TOKEN_value"], "test.crosschain_models.not_null_silver__tags_wallet_value_ADDRESS.93be4dc6da": ["model.crosschain_models.silver__tags_wallet_value"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_wallet_value_ADDRESS__STRING__VARCHAR.e4be45a666": ["model.crosschain_models.silver__tags_wallet_value"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_wallet_value_ADDRESS__0_xX_0_9a_fA_F_.76ebe8da51": ["model.crosschain_models.silver__tags_wallet_value"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_wallet_value_ADDRESS__TAG_NAME__START_DATE.327d555024": ["model.crosschain_models.silver__tags_wallet_value"], "model.crosschain_models.defi__ez_swaps": ["source.crosschain_models.Arbitrum.EZ_SWAPS", "source.crosschain_models.Avalanche.EZ_SWAPS", "source.crosschain_models.BSC.EZ_SWAPS", "source.crosschain_models.Gnosis.EZ_SWAPS", "source.crosschain_models.Harmony_db.EZ_SUSHI_SWAPS", "source.crosschain_models.Optimism.EZ_SWAPS", "source.crosschain_models.ethereum_core.ez_dex_swaps", "source.crosschain_models.polygon.EZ_SWAPS"], "model.crosschain_models.defi__ez_borrowing": ["source.crosschain_models.Arbitrum.EZ_BORROWING", "source.crosschain_models.Avalanche.EZ_BORROWING", "source.crosschain_models.BSC.EZ_BORROWING", "source.crosschain_models.Gnosis.EZ_BORROWING", "source.crosschain_models.ethereum_db_sushi.ez_borrowing", "source.crosschain_models.polygon.EZ_BORROWING"], "model.crosschain_models.defi__ez_lending": ["source.crosschain_models.Arbitrum.EZ_LENDING", "source.crosschain_models.Avalanche.EZ_LENDING", "source.crosschain_models.BSC.EZ_LENDING", "source.crosschain_models.Gnosis.EZ_LENDING", "source.crosschain_models.ethereum_db_sushi.ez_lending", "source.crosschain_models.polygon.EZ_LENDING"], "test.crosschain_models.not_null_defi__ez_swaps_BLOCK_NUMBER.e78d5c7975": ["model.crosschain_models.defi__ez_swaps"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_BLOCK_NUMBER__NUMBER__FLOAT.a2a06497bf": ["model.crosschain_models.defi__ez_swaps"], "test.crosschain_models.not_null_defi__ez_swaps_BLOCK_TIMESTAMP.8684e16602": ["model.crosschain_models.defi__ez_swaps"], "test.crosschain_models.dbt_expectations_expect_row_values_to_have_recent_data_defi__ez_swaps_BLOCK_TIMESTAMP__day__1.be7f4aafb9": ["model.crosschain_models.defi__ez_swaps"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.7c82aa82d4": ["model.crosschain_models.defi__ez_swaps"], "test.crosschain_models.not_null_defi__ez_swaps_TX_HASH.bb13eedc0e": ["model.crosschain_models.defi__ez_swaps"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_TX_HASH__0_xX_0_9a_fA_F_.b85da919f9": ["model.crosschain_models.defi__ez_swaps"], "test.crosschain_models.not_null_defi__ez_swaps_POOL_ADDRESS.bf72ba1383": ["model.crosschain_models.defi__ez_swaps"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_POOL_ADDRESS__0_xX_0_9a_fA_F_.9fb643cac5": ["model.crosschain_models.defi__ez_swaps"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_AMOUNT_IN__NUMBER__FLOAT.49a10a4e9a": ["model.crosschain_models.defi__ez_swaps"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_AMOUNT_OUT__NUMBER__FLOAT.a03a48103a": ["model.crosschain_models.defi__ez_swaps"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.6e47d30c86": ["model.crosschain_models.defi__ez_swaps"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.2e328e288c": ["model.crosschain_models.defi__ez_swaps"], "test.crosschain_models.not_null_defi__ez_swaps_TOKEN_IN.8fe2dcfd1b": ["model.crosschain_models.defi__ez_swaps"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.33c79a6996": ["model.crosschain_models.defi__ez_swaps"], "test.crosschain_models.not_null_defi__ez_swaps_TOKEN_OUT.d547a4ace9": ["model.crosschain_models.defi__ez_swaps"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.aa233236df": ["model.crosschain_models.defi__ez_swaps"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_SYMBOL_IN__STRING__VARCHAR.6433a6c646": ["model.crosschain_models.defi__ez_swaps"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_SYMBOL_OUT__STRING__VARCHAR.68e93881f0": ["model.crosschain_models.defi__ez_swaps"], "test.crosschain_models.not_null_defi__ez_swaps_SENDER.071babae7e": ["model.crosschain_models.defi__ez_swaps"], "test.crosschain_models.not_null_defi__ez_swaps_TX_TO.5ccb222a4b": ["model.crosschain_models.defi__ez_swaps"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_TX_TO__0_xX_0_9a_fA_F_.d202570785": ["model.crosschain_models.defi__ez_swaps"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_PLATFORM__STRING__VARCHAR.74301886f3": ["model.crosschain_models.defi__ez_swaps"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_EVENT_INDEX__NUMBER__FLOAT.6acfd74855": ["model.crosschain_models.defi__ez_swaps"], "test.crosschain_models.not_null_defi__ez_swaps_LOG_ID.3e6c1029b7": ["model.crosschain_models.defi__ez_swaps"], "test.crosschain_models.not_null_defi__ez_swaps_ORIGIN_FROM_ADDRESS.2a2cfb984e": ["model.crosschain_models.defi__ez_swaps"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.749316832e": ["model.crosschain_models.defi__ez_swaps"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.dea027f760": ["model.crosschain_models.defi__ez_swaps"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_defi__ez_swaps_LOG_ID.a87c5fc7f0": ["model.crosschain_models.defi__ez_swaps"], "test.crosschain_models.not_null_defi__ez_borrowing_BLOCK_NUMBER.d0cc099a95": ["model.crosschain_models.defi__ez_borrowing"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_BLOCK_NUMBER__NUMBER__FLOAT.8945b58384": ["model.crosschain_models.defi__ez_borrowing"], "test.crosschain_models.not_null_defi__ez_borrowing_BLOCK_TIMESTAMP.9db1850359": ["model.crosschain_models.defi__ez_borrowing"], "test.crosschain_models.dbt_expectations_expect_row_values_to_have_recent_data_defi__ez_borrowing_BLOCK_TIMESTAMP__day__3.b780d2fc12": ["model.crosschain_models.defi__ez_borrowing"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.94b3afa559": ["model.crosschain_models.defi__ez_borrowing"], "test.crosschain_models.not_null_defi__ez_borrowing_TX_HASH.c163812f21": ["model.crosschain_models.defi__ez_borrowing"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_TX_HASH__0_xX_0_9a_fA_F_.dbd5c3a63d": ["model.crosschain_models.defi__ez_borrowing"], "test.crosschain_models.not_null_defi__ez_borrowing_LENDING_POOL_ADDRESS.83618c6958": ["model.crosschain_models.defi__ez_borrowing"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_LENDING_POOL_ADDRESS__0_xX_0_9a_fA_F_.1242c8904a": ["model.crosschain_models.defi__ez_borrowing"], "test.crosschain_models.not_null_defi__ez_borrowing_LENDING_POOL.753052fb61": ["model.crosschain_models.defi__ez_borrowing"], "test.crosschain_models.not_null_defi__ez_borrowing_BORROWER_IS_A_CONTRACT.216c379f62": ["model.crosschain_models.defi__ez_borrowing"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_AMOUNT__NUMBER__FLOAT.bc8ae5595e": ["model.crosschain_models.defi__ez_borrowing"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_AMOUNT_USD__NUMBER__FLOAT.62c1ae46e1": ["model.crosschain_models.defi__ez_borrowing"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_SYMBOL__STRING__VARCHAR.45487a3f3f": ["model.crosschain_models.defi__ez_borrowing"], "test.crosschain_models.not_null_defi__ez_borrowing_BORROWER.2d6d6dd64b": ["model.crosschain_models.defi__ez_borrowing"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_BORROWER__0_xX_0_9a_fA_F_.93f550f7d7": ["model.crosschain_models.defi__ez_borrowing"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_PLATFORM__STRING__VARCHAR.331d276328": ["model.crosschain_models.defi__ez_borrowing"], "test.crosschain_models.not_null_defi__ez_borrowing__LOG_ID.a50d878932": ["model.crosschain_models.defi__ez_borrowing"], "test.crosschain_models.not_null_defi__ez_borrowing_ORIGIN_FROM_ADDRESS.9c63165853": ["model.crosschain_models.defi__ez_borrowing"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.51ed05e390": ["model.crosschain_models.defi__ez_borrowing"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.5292240d33": ["model.crosschain_models.defi__ez_borrowing"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_defi__ez_borrowing__LOG_ID.87e94f4521": ["model.crosschain_models.defi__ez_borrowing"], "test.crosschain_models.not_null_defi__ez_lending_BLOCK_NUMBER.6db5a332e6": ["model.crosschain_models.defi__ez_lending"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_BLOCK_NUMBER__NUMBER__FLOAT.0c56142bb4": ["model.crosschain_models.defi__ez_lending"], "test.crosschain_models.not_null_defi__ez_lending_BLOCK_TIMESTAMP.0d4352ae36": ["model.crosschain_models.defi__ez_lending"], "test.crosschain_models.dbt_expectations_expect_row_values_to_have_recent_data_defi__ez_lending_BLOCK_TIMESTAMP__day__3.957ec20e15": ["model.crosschain_models.defi__ez_lending"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.e446fd2311": ["model.crosschain_models.defi__ez_lending"], "test.crosschain_models.not_null_defi__ez_lending_TX_HASH.a9c7b16e2d": ["model.crosschain_models.defi__ez_lending"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_TX_HASH__0_xX_0_9a_fA_F_.6b655b8c27": ["model.crosschain_models.defi__ez_lending"], "test.crosschain_models.not_null_defi__ez_lending_LENDING_POOL_ADDRESS.868e838a22": ["model.crosschain_models.defi__ez_lending"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_LENDING_POOL_ADDRESS__0_xX_0_9a_fA_F_.79e8b7dbd2": ["model.crosschain_models.defi__ez_lending"], "test.crosschain_models.not_null_defi__ez_lending_LENDING_POOL.91ae06743f": ["model.crosschain_models.defi__ez_lending"], "test.crosschain_models.not_null_defi__ez_lending_LENDER_IS_A_CONTRACT.c582af624f": ["model.crosschain_models.defi__ez_lending"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_AMOUNT__NUMBER__FLOAT.d6d80b1c4a": ["model.crosschain_models.defi__ez_lending"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_AMOUNT_USD__NUMBER__FLOAT.f0da31569c": ["model.crosschain_models.defi__ez_lending"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_SYMBOL__STRING__VARCHAR.fca186d25c": ["model.crosschain_models.defi__ez_lending"], "test.crosschain_models.not_null_defi__ez_lending_DEPOSITOR.ef9664972b": ["model.crosschain_models.defi__ez_lending"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_DEPOSITOR__0_xX_0_9a_fA_F_.d0d7dec87c": ["model.crosschain_models.defi__ez_lending"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_PLATFORM__STRING__VARCHAR.56dd714926": ["model.crosschain_models.defi__ez_lending"], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_EVENT_INDEX__NUMBER__FLOAT.5e19309b95": ["model.crosschain_models.defi__ez_lending"], "test.crosschain_models.not_null_defi__ez_lending__LOG_ID.163af3543a": ["model.crosschain_models.defi__ez_lending"], "test.crosschain_models.not_null_defi__ez_lending_ORIGIN_FROM_ADDRESS.55ee0e45b6": ["model.crosschain_models.defi__ez_lending"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.9324d4632c": ["model.crosschain_models.defi__ez_lending"], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.1ab6b92673": ["model.crosschain_models.defi__ez_lending"], "test.crosschain_models.dbt_utils_unique_combination_of_columns_defi__ez_lending__LOG_ID.f59a21ba8d": ["model.crosschain_models.defi__ez_lending"], "source.crosschain_models.legacy_db.prices_v2": [], "source.crosschain_models.legacy_db.market_asset_metadata": [], "source.crosschain_models.legacy_db.hours": [], "source.crosschain_models.legacy_silver_crosschain.ntr": [], "source.crosschain_models.legacy_silver_crosschain.address_labels": [], "source.crosschain_models.legacy_dev_db.prices_v2": [], "source.crosschain_models.legacy_dev_db.market_asset_metadata": [], "source.crosschain_models.legacy_dev_db.hours": [], "source.crosschain_models.crosschain_dev_silver.dates_table": [], "source.crosschain_models.ethereum_silver.logs": [], "source.crosschain_models.ethereum_silver.traces": [], "source.crosschain_models.ethereum_silver.transactions": [], "source.crosschain_models.ethereum_silver.labels": [], "source.crosschain_models.crosschain_silver.godmode_nft_minters": [], "source.crosschain_models.crosschain_silver.optimism_delegates": [], "source.crosschain_models.ethereum_silver_nft.cryptopunk_sales": [], "source.crosschain_models.ethereum_silver_nft.looksrare_sales": [], "source.crosschain_models.ethereum_silver_nft.nftx_sales": [], "source.crosschain_models.ethereum_silver_nft.opensea_sales": [], "source.crosschain_models.ethereum_silver_nft.rarible_sales": [], "source.crosschain_models.ethereum_silver_nft.seaport_sales": [], "source.crosschain_models.ethereum_silver_nft.x2y2_sales": [], "source.crosschain_models.arbitrum_silver.logs": [], "source.crosschain_models.arbitrum_silver.traces": [], "source.crosschain_models.arbitrum_silver.transactions": [], "source.crosschain_models.avalanche_silver.logs": [], "source.crosschain_models.avalanche_silver.traces": [], "source.crosschain_models.avalanche_silver.transactions": [], "source.crosschain_models.polygon_silver.logs": [], "source.crosschain_models.polygon_silver.traces": [], "source.crosschain_models.polygon_silver.transactions": [], "source.crosschain_models.optimism_silver.logs": [], "source.crosschain_models.optimism_silver.traces": [], "source.crosschain_models.optimism_silver.transactions": [], "source.crosschain_models.bsc_silver.logs": [], "source.crosschain_models.bsc_silver.traces": [], "source.crosschain_models.bsc_silver.transactions": [], "source.crosschain_models.bronze_streamline.asset_metadata_coin_market_cap_api": [], "source.crosschain_models.bronze_streamline.asset_metadata_coin_gecko_api": [], "source.crosschain_models.bronze_streamline.asset_ohlc_coin_market_cap_api": [], "source.crosschain_models.bronze_streamline.asset_historical_hourly_market_data_coin_gecko_api": [], "source.crosschain_models.bronze_streamline.asset_ohlc_coin_gecko_api": [], "source.crosschain_models.bronze.prod_address_label_sink_291098491": [], "source.crosschain_models.thorchain.swaps": [], "source.crosschain_models.thorchain.liquidity_actions": [], "source.crosschain_models.thorchain.transfers": [], "source.crosschain_models.algorand_core.ez_transfer": [], "source.crosschain_models.bsc_core.fact_token_transfers": [], "source.crosschain_models.bsc_core.fact_traces": [], "source.crosschain_models.thorchain_core.fact_transfers": [], "source.crosschain_models.polygon_core.fact_token_transfers": [], "source.crosschain_models.polygon_core.fact_traces": [], "source.crosschain_models.osmosis_core.fact_transfers": [], "source.crosschain_models.optimism_core.fact_token_transfers": [], "source.crosschain_models.optimism_core.fact_traces": [], "source.crosschain_models.crosschain_core.address_labels": [], "source.crosschain_models.solana_core.fact_transfers": [], "source.crosschain_models.avalanche_core.fact_token_transfers": [], "source.crosschain_models.avalanche_core.fact_traces": [], "source.crosschain_models.flow_core.ez_token_transfers": [], "source.crosschain_models.crosschain_dev_silver_crosschain.address_labels": [], "source.crosschain_models.near_core.fact_transfers": [], "source.crosschain_models.arbitrum_core.fact_token_transfers": [], "source.crosschain_models.arbitrum_core.fact_traces": [], "source.crosschain_models.ethereum_core.fact_transactions": [], "source.crosschain_models.ethereum_core.fact_token_transfers": [], "source.crosschain_models.ethereum_core.fact_traces": [], "source.crosschain_models.ethereum_core.ez_nft_sales": [], "source.crosschain_models.ethereum_core.ez_current_balances": [], "source.crosschain_models.ethereum_core.ez_dex_swaps": [], "source.crosschain_models.BSC.EZ_SWAPS": [], "source.crosschain_models.BSC.EZ_LENDING": [], "source.crosschain_models.BSC.EZ_BORROWING": [], "source.crosschain_models.ethereum_db_sushi.dim_distributor_reward_schedule": [], "source.crosschain_models.ethereum_db_sushi.ez_lending": [], "source.crosschain_models.ethereum_db_sushi.ez_borrowing": [], "source.crosschain_models.Gnosis.EZ_SWAPS": [], "source.crosschain_models.Gnosis.EZ_LENDING": [], "source.crosschain_models.Gnosis.EZ_BORROWING": [], "source.crosschain_models.Optimism.EZ_SWAPS": [], "source.crosschain_models.Avalanche.EZ_SWAPS": [], "source.crosschain_models.Avalanche.EZ_LENDING": [], "source.crosschain_models.Avalanche.EZ_BORROWING": [], "source.crosschain_models.Harmony_db.EZ_SUSHI_SWAPS": [], "source.crosschain_models.polygon.EZ_SWAPS": [], "source.crosschain_models.polygon.EZ_LENDING": [], "source.crosschain_models.polygon.EZ_BORROWING": [], "source.crosschain_models.Arbitrum.EZ_SWAPS": [], "source.crosschain_models.Arbitrum.EZ_LENDING": [], "source.crosschain_models.Arbitrum.EZ_BORROWING": []}, "child_map": {"model.crosschain_models.bronze__asset_metadata_coin_gecko": ["model.crosschain_models.silver__asset_metadata_coin_gecko"], "model.crosschain_models.bronze__asset_metadata_coin_market_cap": ["model.crosschain_models.silver__asset_metadata_coin_market_cap"], "model.crosschain_models.bronze__hourly_prices_coin_gecko": ["model.crosschain_models.silver__hourly_prices_coin_gecko"], "model.crosschain_models.bronze__hourly_prices_coin_market_cap": ["model.crosschain_models.silver__hourly_prices_coin_market_cap"], "model.crosschain_models.core__dim_dates": [], "model.crosschain_models.streamline__all_unknown_coin_gecko_asset_ohlc": [], "model.crosschain_models.streamline__all_unknown_coin_market_cap_asset_ohlc_hourly": [], "model.crosschain_models.streamline__coin_gecko_historical_asset_market_data_hourly": [], "model.crosschain_models.streamline__coin_market_cap_historical_asset_ohlc_hourly": [], "model.crosschain_models.streamline__legacy_prices_gaps": [], "seed.crosschain_models.silver__godmode_nft_minters": [], "seed.crosschain_models.silver__optimism_delegates": [], "operation.crosschain_models.crosschain_models-on-run-start-0": [], "operation.crosschain_models.crosschain_models-on-run-start-1": [], "operation.crosschain_models.crosschain_models-on-run-start-2": [], "operation.crosschain_models.crosschain_models-on-run-start-3": [], "operation.crosschain_models.crosschain_models-on-run-start-4": [], "operation.crosschain_models.crosschain_models-on-run-start-5": [], "operation.crosschain_models.crosschain_models-on-run-start-6": [], "operation.crosschain_models.crosschain_models-on-run-start-7": [], "operation.crosschain_models.crosschain_models-on-run-start-8": [], "operation.crosschain_models.crosschain_models-on-run-start-9": [], "model.crosschain_models.silver_crosschain__labels_contracts_avalanche": ["model.crosschain_models.silver_crosschain__address_labels", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_avalanche_BLOCKCHAIN__avalanche.006b5d970f", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_avalanche_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.942796fe32", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_avalanche_ADDRESS__STRING__VARCHAR.e574633947", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_avalanche__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.3b7cd469d7", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_avalanche_ADDRESS__0_xX_0_9a_fA_F_.a65cf64677", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_avalanche_ADDRESS.0cb9b87c66", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_ADDRESS.63f0b2baae", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_ADDRESS_NAME.9ffb95412b", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_BLOCKCHAIN.6703493e03", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_CREATOR.b2139e1096", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_L1_LABEL.700360d60c", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_L2_LABEL.d1ef269c45", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_PROJECT_NAME.95cdf4d8ec", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche__INSERTED_TIMESTAMP.aa23e2b009"], "model.crosschain_models.silver_crosschain__snowflake_Near_satellite": ["model.crosschain_models.core__address_labels", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Near_satellite_ADDRESS__STRING__VARCHAR.cbff05943f", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Near_satellite_BLOCKCHAIN__CREATOR__ADDRESS.75d2c769fa", "test.crosschain_models.not_null_silver_crosschain__snowflake_Near_satellite_ADDRESS.a7558af6f3"], "model.crosschain_models.silver__tags_nft_transactor_ETH": ["model.crosschain_models.core__address_tags", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_transactor_ETH_ADDRESS__STRING__VARCHAR.8076e07574", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_transactor_ETH_ADDRESS__0_xX_0_9a_fA_F_.88897ddbfd", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_transactor_ETH_ADDRESS__TAG_NAME__START_DATE.568aebebc1", "test.crosschain_models.not_null_silver__tags_nft_transactor_ETH_ADDRESS.0cb0dba3eb", "test.crosschain_models.not_null_silver__tags_nft_transactor_ETH_TAG_NAME.39732b6234"], "model.crosschain_models.core__dim_date_hours": [], "model.crosschain_models.silver__tags_contract_address_optimism": ["model.crosschain_models.core__address_tags", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_optimism_ADDRESS__STRING__VARCHAR.d1f34fa4bc", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_optimism_ADDRESS__0_xX_0_9a_fA_F_.f01de82cce", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_contract_address_optimism_ADDRESS.e7827fdf84", "test.crosschain_models.not_null_silver__tags_contract_address_optimism_ADDRESS.bb286d2156"], "model.crosschain_models.silver__tags_nft_looksrare_user": ["model.crosschain_models.core__address_tags", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_looksrare_user_ADDRESS__STRING__VARCHAR.d441de2bd9", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_looksrare_user_ADDRESS__0_xX_0_9a_fA_F_.067ec81ea6", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_looksrare_user_ADDRESS.dd71e51391", "test.crosschain_models.not_null_silver__tags_nft_looksrare_user_ADDRESS.5bdf86e154"], "model.crosschain_models.silver_crosschain__labels_contracts_bsc": ["model.crosschain_models.silver_crosschain__address_labels", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_bsc_BLOCKCHAIN__bsc.c87bd17788", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_bsc_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.fe0a23eb20", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_bsc_ADDRESS__STRING__VARCHAR.6650460a5d", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_bsc__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.c471b2157a", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_bsc_ADDRESS__0_xX_0_9a_fA_F_.c421db486b", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_bsc_ADDRESS.c2802608c3", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_ADDRESS.d4893f74e2", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_ADDRESS_NAME.3148b29da6", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_BLOCKCHAIN.c34d4c1b51", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_CREATOR.110adefd50", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_L1_LABEL.40e1b6bc2a", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_L2_LABEL.971dfa3c9e", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_PROJECT_NAME.56c75d84d9", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc__INSERTED_TIMESTAMP.215cf7af1f"], "model.crosschain_models.silver_crosschain__snowflake_Osmosis_satellite": ["model.crosschain_models.core__address_labels", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Osmosis_satellite_ADDRESS__STRING__VARCHAR.e280a0e9f9", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Osmosis_satellite_BLOCKCHAIN__CREATOR__ADDRESS.d5983929c2", "test.crosschain_models.not_null_silver_crosschain__snowflake_Osmosis_satellite_ADDRESS.7aae4b3526"], "model.crosschain_models.silver_crosschain__snowflake_BSC_satellites": ["model.crosschain_models.core__address_labels", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_BSC_satellites_ADDRESS__STRING__VARCHAR.8b9a883e71", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_BSC_satellites_BLOCKCHAIN__CREATOR__ADDRESS.20ad5fc70e", "test.crosschain_models.not_null_silver_crosschain__snowflake_BSC_satellites_ADDRESS.8e00fbbd29"], "model.crosschain_models.silver__tags_contract_address_avalanche": ["model.crosschain_models.core__address_tags", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_avalanche_ADDRESS__STRING__VARCHAR.39bd6ac8e8", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_avalanche_ADDRESS__0_xX_0_9a_fA_F_.dc688e073a", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_contract_address_avalanche_ADDRESS.2af2628c97", "test.crosschain_models.not_null_silver__tags_contract_address_avalanche_ADDRESS.be16ad761e"], "model.crosschain_models.silver_crosschain__labels_contracts_optimism": ["model.crosschain_models.silver_crosschain__address_labels", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_optimism_BLOCKCHAIN__optimism.cacd01ec06", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_optimism_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.5895da0a9a", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_optimism_ADDRESS__STRING__VARCHAR.ee458f5d28", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_optimism__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.cfb523ebd3", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_optimism_ADDRESS__0_xX_0_9a_fA_F_.02d6e22b39", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_optimism_ADDRESS.83a550d0a5", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_ADDRESS.2bc29a44ab", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_ADDRESS_NAME.06e3d93a9e", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_BLOCKCHAIN.7186119d86", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_CREATOR.8c73037029", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_L1_LABEL.7f4677d3e2", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_L2_LABEL.c3c28050fb", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_PROJECT_NAME.30f676508f", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism__INSERTED_TIMESTAMP.522d7dfab8"], "model.crosschain_models.silver__tags_nft_rarible_user": ["model.crosschain_models.core__address_tags", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_rarible_user_ADDRESS__STRING__VARCHAR.2e901e783c", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_rarible_user_ADDRESS__0_xX_0_9a_fA_F_.a6314feeac", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_rarible_user_ADDRESS.3054ef0c41", "test.crosschain_models.not_null_silver__tags_nft_rarible_user_ADDRESS.65708ea50e"], "model.crosschain_models.silver__tags_thor_dex_user": ["model.crosschain_models.core__address_tags", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_thor_dex_user_ADDRESS__STRING__VARCHAR.4f34e746f7", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_thor_dex_user_ADDRESS.5d83f8471c", "test.crosschain_models.not_null_silver__tags_thor_dex_user_ADDRESS.61e5f039e2"], "model.crosschain_models.silver__tags_contract_address_eth": ["model.crosschain_models.core__address_tags", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_eth_ADDRESS__STRING__VARCHAR.851a1c22db", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_eth_ADDRESS__0_xX_0_9a_fA_F_.0148e19762", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_contract_address_eth_ADDRESS.636c50b1d4", "test.crosschain_models.not_null_silver__tags_contract_address_eth_ADDRESS.bc158c86c7"], "model.crosschain_models.silver__asset_metadata_coin_market_cap": ["model.crosschain_models.core__dim_asset_metadata", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__asset_metadata_coin_market_cap_ID__TOKEN_ADDRESS.3bae856e75", "test.crosschain_models.not_null_silver__asset_metadata_coin_market_cap_ID.757aac2eb7", "test.crosschain_models.not_null_silver__asset_metadata_coin_market_cap_NAME.56bd578cbc", "test.crosschain_models.not_null_silver__asset_metadata_coin_market_cap_PLATFORM.5f3a0c3e87", "test.crosschain_models.not_null_silver__asset_metadata_coin_market_cap_SYMBOL.dfed76153a", "test.crosschain_models.not_null_silver__asset_metadata_coin_market_cap__INSERTED_TIMESTAMP.3a37d1a1ff"], "model.crosschain_models.silver_crosschain__labels_contracts": ["model.crosschain_models.silver_crosschain__address_labels", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_BLOCKCHAIN__ethereum.cfbc7085d9", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.82c6a23d00", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_ADDRESS__STRING__VARCHAR.fefb7618d7", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.f0c369857d", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_ADDRESS__0_xX_0_9a_fA_F_.10b83b7ade", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_ADDRESS.a06df4578d", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_ADDRESS.1147ea62d2", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_ADDRESS_NAME.ed60bb7d8d", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_BLOCKCHAIN.44a2f1a898", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_CREATOR.b3b4375a91", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_L1_LABEL.95bc2a4325", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_L2_LABEL.5f04962e99", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_PROJECT_NAME.89d7a3c8be", "test.crosschain_models.not_null_silver_crosschain__labels_contracts__INSERTED_TIMESTAMP.0c46996794"], "model.crosschain_models.silver__tags_nft_x2y2_user": ["model.crosschain_models.core__address_tags", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_x2y2_user_ADDRESS__STRING__VARCHAR.22bb36b9d2", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_x2y2_user_ADDRESS__0_xX_0_9a_fA_F_.8acab546bd", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_x2y2_user_ADDRESS.a6cbb5390d", "test.crosschain_models.not_null_silver__tags_nft_x2y2_user_ADDRESS.bcc2140e27"], "model.crosschain_models.silver_crosschain__snowflake_Avalanche_satellites": ["model.crosschain_models.core__address_labels", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Avalanche_satellites_ADDRESS__STRING__VARCHAR.aa40e57912", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Avalanche_satellites_BLOCKCHAIN__CREATOR__ADDRESS.75ee624c69", "test.crosschain_models.not_null_silver_crosschain__snowflake_Avalanche_satellites_ADDRESS.aa828063b8"], "model.crosschain_models.silver_crosschain__snowflake_Polygon_satellites": ["model.crosschain_models.core__address_labels", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Polygon_satellites_ADDRESS__STRING__VARCHAR.09f9d7ada4", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Polygon_satellites_BLOCKCHAIN__CREATOR__ADDRESS.6bb7c3da70", "test.crosschain_models.not_null_silver_crosschain__snowflake_Polygon_satellites_ADDRESS.c3b22856d7"], "model.crosschain_models.silver__hourly_prices_coin_gecko": ["model.crosschain_models.core__fact_hourly_prices", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_gecko_CLOSE__FLOAT__DOUBLE.3682844202", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_gecko_HIGH__FLOAT__DOUBLE.451197e764", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_gecko_LOW__FLOAT__DOUBLE.85d9c10d3e", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_gecko_OPEN__FLOAT__DOUBLE.b944c5092d", "test.crosschain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__hourly_prices_coin_gecko_RECORDED_HOUR__day__1.d8f930130d", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__hourly_prices_coin_gecko_ID__RECORDED_HOUR.89152c02c9", "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko_CLOSE.483d35fc1d", "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko_HIGH.6d22a61317", "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko_ID.5787109793", "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko_LOW.049aed28b0", "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko_OPEN.3de377b73e", "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko_RECORDED_HOUR.c307ae993c", "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko__INSERTED_TIMESTAMP.8a9c4c622d"], "model.crosschain_models.silver_crosschain__snowflake_Flow_satellites": ["model.crosschain_models.core__address_labels", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Flow_satellites_ADDRESS__STRING__VARCHAR.8db41888d5", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Flow_satellites_BLOCKCHAIN__CREATOR__ADDRESS.6d4baa41a7", "test.crosschain_models.not_null_silver_crosschain__snowflake_Flow_satellites_ADDRESS.8cd8b369c8"], "model.crosschain_models.silver__tags_nft_nftx_user": ["model.crosschain_models.core__address_tags", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_nftx_user_ADDRESS__STRING__VARCHAR.58c89e1a26", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_nftx_user_ADDRESS__0_xX_0_9a_fA_F_.4a534aeb27", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_nftx_user_ADDRESS.2742e2114d", "test.crosschain_models.not_null_silver__tags_nft_nftx_user_ADDRESS.ea3334c966"], "model.crosschain_models.silver__tags_gnosis_safe_address": ["model.crosschain_models.core__address_tags", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_gnosis_safe_address_ADDRESS__STRING__VARCHAR.c22d203f33", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_gnosis_safe_address_ADDRESS__0_xX_0_9a_fA_F_.c0cf0413a8", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_gnosis_safe_address_ADDRESS.b4c9864bb4", "test.crosschain_models.not_null_silver__tags_gnosis_safe_address_ADDRESS.405287f7ab"], "model.crosschain_models.silver__tags_nft_larva_labs_user": ["model.crosschain_models.core__address_tags", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_larva_labs_user_ADDRESS__STRING__VARCHAR.0d888d343e", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_larva_labs_user_ADDRESS__0_xX_0_9a_fA_F_.5ecc1ff31f", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_larva_labs_user_ADDRESS.19773c98fc", "test.crosschain_models.not_null_silver__tags_nft_larva_labs_user_ADDRESS.2b9b0c77f5"], "model.crosschain_models.silver_crosschain__snowflake_SOL_satellites": ["model.crosschain_models.core__address_labels", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_SOL_satellites_ADDRESS__STRING__VARCHAR.62aaa4ddf0", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_SOL_satellites_BLOCKCHAIN__CREATOR__ADDRESS.8436e4fa2b", "test.crosschain_models.not_null_silver_crosschain__snowflake_SOL_satellites_ADDRESS.c659cc60f8"], "model.crosschain_models.silver__tags_active_bsc_last_7": ["model.crosschain_models.core__address_tags", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_bsc_last_7_ADDRESS__STRING__VARCHAR.c259e260d6", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_bsc_last_7_ADDRESS__0_xX_0_9a_fA_F_.a05c7204b4", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_active_bsc_last_7_ADDRESS__START_DATE.bcc44fb57b", "test.crosschain_models.not_null_silver__tags_active_bsc_last_7_ADDRESS.b2632993c1"], "model.crosschain_models.silver__tags_contract_address_bsc": ["model.crosschain_models.core__address_tags", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_bsc_ADDRESS__STRING__VARCHAR.b3e54467e4", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_bsc_ADDRESS__0_xX_0_9a_fA_F_.496673602d", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_contract_address_bsc_ADDRESS.68c3a1e502", "test.crosschain_models.not_null_silver__tags_contract_address_bsc_ADDRESS.c6d445ef31"], "model.crosschain_models.silver_crosschain__snowflake_Optimism_satellites": ["model.crosschain_models.core__address_labels", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Optimism_satellites_ADDRESS__STRING__VARCHAR.43a5ee481e", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Optimism_satellites_BLOCKCHAIN__CREATOR__ADDRESS.61688ab7e3", "test.crosschain_models.not_null_silver_crosschain__snowflake_Optimism_satellites_ADDRESS.3005aafddd"], "model.crosschain_models.silver__tags_active_polygon_last_7": ["model.crosschain_models.core__address_tags", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_polygon_last_7_ADDRESS__STRING__VARCHAR.216825937d", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_polygon_last_7_ADDRESS__0_xX_0_9a_fA_F_.6a5dd4ec16", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_active_polygon_last_7_ADDRESS__START_DATE.2e3073861f", "test.crosschain_models.not_null_silver__tags_active_polygon_last_7_ADDRESS.946434d99c"], "model.crosschain_models.silver__tags_active_avalanche_last_7": ["model.crosschain_models.core__address_tags", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_avalanche_last_7_ADDRESS__STRING__VARCHAR.21ffeb7af9", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_avalanche_last_7_ADDRESS__0_xX_0_9a_fA_F_.c4581326b9", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_active_avalanche_last_7_ADDRESS__START_DATE.90bfb821b6", "test.crosschain_models.not_null_silver__tags_active_avalanche_last_7_ADDRESS.37f6953e76"], "model.crosschain_models.silver__tags_token_vesting_ETH": ["model.crosschain_models.core__address_tags", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_token_vesting_ETH_ADDRESS__STRING__VARCHAR.cfef06ed72", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_token_vesting_ETH_ADDRESS.d7b2a9f7c1", "test.crosschain_models.not_null_silver__tags_token_vesting_ETH_ADDRESS.cf9f001da8"], "model.crosschain_models.silver__tags_active_optimism_last_7": ["model.crosschain_models.core__address_tags", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_optimism_last_7_ADDRESS__STRING__VARCHAR.0338b1f161", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_optimism_last_7_ADDRESS__0_xX_0_9a_fA_F_.cdaca7bd38", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_active_optimism_last_7_ADDRESS__START_DATE.d5c8d43a5a", "test.crosschain_models.not_null_silver__tags_active_optimism_last_7_ADDRESS.5b419202c3"], "model.crosschain_models.silver__tags_nft_opensea_user": ["model.crosschain_models.core__address_tags", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_opensea_user_ADDRESS__STRING__VARCHAR.7b0c3452f8", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_opensea_user_ADDRESS__0_xX_0_9a_fA_F_.c1401dc412", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_opensea_user_ADDRESS.94beb06207", "test.crosschain_models.not_null_silver__tags_nft_opensea_user_ADDRESS.2d27b0a7a1"], "model.crosschain_models.silver__tags_contract_address_polygon": ["model.crosschain_models.core__address_tags", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_polygon_ADDRESS__STRING__VARCHAR.473432ebfb", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_polygon_ADDRESS__0_xX_0_9a_fA_F_.c8565696cf", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_contract_address_polygon_ADDRESS.fbffea5810", "test.crosschain_models.not_null_silver__tags_contract_address_polygon_ADDRESS.5e8971ba99"], "model.crosschain_models.silver_crosschain__address_labels": ["model.crosschain_models.core__address_labels", "model.crosschain_models.silver_crosschain__snowflake_Algorand_satellite", "model.crosschain_models.silver_crosschain__snowflake_Algorand_satellite", "model.crosschain_models.silver_crosschain__snowflake_Arbitrum_satellites", "model.crosschain_models.silver_crosschain__snowflake_Arbitrum_satellites", "model.crosschain_models.silver_crosschain__snowflake_Avalanche_satellites", "model.crosschain_models.silver_crosschain__snowflake_Avalanche_satellites", "model.crosschain_models.silver_crosschain__snowflake_BSC_satellites", "model.crosschain_models.silver_crosschain__snowflake_BSC_satellites", "model.crosschain_models.silver_crosschain__snowflake_ETH_satellites", "model.crosschain_models.silver_crosschain__snowflake_ETH_satellites", "model.crosschain_models.silver_crosschain__snowflake_Flow_satellites", "model.crosschain_models.silver_crosschain__snowflake_Flow_satellites", "model.crosschain_models.silver_crosschain__snowflake_Near_satellite", "model.crosschain_models.silver_crosschain__snowflake_Near_satellite", "model.crosschain_models.silver_crosschain__snowflake_Optimism_satellites", "model.crosschain_models.silver_crosschain__snowflake_Optimism_satellites", "model.crosschain_models.silver_crosschain__snowflake_Osmosis_satellite", "model.crosschain_models.silver_crosschain__snowflake_Osmosis_satellite", "model.crosschain_models.silver_crosschain__snowflake_Polygon_satellites", "model.crosschain_models.silver_crosschain__snowflake_Polygon_satellites", "model.crosschain_models.silver_crosschain__snowflake_SOL_satellites", "model.crosschain_models.silver_crosschain__snowflake_SOL_satellites", "model.crosschain_models.silver_crosschain__snowflake_Thorchain_satellite", "model.crosschain_models.silver_crosschain__snowflake_Thorchain_satellite", "test.crosschain_models.dbt_expectations_expect_column_value_lengths_to_equal_silver_crosschain__address_labels_ADDRESS__58.a6680ed22d", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__address_labels_BLOCKCHAIN__ethereum__flow__polygon__terra__algorand__solana__moonriver__avalanche__bittorrent__cronos__fantom__arbitrum__aurora__bsc__heco__optimism__gnosis__thorchain__near__terra_classic__axelar.ac8c70f6a7", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__address_labels_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.b2ca065890", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__address_labels_BLOCKCHAIN__CREATOR__ADDRESS.17598177be", "test.crosschain_models.not_null_silver_crosschain__address_labels_ADDRESS.efe583da6d", "test.crosschain_models.not_null_silver_crosschain__address_labels_BLOCKCHAIN.a1681eff22", "test.crosschain_models.not_null_silver_crosschain__address_labels_CREATOR.c013bbc905", "test.crosschain_models.not_null_silver_crosschain__address_labels_INSERT_DATE.0a816586a4", "test.crosschain_models.not_null_silver_crosschain__address_labels_L1_LABEL.7de8180636", "test.crosschain_models.not_null_silver_crosschain__address_labels_L2_LABEL.ca252aef73", "test.crosschain_models.not_null_silver_crosschain__address_labels_PROJECT_NAME.adff3ea698"], "model.crosschain_models.silver__asset_metadata_coin_gecko": ["model.crosschain_models.core__dim_asset_metadata", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__asset_metadata_coin_gecko_ID__TOKEN_ADDRESS.a8199a41f6", "test.crosschain_models.not_null_silver__asset_metadata_coin_gecko_ID.9cc8e7c8fe", "test.crosschain_models.not_null_silver__asset_metadata_coin_gecko_NAME.1a9f576756", "test.crosschain_models.not_null_silver__asset_metadata_coin_gecko_PLATFORM.990cfa7d0b", "test.crosschain_models.not_null_silver__asset_metadata_coin_gecko_SYMBOL.6abaf78cb3", "test.crosschain_models.not_null_silver__asset_metadata_coin_gecko__INSERTED_TIMESTAMP.c4f0e940b7"], "model.crosschain_models.silver_crosschain__snowflake_Arbitrum_satellites": ["model.crosschain_models.core__address_labels", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Arbitrum_satellites_ADDRESS__STRING__VARCHAR.2b4af34dc4", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Arbitrum_satellites_BLOCKCHAIN__CREATOR__ADDRESS.c09a6d7245", "test.crosschain_models.not_null_silver_crosschain__snowflake_Arbitrum_satellites_ADDRESS.ee854fd345"], "model.crosschain_models.silver_crosschain__snowflake_Algorand_satellite": ["model.crosschain_models.core__address_labels", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Algorand_satellite_ADDRESS__STRING__VARCHAR.2af26c0ca4", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Algorand_satellite_BLOCKCHAIN__CREATOR__ADDRESS.c70c222a56", "test.crosschain_models.not_null_silver_crosschain__snowflake_Algorand_satellite_ADDRESS.43d72b7430"], "model.crosschain_models.silver__hourly_prices_coin_market_cap": ["model.crosschain_models.core__fact_hourly_prices", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_CLOSE__FLOAT__DOUBLE.a0524933c6", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_HIGH__FLOAT__DOUBLE.fadb3ead13", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_LOW__FLOAT__DOUBLE.306784522f", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_MARKET_CAP__NUMBER__INTEGER.6bfce9ea83", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_OPEN__FLOAT__DOUBLE.b9986d4560", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_VOLUME__NUMBER__INTEGER.0175a85069", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__hourly_prices_coin_market_cap_ID__RECORDED_HOUR.14f42f9016", "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_CLOSE.745c907e01", "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_HIGH.3375deccb4", "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_ID.81e3fd83b3", "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_LOW.47b7c01027", "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_MARKET_CAP.151b40e5a9", "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_OPEN.0afac19e4c", "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_RECORDED_HOUR.4bf12c012b", "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap__INSERTED_TIMESTAMP.5729e3c243"], "model.crosschain_models.silver_crosschain__snowflake_Thorchain_satellite": ["model.crosschain_models.core__address_labels", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Thorchain_satellite_ADDRESS__STRING__VARCHAR.8b884fa762", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Thorchain_satellite_BLOCKCHAIN__CREATOR__ADDRESS.ba657294c5", "test.crosschain_models.not_null_silver_crosschain__snowflake_Thorchain_satellite_ADDRESS.94e8a409e0"], "model.crosschain_models.silver__tags_active_arbitrum_last_7": ["model.crosschain_models.core__address_tags", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_arbitrum_last_7_ADDRESS__STRING__VARCHAR.f45b0d6ae8", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_arbitrum_last_7_ADDRESS__0_xX_0_9a_fA_F_.7718b6380c", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_active_arbitrum_last_7_ADDRESS__START_DATE.323f9c19f5", "test.crosschain_models.not_null_silver__tags_active_arbitrum_last_7_ADDRESS.35d39be09a"], "model.crosschain_models.silver__tags_cex_user_ETH": ["model.crosschain_models.core__address_tags", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_cex_user_ETH_ADDRESS__STRING__VARCHAR.ca63271ea1", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_cex_user_ETH_ADDRESS__0_xX_0_9a_fA_F_.6bd28cb52c", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_cex_user_ETH_ADDRESS__TAG_NAME.7a31800d9f", "test.crosschain_models.not_null_silver__tags_cex_user_ETH_ADDRESS.8f5bc8abef"], "model.crosschain_models.silver__ntr_summary": [], "model.crosschain_models.silver__tags_thor_liquidity_provider": ["model.crosschain_models.core__address_tags", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_thor_liquidity_provider_ADDRESS__STRING__VARCHAR.f7e3d5c6f3", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_thor_liquidity_provider_ADDRESS.f7e5c290eb", "test.crosschain_models.not_null_silver__tags_thor_liquidity_provider_ADDRESS.42acd8cc75"], "model.crosschain_models.silver__tags_airdrop_master_ETH": ["model.crosschain_models.core__address_tags", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_airdrop_master_ETH_ADDRESS__STRING__VARCHAR.991a7dc76b", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_airdrop_master_ETH_ADDRESS__0_xX_0_9a_fA_F_.a92e5cbe4d", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_airdrop_master_ETH_ADDRESS__TAG_NAME__START_DATE.af378860dd", "test.crosschain_models.not_null_silver__tags_airdrop_master_ETH_ADDRESS.1d8d807d61", "test.crosschain_models.not_null_silver__tags_airdrop_master_ETH_TAG_NAME.79303f25f5"], "model.crosschain_models.silver_crosschain__labels_contracts_polygon": ["model.crosschain_models.silver_crosschain__address_labels", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_polygon_BLOCKCHAIN__polygon.99ecbd9a78", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_polygon_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.e290bb8e68", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_polygon_ADDRESS__STRING__VARCHAR.3d682457de", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_polygon__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.a9656b0bcb", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_polygon_ADDRESS__0_xX_0_9a_fA_F_.7c11cbb828", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_polygon_ADDRESS.8f4b18c9af", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_ADDRESS.942c653587", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_ADDRESS_NAME.69aa52a279", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_BLOCKCHAIN.7d249d5154", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_CREATOR.eb27492340", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_L1_LABEL.bafce1b953", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_L2_LABEL.e61b41b42c", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_PROJECT_NAME.edcd10ff29", "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon__INSERTED_TIMESTAMP.b118c38214"], "model.crosschain_models.core__fact_hourly_prices": ["test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_CLOSE.24f933b9a0", "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_HIGH.59af6120cb", "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_ID.15d6edcab1", "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_LOW.9231b3f78d", "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_OPEN.0cd8663dd3", "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_PROVIDER.235f59cf8a", "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_RECORDED_HOUR.e5de74b9af", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_hourly_prices_ID__STRING__VARCHAR.1c2074ca53", "test.crosschain_models.dbt_utils_unique_combination_of_columns_core__fact_hourly_prices_PROVIDER__ID__RECORDED_HOUR.e34d5489bd", "test.crosschain_models.not_null_core__fact_hourly_prices_PROVIDER.91ee2e8c6b"], "model.crosschain_models.core__dim_asset_metadata": ["test.crosschain_models.dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_ID.593e500776", "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_NAME.7af2219c96", "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_PLATFORM.08a4b73a08", "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_PROVIDER.e50103dc5d", "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_SYMBOL.6dbcec9f41", "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_TOKEN_ADDRESS.3e0ba95440", "test.crosschain_models.dbt_utils_unique_combination_of_columns_core__dim_asset_metadata_PROVIDER__ID__TOKEN_ADDRESS.d333e4d78b", "test.crosschain_models.not_null_core__dim_asset_metadata_PROVIDER.1e680f5a1d"], "test.crosschain_models.not_null_silver__tags_thor_dex_user_ADDRESS.61e5f039e2": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_thor_dex_user_ADDRESS__STRING__VARCHAR.4f34e746f7": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_thor_dex_user_ADDRESS.5d83f8471c": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_BLOCKCHAIN.c34d4c1b51": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_bsc_BLOCKCHAIN__bsc.c87bd17788": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_ADDRESS.d4893f74e2": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_bsc_ADDRESS__STRING__VARCHAR.6650460a5d": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_bsc_ADDRESS__0_xX_0_9a_fA_F_.c421db486b": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_CREATOR.110adefd50": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_L1_LABEL.40e1b6bc2a": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_bsc_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.fe0a23eb20": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_L2_LABEL.971dfa3c9e": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_ADDRESS_NAME.3148b29da6": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc_PROJECT_NAME.56c75d84d9": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_bsc__INSERTED_TIMESTAMP.215cf7af1f": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_bsc__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.c471b2157a": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_bsc_ADDRESS.c2802608c3": [], "test.crosschain_models.not_null_silver__tags_token_vesting_ETH_ADDRESS.cf9f001da8": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_token_vesting_ETH_ADDRESS__STRING__VARCHAR.cfef06ed72": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_token_vesting_ETH_ADDRESS.d7b2a9f7c1": [], "test.crosschain_models.not_null_silver__tags_nft_x2y2_user_ADDRESS.bcc2140e27": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_x2y2_user_ADDRESS__STRING__VARCHAR.22bb36b9d2": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_x2y2_user_ADDRESS__0_xX_0_9a_fA_F_.8acab546bd": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_x2y2_user_ADDRESS.a6cbb5390d": [], "test.crosschain_models.not_null_silver__tags_active_optimism_last_7_ADDRESS.5b419202c3": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_optimism_last_7_ADDRESS__STRING__VARCHAR.0338b1f161": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_optimism_last_7_ADDRESS__0_xX_0_9a_fA_F_.cdaca7bd38": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_active_optimism_last_7_ADDRESS__START_DATE.d5c8d43a5a": [], "test.crosschain_models.not_null_silver__tags_contract_address_avalanche_ADDRESS.be16ad761e": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_avalanche_ADDRESS__STRING__VARCHAR.39bd6ac8e8": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_avalanche_ADDRESS__0_xX_0_9a_fA_F_.dc688e073a": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_contract_address_avalanche_ADDRESS.2af2628c97": [], "test.crosschain_models.not_null_silver__tags_nft_looksrare_user_ADDRESS.5bdf86e154": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_looksrare_user_ADDRESS__STRING__VARCHAR.d441de2bd9": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_looksrare_user_ADDRESS__0_xX_0_9a_fA_F_.067ec81ea6": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_looksrare_user_ADDRESS.dd71e51391": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_BLOCKCHAIN.7186119d86": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_optimism_BLOCKCHAIN__optimism.cacd01ec06": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_ADDRESS.2bc29a44ab": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_optimism_ADDRESS__STRING__VARCHAR.ee458f5d28": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_optimism_ADDRESS__0_xX_0_9a_fA_F_.02d6e22b39": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_CREATOR.8c73037029": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_L1_LABEL.7f4677d3e2": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_optimism_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.5895da0a9a": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_L2_LABEL.c3c28050fb": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_ADDRESS_NAME.06e3d93a9e": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism_PROJECT_NAME.30f676508f": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_optimism__INSERTED_TIMESTAMP.522d7dfab8": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_optimism__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.cfb523ebd3": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_optimism_ADDRESS.83a550d0a5": [], "test.crosschain_models.not_null_silver__tags_active_bsc_last_7_ADDRESS.b2632993c1": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_bsc_last_7_ADDRESS__STRING__VARCHAR.c259e260d6": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_bsc_last_7_ADDRESS__0_xX_0_9a_fA_F_.a05c7204b4": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_active_bsc_last_7_ADDRESS__START_DATE.bcc44fb57b": [], "test.crosschain_models.not_null_silver__tags_active_arbitrum_last_7_ADDRESS.35d39be09a": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_arbitrum_last_7_ADDRESS__STRING__VARCHAR.f45b0d6ae8": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_arbitrum_last_7_ADDRESS__0_xX_0_9a_fA_F_.7718b6380c": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_active_arbitrum_last_7_ADDRESS__START_DATE.323f9c19f5": [], "test.crosschain_models.not_null_silver__tags_gnosis_safe_address_ADDRESS.405287f7ab": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_gnosis_safe_address_ADDRESS__STRING__VARCHAR.c22d203f33": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_gnosis_safe_address_ADDRESS__0_xX_0_9a_fA_F_.c0cf0413a8": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_gnosis_safe_address_ADDRESS.b4c9864bb4": [], "test.crosschain_models.not_null_silver__tags_nft_opensea_user_ADDRESS.2d27b0a7a1": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_opensea_user_ADDRESS__STRING__VARCHAR.7b0c3452f8": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_opensea_user_ADDRESS__0_xX_0_9a_fA_F_.c1401dc412": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_opensea_user_ADDRESS.94beb06207": [], "test.crosschain_models.not_null_silver_crosschain__snowflake_Flow_satellites_ADDRESS.8cd8b369c8": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Flow_satellites_ADDRESS__STRING__VARCHAR.8db41888d5": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Flow_satellites_BLOCKCHAIN__CREATOR__ADDRESS.6d4baa41a7": [], "test.crosschain_models.not_null_silver_crosschain__snowflake_Polygon_satellites_ADDRESS.c3b22856d7": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Polygon_satellites_ADDRESS__STRING__VARCHAR.09f9d7ada4": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Polygon_satellites_BLOCKCHAIN__CREATOR__ADDRESS.6bb7c3da70": [], "test.crosschain_models.not_null_silver__tags_active_polygon_last_7_ADDRESS.946434d99c": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_polygon_last_7_ADDRESS__STRING__VARCHAR.216825937d": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_polygon_last_7_ADDRESS__0_xX_0_9a_fA_F_.6a5dd4ec16": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_active_polygon_last_7_ADDRESS__START_DATE.2e3073861f": [], "test.crosschain_models.not_null_silver_crosschain__snowflake_BSC_satellites_ADDRESS.8e00fbbd29": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_BSC_satellites_ADDRESS__STRING__VARCHAR.8b9a883e71": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_BSC_satellites_BLOCKCHAIN__CREATOR__ADDRESS.20ad5fc70e": [], "test.crosschain_models.not_null_silver_crosschain__address_labels_BLOCKCHAIN.a1681eff22": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__address_labels_BLOCKCHAIN__ethereum__flow__polygon__terra__algorand__solana__moonriver__avalanche__bittorrent__cronos__fantom__arbitrum__aurora__bsc__heco__optimism__gnosis__thorchain__near__terra_classic__axelar.ac8c70f6a7": [], "test.crosschain_models.not_null_silver_crosschain__address_labels_CREATOR.c013bbc905": [], "test.crosschain_models.not_null_silver_crosschain__address_labels_INSERT_DATE.0a816586a4": [], "test.crosschain_models.not_null_silver_crosschain__address_labels_L1_LABEL.7de8180636": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__address_labels_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.b2ca065890": [], "test.crosschain_models.not_null_silver_crosschain__address_labels_L2_LABEL.ca252aef73": [], "test.crosschain_models.not_null_silver_crosschain__address_labels_PROJECT_NAME.adff3ea698": [], "test.crosschain_models.not_null_silver_crosschain__address_labels_ADDRESS.efe583da6d": [], "test.crosschain_models.dbt_expectations_expect_column_value_lengths_to_equal_silver_crosschain__address_labels_ADDRESS__58.a6680ed22d": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__address_labels_BLOCKCHAIN__CREATOR__ADDRESS.17598177be": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_BLOCKCHAIN.7d249d5154": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_polygon_BLOCKCHAIN__polygon.99ecbd9a78": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_ADDRESS.942c653587": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_polygon_ADDRESS__STRING__VARCHAR.3d682457de": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_polygon_ADDRESS__0_xX_0_9a_fA_F_.7c11cbb828": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_CREATOR.eb27492340": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_L1_LABEL.bafce1b953": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_polygon_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.e290bb8e68": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_L2_LABEL.e61b41b42c": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_ADDRESS_NAME.69aa52a279": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon_PROJECT_NAME.edcd10ff29": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_polygon__INSERTED_TIMESTAMP.b118c38214": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_polygon__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.a9656b0bcb": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_polygon_ADDRESS.8f4b18c9af": [], "test.crosschain_models.not_null_silver_crosschain__snowflake_Algorand_satellite_ADDRESS.43d72b7430": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Algorand_satellite_ADDRESS__STRING__VARCHAR.2af26c0ca4": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Algorand_satellite_BLOCKCHAIN__CREATOR__ADDRESS.c70c222a56": [], "test.crosschain_models.not_null_silver__tags_contract_address_eth_ADDRESS.bc158c86c7": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_eth_ADDRESS__STRING__VARCHAR.851a1c22db": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_eth_ADDRESS__0_xX_0_9a_fA_F_.0148e19762": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_contract_address_eth_ADDRESS.636c50b1d4": [], "test.crosschain_models.not_null_silver_crosschain__snowflake_Osmosis_satellite_ADDRESS.7aae4b3526": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Osmosis_satellite_ADDRESS__STRING__VARCHAR.e280a0e9f9": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Osmosis_satellite_BLOCKCHAIN__CREATOR__ADDRESS.d5983929c2": [], "test.crosschain_models.not_null_silver__asset_metadata_coin_gecko_ID.9cc8e7c8fe": [], "test.crosschain_models.not_null_silver__asset_metadata_coin_gecko_NAME.1a9f576756": [], "test.crosschain_models.not_null_silver__asset_metadata_coin_gecko_SYMBOL.6abaf78cb3": [], "test.crosschain_models.not_null_silver__asset_metadata_coin_gecko_PLATFORM.990cfa7d0b": [], "test.crosschain_models.not_null_silver__asset_metadata_coin_gecko__INSERTED_TIMESTAMP.c4f0e940b7": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__asset_metadata_coin_gecko_ID__TOKEN_ADDRESS.a8199a41f6": [], "test.crosschain_models.not_null_silver__tags_contract_address_polygon_ADDRESS.5e8971ba99": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_polygon_ADDRESS__STRING__VARCHAR.473432ebfb": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_polygon_ADDRESS__0_xX_0_9a_fA_F_.c8565696cf": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_contract_address_polygon_ADDRESS.fbffea5810": [], "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_ID.81e3fd83b3": [], "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_RECORDED_HOUR.4bf12c012b": [], "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_OPEN.0afac19e4c": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_OPEN__FLOAT__DOUBLE.b9986d4560": [], "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_HIGH.3375deccb4": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_HIGH__FLOAT__DOUBLE.fadb3ead13": [], "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_LOW.47b7c01027": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_LOW__FLOAT__DOUBLE.306784522f": [], "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_CLOSE.745c907e01": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_CLOSE__FLOAT__DOUBLE.a0524933c6": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_VOLUME__NUMBER__INTEGER.0175a85069": [], "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap_MARKET_CAP.151b40e5a9": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_market_cap_MARKET_CAP__NUMBER__INTEGER.6bfce9ea83": [], "test.crosschain_models.not_null_silver__hourly_prices_coin_market_cap__INSERTED_TIMESTAMP.5729e3c243": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__hourly_prices_coin_market_cap_ID__RECORDED_HOUR.14f42f9016": [], "test.crosschain_models.not_null_silver_crosschain__snowflake_Near_satellite_ADDRESS.a7558af6f3": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Near_satellite_ADDRESS__STRING__VARCHAR.cbff05943f": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Near_satellite_BLOCKCHAIN__CREATOR__ADDRESS.75d2c769fa": [], "test.crosschain_models.not_null_silver__tags_contract_address_optimism_ADDRESS.bb286d2156": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_optimism_ADDRESS__STRING__VARCHAR.d1f34fa4bc": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_optimism_ADDRESS__0_xX_0_9a_fA_F_.f01de82cce": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_contract_address_optimism_ADDRESS.e7827fdf84": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_BLOCKCHAIN.6703493e03": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_avalanche_BLOCKCHAIN__avalanche.006b5d970f": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_ADDRESS.63f0b2baae": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_avalanche_ADDRESS__STRING__VARCHAR.e574633947": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_avalanche_ADDRESS__0_xX_0_9a_fA_F_.a65cf64677": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_CREATOR.b2139e1096": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_L1_LABEL.700360d60c": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_avalanche_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.942796fe32": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_L2_LABEL.d1ef269c45": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_ADDRESS_NAME.9ffb95412b": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche_PROJECT_NAME.95cdf4d8ec": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_avalanche__INSERTED_TIMESTAMP.aa23e2b009": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_avalanche__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.3b7cd469d7": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_avalanche_ADDRESS.0cb9b87c66": [], "test.crosschain_models.not_null_silver__asset_metadata_coin_market_cap_ID.757aac2eb7": [], "test.crosschain_models.not_null_silver__asset_metadata_coin_market_cap_NAME.56bd578cbc": [], "test.crosschain_models.not_null_silver__asset_metadata_coin_market_cap_SYMBOL.dfed76153a": [], "test.crosschain_models.not_null_silver__asset_metadata_coin_market_cap_PLATFORM.5f3a0c3e87": [], "test.crosschain_models.not_null_silver__asset_metadata_coin_market_cap__INSERTED_TIMESTAMP.3a37d1a1ff": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__asset_metadata_coin_market_cap_ID__TOKEN_ADDRESS.3bae856e75": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_BLOCKCHAIN.44a2f1a898": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_BLOCKCHAIN__ethereum.cfbc7085d9": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_ADDRESS.1147ea62d2": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts_ADDRESS__STRING__VARCHAR.fefb7618d7": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver_crosschain__labels_contracts_ADDRESS__0_xX_0_9a_fA_F_.10b83b7ade": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_CREATOR.b3b4375a91": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_L1_LABEL.95bc2a4325": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_silver_crosschain__labels_contracts_L1_LABEL__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.82c6a23d00": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_L2_LABEL.5f04962e99": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_ADDRESS_NAME.ed60bb7d8d": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts_PROJECT_NAME.89d7a3c8be": [], "test.crosschain_models.not_null_silver_crosschain__labels_contracts__INSERTED_TIMESTAMP.0c46996794": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__labels_contracts__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.f0c369857d": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__labels_contracts_ADDRESS.a06df4578d": [], "test.crosschain_models.not_null_silver__tags_nft_larva_labs_user_ADDRESS.2b9b0c77f5": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_larva_labs_user_ADDRESS__STRING__VARCHAR.0d888d343e": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_larva_labs_user_ADDRESS__0_xX_0_9a_fA_F_.5ecc1ff31f": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_larva_labs_user_ADDRESS.19773c98fc": [], "test.crosschain_models.not_null_silver_crosschain__snowflake_Avalanche_satellites_ADDRESS.aa828063b8": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Avalanche_satellites_ADDRESS__STRING__VARCHAR.aa40e57912": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Avalanche_satellites_BLOCKCHAIN__CREATOR__ADDRESS.75ee624c69": [], "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko_ID.5787109793": [], "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko_RECORDED_HOUR.c307ae993c": [], "test.crosschain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__hourly_prices_coin_gecko_RECORDED_HOUR__day__1.d8f930130d": [], "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko_OPEN.3de377b73e": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_gecko_OPEN__FLOAT__DOUBLE.b944c5092d": [], "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko_HIGH.6d22a61317": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_gecko_HIGH__FLOAT__DOUBLE.451197e764": [], "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko_LOW.049aed28b0": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_gecko_LOW__FLOAT__DOUBLE.85d9c10d3e": [], "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko_CLOSE.483d35fc1d": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__hourly_prices_coin_gecko_CLOSE__FLOAT__DOUBLE.3682844202": [], "test.crosschain_models.not_null_silver__hourly_prices_coin_gecko__INSERTED_TIMESTAMP.8a9c4c622d": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__hourly_prices_coin_gecko_ID__RECORDED_HOUR.89152c02c9": [], "test.crosschain_models.not_null_silver__tags_nft_rarible_user_ADDRESS.65708ea50e": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_rarible_user_ADDRESS__STRING__VARCHAR.2e901e783c": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_rarible_user_ADDRESS__0_xX_0_9a_fA_F_.a6314feeac": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_rarible_user_ADDRESS.3054ef0c41": [], "test.crosschain_models.not_null_silver_crosschain__snowflake_Arbitrum_satellites_ADDRESS.ee854fd345": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Arbitrum_satellites_ADDRESS__STRING__VARCHAR.2b4af34dc4": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Arbitrum_satellites_BLOCKCHAIN__CREATOR__ADDRESS.c09a6d7245": [], "test.crosschain_models.not_null_silver__tags_airdrop_master_ETH_ADDRESS.1d8d807d61": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_airdrop_master_ETH_ADDRESS__STRING__VARCHAR.991a7dc76b": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_airdrop_master_ETH_ADDRESS__0_xX_0_9a_fA_F_.a92e5cbe4d": [], "test.crosschain_models.not_null_silver__tags_airdrop_master_ETH_TAG_NAME.79303f25f5": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_airdrop_master_ETH_ADDRESS__TAG_NAME__START_DATE.af378860dd": [], "test.crosschain_models.not_null_silver_crosschain__snowflake_Optimism_satellites_ADDRESS.3005aafddd": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Optimism_satellites_ADDRESS__STRING__VARCHAR.43a5ee481e": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Optimism_satellites_BLOCKCHAIN__CREATOR__ADDRESS.61688ab7e3": [], "test.crosschain_models.not_null_silver__tags_thor_liquidity_provider_ADDRESS.42acd8cc75": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_thor_liquidity_provider_ADDRESS__STRING__VARCHAR.f7e3d5c6f3": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_thor_liquidity_provider_ADDRESS.f7e5c290eb": [], "test.crosschain_models.not_null_silver__tags_active_avalanche_last_7_ADDRESS.37f6953e76": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_avalanche_last_7_ADDRESS__STRING__VARCHAR.21ffeb7af9": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_avalanche_last_7_ADDRESS__0_xX_0_9a_fA_F_.c4581326b9": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_active_avalanche_last_7_ADDRESS__START_DATE.90bfb821b6": [], "test.crosschain_models.not_null_silver__tags_cex_user_ETH_ADDRESS.8f5bc8abef": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_cex_user_ETH_ADDRESS__STRING__VARCHAR.ca63271ea1": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_cex_user_ETH_ADDRESS__0_xX_0_9a_fA_F_.6bd28cb52c": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_cex_user_ETH_ADDRESS__TAG_NAME.7a31800d9f": [], "test.crosschain_models.not_null_silver__tags_nft_transactor_ETH_ADDRESS.0cb0dba3eb": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_transactor_ETH_ADDRESS__STRING__VARCHAR.8076e07574": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_transactor_ETH_ADDRESS__0_xX_0_9a_fA_F_.88897ddbfd": [], "test.crosschain_models.not_null_silver__tags_nft_transactor_ETH_TAG_NAME.39732b6234": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_transactor_ETH_ADDRESS__TAG_NAME__START_DATE.568aebebc1": [], "test.crosschain_models.not_null_silver__tags_contract_address_bsc_ADDRESS.c6d445ef31": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_contract_address_bsc_ADDRESS__STRING__VARCHAR.b3e54467e4": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_contract_address_bsc_ADDRESS__0_xX_0_9a_fA_F_.496673602d": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_contract_address_bsc_ADDRESS.68c3a1e502": [], "test.crosschain_models.not_null_silver_crosschain__snowflake_Thorchain_satellite_ADDRESS.94e8a409e0": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_Thorchain_satellite_ADDRESS__STRING__VARCHAR.8b884fa762": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_Thorchain_satellite_BLOCKCHAIN__CREATOR__ADDRESS.ba657294c5": [], "test.crosschain_models.not_null_silver__tags_nft_nftx_user_ADDRESS.ea3334c966": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_nft_nftx_user_ADDRESS__STRING__VARCHAR.58c89e1a26": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_nft_nftx_user_ADDRESS__0_xX_0_9a_fA_F_.4a534aeb27": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_nft_nftx_user_ADDRESS.2742e2114d": [], "test.crosschain_models.not_null_silver_crosschain__snowflake_SOL_satellites_ADDRESS.c659cc60f8": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_SOL_satellites_ADDRESS__STRING__VARCHAR.62aaa4ddf0": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_SOL_satellites_BLOCKCHAIN__CREATOR__ADDRESS.8436e4fa2b": [], "test.crosschain_models.not_null_core__fact_hourly_prices_PROVIDER.91ee2e8c6b": [], "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_PROVIDER.235f59cf8a": [], "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_ID.15d6edcab1": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_hourly_prices_ID__STRING__VARCHAR.1c2074ca53": [], "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_RECORDED_HOUR.e5de74b9af": [], "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_OPEN.0cd8663dd3": [], "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_HIGH.59af6120cb": [], "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_LOW.9231b3f78d": [], "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__fact_hourly_prices_CLOSE.24f933b9a0": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_core__fact_hourly_prices_PROVIDER__ID__RECORDED_HOUR.e34d5489bd": [], "test.crosschain_models.not_null_core__dim_asset_metadata_PROVIDER.1e680f5a1d": [], "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_PROVIDER.e50103dc5d": [], "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_ID.593e500776": [], "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_NAME.7af2219c96": [], "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_SYMBOL.6dbcec9f41": [], "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_TOKEN_ADDRESS.3e0ba95440": [], "test.crosschain_models.dbt_expectations_expect_column_to_exist_core__dim_asset_metadata_PLATFORM.08a4b73a08": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_core__dim_asset_metadata_PROVIDER__ID__TOKEN_ADDRESS.d333e4d78b": [], "model.crosschain_models.core__address_tags": [], "model.crosschain_models.silver__tags_active_eth_last_7": ["model.crosschain_models.core__address_tags", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_eth_last_7_ADDRESS__STRING__VARCHAR.54c7d7db19", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_eth_last_7_ADDRESS__0_xX_0_9a_fA_F_.64e986e9e7", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_active_eth_last_7_ADDRESS__START_DATE.e38f6662b0", "test.crosschain_models.not_null_silver__tags_active_eth_last_7_ADDRESS.1867ec5e2e"], "model.crosschain_models.core__address_labels": ["test.crosschain_models.dbt_expectations_expect_column_value_lengths_to_equal_core__address_labels_ADDRESS__58.d14dc96ad9", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_core__address_labels_BLOCKCHAIN__ethereum__flow__polygon__terra__algorand__solana__moonriver__avalanche__bittorrent__cronos__fantom__arbitrum__aurora__bsc__heco__optimism__gnosis__thorchain__near__terra_classic__axelar.2973734426", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_core__address_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.f24edce2b6", "test.crosschain_models.dbt_utils_unique_combination_of_columns_core__address_labels_BLOCKCHAIN__CREATOR__ADDRESS.ca8dfe5952", "test.crosschain_models.not_null_core__address_labels_ADDRESS.658975b23a", "test.crosschain_models.not_null_core__address_labels_ADDRESS_NAME.24eb73bccd", "test.crosschain_models.not_null_core__address_labels_BLOCKCHAIN.cee6eb8213", "test.crosschain_models.not_null_core__address_labels_CREATOR.679a91da92", "test.crosschain_models.not_null_core__address_labels_LABEL_SUBTYPE.a78cdf8328", "test.crosschain_models.not_null_core__address_labels_LABEL_TYPE.470bc3151f", "test.crosschain_models.not_null_core__address_labels_PROJECT_NAME.e5dcff5a5d"], "model.crosschain_models.silver_crosschain__snowflake_ETH_satellites": ["model.crosschain_models.core__address_labels", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_ETH_satellites_ADDRESS__STRING__VARCHAR.b8cc2128ec", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_ETH_satellites_BLOCKCHAIN__CREATOR__ADDRESS.22cce8e38e", "test.crosschain_models.not_null_silver_crosschain__snowflake_ETH_satellites_ADDRESS.53f250ee3b"], "model.crosschain_models.silver__tags_wallet_ETH_value": ["model.crosschain_models.core__address_tags", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_wallet_ETH_value_ADDRESS__STRING__VARCHAR.366ad4fe70", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_wallet_ETH_value_ADDRESS__0_xX_0_9a_fA_F_.c05dfde371", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_wallet_ETH_value_ADDRESS__TAG_NAME__START_DATE.31074c69eb", "test.crosschain_models.not_null_silver__tags_wallet_ETH_value_ADDRESS.878867a740"], "model.crosschain_models.silver__tags_wallet_TOKEN_value": ["model.crosschain_models.core__address_tags", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_wallet_TOKEN_value_ADDRESS__STRING__VARCHAR.f53e4a9be9", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_wallet_TOKEN_value_ADDRESS__0_xX_0_9a_fA_F_.14b473d0b6", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_wallet_TOKEN_value_ADDRESS__TAG_NAME__START_DATE.95b7867401", "test.crosschain_models.not_null_silver__tags_wallet_TOKEN_value_ADDRESS.9a6b1a962c"], "model.crosschain_models.silver__tags_wallet_value": ["model.crosschain_models.core__address_tags", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_wallet_value_ADDRESS__STRING__VARCHAR.e4be45a666", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_wallet_value_ADDRESS__0_xX_0_9a_fA_F_.76ebe8da51", "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_wallet_value_ADDRESS__TAG_NAME__START_DATE.327d555024", "test.crosschain_models.not_null_silver__tags_wallet_value_ADDRESS.93be4dc6da"], "test.crosschain_models.not_null_silver__tags_active_eth_last_7_ADDRESS.1867ec5e2e": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_active_eth_last_7_ADDRESS__STRING__VARCHAR.54c7d7db19": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_active_eth_last_7_ADDRESS__0_xX_0_9a_fA_F_.64e986e9e7": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_active_eth_last_7_ADDRESS__START_DATE.e38f6662b0": [], "test.crosschain_models.not_null_silver_crosschain__snowflake_ETH_satellites_ADDRESS.53f250ee3b": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_crosschain__snowflake_ETH_satellites_ADDRESS__STRING__VARCHAR.b8cc2128ec": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver_crosschain__snowflake_ETH_satellites_BLOCKCHAIN__CREATOR__ADDRESS.22cce8e38e": [], "test.crosschain_models.not_null_core__address_labels_BLOCKCHAIN.cee6eb8213": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_core__address_labels_BLOCKCHAIN__ethereum__flow__polygon__terra__algorand__solana__moonriver__avalanche__bittorrent__cronos__fantom__arbitrum__aurora__bsc__heco__optimism__gnosis__thorchain__near__terra_classic__axelar.2973734426": [], "test.crosschain_models.not_null_core__address_labels_CREATOR.679a91da92": [], "test.crosschain_models.not_null_core__address_labels_LABEL_TYPE.470bc3151f": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_set_core__address_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.f24edce2b6": [], "test.crosschain_models.not_null_core__address_labels_LABEL_SUBTYPE.a78cdf8328": [], "test.crosschain_models.not_null_core__address_labels_ADDRESS_NAME.24eb73bccd": [], "test.crosschain_models.not_null_core__address_labels_PROJECT_NAME.e5dcff5a5d": [], "test.crosschain_models.not_null_core__address_labels_ADDRESS.658975b23a": [], "test.crosschain_models.dbt_expectations_expect_column_value_lengths_to_equal_core__address_labels_ADDRESS__58.d14dc96ad9": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_core__address_labels_BLOCKCHAIN__CREATOR__ADDRESS.ca8dfe5952": [], "test.crosschain_models.not_null_silver__tags_wallet_ETH_value_ADDRESS.878867a740": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_wallet_ETH_value_ADDRESS__STRING__VARCHAR.366ad4fe70": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_wallet_ETH_value_ADDRESS__0_xX_0_9a_fA_F_.c05dfde371": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_wallet_ETH_value_ADDRESS__TAG_NAME__START_DATE.31074c69eb": [], "test.crosschain_models.not_null_silver__tags_wallet_TOKEN_value_ADDRESS.9a6b1a962c": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_wallet_TOKEN_value_ADDRESS__STRING__VARCHAR.f53e4a9be9": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_wallet_TOKEN_value_ADDRESS__0_xX_0_9a_fA_F_.14b473d0b6": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_wallet_TOKEN_value_ADDRESS__TAG_NAME__START_DATE.95b7867401": [], "test.crosschain_models.not_null_silver__tags_wallet_value_ADDRESS.93be4dc6da": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__tags_wallet_value_ADDRESS__STRING__VARCHAR.e4be45a666": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_silver__tags_wallet_value_ADDRESS__0_xX_0_9a_fA_F_.76ebe8da51": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_silver__tags_wallet_value_ADDRESS__TAG_NAME__START_DATE.327d555024": [], "model.crosschain_models.defi__ez_swaps": ["test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.6e47d30c86", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_AMOUNT_IN__NUMBER__FLOAT.49a10a4e9a", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.2e328e288c", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_AMOUNT_OUT__NUMBER__FLOAT.a03a48103a", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_BLOCK_NUMBER__NUMBER__FLOAT.a2a06497bf", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.7c82aa82d4", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_EVENT_INDEX__NUMBER__FLOAT.6acfd74855", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_PLATFORM__STRING__VARCHAR.74301886f3", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_SYMBOL_IN__STRING__VARCHAR.6433a6c646", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_SYMBOL_OUT__STRING__VARCHAR.68e93881f0", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.749316832e", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.dea027f760", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_POOL_ADDRESS__0_xX_0_9a_fA_F_.9fb643cac5", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.33c79a6996", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.aa233236df", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_TX_HASH__0_xX_0_9a_fA_F_.b85da919f9", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_TX_TO__0_xX_0_9a_fA_F_.d202570785", "test.crosschain_models.dbt_expectations_expect_row_values_to_have_recent_data_defi__ez_swaps_BLOCK_TIMESTAMP__day__1.be7f4aafb9", "test.crosschain_models.dbt_utils_unique_combination_of_columns_defi__ez_swaps_LOG_ID.a87c5fc7f0", "test.crosschain_models.not_null_defi__ez_swaps_BLOCK_NUMBER.e78d5c7975", "test.crosschain_models.not_null_defi__ez_swaps_BLOCK_TIMESTAMP.8684e16602", "test.crosschain_models.not_null_defi__ez_swaps_LOG_ID.3e6c1029b7", "test.crosschain_models.not_null_defi__ez_swaps_ORIGIN_FROM_ADDRESS.2a2cfb984e", "test.crosschain_models.not_null_defi__ez_swaps_POOL_ADDRESS.bf72ba1383", "test.crosschain_models.not_null_defi__ez_swaps_SENDER.071babae7e", "test.crosschain_models.not_null_defi__ez_swaps_TOKEN_IN.8fe2dcfd1b", "test.crosschain_models.not_null_defi__ez_swaps_TOKEN_OUT.d547a4ace9", "test.crosschain_models.not_null_defi__ez_swaps_TX_HASH.bb13eedc0e", "test.crosschain_models.not_null_defi__ez_swaps_TX_TO.5ccb222a4b"], "model.crosschain_models.defi__ez_borrowing": ["test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_AMOUNT_USD__NUMBER__FLOAT.62c1ae46e1", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_AMOUNT__NUMBER__FLOAT.bc8ae5595e", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_BLOCK_NUMBER__NUMBER__FLOAT.8945b58384", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.94b3afa559", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_PLATFORM__STRING__VARCHAR.331d276328", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_SYMBOL__STRING__VARCHAR.45487a3f3f", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_BORROWER__0_xX_0_9a_fA_F_.93f550f7d7", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_LENDING_POOL_ADDRESS__0_xX_0_9a_fA_F_.1242c8904a", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.51ed05e390", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.5292240d33", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_TX_HASH__0_xX_0_9a_fA_F_.dbd5c3a63d", "test.crosschain_models.dbt_expectations_expect_row_values_to_have_recent_data_defi__ez_borrowing_BLOCK_TIMESTAMP__day__3.b780d2fc12", "test.crosschain_models.dbt_utils_unique_combination_of_columns_defi__ez_borrowing__LOG_ID.87e94f4521", "test.crosschain_models.not_null_defi__ez_borrowing_BLOCK_NUMBER.d0cc099a95", "test.crosschain_models.not_null_defi__ez_borrowing_BLOCK_TIMESTAMP.9db1850359", "test.crosschain_models.not_null_defi__ez_borrowing_BORROWER.2d6d6dd64b", "test.crosschain_models.not_null_defi__ez_borrowing_BORROWER_IS_A_CONTRACT.216c379f62", "test.crosschain_models.not_null_defi__ez_borrowing_LENDING_POOL.753052fb61", "test.crosschain_models.not_null_defi__ez_borrowing_LENDING_POOL_ADDRESS.83618c6958", "test.crosschain_models.not_null_defi__ez_borrowing_ORIGIN_FROM_ADDRESS.9c63165853", "test.crosschain_models.not_null_defi__ez_borrowing_TX_HASH.c163812f21", "test.crosschain_models.not_null_defi__ez_borrowing__LOG_ID.a50d878932"], "model.crosschain_models.defi__ez_lending": ["test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_AMOUNT_USD__NUMBER__FLOAT.f0da31569c", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_AMOUNT__NUMBER__FLOAT.d6d80b1c4a", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_BLOCK_NUMBER__NUMBER__FLOAT.0c56142bb4", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.e446fd2311", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_EVENT_INDEX__NUMBER__FLOAT.5e19309b95", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_PLATFORM__STRING__VARCHAR.56dd714926", "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_SYMBOL__STRING__VARCHAR.fca186d25c", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_DEPOSITOR__0_xX_0_9a_fA_F_.d0d7dec87c", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_LENDING_POOL_ADDRESS__0_xX_0_9a_fA_F_.79e8b7dbd2", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.9324d4632c", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.1ab6b92673", "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_TX_HASH__0_xX_0_9a_fA_F_.6b655b8c27", "test.crosschain_models.dbt_expectations_expect_row_values_to_have_recent_data_defi__ez_lending_BLOCK_TIMESTAMP__day__3.957ec20e15", "test.crosschain_models.dbt_utils_unique_combination_of_columns_defi__ez_lending__LOG_ID.f59a21ba8d", "test.crosschain_models.not_null_defi__ez_lending_BLOCK_NUMBER.6db5a332e6", "test.crosschain_models.not_null_defi__ez_lending_BLOCK_TIMESTAMP.0d4352ae36", "test.crosschain_models.not_null_defi__ez_lending_DEPOSITOR.ef9664972b", "test.crosschain_models.not_null_defi__ez_lending_LENDER_IS_A_CONTRACT.c582af624f", "test.crosschain_models.not_null_defi__ez_lending_LENDING_POOL.91ae06743f", "test.crosschain_models.not_null_defi__ez_lending_LENDING_POOL_ADDRESS.868e838a22", "test.crosschain_models.not_null_defi__ez_lending_ORIGIN_FROM_ADDRESS.55ee0e45b6", "test.crosschain_models.not_null_defi__ez_lending_TX_HASH.a9c7b16e2d", "test.crosschain_models.not_null_defi__ez_lending__LOG_ID.163af3543a"], "test.crosschain_models.not_null_defi__ez_swaps_BLOCK_NUMBER.e78d5c7975": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_BLOCK_NUMBER__NUMBER__FLOAT.a2a06497bf": [], "test.crosschain_models.not_null_defi__ez_swaps_BLOCK_TIMESTAMP.8684e16602": [], "test.crosschain_models.dbt_expectations_expect_row_values_to_have_recent_data_defi__ez_swaps_BLOCK_TIMESTAMP__day__1.be7f4aafb9": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.7c82aa82d4": [], "test.crosschain_models.not_null_defi__ez_swaps_TX_HASH.bb13eedc0e": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_TX_HASH__0_xX_0_9a_fA_F_.b85da919f9": [], "test.crosschain_models.not_null_defi__ez_swaps_POOL_ADDRESS.bf72ba1383": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_POOL_ADDRESS__0_xX_0_9a_fA_F_.9fb643cac5": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_AMOUNT_IN__NUMBER__FLOAT.49a10a4e9a": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_AMOUNT_OUT__NUMBER__FLOAT.a03a48103a": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.6e47d30c86": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.2e328e288c": [], "test.crosschain_models.not_null_defi__ez_swaps_TOKEN_IN.8fe2dcfd1b": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.33c79a6996": [], "test.crosschain_models.not_null_defi__ez_swaps_TOKEN_OUT.d547a4ace9": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.aa233236df": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_SYMBOL_IN__STRING__VARCHAR.6433a6c646": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_SYMBOL_OUT__STRING__VARCHAR.68e93881f0": [], "test.crosschain_models.not_null_defi__ez_swaps_SENDER.071babae7e": [], "test.crosschain_models.not_null_defi__ez_swaps_TX_TO.5ccb222a4b": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_TX_TO__0_xX_0_9a_fA_F_.d202570785": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_PLATFORM__STRING__VARCHAR.74301886f3": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_swaps_EVENT_INDEX__NUMBER__FLOAT.6acfd74855": [], "test.crosschain_models.not_null_defi__ez_swaps_LOG_ID.3e6c1029b7": [], "test.crosschain_models.not_null_defi__ez_swaps_ORIGIN_FROM_ADDRESS.2a2cfb984e": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.749316832e": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.dea027f760": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_defi__ez_swaps_LOG_ID.a87c5fc7f0": [], "test.crosschain_models.not_null_defi__ez_borrowing_BLOCK_NUMBER.d0cc099a95": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_BLOCK_NUMBER__NUMBER__FLOAT.8945b58384": [], "test.crosschain_models.not_null_defi__ez_borrowing_BLOCK_TIMESTAMP.9db1850359": [], "test.crosschain_models.dbt_expectations_expect_row_values_to_have_recent_data_defi__ez_borrowing_BLOCK_TIMESTAMP__day__3.b780d2fc12": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.94b3afa559": [], "test.crosschain_models.not_null_defi__ez_borrowing_TX_HASH.c163812f21": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_TX_HASH__0_xX_0_9a_fA_F_.dbd5c3a63d": [], "test.crosschain_models.not_null_defi__ez_borrowing_LENDING_POOL_ADDRESS.83618c6958": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_LENDING_POOL_ADDRESS__0_xX_0_9a_fA_F_.1242c8904a": [], "test.crosschain_models.not_null_defi__ez_borrowing_LENDING_POOL.753052fb61": [], "test.crosschain_models.not_null_defi__ez_borrowing_BORROWER_IS_A_CONTRACT.216c379f62": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_AMOUNT__NUMBER__FLOAT.bc8ae5595e": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_AMOUNT_USD__NUMBER__FLOAT.62c1ae46e1": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_SYMBOL__STRING__VARCHAR.45487a3f3f": [], "test.crosschain_models.not_null_defi__ez_borrowing_BORROWER.2d6d6dd64b": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_BORROWER__0_xX_0_9a_fA_F_.93f550f7d7": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_borrowing_PLATFORM__STRING__VARCHAR.331d276328": [], "test.crosschain_models.not_null_defi__ez_borrowing__LOG_ID.a50d878932": [], "test.crosschain_models.not_null_defi__ez_borrowing_ORIGIN_FROM_ADDRESS.9c63165853": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.51ed05e390": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_borrowing_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.5292240d33": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_defi__ez_borrowing__LOG_ID.87e94f4521": [], "test.crosschain_models.not_null_defi__ez_lending_BLOCK_NUMBER.6db5a332e6": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_BLOCK_NUMBER__NUMBER__FLOAT.0c56142bb4": [], "test.crosschain_models.not_null_defi__ez_lending_BLOCK_TIMESTAMP.0d4352ae36": [], "test.crosschain_models.dbt_expectations_expect_row_values_to_have_recent_data_defi__ez_lending_BLOCK_TIMESTAMP__day__3.957ec20e15": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.e446fd2311": [], "test.crosschain_models.not_null_defi__ez_lending_TX_HASH.a9c7b16e2d": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_TX_HASH__0_xX_0_9a_fA_F_.6b655b8c27": [], "test.crosschain_models.not_null_defi__ez_lending_LENDING_POOL_ADDRESS.868e838a22": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_LENDING_POOL_ADDRESS__0_xX_0_9a_fA_F_.79e8b7dbd2": [], "test.crosschain_models.not_null_defi__ez_lending_LENDING_POOL.91ae06743f": [], "test.crosschain_models.not_null_defi__ez_lending_LENDER_IS_A_CONTRACT.c582af624f": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_AMOUNT__NUMBER__FLOAT.d6d80b1c4a": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_AMOUNT_USD__NUMBER__FLOAT.f0da31569c": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_SYMBOL__STRING__VARCHAR.fca186d25c": [], "test.crosschain_models.not_null_defi__ez_lending_DEPOSITOR.ef9664972b": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_DEPOSITOR__0_xX_0_9a_fA_F_.d0d7dec87c": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_PLATFORM__STRING__VARCHAR.56dd714926": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_be_in_type_list_defi__ez_lending_EVENT_INDEX__NUMBER__FLOAT.5e19309b95": [], "test.crosschain_models.not_null_defi__ez_lending__LOG_ID.163af3543a": [], "test.crosschain_models.not_null_defi__ez_lending_ORIGIN_FROM_ADDRESS.55ee0e45b6": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.9324d4632c": [], "test.crosschain_models.dbt_expectations_expect_column_values_to_match_regex_defi__ez_lending_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.1ab6b92673": [], "test.crosschain_models.dbt_utils_unique_combination_of_columns_defi__ez_lending__LOG_ID.f59a21ba8d": [], "source.crosschain_models.legacy_db.prices_v2": [], "source.crosschain_models.legacy_db.market_asset_metadata": [], "source.crosschain_models.legacy_db.hours": ["model.crosschain_models.silver__ntr_summary"], "source.crosschain_models.legacy_silver_crosschain.ntr": ["model.crosschain_models.silver__ntr_summary"], "source.crosschain_models.legacy_silver_crosschain.address_labels": [], "source.crosschain_models.legacy_dev_db.prices_v2": ["model.crosschain_models.streamline__legacy_prices_gaps", "model.crosschain_models.streamline__legacy_prices_gaps"], "source.crosschain_models.legacy_dev_db.market_asset_metadata": [], "source.crosschain_models.legacy_dev_db.hours": ["model.crosschain_models.streamline__all_unknown_coin_market_cap_asset_ohlc_hourly", "model.crosschain_models.streamline__legacy_prices_gaps"], "source.crosschain_models.crosschain_dev_silver.dates_table": [], "source.crosschain_models.ethereum_silver.logs": ["model.crosschain_models.silver__tags_gnosis_safe_address", "model.crosschain_models.silver__tags_token_vesting_ETH", "model.crosschain_models.silver_crosschain__labels_contracts"], "source.crosschain_models.ethereum_silver.traces": ["model.crosschain_models.silver__tags_contract_address_eth", "model.crosschain_models.silver_crosschain__labels_contracts"], "source.crosschain_models.ethereum_silver.transactions": ["model.crosschain_models.silver__tags_cex_user_ETH", "model.crosschain_models.silver__tags_cex_user_ETH"], "source.crosschain_models.ethereum_silver.labels": ["model.crosschain_models.silver__tags_cex_user_ETH", "model.crosschain_models.silver__tags_cex_user_ETH"], "source.crosschain_models.crosschain_silver.godmode_nft_minters": ["model.crosschain_models.core__address_tags"], "source.crosschain_models.crosschain_silver.optimism_delegates": ["model.crosschain_models.core__address_tags"], "source.crosschain_models.ethereum_silver_nft.cryptopunk_sales": ["model.crosschain_models.silver__tags_nft_larva_labs_user", "model.crosschain_models.silver__tags_nft_larva_labs_user"], "source.crosschain_models.ethereum_silver_nft.looksrare_sales": ["model.crosschain_models.silver__tags_nft_looksrare_user", "model.crosschain_models.silver__tags_nft_looksrare_user"], "source.crosschain_models.ethereum_silver_nft.nftx_sales": ["model.crosschain_models.silver__tags_nft_nftx_user", "model.crosschain_models.silver__tags_nft_nftx_user"], "source.crosschain_models.ethereum_silver_nft.opensea_sales": ["model.crosschain_models.silver__tags_nft_opensea_user", "model.crosschain_models.silver__tags_nft_opensea_user"], "source.crosschain_models.ethereum_silver_nft.rarible_sales": ["model.crosschain_models.silver__tags_nft_rarible_user", "model.crosschain_models.silver__tags_nft_rarible_user"], "source.crosschain_models.ethereum_silver_nft.seaport_sales": ["model.crosschain_models.silver__tags_nft_opensea_user", "model.crosschain_models.silver__tags_nft_opensea_user"], "source.crosschain_models.ethereum_silver_nft.x2y2_sales": ["model.crosschain_models.silver__tags_nft_x2y2_user", "model.crosschain_models.silver__tags_nft_x2y2_user"], "source.crosschain_models.arbitrum_silver.logs": [], "source.crosschain_models.arbitrum_silver.traces": [], "source.crosschain_models.arbitrum_silver.transactions": ["model.crosschain_models.silver__tags_active_arbitrum_last_7"], "source.crosschain_models.avalanche_silver.logs": ["model.crosschain_models.silver_crosschain__labels_contracts_avalanche"], "source.crosschain_models.avalanche_silver.traces": ["model.crosschain_models.silver__tags_contract_address_avalanche", "model.crosschain_models.silver_crosschain__labels_contracts_avalanche"], "source.crosschain_models.avalanche_silver.transactions": ["model.crosschain_models.silver__tags_active_avalanche_last_7"], "source.crosschain_models.polygon_silver.logs": ["model.crosschain_models.silver_crosschain__labels_contracts_polygon"], "source.crosschain_models.polygon_silver.traces": ["model.crosschain_models.silver__tags_contract_address_polygon", "model.crosschain_models.silver_crosschain__labels_contracts_polygon"], "source.crosschain_models.polygon_silver.transactions": ["model.crosschain_models.silver__tags_active_polygon_last_7"], "source.crosschain_models.optimism_silver.logs": ["model.crosschain_models.silver_crosschain__labels_contracts_optimism"], "source.crosschain_models.optimism_silver.traces": ["model.crosschain_models.silver__tags_contract_address_optimism", "model.crosschain_models.silver_crosschain__labels_contracts_optimism"], "source.crosschain_models.optimism_silver.transactions": ["model.crosschain_models.silver__tags_active_optimism_last_7"], "source.crosschain_models.bsc_silver.logs": ["model.crosschain_models.silver_crosschain__labels_contracts_bsc"], "source.crosschain_models.bsc_silver.traces": ["model.crosschain_models.silver__tags_contract_address_bsc", "model.crosschain_models.silver_crosschain__labels_contracts_bsc"], "source.crosschain_models.bsc_silver.transactions": ["model.crosschain_models.silver__tags_active_bsc_last_7"], "source.crosschain_models.bronze_streamline.asset_metadata_coin_market_cap_api": ["model.crosschain_models.bronze__asset_metadata_coin_market_cap", "model.crosschain_models.streamline__all_unknown_coin_market_cap_asset_ohlc_hourly", "model.crosschain_models.streamline__all_unknown_coin_market_cap_asset_ohlc_hourly", "model.crosschain_models.streamline__coin_market_cap_historical_asset_ohlc_hourly"], "source.crosschain_models.bronze_streamline.asset_metadata_coin_gecko_api": ["model.crosschain_models.bronze__asset_metadata_coin_gecko", "model.crosschain_models.streamline__all_unknown_coin_gecko_asset_ohlc", "model.crosschain_models.streamline__coin_gecko_historical_asset_market_data_hourly"], "source.crosschain_models.bronze_streamline.asset_ohlc_coin_market_cap_api": ["model.crosschain_models.bronze__hourly_prices_coin_market_cap", "model.crosschain_models.streamline__all_unknown_coin_market_cap_asset_ohlc_hourly", "model.crosschain_models.streamline__coin_market_cap_historical_asset_ohlc_hourly"], "source.crosschain_models.bronze_streamline.asset_historical_hourly_market_data_coin_gecko_api": ["model.crosschain_models.streamline__coin_gecko_historical_asset_market_data_hourly"], "source.crosschain_models.bronze_streamline.asset_ohlc_coin_gecko_api": ["model.crosschain_models.bronze__hourly_prices_coin_gecko", "model.crosschain_models.streamline__all_unknown_coin_gecko_asset_ohlc"], "source.crosschain_models.bronze.prod_address_label_sink_291098491": ["model.crosschain_models.silver_crosschain__address_labels", "model.crosschain_models.silver_crosschain__address_labels"], "source.crosschain_models.thorchain.swaps": ["model.crosschain_models.silver__tags_thor_dex_user", "model.crosschain_models.silver__tags_thor_dex_user"], "source.crosschain_models.thorchain.liquidity_actions": ["model.crosschain_models.silver__tags_thor_liquidity_provider", "model.crosschain_models.silver__tags_thor_liquidity_provider"], "source.crosschain_models.thorchain.transfers": ["model.crosschain_models.silver_crosschain__snowflake_Thorchain_satellite", "model.crosschain_models.silver_crosschain__snowflake_Thorchain_satellite"], "source.crosschain_models.algorand_core.ez_transfer": ["model.crosschain_models.silver_crosschain__snowflake_Algorand_satellite", "model.crosschain_models.silver_crosschain__snowflake_Algorand_satellite"], "source.crosschain_models.bsc_core.fact_token_transfers": ["model.crosschain_models.silver_crosschain__snowflake_BSC_satellites", "model.crosschain_models.silver_crosschain__snowflake_BSC_satellites"], "source.crosschain_models.bsc_core.fact_traces": ["model.crosschain_models.silver_crosschain__snowflake_BSC_satellites", "model.crosschain_models.silver_crosschain__snowflake_BSC_satellites"], "source.crosschain_models.thorchain_core.fact_transfers": [], "source.crosschain_models.polygon_core.fact_token_transfers": ["model.crosschain_models.silver_crosschain__snowflake_Polygon_satellites", "model.crosschain_models.silver_crosschain__snowflake_Polygon_satellites"], "source.crosschain_models.polygon_core.fact_traces": ["model.crosschain_models.silver_crosschain__snowflake_Polygon_satellites", "model.crosschain_models.silver_crosschain__snowflake_Polygon_satellites"], "source.crosschain_models.osmosis_core.fact_transfers": ["model.crosschain_models.silver_crosschain__snowflake_Osmosis_satellite", "model.crosschain_models.silver_crosschain__snowflake_Osmosis_satellite"], "source.crosschain_models.optimism_core.fact_token_transfers": ["model.crosschain_models.silver_crosschain__snowflake_Optimism_satellites", "model.crosschain_models.silver_crosschain__snowflake_Optimism_satellites"], "source.crosschain_models.optimism_core.fact_traces": ["model.crosschain_models.silver_crosschain__snowflake_Optimism_satellites", "model.crosschain_models.silver_crosschain__snowflake_Optimism_satellites"], "source.crosschain_models.crosschain_core.address_labels": ["model.crosschain_models.silver_crosschain__labels_contracts", "model.crosschain_models.silver_crosschain__labels_contracts", "model.crosschain_models.silver_crosschain__labels_contracts_avalanche", "model.crosschain_models.silver_crosschain__labels_contracts_avalanche", "model.crosschain_models.silver_crosschain__labels_contracts_bsc", "model.crosschain_models.silver_crosschain__labels_contracts_bsc", "model.crosschain_models.silver_crosschain__labels_contracts_optimism", "model.crosschain_models.silver_crosschain__labels_contracts_optimism", "model.crosschain_models.silver_crosschain__labels_contracts_polygon", "model.crosschain_models.silver_crosschain__labels_contracts_polygon"], "source.crosschain_models.solana_core.fact_transfers": ["model.crosschain_models.silver_crosschain__snowflake_SOL_satellites", "model.crosschain_models.silver_crosschain__snowflake_SOL_satellites"], "source.crosschain_models.avalanche_core.fact_token_transfers": ["model.crosschain_models.silver_crosschain__snowflake_Avalanche_satellites", "model.crosschain_models.silver_crosschain__snowflake_Avalanche_satellites"], "source.crosschain_models.avalanche_core.fact_traces": ["model.crosschain_models.silver_crosschain__snowflake_Avalanche_satellites", "model.crosschain_models.silver_crosschain__snowflake_Avalanche_satellites"], "source.crosschain_models.flow_core.ez_token_transfers": ["model.crosschain_models.silver_crosschain__snowflake_Flow_satellites", "model.crosschain_models.silver_crosschain__snowflake_Flow_satellites"], "source.crosschain_models.crosschain_dev_silver_crosschain.address_labels": [], "source.crosschain_models.near_core.fact_transfers": ["model.crosschain_models.silver_crosschain__snowflake_Near_satellite", "model.crosschain_models.silver_crosschain__snowflake_Near_satellite"], "source.crosschain_models.arbitrum_core.fact_token_transfers": ["model.crosschain_models.silver_crosschain__snowflake_Arbitrum_satellites", "model.crosschain_models.silver_crosschain__snowflake_Arbitrum_satellites"], "source.crosschain_models.arbitrum_core.fact_traces": ["model.crosschain_models.silver_crosschain__snowflake_Arbitrum_satellites", "model.crosschain_models.silver_crosschain__snowflake_Arbitrum_satellites"], "source.crosschain_models.ethereum_core.fact_transactions": ["model.crosschain_models.silver__tags_active_eth_last_7"], "source.crosschain_models.ethereum_core.fact_token_transfers": ["model.crosschain_models.silver_crosschain__snowflake_ETH_satellites", "model.crosschain_models.silver_crosschain__snowflake_ETH_satellites"], "source.crosschain_models.ethereum_core.fact_traces": ["model.crosschain_models.silver_crosschain__snowflake_ETH_satellites", "model.crosschain_models.silver_crosschain__snowflake_ETH_satellites"], "source.crosschain_models.ethereum_core.ez_nft_sales": [], "source.crosschain_models.ethereum_core.ez_current_balances": ["model.crosschain_models.silver__tags_wallet_ETH_value", "model.crosschain_models.silver__tags_wallet_TOKEN_value", "model.crosschain_models.silver__tags_wallet_value"], "source.crosschain_models.ethereum_core.ez_dex_swaps": ["model.crosschain_models.defi__ez_swaps"], "source.crosschain_models.BSC.EZ_SWAPS": ["model.crosschain_models.defi__ez_swaps"], "source.crosschain_models.BSC.EZ_LENDING": ["model.crosschain_models.defi__ez_lending"], "source.crosschain_models.BSC.EZ_BORROWING": ["model.crosschain_models.defi__ez_borrowing"], "source.crosschain_models.ethereum_db_sushi.dim_distributor_reward_schedule": [], "source.crosschain_models.ethereum_db_sushi.ez_lending": ["model.crosschain_models.defi__ez_lending"], "source.crosschain_models.ethereum_db_sushi.ez_borrowing": ["model.crosschain_models.defi__ez_borrowing"], "source.crosschain_models.Gnosis.EZ_SWAPS": ["model.crosschain_models.defi__ez_swaps"], "source.crosschain_models.Gnosis.EZ_LENDING": ["model.crosschain_models.defi__ez_lending"], "source.crosschain_models.Gnosis.EZ_BORROWING": ["model.crosschain_models.defi__ez_borrowing"], "source.crosschain_models.Optimism.EZ_SWAPS": ["model.crosschain_models.defi__ez_swaps"], "source.crosschain_models.Avalanche.EZ_SWAPS": ["model.crosschain_models.defi__ez_swaps"], "source.crosschain_models.Avalanche.EZ_LENDING": ["model.crosschain_models.defi__ez_lending"], "source.crosschain_models.Avalanche.EZ_BORROWING": ["model.crosschain_models.defi__ez_borrowing"], "source.crosschain_models.Harmony_db.EZ_SUSHI_SWAPS": ["model.crosschain_models.defi__ez_swaps"], "source.crosschain_models.polygon.EZ_SWAPS": ["model.crosschain_models.defi__ez_swaps"], "source.crosschain_models.polygon.EZ_LENDING": ["model.crosschain_models.defi__ez_lending"], "source.crosschain_models.polygon.EZ_BORROWING": ["model.crosschain_models.defi__ez_borrowing"], "source.crosschain_models.Arbitrum.EZ_SWAPS": ["model.crosschain_models.defi__ez_swaps"], "source.crosschain_models.Arbitrum.EZ_LENDING": ["model.crosschain_models.defi__ez_lending"], "source.crosschain_models.Arbitrum.EZ_BORROWING": ["model.crosschain_models.defi__ez_borrowing"]}}